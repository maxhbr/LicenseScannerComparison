2018/06/19 13:38:41 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/configure
2018/06/19 13:38:43 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/configure": 2.000209347s
2018/06/19 13:38:43 Couldn't classify license(s)
2018/06/19 13:38:44 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/ANNOUNCE
2018/06/19 13:38:44 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/ANNOUNCE": 10.319301ms
2018/06/19 13:38:44 Couldn't classify license(s)
2018/06/19 13:38:45 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/vstudio/libpng/libpng.vcxproj
2018/06/19 13:38:45 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/vstudio/libpng/libpng.vcxproj": 42.714419ms
2018/06/19 13:38:45 Couldn't classify license(s)
2018/06/19 13:38:46 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/vstudio/zlib/zlib.vcxproj
2018/06/19 13:38:46 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/vstudio/zlib/zlib.vcxproj": 33.609589ms
2018/06/19 13:38:46 Couldn't classify license(s)
2018/06/19 13:38:46 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/vstudio/vstudio.sln
2018/06/19 13:38:46 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/vstudio/vstudio.sln": 30.042203ms
2018/06/19 13:38:46 Couldn't classify license(s)
2018/06/19 13:38:47 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/vstudio/README.txt
2018/06/19 13:38:47 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/vstudio/README.txt": 16.605987ms
2018/06/19 13:38:47 Couldn't classify license(s)
2018/06/19 13:38:48 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/vstudio/pngstest/pngstest.vcxproj
2018/06/19 13:38:48 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/vstudio/pngstest/pngstest.vcxproj": 55.225429ms
2018/06/19 13:38:48 Couldn't classify license(s)
2018/06/19 13:38:49 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/vstudio/pngvalid/pngvalid.vcxproj
2018/06/19 13:38:49 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/vstudio/pngvalid/pngvalid.vcxproj": 45.218056ms
2018/06/19 13:38:49 Couldn't classify license(s)
2018/06/19 13:38:50 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/vstudio/pngtest/pngtest.vcxproj
2018/06/19 13:38:50 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/vstudio/pngtest/pngtest.vcxproj": 40.664248ms
2018/06/19 13:38:50 Couldn't classify license(s)
2018/06/19 13:38:51 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/vstudio/pngunknown/pngunknown.vcxproj
2018/06/19 13:38:51 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/vstudio/pngunknown/pngunknown.vcxproj": 43.065146ms
2018/06/19 13:38:51 Couldn't classify license(s)
2018/06/19 13:38:52 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/vstudio/pnglibconf/pnglibconf.vcxproj
2018/06/19 13:38:52 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/vstudio/pnglibconf/pnglibconf.vcxproj": 14.443385ms
2018/06/19 13:38:52 Couldn't classify license(s)
2018/06/19 13:38:53 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/vstudio/zlib.props
2018/06/19 13:38:53 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/vstudio/zlib.props": 11.777476ms
2018/06/19 13:38:53 Couldn't classify license(s)
2018/06/19 13:38:54 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/visualc71/PRJ0041.mak
2018/06/19 13:38:54 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/visualc71/PRJ0041.mak": 1.1364ms
2018/06/19 13:38:54 Couldn't classify license(s)
2018/06/19 13:38:55 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/visualc71/pngtest.vcproj
2018/06/19 13:38:55 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/visualc71/pngtest.vcproj": 26.646297ms
2018/06/19 13:38:55 Couldn't classify license(s)
2018/06/19 13:38:55 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/visualc71/README.txt
2018/06/19 13:38:55 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/visualc71/README.txt": 12.449215ms
2018/06/19 13:38:55 Couldn't classify license(s)
2018/06/19 13:38:56 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/visualc71/libpng.vcproj
2018/06/19 13:38:56 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/visualc71/libpng.vcproj": 38.753107ms
2018/06/19 13:38:56 Couldn't classify license(s)
2018/06/19 13:38:57 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/visualc71/libpng.sln
2018/06/19 13:38:57 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/visualc71/libpng.sln": 17.485607ms
2018/06/19 13:38:57 Couldn't classify license(s)
2018/06/19 13:38:58 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/visualc71/README_zlib.txt
2018/06/19 13:38:58 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/visualc71/README_zlib.txt": 11.408897ms
2018/06/19 13:38:58 Couldn't classify license(s)
2018/06/19 13:38:59 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/visualc71/zlib.vcproj
2018/06/19 13:38:59 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/visualc71/zlib.vcproj": 35.393841ms
2018/06/19 13:38:59 Couldn't classify license(s)
2018/06/19 13:39:00 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/owatcom/libpng.wpj
2018/06/19 13:39:00 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/owatcom/libpng.wpj": 2.429031ms
2018/06/19 13:39:00 Couldn't classify license(s)
2018/06/19 13:39:01 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/owatcom/libpng.tgt
2018/06/19 13:39:01 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/owatcom/libpng.tgt": 4.138813ms
2018/06/19 13:39:01 Couldn't classify license(s)
2018/06/19 13:39:02 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/owatcom/pngconfig.mak
2018/06/19 13:39:02 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/owatcom/pngconfig.mak": 23.300213ms
2018/06/19 13:39:02 Couldn't classify license(s)
2018/06/19 13:39:02 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/owatcom/pngtest.tgt
2018/06/19 13:39:02 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/owatcom/pngtest.tgt": 2.375222ms
2018/06/19 13:39:02 Couldn't classify license(s)
2018/06/19 13:39:03 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/owatcom/pngvalid.tgt
2018/06/19 13:39:03 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/owatcom/pngvalid.tgt": 2.657908ms
2018/06/19 13:39:03 Couldn't classify license(s)
2018/06/19 13:39:04 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/projects/owatcom/pngstest.tgt
2018/06/19 13:39:04 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/projects/owatcom/pngstest.tgt": 4.614967ms
2018/06/19 13:39:04 Couldn't classify license(s)
2018/06/19 13:39:05 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngrutil.c
2018/06/19 13:39:05 detected language: 4
2018/06/19 13:39:05 " pngrutil.c - utilities to read a PNG file\n *\n * Last changed in libpng 1.6.33 [September 28, 2017]\n * Copyright (c) 1998-2002,2004,2006-2017 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * This file contains routines that are only called from within\n * libpng itself during the course of reading an image.\n "
2018/06/19 13:39:05 " The following is a variation on the above for use with the fixed\n * point values used for gAMA and cHRM.  Instead of png_error it\n * issues a warning and returns (-1) - an invalid value because both\n * gAMA and cHRM use *unsigned* integers for fixed point values.\n "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " known to be in range "
2018/06/19 13:39:05 " The caller can turn off the warning by passing NULL. "
2018/06/19 13:39:05 " NOTE: the read macros will obscure these definitions, so that if\n * PNG_USE_READ_MACROS is set the library will not use them internally,\n * but the APIs will still be available externally.\n *\n * The parentheses around \"PNGAPI function_name\" in the following three\n * functions are necessary because they allow the macros to co-exist with\n * these (unused but exported) functions.\n "
2018/06/19 13:39:05 " Grab an unsigned 32-bit integer from a buffer in big-endian format. "
2018/06/19 13:39:05 " Grab a signed 32-bit integer from a buffer in big-endian format.  The\n * data is stored in the PNG file in two's complement format and there\n * is no guarantee that a 'png_int_32' is exactly 32 bits, therefore\n * the following code does a two's complement to native conversion.\n "
2018/06/19 13:39:05 " non-negative "
2018/06/19 13:39:05 " 2's complement: -x = ~x+1 \n no overflow "
2018/06/19 13:39:05 " The following has to be safe; this function only gets called on PNG data\n    * and if we get here that data is invalid.  0 is the most safe value and\n    * if not then an attacker would surely just generate a PNG with 0 instead.\n    "
2018/06/19 13:39:05 " Grab an unsigned 16-bit integer from a buffer in big-endian format. "
2018/06/19 13:39:05 " ANSI-C requires an int value to accomodate at least 16 bits so this\n    * works and allows the compiler not to worry about possible narrowing\n    * on 32-bit systems.  (Pre-ANSI systems did not make integers smaller\n    * than 16 bits either.)\n    "
2018/06/19 13:39:05 " READ_INT_FUNCTIONS "
2018/06/19 13:39:05 " Read and check the PNG file signature \n PRIVATE "
2018/06/19 13:39:05 " Exit if the user application does not expect a signature. "
2018/06/19 13:39:05 " The signature must be serialized in a single I/O call. "
2018/06/19 13:39:05 " Read the chunk header (length + type name).\n * Put the type name into png_ptr->chunk_name, and return the length.\n "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " Read the length and the chunk name.\n    * This must be performed in a single I/O call.\n    "
2018/06/19 13:39:05 " Put the chunk name into png_ptr->chunk_name. "
2018/06/19 13:39:05 " Reset the crc and run it over the chunk name. "
2018/06/19 13:39:05 " Check to see if chunk name is valid. "
2018/06/19 13:39:05 " Check for too-large chunk length "
2018/06/19 13:39:05 " Read data, and (optionally) run it through the CRC. \n PRIVATE "
2018/06/19 13:39:05 " Optionally skip data and then check the CRC.  Depending on whether we\n * are reading an ancillary or critical chunk, and how the program has set\n * things up, we may calculate the CRC on the data and print a message.\n * Returns '1' if there was a CRC error, '0' otherwise.\n "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " The size of the local buffer for inflate is a good guess as to a\n    * reasonable size to use for buffering reads from the application.\n    "
2018/06/19 13:39:05 " Compare the CRC stored in the PNG file with that calculated by libpng from\n * the data it has read thus far.\n "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " critical "
2018/06/19 13:39:05 " The chunk CRC must be serialized in a single I/O call. "
2018/06/19 13:39:05 " Manage the read buffer; this simply reallocates the buffer if it is not small\n * enough (or if it is not allocated).  The routine returns a pointer to the\n * buffer; if an error occurs and 'warn' is set the routine returns NULL, else\n * it will call png_error (via png_malloc) on failure.  (warn == 2 means\n * 'silent').\n "
2018/06/19 13:39:05 " just in case "
2018/06/19 13:39:05 " else silent "
2018/06/19 13:39:05 " READ_iCCP|iTXt|pCAL|sCAL|sPLT|tEXt|zTXt|SEQUENTIAL_READ "
2018/06/19 13:39:05 " png_inflate_claim: claim the zstream for some nefarious purpose that involves\n * decompression.  Returns Z_OK on success, else a zlib error code.  It checks\n * the owner but, in final release builds, just issues a warning if some other\n * chunk apparently owns the stream.  Prior to release it does a png_error.\n "
2018/06/19 13:39:05 " So the message that results is \"<chunk> using zstream\"; this is an\n       * internal error, but is very useful for debugging.  i18n requirements\n       * are minimal.\n       "
2018/06/19 13:39:05 " Implementation note: unlike 'png_deflate_claim' this internal function\n    * does not take the size of the data as an argument.  Some efficiency could\n    * be gained by using this when it is known *if* the zlib stream itself does\n    * not record the number; however, this is an illusion: the original writer\n    * of the PNG may have selected a lower window size, and we really must\n    * follow that because, for systems with with limited capabilities, we\n    * would otherwise reject the application's attempts to use a smaller window\n    * size (zlib doesn't have an interface to say \"this or lower\"!).\n    *\n    * inflateReset2 was added to zlib 1.2.4; before this the window could not be\n    * reset, therefore it is necessary to always allocate the maximum window\n    * size with earlier zlibs just in case later compressed chunks need it.\n    "
2018/06/19 13:39:05 " zlib return code "
2018/06/19 13:39:05 " fixed window size "
2018/06/19 13:39:05 " ZLIB_VERNUM >= 0x1240 "
2018/06/19 13:39:05 " Set this for safety, just in case the previous owner left pointers to\n       * memory allocations.\n       "
2018/06/19 13:39:05 " Turn off validation of the ADLER32 checksum in IDAT chunks "
2018/06/19 13:39:05 " Handle the start of the inflate stream if we called inflateInit2(strm,0);\n * in this case some zlib versions skip validation of the CINFO field and, in\n * certain circumstances, libpng may end up displaying an invalid image, in\n * contrast to implementations that call zlib in the normal way (e.g. libpng\n * 1.5).\n "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " Zlib >= 1.2.4 "
2018/06/19 13:39:05 " png_inflate now returns zlib error codes including Z_OK and Z_STREAM_END to\n * allow the caller to do multiple calls if required.  If the 'finish' flag is\n * set Z_FINISH will be passed to the final inflate() call and Z_STREAM_END must\n * be returned or there has been a problem, otherwise Z_SYNC_FLUSH is used and\n * Z_OK or Z_STREAM_END will be returned on success.\n *\n * The input and output sizes are updated to the actual amounts of data consumed\n * or written, not the amount available (as in a z_stream).  The data pointers\n * are not changed, so the next input is (data+input_size) and the next\n * available output is (output+output_size).\n "
2018/06/19 13:39:05 " INPUT: \n OUTPUT: "
2018/06/19 13:39:05 " Else not claimed "
2018/06/19 13:39:05 " zlib can't necessarily handle more than 65535 bytes at once (i.e. it\n       * can't even necessarily handle 65536 bytes) because the type uInt is\n       * \"16 bits or more\".  Consequently it is necessary to chunk the input to\n       * zlib.  This code uses ZLIB_IO_MAX, from pngpriv.h, as the maximum (the\n       * maximum value that can be stored in a uInt.)  It is possible to set\n       * ZLIB_IO_MAX to a lower value in pngpriv.h and this may sometimes have\n       * a performance advantage, because it reduces the amount of data accessed\n       * at each step and that may give the OS more time to page it in.\n       "
2018/06/19 13:39:05 " avail_in and avail_out are set below from 'size' "
2018/06/19 13:39:05 " Read directly into the output if it is available (this is set to\n       * a local buffer below if output is NULL).\n       "
2018/06/19 13:39:05 " zlib INPUT BUFFER \n The setting of 'avail_in' used to be outside the loop; by setting it\n          * inside it is possible to chunk the input to zlib and simply rely on\n          * zlib to advance the 'next_in' pointer.  This allows arbitrary\n          * amounts of data to be passed through zlib at the unavoidable cost of\n          * requiring a window save (memcpy of up to 32768 output bytes)\n          * every ZLIB_IO_MAX input bytes.\n          "
2018/06/19 13:39:05 " not consumed last time "
2018/06/19 13:39:05 " safe: < than ZLIB_IO_MAX "
2018/06/19 13:39:05 " zlib OUTPUT BUFFER \n not written last time "
2018/06/19 13:39:05 " maximum zlib can process "
2018/06/19 13:39:05 " Reset the output buffer each time round if output is NULL and\n             * make available the full buffer, up to 'remaining_space'\n             "
2018/06/19 13:39:05 " safe: < ZLIB_IO_MAX "
2018/06/19 13:39:05 " zlib inflate call \n In fact 'avail_out' may be 0 at this point, that happens at the end\n          * of the read when the final LZ end code was not passed at the end of\n          * the previous chunk of input data.  Tell zlib if we have reached the\n          * end of the output buffer.\n          "
2018/06/19 13:39:05 " For safety kill the local buffer pointer now "
2018/06/19 13:39:05 " Claw back the 'size' and 'remaining_space' byte counts. "
2018/06/19 13:39:05 " Update the input and output sizes; the updated values are the amount\n       * consumed or written, effectively the inverse of what zlib uses.\n       "
2018/06/19 13:39:05 " Ensure png_ptr->zstream.msg is set (even in the success case!) "
2018/06/19 13:39:05 " This is a bad internal error.  The recovery assigns to the zstream msg\n       * pointer, which is not owned by the caller, but this is safe; it's only\n       * used on errors!\n       "
2018/06/19 13:39:05 "\n * Decompress trailing data in a chunk.  The assumption is that read_buffer\n * points at an allocated area holding the contents of a chunk with a\n * trailing compressed part.  What we get back is an allocated area\n * holding the original prefix part and an uncompressed version of the\n * trailing part (the malloc area passed in is freed).\n "
2018/06/19 13:39:05 " must be initialized to the maximum! \nadd a '\\0' to the end of the uncompressed data"
2018/06/19 13:39:05 " TODO: implement different limits for different types of chunk.\n    *\n    * The caller supplies *newlength set to the maximum length of the\n    * uncompressed data, but this routine allocates space for the prefix and\n    * maybe a '\\0' terminator too.  We have to assume that 'prefix_size' is\n    * limited only by the maximum chunk size.\n    "
2018/06/19 13:39:05 " Now try to claim the stream. "
2018/06/19 13:39:05 "finish\n input: \n output: "
2018/06/19 13:39:05 " Use 'inflateReset' here, not 'inflateReset2' because this\n             * preserves the previously decided window size (otherwise it would\n             * be necessary to store the previous window size.)  In practice\n             * this doesn't matter anyway, because png_inflate will call inflate\n             * with Z_FINISH in almost all cases, so the window will not be\n             * maintained.\n             "
2018/06/19 13:39:05 " Because of the limit checks above we know that the new,\n                * expanded, size will fit in a size_t (let alone an\n                * png_alloc_size_t).  Use png_malloc_base here to avoid an\n                * extra OOM message.\n                "
2018/06/19 13:39:05 "finish"
2018/06/19 13:39:05 " freed below "
2018/06/19 13:39:05 " The size changed on the second read, there can be no\n                         * guarantee that anything is correct at this point.\n                         * The 'msg' pointer has been set to \"unexpected end of\n                         * LZ stream\", which is fine, but return an error code\n                         * that the caller won't accept.\n                         "
2018/06/19 13:39:05 " for safety "
2018/06/19 13:39:05 " Free the text pointer (this is the old read_buffer on\n                   * success)\n                   "
2018/06/19 13:39:05 " This really is very benign, but it's still an error because\n                   * the extra space may otherwise be used as a Trojan Horse.\n                   "
2018/06/19 13:39:05 " Out of memory allocating the buffer "
2018/06/19 13:39:05 " inflateReset failed, store the error message "
2018/06/19 13:39:05 " Release the claimed stream "
2018/06/19 13:39:05 " the claim failed \n impossible! "
2018/06/19 13:39:05 " Application/configuration limits exceeded "
2018/06/19 13:39:05 " READ_zTXt || READ_iTXt \n READ_COMPRESSED_TEXT "
2018/06/19 13:39:05 " Perform a partial read and decompress, producing 'avail_out' bytes and\n * reading from the current chunk as required.\n "
2018/06/19 13:39:05 " next_in and avail_in must have been initialized by the caller. "
2018/06/19 13:39:05 " set in the loop "
2018/06/19 13:39:05 " Use Z_SYNC_FLUSH when there is no more chunk data to ensure that all\n          * the available output is produced; this allows reading of truncated\n          * streams.\n          "
2018/06/19 13:39:05 " Should not be required, but is safe "
2018/06/19 13:39:05 " Ensure the error message pointer is always set: "
2018/06/19 13:39:05 " READ_iCCP "
2018/06/19 13:39:05 " Read and check the IDHR chunk "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " Check the length "
2018/06/19 13:39:05 " Set internal variables "
2018/06/19 13:39:05 " Find number of channels "
2018/06/19 13:39:05 " invalid, png_set_IHDR calls png_error "
2018/06/19 13:39:05 " Set up other useful info "
2018/06/19 13:39:05 " Read and check the palette \n PRIVATE "
2018/06/19 13:39:05 " Moved to before the 'after IDAT' check below because otherwise duplicate\n    * PLTE chunks are potentially ignored (the spec says there shall not be more\n    * than one PLTE, the error is not treated as benign, so this check trumps\n    * the requirement that PLTE appears before IDAT.)\n    "
2018/06/19 13:39:05 " This is benign because the non-benign error happened before, when an\n       * IDAT was encountered in a color-mapped image with no PLTE.\n       "
2018/06/19 13:39:05 " The cast is safe because 'length' is less than 3*PNG_MAX_PALETTE_LENGTH "
2018/06/19 13:39:05 " If the palette has 256 or fewer entries but is too large for the bit\n    * depth, we don't issue an error, to preserve the behavior of previous\n    * libpng versions. We silently truncate the unused extra palette entries\n    * here.\n    "
2018/06/19 13:39:05 " Don't depend upon png_color being any order "
2018/06/19 13:39:05 " If we actually need the PLTE chunk (ie for a paletted image), we do\n    * whatever the normal CRC configuration tells us.  However, if we\n    * have an RGB image, the PLTE can be considered ancillary, so\n    * we will act as though it is.\n    "
2018/06/19 13:39:05 " Only if we have a CRC error "
2018/06/19 13:39:05 " If we don't want to use the data from an ancillary chunk,\n       * we have two options: an error abort, or a warning and we\n       * ignore the data in this chunk (which should be OK, since\n       * it's considered ancillary for a RGB or RGBA image).\n       *\n       * IMPLEMENTATION NOTE: this is only here because png_crc_finish uses the\n       * chunk type to determine whether to check the ancillary or the critical\n       * flags.\n       "
2018/06/19 13:39:05 " Otherwise, we (optionally) emit a warning and use the chunk. "
2018/06/19 13:39:05 " TODO: png_set_PLTE has the side effect of setting png_ptr->palette to its\n    * own copy of the palette.  This has the side effect that when png_start_row\n    * is called (this happens after any call to png_read_update_info) the\n    * info_ptr palette gets changed.  This is extremely unexpected and\n    * confusing.\n    *\n    * Fix this by not sharing the palette in this way.\n    "
2018/06/19 13:39:05 " The three chunks, bKGD, hIST and tRNS *must* appear after PLTE and before\n    * IDAT.  Prior to 1.6.0 this was not checked; instead the code merely\n    * checked the apparent validity of a tRNS chunk inserted before PLTE on a\n    * palette PNG.  1.6.0 attempts to rigorously follow the standard and\n    * therefore does a benign error if the erroneous condition is detected *and*\n    * cancels the tRNS if the benign error returns.  The alternative is to\n    * amend the standard since it would be rather hypocritical of the standards\n    * maintainers to ignore it.\n    "
2018/06/19 13:39:05 " Cancel this because otherwise it would be used if the transforms\n       * require it.  Don't cancel the 'valid' flag because this would prevent\n       * detection of duplicate chunks.\n       "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " If a colorspace error has already been output skip this chunk "
2018/06/19 13:39:05 "prefer cHRM values"
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " If a colorspace error has already been output skip this chunk "
2018/06/19 13:39:05 " Only one sRGB or iCCP chunk is allowed, use the HAVE_INTENT flag to detect\n    * this.\n    "
2018/06/19 13:39:05 " READ_sRGB "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " Note: this does not properly handle profiles that are > 64K under DOS "
2018/06/19 13:39:05 " error message output, or no error \n crc checked "
2018/06/19 13:39:05 " Consistent with all the above colorspace handling an obviously *invalid*\n    * chunk is just ignored, so does not invalidate the color space.  An\n    * alternative is to set the 'invalid' flags at the start of this routine\n    * and only clear them in they were not set before and all the tests pass.\n    "
2018/06/19 13:39:05 " The keyword must be at least one character and there is a\n    * terminator (0) byte and the compression method byte, and the\n    * 'zlib' datastream is at least 11 bytes.\n    "
2018/06/19 13:39:05 " If a colorspace error has already been output skip this chunk "
2018/06/19 13:39:05 " Only one sRGB or iCCP chunk is allowed, use the HAVE_INTENT flag to detect\n    * this.\n    "
2018/06/19 13:39:05 " Find the keyword; the keyword plus separator and compression method\n       * bytes can be at most 81 characters long.\n       "
2018/06/19 13:39:05 " maximum "
2018/06/19 13:39:05 " The minimum 'zlib' stream is assumed to be just the 2 byte header,\n       * 5 bytes minimum 'deflate' stream, and the 4 byte checksum.\n       "
2018/06/19 13:39:05 " TODO: make the keyword checking common "
2018/06/19 13:39:05 " We only understand '0' compression - deflate - so if we get a\n          * different value we can't safely decode the chunk.\n          "
2018/06/19 13:39:05 "finish: don't, because the output is too small"
2018/06/19 13:39:05 " We have the ICC profile header; do the basic header checks.\n                   "
2018/06/19 13:39:05 " The length is apparently ok, so we can check the 132\n                      * byte header.\n                      "
2018/06/19 13:39:05 " Now read the tag table; a variable size buffer is\n                         * needed at this point, allocate one for the whole\n                         * profile.  The header check has already validated\n                         * that none of this stuff will overflow.\n                         "
2018/06/19 13:39:05 "silent"
2018/06/19 13:39:05 " Still expect a buffer error because we expect\n                            * there to be some tag data!\n                            "
2018/06/19 13:39:05 " The profile has been validated for basic\n                                  * security issues, so read the whole thing in.\n                                  "
2018/06/19 13:39:05 "finish"
2018/06/19 13:39:05 " But otherwise allow extra data: "
2018/06/19 13:39:05 " This can be handled completely, so\n                                        * keep going.\n                                        "
2018/06/19 13:39:05 " Check for a match against sRGB "
2018/06/19 13:39:05 " Steal the profile for info_ptr. "
2018/06/19 13:39:05 "steal"
2018/06/19 13:39:05 " else the profile remains in the read\n                                     * buffer which gets reused for subsequent\n                                     * chunks.\n                                     "
2018/06/19 13:39:05 " else png_icc_check_tag_table output an error "
2018/06/19 13:39:05 " profile truncated "
2018/06/19 13:39:05 " else png_icc_check_header output an error "
2018/06/19 13:39:05 " else png_icc_check_length output an error "
2018/06/19 13:39:05 " profile truncated "
2018/06/19 13:39:05 " Release the stream "
2018/06/19 13:39:05 " png_inflate_claim failed "
2018/06/19 13:39:05 " or missing "
2018/06/19 13:39:05 " Failure: the reason is in 'errmsg' "
2018/06/19 13:39:05 " else already output "
2018/06/19 13:39:05 " READ_iCCP "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " Note: this does not properly handle chunks that are > 64K under DOS "
2018/06/19 13:39:05 "silent"
2018/06/19 13:39:05 " WARNING: this may break if size_t is less than 32 bits; it is assumed\n    * that the PNG_MAX_MALLOC_64K test is enabled in this case, but this is a\n    * potential breakage point if the types in pngconf.h aren't exactly right.\n    "
2018/06/19 13:39:05 " Empty loop to find end of name "
2018/06/19 13:39:05 " A sample depth should follow the separator, and we should be on it  "
2018/06/19 13:39:05 " This must fit in a png_uint_32 because it is derived from the original\n    * chunk data length.\n    "
2018/06/19 13:39:05 " Integrity-check the data length "
2018/06/19 13:39:05 " Discard all chunk data except the name and stash that "
2018/06/19 13:39:05 " READ_sPLT "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " TODO: is this actually an error in the ISO spec? "
2018/06/19 13:39:05 " TODO: this is a horrible side effect in the palette case because the\n    * png_struct ends up with a pointer to the tRNS buffer owned by the\n    * png_info.  Fix this.\n    "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " We convert the index value into RGB components so that we can allow\n    * arbitrary RGB values for background when we have transparency, and\n    * so it is easy to determine the RGB values of the background color\n    * from the info_ptr struct.\n    "
2018/06/19 13:39:05 " GRAY "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " Read the pCAL chunk (described in the PNG Extensions document) \n PRIVATE "
2018/06/19 13:39:05 "silent"
2018/06/19 13:39:05 " Null terminate the last string "
2018/06/19 13:39:05 " Empty loop "
2018/06/19 13:39:05 " We need to have at least 12 bytes after the purpose string\n    * in order to get the parameter information.\n    "
2018/06/19 13:39:05 " Check that we have the right number of parameters for known\n    * equation types.\n    "
2018/06/19 13:39:05 " Empty loop to move past the units string. "
2018/06/19 13:39:05 " Get pointers to the start of each parameter string. "
2018/06/19 13:39:05 " Skip the null string terminator from previous parameter. "
2018/06/19 13:39:05 " Empty loop to move past each parameter string "
2018/06/19 13:39:05 " Make sure we haven't run out of data yet "
2018/06/19 13:39:05 " Read the sCAL chunk \n PRIVATE "
2018/06/19 13:39:05 " Need unit type, width, \\0, height: minimum 4 bytes "
2018/06/19 13:39:05 "silent"
2018/06/19 13:39:05 " Null terminate the last string "
2018/06/19 13:39:05 " Validate the unit. "
2018/06/19 13:39:05 " Validate the ASCII numbers, need two ASCII numbers separated by\n    * a '\\0' and they need to fit exactly in the chunk data.\n    "
2018/06/19 13:39:05 " This is the (only) success case. "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " Note: this does not properly handle chunks that are > 64K under DOS \n PRIVATE "
2018/06/19 13:39:05 "warn"
2018/06/19 13:39:05 " Empty loop to find end of key "
2018/06/19 13:39:05 " Note: this does not correctly handle chunks that are > 64K under DOS \n PRIVATE "
2018/06/19 13:39:05 " Note, \"length\" is sufficient here; we won't be adding\n    * a null terminator later.\n    "
2018/06/19 13:39:05 "silent"
2018/06/19 13:39:05 " TODO: also check that the keyword contents match the spec! "
2018/06/19 13:39:05 " Empty loop to find end of name "
2018/06/19 13:39:05 " zTXt must have some LZ data after the keyword, although it may expand to\n    * zero bytes; we need a '\\0' at the end of the keyword, the compression type\n    * then the LZ data:\n    "
2018/06/19 13:39:05 " TODO: at present png_decompress_chunk imposes a single application\n       * level memory limit, this should be split to different values for iCCP\n       * and text chunks.\n       "
2018/06/19 13:39:05 "terminate"
2018/06/19 13:39:05 " It worked; png_ptr->read_buffer now looks like a tEXt chunk\n             * except for the extra compression type byte and the fact that\n             * it isn't necessarily '\\0' terminated.\n             "
2018/06/19 13:39:05 " Note: this does not correctly handle chunks that are > 64K under DOS \n PRIVATE "
2018/06/19 13:39:05 "warn"
2018/06/19 13:39:05 " First the keyword. "
2018/06/19 13:39:05 " Empty loop "
2018/06/19 13:39:05 " Perform a basic check on the keyword length here. "
2018/06/19 13:39:05 " Expect keyword, compression flag, compression type, language, translated\n    * keyword (both may be empty but are 0 terminated) then the text, which may\n    * be empty.\n    "
2018/06/19 13:39:05 " Now the language tag "
2018/06/19 13:39:05 " Empty loop "
2018/06/19 13:39:05 " WARNING: the length may be invalid here, this is checked below. "
2018/06/19 13:39:05 " Empty loop "
2018/06/19 13:39:05 " prefix_length should now be at the trailing '\\0' of the translated\n       * keyword, but it may already be over the end.  None of this arithmetic\n       * can overflow because chunks are at most 2^31 bytes long, but on 16-bit\n       * systems the available allocation may overflow.\n       "
2018/06/19 13:39:05 " TODO: at present png_decompress_chunk imposes a single application\n          * level memory limit, this should be split to different values for\n          * iCCP and text chunks.\n          "
2018/06/19 13:39:05 "terminate"
2018/06/19 13:39:05 " Utility function for png_handle_unknown; set up png_ptr::unknown_chunk "
2018/06/19 13:39:05 " The following is safe because of the PNG_SIZE_MAX init above \nSAFE\n 'mode' is a flag array, only the bottom four bits matter here \nSAFE"
2018/06/19 13:39:05 " Do a 'warn' here - it is handled below. "
2018/06/19 13:39:05 " This is benign because we clean up correctly "
2018/06/19 13:39:05 " READ_UNKNOWN_CHUNKS "
2018/06/19 13:39:05 " Handle an unknown, or known but disabled, chunk \n PRIVATE "
2018/06/19 13:39:05 " the chunk was handled "
2018/06/19 13:39:05 " NOTE: this code is based on the code in libpng-1.4.12 except for fixing\n    * the bug which meant that setting a non-default behavior for a specific\n    * chunk would be ignored (the default was always used unless a user\n    * callback was installed).\n    *\n    * 'keep' is the value from the png_chunk_unknown_handling, the setting for\n    * this specific chunk_name, if PNG_HANDLE_AS_UNKNOWN_SUPPORTED, if not it\n    * will always be PNG_HANDLE_CHUNK_AS_DEFAULT and it needs to be set here.\n    * This is just an optimization to avoid multiple calls to the lookup\n    * function.\n    "
2018/06/19 13:39:05 " One of the following methods will read the chunk or skip it (at least one\n    * of these is always defined because this is the only way to switch on\n    * PNG_READ_UNKNOWN_CHUNKS_SUPPORTED)\n    "
2018/06/19 13:39:05 " The user callback takes precedence over the chunk keep value, but the\n    * keep value is still required to validate a save of a critical chunk.\n    "
2018/06/19 13:39:05 " Callback to user unknown chunk handler "
2018/06/19 13:39:05 " ret is:\n          * negative: An error occurred; png_chunk_error will be called.\n          *     zero: The chunk was not handled, the chunk will be discarded\n          *           unless png_set_keep_unknown_chunks has been used to set\n          *           a 'keep' behavior for this particular chunk, in which\n          *           case that will be used.  A critical chunk will cause an\n          *           error at this point unless it is to be saved.\n          * positive: The chunk was handled, libpng will ignore/discard it.\n          "
2018/06/19 13:39:05 " If the keep value is 'default' or 'never' override it, but\n             * still error out on critical chunks unless the keep value is\n             * 'always'  While this is weird it is the behavior in 1.4.12.\n             * A possible improvement would be to obey the value set for the\n             * chunk, but this would be an API change that would probably\n             * damage some applications.\n             *\n             * The png_app_warning below catches the case that matters, where\n             * the application has not set specific save or ignore for this\n             * chunk or global save or ignore.\n             "
2018/06/19 13:39:05 " with keep = PNG_HANDLE_CHUNK_IF_SAFE "
2018/06/19 13:39:05 " chunk was handled "
2018/06/19 13:39:05 " Critical chunks can be safely discarded at this point. "
2018/06/19 13:39:05 " insufficient memory "
2018/06/19 13:39:05 " Use the SAVE_UNKNOWN_CHUNKS code or skip the chunk \n READ_USER_CHUNKS "
2018/06/19 13:39:05 " keep is currently just the per-chunk setting, if there was no\n       * setting change it to the global default now (not that this may\n       * still be AS_DEFAULT) then obtain the cache of the chunk if required,\n       * if not simply skip the chunk.\n       "
2018/06/19 13:39:05 " If here there is no read callback pointer set and no support is\n       * compiled in to just save the unknown chunks, so simply skip this\n       * chunk.  If 'keep' is something other than AS_DEFAULT or NEVER then\n       * the app has erroneously asked for unknown chunk saving when there\n       * is no support.\n       "
2018/06/19 13:39:05 " Now store the chunk in the chunk list if appropriate, and if the limits\n    * permit it.\n    "
2018/06/19 13:39:05 " FALLTHROUGH "
2018/06/19 13:39:05 " NOTE: prior to 1.6.0 this case resulted in an unknown critical\n             * chunk being skipped, now there will be a hard error below.\n             "
2018/06/19 13:39:05 " not at limit "
2018/06/19 13:39:05 " FALLTHROUGH \n no limit \n USER_LIMITS \n Here when the limit isn't reached or when limits are compiled\n             * out; store the chunk.\n             "
2018/06/19 13:39:05 " no store support: the chunk must be handled by the user callback "
2018/06/19 13:39:05 " Regardless of the error handling below the cached data (if any) can be\n    * freed now.  Notice that the data is not freed if there is a png_error, but\n    * it will be freed by destroy_read_struct.\n    "
2018/06/19 13:39:05 " !PNG_READ_UNKNOWN_CHUNKS_SUPPORTED \n There is no support to read an unknown chunk, so just skip it. "
2018/06/19 13:39:05 " !READ_UNKNOWN_CHUNKS "
2018/06/19 13:39:05 " Check for unhandled critical chunks "
2018/06/19 13:39:05 " This function is called to verify that a chunk name is valid.\n * This function can't have the \"critical chunk check\" incorporated\n * into it, since in the future we will need to be able to call user\n * functions to handle unknown critical chunks after we check that\n * the chunk name itself is valid.\n "
2018/06/19 13:39:05 " Bit hacking: the test for an invalid byte in the 4 byte chunk name is:\n *\n * ((c) < 65 || (c) > 122 || ((c) > 90 && (c) < 97))\n "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " zlib+deflate overhead "
2018/06/19 13:39:05 " Combines the row recently read in with the existing pixels in the row.  This\n * routine takes care of alpha and transparency if requested.  This routine also\n * handles the two methods of progressive display of interlaced images,\n * depending on the 'display' value; if 'display' is true then the whole row\n * (dp) is filled from the start by replicating the available pixels.  If\n * 'display' is false only those pixels present in the pass are filled in.\n "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " Added in 1.5.6: it should not be possible to enter this routine until at\n    * least one row has been read from the PNG data and transformed.\n    "
2018/06/19 13:39:05 " Added in 1.5.4: the pixel depth should match the information returned by\n    * any call to png_read_update_info at this point.  Do not continue if we got\n    * this wrong.\n    "
2018/06/19 13:39:05 " Don't expect this to ever happen: "
2018/06/19 13:39:05 " Preserve the last byte in cases where only part of it will be overwritten,\n    * the multiply below may overflow, we don't care because ANSI-C guarantees\n    * we get the low bits.\n    "
2018/06/19 13:39:05 " end_ptr == NULL is a flag to say do nothing "
2018/06/19 13:39:05 " little-endian byte "
2018/06/19 13:39:05 " big-endian byte "
2018/06/19 13:39:05 " end_mask is now the bits to *keep* from the destination row "
2018/06/19 13:39:05 " For non-interlaced images this reduces to a memcpy(). A memcpy()\n    * will also happen if interlacing isn't supported or if the application\n    * does not call png_set_interlace_handling().  In the latter cases the\n    * caller just gets a sequence of the unexpanded rows from each interlace\n    * pass.\n    "
2018/06/19 13:39:05 " The following copies everything for 'display' on passes 0, 2 and 4. "
2018/06/19 13:39:05 " Narrow images may have no bits in a pass; the caller should handle\n       * this, but this test is cheap:\n       "
2018/06/19 13:39:05 " For pixel depths up to 4 bpp the 8-pixel mask can be expanded to fit\n          * into 32 bits, then a single loop over the bytes using the four byte\n          * values in the 32-bit mask can be used.  For the 'display' option the\n          * expanded mask may also not require any masking within a byte.  To\n          * make this work the PACKSWAP option must be taken into account - it\n          * simply requires the pixels to be reversed in each byte.\n          *\n          * The 'regular' case requires a mask for each of the first 6 passes,\n          * the 'display' case does a copy for the even passes in the range\n          * 0..6.  This has already been handled in the test above.\n          *\n          * The masks are arranged as four bytes with the first byte to use in\n          * the lowest bits (little-endian) regardless of the order (PACKSWAP or\n          * not) of the pixels in each byte.\n          *\n          * NOTE: the whole of this logic depends on the caller of this function\n          * only calling it on rows appropriate to the pass.  This function only\n          * understands the 'x' logic; the 'y' logic is handled by the caller.\n          *\n          * The following defines allow generation of compile time constant bit\n          * masks for each pixel depth and each possibility of swapped or not\n          * swapped bytes.  Pass 'p' is in the range 0..6; 'x', a pixel index,\n          * is in the range 0..7; and the result is 1 if the pixel is to be\n          * copied in the pass, 0 if not.  'S' is for the sparkle method, 'B'\n          * for the block method.\n          *\n          * With some compilers a compile time expression of the general form:\n          *\n          *    (shift >= 32) ? (a >> (shift-32)) : (b >> shift)\n          *\n          * Produces warnings with values of 'shift' in the range 33 to 63\n          * because the right hand side of the ?: expression is evaluated by\n          * the compiler even though it isn't used.  Microsoft Visual C (various\n          * versions) and the Intel C compiler are known to do this.  To avoid\n          * this the following macros are used in 1.5.6.  This is a temporary\n          * solution to avoid destabilizing the code during the release process.\n          "
2018/06/19 13:39:05 " Return a mask for pass 'p' pixel 'x' at depth 'd'.  The mask is\n          * little endian - the first pixel is at bit 0 - however the extra\n          * parameter 's' can be set to cause the mask position to be swapped\n          * within each byte, to match the PNG format.  This is done by XOR of\n          * the shift with 7, 6 or 4 for bit depths 1, 2 and 4.\n          "
2018/06/19 13:39:05 " Hence generate the appropriate 'block' or 'sparkle' pixel copy mask.\n          "
2018/06/19 13:39:05 " Combine 8 of these to get the full mask.  For the 1-bpp and 2-bpp\n          * cases the result needs replicating, for the 4-bpp case the above\n          * generates a full 32 bits.\n          "
2018/06/19 13:39:05 " Utility macros to construct all the masks for a depth/swap\n          * combination.  The 's' parameter says whether the format is PNG\n          * (big endian bytes) or not.  Only the three odd-numbered passes are\n          * required for the display/block algorithm.\n          "
2018/06/19 13:39:05 " Hence the pre-compiled masks indexed by PACKSWAP (or not), depth and\n          * then pass:\n          "
2018/06/19 13:39:05 "PACKSWAP\ndepth"
2018/06/19 13:39:05 " Little-endian byte masks for PACKSWAP "
2018/06/19 13:39:05 " Normal (big-endian byte) masks - PNG format "
2018/06/19 13:39:05 " display_mask has only three entries for the odd passes, so index by\n          * pass>>1.\n          "
2018/06/19 13:39:05 " Little-endian byte masks for PACKSWAP "
2018/06/19 13:39:05 " Normal (big-endian byte) masks - PNG format "
2018/06/19 13:39:05 " !PNG_USE_COMPILE_TIME_MASKS \n This is the runtime alternative: it seems unlikely that this will\n          * ever be either smaller or faster than the compile time approach.\n          "
2018/06/19 13:39:05 " !USE_COMPILE_TIME_MASKS "
2018/06/19 13:39:05 " Use the appropriate mask to copy the required bits.  In some cases\n          * the byte mask will be 0 or 0xff; optimize these cases.  row_width is\n          * the number of pixels, but the code copies bytes, so it is necessary\n          * to special case the end.\n          "
2018/06/19 13:39:05 " It doesn't matter in the following if png_uint_32 has more than\n             * 32 bits because the high bits always match those in m<<24; it is,\n             * however, essential to use OR here, not +, because of this.\n             "
2018/06/19 13:39:05 " rotate right to good compilers "
2018/06/19 13:39:05 " something to copy "
2018/06/19 13:39:05 " NOTE: this may overwrite the last byte with garbage if the image\n             * is not an exact number of bytes wide; libpng has always done\n             * this.\n             "
2018/06/19 13:39:05 " May need to restore part of the last byte "
2018/06/19 13:39:05 " pixel_depth >= 8 "
2018/06/19 13:39:05 " Validate the depth - it must be a multiple of 8 "
2018/06/19 13:39:05 " now in bytes "
2018/06/19 13:39:05 " Regardless of pass number the Adam 7 interlace always results in a\n          * fixed number of pixels to copy then to skip.  There may be a\n          * different number of pixels to skip at the start though.\n          "
2018/06/19 13:39:05 " Work out the bytes to copy. "
2018/06/19 13:39:05 " When doing the 'block' algorithm the pixel in the pass gets\n             * replicated to adjacent pixels.  This is why the even (0,2,4,6)\n             * passes are skipped above - the entire expanded row is copied.\n             "
2018/06/19 13:39:05 " But don't allow this number to exceed the actual row width. "
2018/06/19 13:39:05 "SAFE"
2018/06/19 13:39:05 " normal row; Adam7 only ever gives us one pixel to copy. "
2018/06/19 13:39:05 " In Adam7 there is a constant offset between where the pixels go. "
2018/06/19 13:39:05 " And simply copy these bytes.  Some optimization is possible here,\n          * depending on the value of 'bytes_to_copy'.  Special case the low\n          * byte counts, which we know to be frequent.\n          *\n          * Notice that these cases all 'return' rather than 'break' - this\n          * avoids an unnecessary test on whether to restore the last byte\n          * below.\n          "
2018/06/19 13:39:05 " There is a possibility of a partial copy at the end here; this\n                * slows the code down somewhat.\n                "
2018/06/19 13:39:05 " And there can only be one byte left at this point: "
2018/06/19 13:39:05 " This can only be the RGB case, so each copy is exactly one\n                * pixel and it is not necessary to check for a partial copy.\n                "
2018/06/19 13:39:05 " Check for double byte alignment and, if possible, use a\n                * 16-bit copy.  Don't attempt this for narrow images - ones that\n                * are less than an interlace panel wide.  Don't attempt it for\n                * wide bytes_to_copy either - use the memcpy there.\n                "
2018/06/19 13:39:05 "else use memcpy"
2018/06/19 13:39:05 " Everything is aligned for png_uint_16 copies, but try for\n                   * png_uint_32 first.\n                   "
2018/06/19 13:39:05 " Get to here when the row_width truncates the final copy.\n                      * There will be 1-3 bytes left to copy, so don't try the\n                      * 16-bit loop below.\n                      "
2018/06/19 13:39:05 " Else do it in 16-bit quantities, but only if the size is\n                   * not too large.\n                   "
2018/06/19 13:39:05 " End of row - 1 byte left, bytes_to_copy > row_width: "
2018/06/19 13:39:05 " ALIGN_TYPE code "
2018/06/19 13:39:05 " The true default - use a memcpy: "
2018/06/19 13:39:05 "SAFE"
2018/06/19 13:39:05 " NOT REACHED\n pixel_depth >= 8 "
2018/06/19 13:39:05 " Here if pixel_depth < 8 to check 'end_ptr' below. "
2018/06/19 13:39:05 " READ_INTERLACING "
2018/06/19 13:39:05 " If here then the switch above wasn't used so just memcpy the whole row\n    * from the temporary row buffer (notice that this overwrites the end of the\n    * destination row if it is a partial byte.)\n    "
2018/06/19 13:39:05 " Restore the overwritten bits from the last byte if necessary. "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " Because these may affect the byte layout "
2018/06/19 13:39:05 " Arrays to facilitate easy interlacing - use pass (0 - 6) as index \n Offset to next interlace block "
2018/06/19 13:39:05 " SAFE; pixel_depth does not exceed 64 "
2018/06/19 13:39:05 " Silence compiler warning "
2018/06/19 13:39:05 " READ_INTERLACING "
2018/06/19 13:39:05 " First pixel/byte "
2018/06/19 13:39:05 " Remainder "
2018/06/19 13:39:05 " From previous iteration or start "
2018/06/19 13:39:05 " Find the best predictor, the least of pa, pb, pc favoring the earlier\n       * ones in the case of a tie.\n       "
2018/06/19 13:39:05 " Calculate the current pixel in a, and move the previous row pixel to c\n       * for the next time round the loop\n       "
2018/06/19 13:39:05 " Process the first pixel in the row completely (this is the same as 'up'\n    * because there is only one candidate predictor for the first row).\n    "
2018/06/19 13:39:05 " Remainder "
2018/06/19 13:39:05 " This function is called once for every PNG image (except for PNG images\n    * that only use PNG_FILTER_VALUE_NONE for all rows) to set the\n    * implementations required to reverse the filtering of PNG rows.  Reversing\n    * the filter is the first transformation performed on the row data.  It is\n    * performed in place, therefore an implementation can be selected based on\n    * the image pixel format.  If the implementation depends on image width then\n    * take care to ensure that it works correctly if the image is interlaced -\n    * interlacing causes the actual row width to vary.\n    "
2018/06/19 13:39:05 " To use this define PNG_FILTER_OPTIMIZATIONS as the name of a function to\n    * call to install hardware optimizations for the above functions; simply\n    * replace whatever elements of the pp->read_filter[] array with a hardware\n    * specific (or, for that matter, generic) optimization.\n    *\n    * To see an example of this examine what configure.ac does when\n    * --enable-arm-neon is specified on the command line.\n    "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " OPTIMIZATION: DO NOT MODIFY THIS FUNCTION, instead #define\n    * PNG_FILTER_OPTIMIZATIONS to a function that overrides the generic\n    * implementations.  See png_init_filter_functions above.\n    "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " Loop reading IDATs and decompressing the result into output[avail_out] "
2018/06/19 13:39:05 " safety: set below "
2018/06/19 13:39:05 " This is an error even in the 'check' case because the code just\n             * consumed a non-IDAT header.\n             "
2018/06/19 13:39:05 " A PNG with a gradually increasing IDAT size will defeat this attempt\n          * to minimize memory usage by causing lots of re-allocs, but\n          * realistically doing IDAT_read_size re-allocs is not likely to be a\n          * big problem.\n          "
2018/06/19 13:39:05 "error"
2018/06/19 13:39:05 " And set up the output side. \n standard read "
2018/06/19 13:39:05 " after last row, checking for end "
2018/06/19 13:39:05 " Use NO_FLUSH; this gives zlib the maximum opportunity to optimize the\n       * process.  If the LZ stream is truncated the sequential reader will\n       * terminally damage the stream, above, by reading the chunk header of the\n       * following chunk (it then exits with png_error).\n       *\n       * TODO: deal more elegantly with truncated IDAT lists.\n       "
2018/06/19 13:39:05 " Take the unconsumed output back. "
2018/06/19 13:39:05 " avail_out counts the extra bytes "
2018/06/19 13:39:05 " Do this for safety; we won't read any more into this row. "
2018/06/19 13:39:05 " checking "
2018/06/19 13:39:05 " The stream ended before the image; this is the same as too few IDATs so\n       * should be handled the same way.\n       "
2018/06/19 13:39:05 " the deflate stream contained extra data "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " We don't need any more data and the stream should have ended, however the\n    * LZ end code may actually not have been processed.  In this case we must\n    * read it otherwise stray unread IDAT data or, more likely, an IDAT chunk\n    * may still remain to be consumed.\n    "
2018/06/19 13:39:05 " The NULL causes png_read_IDAT_data to swallow any remaining bytes in\n       * the compressed stream, but the stream may be damaged too, so even after\n       * this call we may need to terminate the zstream ownership.\n       "
2018/06/19 13:39:05 " safety "
2018/06/19 13:39:05 " Now clear everything out for safety; the following may not have been\n       * done.\n       "
2018/06/19 13:39:05 " If the zstream has not been released do it now *and* terminate the reading\n    * of the final IDAT chunk.\n    "
2018/06/19 13:39:05 " Always do this; the pointers otherwise point into the read buffer. "
2018/06/19 13:39:05 " Now we no longer own the zstream. "
2018/06/19 13:39:05 " The slightly weird semantics of the sequential IDAT reading is that we\n       * are always in or at the end of an IDAT chunk, so we always need to do a\n       * crc_finish here.  If idat_size is non-zero we also need to read the\n       * spurious bytes at the end of the chunk now.\n       "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " Arrays to facilitate easy interlacing - use pass (0 - 6) as index "
2018/06/19 13:39:05 " Start of interlace block "
2018/06/19 13:39:05 " Offset to next interlace block "
2018/06/19 13:39:05 " Start of interlace block in the y direction "
2018/06/19 13:39:05 " Offset to next interlace block in the y direction "
2018/06/19 13:39:05 " TO DO: don't do this if prev_row isn't needed (requires\n       * read-ahead of the next row's filter byte.\n       "
2018/06/19 13:39:05 " if (png_ptr->transformations & PNG_INTERLACE) \n libpng deinterlacing sees every row "
2018/06/19 13:39:05 " Here after at the end of the last row of the last pass. "
2018/06/19 13:39:05 " SEQUENTIAL_READ "
2018/06/19 13:39:05 " PRIVATE "
2018/06/19 13:39:05 " Arrays to facilitate easy interlacing - use pass (0 - 6) as index "
2018/06/19 13:39:05 " Start of interlace block "
2018/06/19 13:39:05 " Offset to next interlace block "
2018/06/19 13:39:05 " Start of interlace block in the y direction "
2018/06/19 13:39:05 " Offset to next interlace block in the y direction "
2018/06/19 13:39:05 " WARNING: * png_read_transform_info (pngrtran.c) performs a simpler set of\n    * calculations to calculate the final pixel depth, then\n    * png_do_read_transforms actually does the transforms.  This means that the\n    * code which effectively calculates this value is actually repeated in three\n    * separate places.  They must all match.  Innocent changes to the order of\n    * transformations can and will break libpng in a way that causes memory\n    * overwrites.\n    *\n    * TODO: fix this.\n    "
2018/06/19 13:39:05 " In fact it is an error if it isn't supported, but checking is\n       * the safe way.\n       "
2018/06/19 13:39:05 " This value is stored in png_struct and double checked in the row read\n    * code.\n    "
2018/06/19 13:39:05 " calculated on demand "
2018/06/19 13:39:05 " Align the width on the next larger 8 pixels.  Mainly used\n    * for interlacing\n    "
2018/06/19 13:39:05 " Calculate the maximum bytes needed, adding a byte and a pixel\n    * for safety's sake\n    "
2018/06/19 13:39:05 " Use 16-byte aligned memory for row_buf with at least 16 bytes\n       * of padding before and after row_buf; treat prev_row similarly.\n       * NOTE: the alignment is to the start of the pixels, one beyond the start\n       * of the buffer, because of the filter byte.  Prior to libpng 1.5.6 this\n       * was incorrect; the filter byte was aligned, which had the exact\n       * opposite effect of that intended.\n       "
2018/06/19 13:39:05 "filter byte"
2018/06/19 13:39:05 "filter byte"
2018/06/19 13:39:05 " Use 31 bytes of padding before and 17 bytes after row_buf. "
2018/06/19 13:39:05 " The sequential reader needs a buffer for IDAT, but the progressive reader\n    * does not, so free the read buffer now regardless; the sequential reader\n    * reallocates it on demand.\n    "
2018/06/19 13:39:05 " Finally claim the zstream for the inflate of the IDAT data, use the bits\n    * value from the stream (note that this will result in a fatal error if the\n    * IDAT stream has a bogus deflate header window_bits value, but this should\n    * not be happening any longer!)\n    "
2018/06/19 13:39:05 " READ "
2018/06/19 13:39:05 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngrutil.c": 154.242475ms
2018/06/19 13:39:05 Couldn't classify license(s)
2018/06/19 13:39:06 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/install-sh
2018/06/19 13:39:06 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/install-sh": 45.828865ms
2018/06/19 13:39:07 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngconf.h
2018/06/19 13:39:07 detected language: 4
2018/06/19 13:39:07 " pngconf.h - machine configurable file for libpng\n *\n * libpng version 1.6.34, September 29, 2017\n *\n * Copyright (c) 1998-2002,2004,2006-2016 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * Any machine specific code is near the front of this file, so if you\n * are configuring libpng for a machine, you may want to read the section\n * starting here down to where it starts to typedef png_color, png_text,\n * and png_info.\n "
2018/06/19 13:39:07 " else includes may cause problems "
2018/06/19 13:39:07 " From libpng 1.6.0 libpng requires an ANSI X3.159-1989 (\"ISOC90\") compliant C\n * compiler for correct compilation.  The following header files are required by\n * the standard.  If your compiler doesn't provide these header files, or they\n * do not match the standard, you will need to provide/improve them.\n "
2018/06/19 13:39:07 " Library header files.  These header files are all defined by ISOC90; libpng\n * expects conformant implementations, however, an ISOC90 conformant system need\n * not provide these header files if the functionality cannot be implemented.\n * In this case it will be necessary to disable the relevant parts of libpng in\n * the build of pnglibconf.h.\n *\n * Prior to 1.6.0 string.h was included here; the API changes in 1.6.0 to not\n * include this unnecessary header file.\n "
2018/06/19 13:39:07 " Required for the definition of FILE: "
2018/06/19 13:39:07 " Required for the definition of jmp_buf and the declaration of longjmp: "
2018/06/19 13:39:07 " Required for struct tm: "
2018/06/19 13:39:07 " PNG_BUILDING_SYMBOL_TABLE "
2018/06/19 13:39:07 " Prior to 1.6.0 it was possible to turn off 'const' in declarations using\n * PNG_NO_CONST; this is no longer supported except for data declarations which\n * apparently still cause problems in 2011 on some compilers.\n "
2018/06/19 13:39:07 " backward compatibility only "
2018/06/19 13:39:07 " This controls optimization of the reading of 16-bit and 32-bit values\n * from PNG files.  It can be set on a per-app-file basis - it\n * just changes whether a macro is used when the function is called.\n * The library builder sets the default; if read functions are not\n * built into the library the macro implementation is forced on.\n "
2018/06/19 13:39:07 " COMPILER SPECIFIC OPTIONS.\n *\n * These options are provided so that a variety of difficult compilers\n * can be used.  Some are fixed at build time (e.g. PNG_API_RULE\n * below) but still have compiler specific implementations, others\n * may be changed on a per-file basis when compiling against libpng.\n "
2018/06/19 13:39:07 " The PNGARG macro was used in versions of libpng prior to 1.6.0 to protect\n * against legacy (pre ISOC90) compilers that did not understand function\n * prototypes.  It is not required for modern C compilers.\n "
2018/06/19 13:39:07 " Function calling conventions.\n * =============================\n * Normally it is not necessary to specify to the compiler how to call\n * a function - it just does it - however on x86 systems derived from\n * Microsoft and Borland C compilers ('IBM PC', 'DOS', 'Windows' systems\n * and some others) there are multiple ways to call a function and the\n * default can be changed on the compiler command line.  For this reason\n * libpng specifies the calling convention of every exported function and\n * every function called via a user supplied function pointer.  This is\n * done in this file by defining the following macros:\n *\n * PNGAPI    Calling convention for exported functions.\n * PNGCBAPI  Calling convention for user provided (callback) functions.\n * PNGCAPI   Calling convention used by the ANSI-C library (required\n *           for longjmp callbacks and sometimes used internally to\n *           specify the calling convention for zlib).\n *\n * These macros should never be overridden.  If it is necessary to\n * change calling convention in a private build this can be done\n * by setting PNG_API_RULE (which defaults to 0) to one of the values\n * below to select the correct 'API' variants.\n *\n * PNG_API_RULE=0 Use PNGCAPI - the 'C' calling convention - throughout.\n *                This is correct in every known environment.\n * PNG_API_RULE=1 Use the operating system convention for PNGAPI and\n *                the 'C' calling convention (from PNGCAPI) for\n *                callbacks (PNGCBAPI).  This is no longer required\n *                in any known environment - if it has to be used\n *                please post an explanation of the problem to the\n *                libpng mailing list.\n *\n * These cases only differ if the operating system does not use the C\n * calling convention, at present this just means the above cases\n * (x86 DOS/Windows sytems) and, even then, this does not apply to\n * Cygwin running on those systems.\n *\n * Note that the value must be defined in pnglibconf.h so that what\n * the application uses to call the library matches the conventions\n * set when building the library.\n "
2018/06/19 13:39:07 " Symbol export\n * =============\n * When building a shared library it is almost always necessary to tell\n * the compiler which symbols to export.  The png.h macro 'PNG_EXPORT'\n * is used to mark the symbols.  On some systems these symbols can be\n * extracted at link time and need no special processing by the compiler,\n * on other systems the symbols are flagged by the compiler and just\n * the declaration requires a special tag applied (unfortunately) in a\n * compiler dependent way.  Some systems can do either.\n *\n * A small number of older systems also require a symbol from a DLL to\n * be flagged to the program that calls it.  This is a problem because\n * we do not know in the header file included by application code that\n * the symbol will come from a shared library, as opposed to a statically\n * linked one.  For this reason the application must tell us by setting\n * the magic flag PNG_USE_DLL to turn on the special processing before\n * it includes png.h.\n *\n * Four additional macros are used to make this happen:\n *\n * PNG_IMPEXP The magic (if any) to cause a symbol to be exported from\n *            the build or imported if PNG_USE_DLL is set - compiler\n *            and system specific.\n *\n * PNG_EXPORT_TYPE(type) A macro that pre or appends PNG_IMPEXP to\n *                       'type', compiler specific.\n *\n * PNG_DLL_EXPORT Set to the magic to use during a libpng build to\n *                make a symbol exported from the DLL.  Not used in the\n *                public header files; see pngpriv.h for how it is used\n *                in the libpng build.\n *\n * PNG_DLL_IMPORT Set to the magic to force the libpng symbols to come\n *                from a DLL - used to define PNG_IMPEXP when\n *                PNG_USE_DLL is set.\n "
2018/06/19 13:39:07 " System specific discovery.\n * ==========================\n * This code is used at build time to find PNG_IMPEXP, the API settings\n * and PNG_EXPORT_TYPE(), it may also set a macro to indicate the DLL\n * import processing is possible.  On Windows systems it also sets\n * compiler-specific macros to the values required to change the calling\n * conventions of the various functions.\n "
2018/06/19 13:39:07 " Windows system (DOS doesn't support DLLs).  Includes builds under Cygwin or\n   * MinGW on any architecture currently supported by Windows.  Also includes\n   * Watcom builds but these need special treatment because they are not\n   * compatible with GCC or Visual C because of different calling conventions.\n   "
2018/06/19 13:39:07 " If this line results in an error, either because __watcall is not\n    * understood or because of a redefine just below you cannot use *this*\n    * build of the library with the compiler you are using.  *This* build was\n    * build using Watcom and applications must also be built using Watcom!\n    "
2018/06/19 13:39:07 " If this line results in an error __stdcall is not understood and\n    * PNG_API_RULE should not have been set to '1'.\n    "
2018/06/19 13:39:07 " An older compiler, or one not detected (erroneously) above,\n    * if necessary override on the command line to get the correct\n    * variants for the compiler.\n    "
2018/06/19 13:39:07 " compiler/api "
2018/06/19 13:39:07 " NOTE: PNGCBAPI always defaults to PNGCAPI. "
2018/06/19 13:39:07 " older Borland and MSC\n    * compilers used '__export' and required this to be after\n    * the type.\n    "
2018/06/19 13:39:07 " newer compiler "
2018/06/19 13:39:07 " compiler "
2018/06/19 13:39:07 " !Windows "
2018/06/19 13:39:07 " !Windows/x86 && !OS/2 \n Use the defaults, or define PNG*API on the command line (but\n    * this will have to be done for every compile!)\n    "
2018/06/19 13:39:07 " other system, !OS/2 \n !Windows/x86 "
2018/06/19 13:39:07 " Now do all the defaulting . "
2018/06/19 13:39:07 " PNG_IMPEXP may be set on the compilation system command line or (if not set)\n * then in an internal header file when building the library, otherwise (when\n * using the library) it is set here.\n "
2018/06/19 13:39:07 " This forces use of a DLL, disallowing static linking "
2018/06/19 13:39:07 " In 1.5.2 the definition of PNG_FUNCTION has been changed to always treat\n * 'attributes' as a storage class - the attributes go at the start of the\n * function definition, and attributes are always appended regardless of the\n * compiler.  This considerably simplifies these macros but may cause problems\n * if any compilers both need function attributes and fail to handle them as\n * a storage class (this is unlikely.)\n "
2018/06/19 13:39:07 " The ordinal value is only relevant when preprocessing png.h for symbol\n    * table entries, so we discard it here.  See the .dfn files in the\n    * scripts directory.\n    "
2018/06/19 13:39:07 " ANSI-C (C90) does not permit a macro to be invoked with an empty argument,\n * so make something non-empty to satisfy the requirement:\n "
2018/06/19 13:39:07 "empty list"
2018/06/19 13:39:07 " Use PNG_REMOVED to comment out a removed interface. "
2018/06/19 13:39:07 " Support for compiler specific function attributes.  These are used\n * so that where compiler support is available incorrect use of API\n * functions in png.h will generate compiler warnings.\n *\n * Added at libpng-1.2.41.\n "
2018/06/19 13:39:07 " Support for compiler specific function attributes.  These are used\n   * so that where compiler support is available, incorrect use of API\n   * functions in png.h will generate compiler warnings.  Added at libpng\n   * version 1.2.41.  Disabling these removes the warnings but may also produce\n   * less efficient code.\n   "
2018/06/19 13:39:07 " Clang defines both __clang__ and __GNUC__. Check __clang__ first. "
2018/06/19 13:39:07 " Doesn't work so we use deprecated instead"
2018/06/19 13:39:07 " __GNUC__.__GNUC_MINOR__ > 3.0 \n __GNUC__ >= 3 "
2018/06/19 13:39:07 " not supported "
2018/06/19 13:39:07 " PNG_PEDANTIC_WARNINGS "
2018/06/19 13:39:07 " Use of this function is deprecated "
2018/06/19 13:39:07 " The result of this function must be checked "
2018/06/19 13:39:07 " This function does not return "
2018/06/19 13:39:07 " The result of the function is new memory "
2018/06/19 13:39:07 " This is a private libpng function "
2018/06/19 13:39:07 " The C99 \"restrict\" feature "
2018/06/19 13:39:07 " A floating point API. "
2018/06/19 13:39:07 " No floating point APIs "
2018/06/19 13:39:07 " A fixed point API. "
2018/06/19 13:39:07 " No fixed point APIs "
2018/06/19 13:39:07 " Some typedefs to get us started.  These should be safe on most of the common\n * platforms.\n *\n * png_uint_32 and png_int_32 may, currently, be larger than required to hold a\n * 32-bit value however this is not normally advisable.\n *\n * png_uint_16 and png_int_16 should always be two bytes in size - this is\n * verified at library build time.\n *\n * png_byte must always be one byte in size.\n *\n * The checks below use constants from limits.h, as defined by the ISOC90\n * standard.\n "
2018/06/19 13:39:07 " Prior to 1.6.0 it was possible to disable the use of size_t, 1.6.0, however,\n * requires an ISOC90 compiler and relies on consistent behavior of sizeof.\n "
2018/06/19 13:39:07 " libpng needs to know the maximum value of 'size_t' and this controls the\n * definition of png_alloc_size_t, below.  This maximum value of size_t limits\n * but does not control the maximum allocations the library makes - there is\n * direct application control of this through png_set_user_limits().\n "
2018/06/19 13:39:07 " Compiler specific tests for systems where size_t is known to be less than\n    * 32 bits (some of these systems may no longer work because of the lack of\n    * 'far' support; see above.)\n    "
2018/06/19 13:39:07 " png_alloc_size_t is guaranteed to be no smaller than png_size_t, and no\n * smaller than png_uint_32.  Casts from png_size_t or png_uint_32 to\n * png_alloc_size_t are not necessary; in fact, it is recommended not to use\n * them at all so that the compiler can complain when something turns out to be\n * problematic.\n *\n * Casts in the other direction (from png_alloc_size_t to png_size_t or\n * png_uint_32) should be explicitly applied; however, we do not expect to\n * encounter practical situations that require such conversions.\n *\n * PNG_SMALL_SIZE_T must be defined if the maximum value of size_t is less than\n * 4294967295 - i.e. less than the maximum value of png_uint_32.\n "
2018/06/19 13:39:07 " Prior to 1.6.0 libpng offered limited support for Microsoft C compiler\n * implementations of Intel CPU specific support of user-mode segmented address\n * spaces, where 16-bit pointers address more than 65536 bytes of memory using\n * separate 'segment' registers.  The implementation requires two different\n * types of pointer (only one of which includes the segment value.)\n *\n * If required this support is available in version 1.2 of libpng and may be\n * available in versions through 1.5, although the correctness of the code has\n * not been verified recently.\n "
2018/06/19 13:39:07 " Typedef for floating-point numbers that are converted to fixed-point with a\n * multiple of 100,000, e.g., gamma\n "
2018/06/19 13:39:07 " Add typedefs for pointers "
2018/06/19 13:39:07 " Pointers to pointers; i.e. arrays "
2018/06/19 13:39:07 " Pointers to pointers to pointers; i.e., pointer to array "
2018/06/19 13:39:07 " PNG_BUILDING_SYMBOL_TABLE "
2018/06/19 13:39:07 " PNGCONF_H "
2018/06/19 13:39:07 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngconf.h": 52.747227ms
2018/06/19 13:39:07 Couldn't classify license(s)
2018/06/19 13:39:08 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngtrans.c
2018/06/19 13:39:08 detected language: 4
2018/06/19 13:39:08 " pngtrans.c - transforms the data in a row (used by both readers and writers)\n *\n * Last changed in libpng 1.6.33 [September 28, 2017]\n * Copyright (c) 1998-2002,2004,2006-2017 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:39:08 " Turn on BGR-to-RGB mapping "
2018/06/19 13:39:08 " Turn on 16-bit byte swapping "
2018/06/19 13:39:08 " Turn on pixel packing "
2018/06/19 13:39:08 " Turn on packed pixel swapping "
2018/06/19 13:39:08 " Add a filler byte on read, or remove a filler or alpha byte on write.\n * The filler type has changed in v0.95 to allow future 2-byte fillers\n * for 48-bit input data, as well as to avoid problems with some compilers\n * that don't like bytes as parameters.\n "
2018/06/19 13:39:08 " In libpng 1.6 it is possible to determine whether this is a read or write\n    * operation and therefore to do more checking here for a valid call.\n    "
2018/06/19 13:39:08 " On read png_set_filler is always valid, regardless of the base PNG\n          * format, because other transformations can give a format where the\n          * filler code can execute (basically an 8 or 16-bit component RGB or G\n          * format.)\n          *\n          * NOTE: usr_channels is not used by the read code!  (This has led to\n          * confusion in the past.)  The filler is only used in the read code.\n          "
2018/06/19 13:39:08 " not used in the write case "
2018/06/19 13:39:08 " write "
2018/06/19 13:39:08 " On write the usr_channels parameter must be set correctly at the\n          * start to record the number of channels in the app-supplied data.\n          "
2018/06/19 13:39:08 " There simply isn't any code in libpng to strip out bits\n                   * from bytes when the components are less than a byte in\n                   * size!\n                   "
2018/06/19 13:39:08 " Here on success - libpng supports the operation, set the transformation\n    * and the flag to say where the filler channel is.\n    "
2018/06/19 13:39:08 " Added to libpng-1.2.7 "
2018/06/19 13:39:08 " The above may fail to do anything. "
2018/06/19 13:39:08 " Invert monochrome grayscale data \n PRIVATE "
2018/06/19 13:39:08 " This test removed from libpng version 1.0.13 and 1.2.0:\n   *   if (row_info->bit_depth == 1 &&\n   "
2018/06/19 13:39:08 " Swaps byte order on 16-bit depth images \n PRIVATE "
2018/06/19 13:39:08 " Feature added to libpng-1.6.11 for testing purposes, not\n          * enabled by default.\n          "
2018/06/19 13:39:08 " Swaps pixel packing order within bytes \n PRIVATE "
2018/06/19 13:39:08 " PACKSWAP || WRITE_PACKSWAP "
2018/06/19 13:39:08 " Remove a channel - this used to be 'png_do_strip_filler' but it used a\n * somewhat weird combination of flags to determine what to do.  All the calls\n * to png_do_strip_filler are changed in 1.5.2 to call this instead with the\n * correct arguments.\n *\n * The routine isn't general - the channel must be the channel at the start or\n * end (not in the middle) of each pixel.\n "
2018/06/19 13:39:08 " PRIVATE "
2018/06/19 13:39:08 " source pointer \n destination pointer \n One beyond end of row "
2018/06/19 13:39:08 " At the start sp will point to the first byte to copy and dp to where\n    * it is copied to.  ep always points just beyond the end of the row, so\n    * the loop simply copies (channels-1) channels until sp reaches ep.\n    *\n    * at_start:        0 -- convert AG, XG, ARGB, XRGB, AAGG, XXGG, etc.\n    *            nonzero -- convert GA, GX, RGBA, RGBX, GGAA, RRGGBBXX, etc.\n    "
2018/06/19 13:39:08 " GA, GX, XG cases "
2018/06/19 13:39:08 " Skip initial filler "
2018/06/19 13:39:08 " Skip initial channel and, for sp, the filler "
2018/06/19 13:39:08 " For a 1 pixel wide image there is nothing to do "
2018/06/19 13:39:08 " Skip initial filler "
2018/06/19 13:39:08 " Skip initial channel and, for sp, the filler "
2018/06/19 13:39:08 " bad bit depth "
2018/06/19 13:39:08 " Finally fix the color type if it records an alpha channel "
2018/06/19 13:39:08 " RGBA, RGBX, XRGB cases "
2018/06/19 13:39:08 " Skip initial filler "
2018/06/19 13:39:08 " Skip initial channels and, for sp, the filler "
2018/06/19 13:39:08 " Note that the loop adds 3 to dp and 4 to sp each time. "
2018/06/19 13:39:08 " Skip initial filler "
2018/06/19 13:39:08 " Skip initial channels and, for sp, the filler "
2018/06/19 13:39:08 " Copy 6 bytes, skip 2 "
2018/06/19 13:39:08 " bad bit depth "
2018/06/19 13:39:08 " Finally fix the color type if it records an alpha channel "
2018/06/19 13:39:08 " The filler channel has gone already "
2018/06/19 13:39:08 " Fix the rowbytes value. "
2018/06/19 13:39:08 " Swaps red and blue bytes within a pixel \n PRIVATE "
2018/06/19 13:39:08 " READ_BGR || WRITE_BGR "
2018/06/19 13:39:08 " Added at libpng-1.5.10 \n PRIVATE "
2018/06/19 13:39:08 " num_palette can be 0 in MNG files "
2018/06/19 13:39:08 " Calculations moved outside switch in an attempt to stop different\n       * compiler warnings.  'padding' is in *bits* within the last byte, it is\n       * an 'int' because pixel_depth becomes an 'int' in the expression below,\n       * and this calculation is used because it avoids warnings that other\n       * forms produced on either GCC or MSVC.\n       "
2018/06/19 13:39:08 " in this case, all bytes must be 0 so we don't need\n             * to unpack the pixels except for the rightmost one.\n             "
2018/06/19 13:39:08 " CHECK_FOR_INVALID_INDEX "
2018/06/19 13:39:08 " This function returns a pointer to the user_transform_ptr associated with\n * the user transform functions.  The application should free any memory\n * associated with this pointer before png_write_destroy and png_read_destroy\n * are called.\n "
2018/06/19 13:39:08 " See the comments in png.h - this is the sub-image row when reading an\n    * interlaced image.\n    "
2018/06/19 13:39:08 " help the app not to fail silently "
2018/06/19 13:39:08 " invalid "
2018/06/19 13:39:08 " USER_TRANSFORM_INFO \n READ_USER_TRANSFORM || WRITE_USER_TRANSFORM \n READ || WRITE "
2018/06/19 13:39:08 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngtrans.c": 26.990909ms
2018/06/19 13:39:08 Couldn't classify license(s)
2018/06/19 13:39:08 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/powerpc/powerpc_init.c
2018/06/19 13:39:08 detected language: 4
2018/06/19 13:39:08 " powerpc_init.c - POWERPC optimised filter functions\n *\n * Copyright (c) 2017 Glenn Randers-Pehrson\n * Written by Vadim Barkov, 2017.\n * Last changed in libpng 1.6.29 [March 16, 2017]\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:39:08 " Below, after checking __linux__, various non-C90 POSIX 1003.1 functions are\n * called.\n "
2018/06/19 13:39:08 " Do run-time checks \n WARNING: it is strongly recommended that you do not build libpng with\n * run-time checks for CPU features if at all possible.  In the case of the PowerPC\n * VSX instructions there is no processor-specific way of detecting the\n * presence of the required support, therefore run-time detection is extremely\n * OS specific.\n *\n * You may set the macro PNG_POWERPC_VSX_FILE to the file name of file containing\n * a fragment of C source code which defines the png_have_vsx function.  There\n * are a number of implementations in contrib/powerpc-vsx, but the only one that\n * has partial support is contrib/powerpc-vsx/linux.c - a generic Linux\n * implementation which reads /proc/cpufino.\n "
2018/06/19 13:39:08 " for sig_atomic_t "
2018/06/19 13:39:08 " PNG_POWERPC_VSX_FILE "
2018/06/19 13:39:08 " PNG_POWERPC_VSX_FILE \n PNG_POWERPC_VSX_CHECK_SUPPORTED "
2018/06/19 13:39:08 " The switch statement is compiled in for POWERPC_VSX_API, the call to\n    * png_have_vsx is compiled in for POWERPC_VSX_CHECK. If both are defined\n    * the check is only performed if the API has not set the PowerPC option on\n    * or off explicitly. In this case the check controls what happens.\n    "
2018/06/19 13:39:08 " Allow the run-time check to execute if it has been enabled -\n          * thus both API and CHECK can be turned on.  If it isn't supported\n          * this case will fall through to the 'default' below, which just\n          * returns.\n          "
2018/06/19 13:39:08 " PNG_POWERPC_VSX_API_SUPPORTED "
2018/06/19 13:39:08 " not checked "
2018/06/19 13:39:08 " PNG_POWERPC_VSX_CHECK_SUPPORTED "
2018/06/19 13:39:08 " OFF or INVALID "
2018/06/19 13:39:08 " Option turned on "
2018/06/19 13:39:08 " IMPORTANT: any new internal functions used here must be declared using\n    * PNG_INTERNAL_FUNCTION in ../pngpriv.h.  This is required so that the\n    * 'prefix' option to configure works:\n    *\n    *    ./configure --with-libpng-prefix=foobar_\n    *\n    * Verify you have got this right by running the above command, doing a build\n    * and examining pngprefix.h; it must contain a #define for every external\n    * function you add.  (Notice that this happens automatically for the\n    * initialization function.)\n    "
2018/06/19 13:39:08 " PNG_POWERPC_VSX_OPT > 0 \n READ "
2018/06/19 13:39:08 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/powerpc/powerpc_init.c": 14.937923ms
2018/06/19 13:39:08 Couldn't classify license(s)
2018/06/19 13:39:09 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/powerpc/filter_vsx_intrinsics.c
2018/06/19 13:39:09 detected language: 4
2018/06/19 13:39:09 " filter_vsx_intrinsics.c - PowerPC optimised filter functions\n *\n * Copyright (c) 2017 Glenn Randers-Pehrson\n * Written by Vadim Barkov, 2017.\n * Last changed in libpng 1.6.29 [March 16, 2017]\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:39:09 " This code requires -maltivec and -mvsx on the command line: \n intrinsics code from pngpriv.h "
2018/06/19 13:39:09 " Functions in this file look at most 3 pixels (a,b,c) to predict the 4th (d).\n * They're positioned like this:\n *    prev:  c b\n *    row:   a d\n * The Sub filter predicts d=a, Avg d=(a+b)/2, and Paeth predicts d to be\n * whichever of a, b, or c is closest to p=a+b-c.\n * ( this is taken from ../intel/filter_sse2_intrinsics.c )\n "
2018/06/19 13:39:09 " Altivec operations require 16-byte aligned data\n    * but input can be unaligned. So we calculate\n    * unaligned part as usual.\n    "
2018/06/19 13:39:09 " Using SIMD while we can "
2018/06/19 13:39:09 " If byte count of row is not divisible by 16\n       * we will process remaining part as usual\n       "
2018/06/19 13:39:09 " Altivec operations require 16-byte aligned data\n    * but input can be unaligned. So we calculate\n    * unaligned part as usual.\n    "
2018/06/19 13:39:09 " Using SIMD while we can "
2018/06/19 13:39:09 " Altivec operations require 16-byte aligned data\n    * but input can be unaligned. So we calculate\n    * unaligned part as usual.\n    "
2018/06/19 13:39:09 " Using SIMD while we can "
2018/06/19 13:39:09 " Since 16 % bpp = 16 % 3 = 1, last element of array must\n       * be proceeded manually\n       "
2018/06/19 13:39:09 " Altivec operations require 16-byte aligned data\n    * but input can be unaligned. So we calculate\n    * unaligned part as usual.\n    "
2018/06/19 13:39:09 " Using SIMD while we can "
2018/06/19 13:39:09 " Altivec operations require 16-byte aligned data\n   * but input can be unaligned. So we calculate\n   * unaligned part as usual.\n   "
2018/06/19 13:39:09 " Using SIMD while we can "
2018/06/19 13:39:09 " Since 16 % bpp = 16 % 3 = 1, last element of array must\n      * be proceeded manually\n      "
2018/06/19 13:39:09 " Bytewise c ? t : e. "
2018/06/19 13:39:09 " Process the first pixel in the row completely (this is the same as 'up'\n    * because there is only one candidate predictor for the first row).\n    "
2018/06/19 13:39:09 " Process the first pixel in the row completely (this is the same as 'up'\n   * because there is only one candidate predictor for the first row).\n   "
2018/06/19 13:39:09 " Since 16 % bpp = 16 % 3 = 1, last element of array must\n      * be proceeded manually\n      "
2018/06/19 13:39:09 " PNG_POWERPC_VSX_OPT > 0 \n PNG_POWERPC_VSX_IMPLEMENTATION == 1 (intrinsics) \n READ "
2018/06/19 13:39:09 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/powerpc/filter_vsx_intrinsics.c": 16.094502ms
2018/06/19 13:39:09 Couldn't classify license(s)
2018/06/19 13:39:10 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/libpng-manual.txt
2018/06/19 13:39:11 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/libpng-manual.txt": 1.063188332s
2018/06/19 13:39:11 Couldn't classify license(s)
2018/06/19 13:39:12 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/CMakeLists.txt
2018/06/19 13:39:12 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/CMakeLists.txt": 143.956577ms
2018/06/19 13:39:12 Couldn't classify license(s)
2018/06/19 13:39:13 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/config.h.in
2018/06/19 13:39:13 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/config.h.in": 19.479471ms
2018/06/19 13:39:13 Couldn't classify license(s)
2018/06/19 13:39:14 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngnow.png
2018/06/19 13:39:14 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngnow.png": 4.898162ms
2018/06/19 13:39:14 Couldn't classify license(s)
2018/06/19 13:39:15 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/config.sub
2018/06/19 13:39:15 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/config.sub": 139.448455ms
2018/06/19 13:39:16 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngstruct.h
2018/06/19 13:39:16 detected language: 4
2018/06/19 13:39:16 " pngstruct.h - header file for PNG reference library\n *\n * Last changed in libpng 1.6.32 [August 24, 2017]\n * Copyright (c) 1998-2002,2004,2006-2017 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:39:16 " The structure that holds the information to read and write PNG files.\n * The only people who need to care about what is inside of this are the\n * people who will be modifying the library for their own special needs.\n * It should NOT be accessed directly by an application.\n "
2018/06/19 13:39:16 " zlib.h defines the structure z_stream, an instance of which is included\n * in this structure and is required for decompressing the LZ compressed\n * data in PNG files.\n "
2018/06/19 13:39:16 " We must ensure that zlib uses 'const' in declarations. "
2018/06/19 13:39:16 " zlib.h sometimes #defines const to nothing, undo this. "
2018/06/19 13:39:16 " zlib.h has mediocre z_const use before 1.2.6, this stuff is for compatibility\n * with older builds.\n "
2018/06/19 13:39:16 " zlib.h declares a magic type 'uInt' that limits the amount of data that zlib\n * can handle at once.  This type need be no larger than 16 bits (so maximum of\n * 65535), this define allows us to discover how big it is, but limited by the\n * maximuum for png_size_t.  The value can be overriden in a library build\n * (pngusr.h, or set it in CPPFLAGS) and it works to set it to a considerably\n * lower value (e.g. 255 works).  A lower value may help memory usage (slightly)\n * and may even improve performance on some systems (and degrade it on others.)\n "
2018/06/19 13:39:16 " The type of a compression buffer list used by the write code. "
2018/06/19 13:39:16 " actually zbuf_size "
2018/06/19 13:39:16 " Colorspace support; structures used in png_struct, png_info and in internal\n * functions to hold and communicate information about the color space.\n *\n * PNG_COLORSPACE_SUPPORTED is only required if the application will perform\n * colorspace corrections, otherwise all the colorspace information can be\n * skipped and the size of libpng can be reduced (significantly) by compiling\n * out the colorspace support.\n "
2018/06/19 13:39:16 " The chromaticities of the red, green and blue colorants and the chromaticity\n * of the corresponding white point (i.e. of rgb(1.0,1.0,1.0)).\n "
2018/06/19 13:39:16 " The same data as above but encoded as CIE XYZ values.  When this data comes\n * from chromaticities the sum of the Y values is assumed to be 1.0\n "
2018/06/19 13:39:16 " COLORSPACE "
2018/06/19 13:39:16 " A colorspace is all the above plus, potentially, profile information;\n * however at present libpng does not use the profile internally so it is only\n * stored in the png_info struct (if iCCP is supported.)  The rendering intent\n * is retained here and is checked.\n *\n * The file gamma encoding information is also stored here and gamma correction\n * is done by libpng, whereas color correction must currently be done by the\n * application.\n "
2018/06/19 13:39:16 " File gamma "
2018/06/19 13:39:16 " End points as chromaticities \n End points as CIE XYZ colorant values \n Rendering intent of a profile "
2018/06/19 13:39:16 " Flags are always defined to simplify the code. \n As defined below "
2018/06/19 13:39:16 " General flags for the 'flags' field "
2018/06/19 13:39:16 " exact match on profile "
2018/06/19 13:39:16 " COLORSPACE || GAMMA "
2018/06/19 13:39:16 " New name in 1.6.0 for jmp_buf in png_struct \n setjmp non-local goto function. \n passed to longjmp_fn \n size of the above, if allocated "
2018/06/19 13:39:16 " function for printing errors and aborting "
2018/06/19 13:39:16 " function for printing warnings "
2018/06/19 13:39:16 " user supplied struct for error functions \n function for writing output data \n function for reading input data \n ptr to application struct for I/O functions "
2018/06/19 13:39:16 " user read transform "
2018/06/19 13:39:16 " user write transform "
2018/06/19 13:39:16 " These were added in libpng-1.0.2 "
2018/06/19 13:39:16 " user supplied struct for user transform \n bit depth of user transformed pixels \n channels in user transformed pixels "
2018/06/19 13:39:16 " tells us where we are in the PNG file \n flags indicating various things to libpng \n which transformations to perform "
2018/06/19 13:39:16 " ID (chunk type) of zstream owner, 0 if none \n decompression structure "
2018/06/19 13:39:16 " Created on demand during write \n size of the actual buffer "
2018/06/19 13:39:16 " holds zlib compression level \n holds zlib compression method \n holds zlib compression window bits \n holds zlib compression memory level \n holds zlib compression strategy "
2018/06/19 13:39:16 " Added at libpng 1.5.4 "
2018/06/19 13:39:16 " holds zlib compression level \n holds zlib compression method \n holds zlib compression window bits \n holds zlib compression memory level \n holds zlib compression strategy "
2018/06/19 13:39:16 " End of material added at libpng 1.5.4 \n Added at libpng 1.6.0 "
2018/06/19 13:39:16 " Actual values set into the zstream on write "
2018/06/19 13:39:16 " width of image in pixels \n height of image in pixels \n number of rows in current pass \n width of row at start of write \n size of row in bytes \n width of current interlaced row in pixels \n current row in interlace pass \n PNG_CHUNK() id of current chunk \n buffer to save previous (unfiltered) row.\n                               * While reading this is a pointer into\n                               * big_prev_row; while writing it is separately\n                               * allocated if needed.\n                               "
2018/06/19 13:39:16 " buffer to save current (unfiltered) row.\n                               * While reading, this is a pointer into\n                               * big_row_buf; while writing it is separately\n                               * allocated.\n                               "
2018/06/19 13:39:16 " buffer to save trial row when filtering \n buffer to save best trial row when filtering "
2018/06/19 13:39:16 " Added in 1.5.4: cache of updated row bytes "
2018/06/19 13:39:16 " current IDAT size for read \n current chunk CRC value \n palette from the input file \n number of color entries in palette "
2018/06/19 13:39:16 " Added at libpng-1.5.10 "
2018/06/19 13:39:16 " maximum palette index found in IDAT "
2018/06/19 13:39:16 " number of transparency values \n file compression type (always 0) \n file filter type (always 0) \n PNG_INTERLACE_NONE, PNG_INTERLACE_ADAM7 \n current interlace pass (0 - 6) \n row filter flags (see PNG_FILTER_ in png.h ) \n color type of file \n bit depth of file \n bit depth of users row: write only \n number of bits per pixel \n number of channels in file "
2018/06/19 13:39:16 " channels at start of write: write only "
2018/06/19 13:39:16 " magic bytes read/written from start of file "
2018/06/19 13:39:16 " pixel depth used for the row buffers "
2018/06/19 13:39:16 " pixel depth after read/write transforms "
2018/06/19 13:39:16 " at start of an input zlib stream \n Zlib >= 1.2.4 "
2018/06/19 13:39:16 " filler bytes for pixel expansion "
2018/06/19 13:39:16 " background color in screen gamma space "
2018/06/19 13:39:16 " background normalized to gamma 1.0 "
2018/06/19 13:39:16 " bKGD "
2018/06/19 13:39:16 " Function for flushing output \n how many rows apart to flush, 0 - no flush \n number of rows written since last flush "
2018/06/19 13:39:16 " number of \"insignificant\" bits in 16-bit gamma \n screen gamma value (display_exponent) "
2018/06/19 13:39:16 " gamma table for 8-bit depth files \n gamma table for 16-bit depth files "
2018/06/19 13:39:16 " converts from 1.0 to screen \n converts from file to 1.0 \n converts from 1.0 to screen \n converts from file to 1.0 \n READ_BACKGROUND || READ_ALPHA_MODE || RGB_TO_GRAY "
2018/06/19 13:39:16 " significant bits in each available channel "
2018/06/19 13:39:16 " shift for significant bit tranformation "
2018/06/19 13:39:16 " alpha values for paletted files \n transparent color for non-paletted files "
2018/06/19 13:39:16 " called after each row is decoded \n called after each row is encoded "
2018/06/19 13:39:16 " called after header data fully read \n called after a prog. row is decoded \n called after image is complete \n current location in save_buffer \n buffer for previously read data \n current location in current_buffer \n buffer for recently used data \n size of current input chunk \n bytes to skip in input data \n amount of data now in save_buffer \n total size of save_buffer \n total amount of available input data \n amount of data now in current_buffer \n what push library is currently doing \n current push library palette index "
2018/06/19 13:39:16 " PROGRESSIVE_READ "
2018/06/19 13:39:16 " For the Borland special 64K segment handler "
2018/06/19 13:39:16 " lookup table for quantizing \n index translation for palette files "
2018/06/19 13:39:16 " Options "
2018/06/19 13:39:16 " On/off state (up to 16 options) "
2018/06/19 13:39:16 " To do: remove this from libpng-1.7 "
2018/06/19 13:39:16 " String to hold RFC 1123 time text "
2018/06/19 13:39:16 " New members added in libpng-1.0.6 "
2018/06/19 13:39:16 " flags items libpng is responsible for freeing "
2018/06/19 13:39:16 " user read chunk handler "
2018/06/19 13:39:16 " As PNG_HANDLE_* \n Number of entries in the list \n List of png_byte[5]; the textual chunk name\n                                  * followed by a PNG_HANDLE_* byte "
2018/06/19 13:39:16 " New members added in libpng-1.0.3 "
2018/06/19 13:39:16 " Added in libpng 1.5.5 to record setting of coefficients: "
2018/06/19 13:39:16 " These were changed from png_byte in libpng-1.0.6 "
2018/06/19 13:39:16 " deleted in 1.5.5: rgb_to_gray_blue_coeff; "
2018/06/19 13:39:16 " New member added in libpng-1.0.4 (renamed in 1.0.9) "
2018/06/19 13:39:16 " Changed from png_byte to png_uint_32 at version 1.2.0 "
2018/06/19 13:39:16 " New member added in libpng-1.0.9, ifdef'ed out in 1.0.12, enabled in 1.2.0 "
2018/06/19 13:39:16 " New members added in libpng-1.2.0 "
2018/06/19 13:39:16 " New members added in libpng-1.0.2 but first enabled by default in 1.2.0 "
2018/06/19 13:39:16 " user supplied struct for mem functions \n function for allocating memory \n function for freeing memory "
2018/06/19 13:39:16 " New member added in libpng-1.0.13 and 1.2.0 \n buffer to save current (unfiltered) row "
2018/06/19 13:39:16 " The following three members were added at version 1.0.14 and 1.2.4 \n working sort array \n where the original index currently is\n                                        in the palette "
2018/06/19 13:39:16 " which original index points to this\n                                         palette color "
2018/06/19 13:39:16 " New members added in libpng-1.0.16 and 1.2.6 "
2018/06/19 13:39:16 " Added in libpng-1.4.0: Total number of sPLT, text, and unknown\n    * chunks that can be stored (0 means unlimited).\n    "
2018/06/19 13:39:16 " Total memory that a zTXt, sPLT, iTXt, iCCP, or unknown chunk\n    * can occupy when decompressed.  0 means unlimited.\n    "
2018/06/19 13:39:16 " New member added in libpng-1.0.25 and 1.2.17 "
2018/06/19 13:39:16 " Temporary storage for unknown chunk that the library doesn't recognize,\n    * used while reading the chunk.\n    "
2018/06/19 13:39:16 " New member added in libpng-1.2.26 "
2018/06/19 13:39:16 " New member added in libpng-1.2.30 \n buffer for reading chunk data \n current size of the buffer "
2018/06/19 13:39:16 " limit on read buffer size for IDAT "
2018/06/19 13:39:16 " New member added in libpng-1.4.0 "
2018/06/19 13:39:16 " New member added in libpng-1.5.6 "
2018/06/19 13:39:16 " New member added in libpng-1.5.7 "
2018/06/19 13:39:16 " PNGSTRUCT_H "
2018/06/19 13:39:16 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngstruct.h": 39.199623ms
2018/06/19 13:39:16 Couldn't classify license(s)
2018/06/19 13:39:17 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/missing
2018/06/19 13:39:17 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/missing": 26.51554ms
2018/06/19 13:39:18 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngget.c
2018/06/19 13:39:18 detected language: 4
2018/06/19 13:39:18 " pngget.c - retrieval of values from info struct\n *\n * Last changed in libpng 1.6.32 [August 24, 2017]\n * Copyright (c) 1998-2002,2004,2006-2017 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n "
2018/06/19 13:39:18 " Easy access to info, added in libpng-0.99 "
2018/06/19 13:39:18 " The following casts work because a PNG 4 byte integer only has a valid\n       * range of 0..2^31-1; otherwise the cast might overflow.\n       "
2018/06/19 13:39:18 " The conversion is *(2.54/100), in binary (32 digits):\n    * .00000110100000001001110101001001\n    "
2018/06/19 13:39:18 " .1 \n .1001 \n .1101 \n .000000000000000000001 \n .1101000000000001101 \n .000000000001001 \n .000000000001001000000001001 \n .000000000001001000001001001 \n .110100000001001110101001001 \n .00000110100000001001110101001001 "
2018/06/19 13:39:18 " The argument is a PNG unsigned integer, so it is not permitted\n    * to be bigger than 2^31.\n    "
2018/06/19 13:39:18 " Overflow. "
2018/06/19 13:39:18 " Convert from metres * 1,000,000 to inches * 100,000, meters to\n    * inches is simply *(100/2.54), so we want *(10/2.54) == 500/127.\n    * Notice that this can overflow - a warning is output and 0 is\n    * returned.\n    "
2018/06/19 13:39:18 " To avoid the overflow do the conversion directly in floating\n    * point.\n    "
2018/06/19 13:39:18 " To avoid the overflow do the conversion directly in floating\n    * point.\n    "
2018/06/19 13:39:18 " pHYs \n INCH_CONVERSIONS "
2018/06/19 13:39:18 " png_get_channels really belongs in here, too, but it's been around longer "
2018/06/19 13:39:18 " EASY_ACCESS "
2018/06/19 13:39:18 " The XYZ APIs were added in 1.5.5 to take advantage of the code added at the\n * same time to correct the rgb grayscale coefficient defaults obtained from the\n * cHRM chunk in 1.5.4\n "
2018/06/19 13:39:18 " Quiet API change: this code used to only return the end points if a cHRM\n    * chunk was present, but the end points can also come from iCCP or sRGB\n    * chunks, so in 1.6.0 the png_get_ APIs return the end points regardless and\n    * the png_set_ APIs merely check that set end points are mutually\n    * consistent.\n    "
2018/06/19 13:39:18 " This is somewhat irrelevant since the profile data returned has\n       * actually been uncompressed.\n       "
2018/06/19 13:39:18 " This is redundant if we can be sure that the info_ptr values were all\n    * assigned in png_set_IHDR().  We do the check anyhow in case an\n    * application has ignored our advice not to mess with the members\n    * of info_ptr directly.\n    "
2018/06/19 13:39:18 "TODO: make this work without FP support; the API is currently eliminated\n       * if neither floating point APIs nor internal floating point arithmetic\n       * are enabled.\n       "
2018/06/19 13:39:18 " FLOATING_ARITHMETIC \n FIXED_POINT "
2018/06/19 13:39:18 " FLOATING POINT "
2018/06/19 13:39:18 " sCAL "
2018/06/19 13:39:18 " pHYs "
2018/06/19 13:39:18 " if (info_ptr->color_type != PNG_COLOR_TYPE_PALETTE) "
2018/06/19 13:39:18 " These functions were added to libpng 1.2.6 and were enabled\n * by default in libpng-1.4.0 "
2018/06/19 13:39:18 " This function was added to libpng 1.4.0 "
2018/06/19 13:39:18 " This function was added to libpng 1.4.1 "
2018/06/19 13:39:18 " SET_USER_LIMITS "
2018/06/19 13:39:18 " These functions were added to libpng 1.4.0 "
2018/06/19 13:39:18 " IO_STATE "
2018/06/19 13:39:18 " READ || WRITE "
2018/06/19 13:39:18 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngget.c": 27.364426ms
2018/06/19 13:39:18 Couldn't classify license(s)
2018/06/19 13:39:19 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngwrite.c
2018/06/19 13:39:19 detected language: 4
2018/06/19 13:39:19 " pngwrite.c - general routines to write a PNG file\n *\n * Last changed in libpng 1.6.32 [August 24, 2017]\n * Copyright (c) 1998-2002,2004,2006-2017 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:39:19 " SIMPLIFIED_WRITE_STDIO "
2018/06/19 13:39:19 " Write out all the unknown chunks for the current given location "
2018/06/19 13:39:19 " If per-chunk unknown chunk handling is enabled use it, otherwise\n          * just write the chunks the application has set.\n          "
2018/06/19 13:39:19 " NOTE: this code is radically different from the read side in the\n          * matter of handling an ancillary unknown chunk.  In the read side\n          * the default behavior is to discard it, in the code below the default\n          * behavior is to write it.  Critical chunks are, however, only\n          * written if explicitly listed or if the default is set to write all\n          * unknown chunks.\n          *\n          * The default handling is also slightly weird - it is not possible to\n          * stop the writing of all unsafe-to-copy chunks!\n          *\n          * TODO: REVIEW: this would seem to be a bug.\n          "
2018/06/19 13:39:19 " safe-to-copy overrides everything "
2018/06/19 13:39:19 " TODO: review, what is wrong with a zero length unknown chunk? "
2018/06/19 13:39:19 " WRITE_UNKNOWN_CHUNKS "
2018/06/19 13:39:19 " Writes all the PNG information.  This is the suggested way to use the\n * library.  If you have a new chunk to add, make a function to write it,\n * and put it in the correct location here.  If you want the chunk written\n * after the image data, put it in png_write_end().  I strongly encourage\n * you to supply a PNG_INFO_ flag, and check info_ptr->valid before writing\n * the chunk, as that will keep the code from breaking if you want to just\n * write a plain PNG file.  If you have long comments, I suggest writing\n * them in png_write_end(), and compressing them.\n "
2018/06/19 13:39:19 " Write PNG signature "
2018/06/19 13:39:19 " Write IHDR information. "
2018/06/19 13:39:19 " The rest of these check to see if the valid field has the appropriate\n       * flag set, and if it does, writes the chunk.\n       *\n       * 1.6.0: COLORSPACE support controls the writing of these chunks too, and\n       * the chunks will be written if the WRITE routine is there and\n       * information * is available in the COLORSPACE. (See\n       * png_colorspace_sync_info in png.c for where the valid flags get set.)\n       *\n       * Under certain circumstances the colorspace can be invalidated without\n       * syncing the info_struct 'valid' flags; this happens if libpng detects\n       * an error and calls png_error while the color space is being set, yet\n       * the application continues writing the PNG.  So check the 'invalid'\n       * flag here too.\n       "
2018/06/19 13:39:19 " Write only one of sRGB or an ICC profile.  If a profile was supplied\n       * and it matches one of the known sRGB ones issue a warning.\n       "
2018/06/19 13:39:19 " WRITE_sRGB \n COLORSPACE "
2018/06/19 13:39:19 " Invert the alpha channel (in tRNS) "
2018/06/19 13:39:19 " sCAL "
2018/06/19 13:39:19 " pHYs "
2018/06/19 13:39:19 " tIME "
2018/06/19 13:39:19 " sPLT "
2018/06/19 13:39:19 " Check to see if we need to write text chunks "
2018/06/19 13:39:19 " An internationalized chunk? "
2018/06/19 13:39:19 " Write international chunk "
2018/06/19 13:39:19 " Mark this chunk as written "
2018/06/19 13:39:19 " If we want a compressed text chunk "
2018/06/19 13:39:19 " Write compressed chunk "
2018/06/19 13:39:19 " Mark this chunk as written "
2018/06/19 13:39:19 " Write uncompressed chunk "
2018/06/19 13:39:19 " Mark this chunk as written "
2018/06/19 13:39:19 " Can't get here "
2018/06/19 13:39:19 " tEXt "
2018/06/19 13:39:19 " Writes the end of the PNG file.  If you don't want to write comments or\n * time information, you can pass NULL for info.  If you already wrote these\n * in png_write_info(), do not write them again here.  If you have long\n * comments, I suggest writing them here, and compressing them.\n "
2018/06/19 13:39:19 " See if user wants us to write information chunks "
2018/06/19 13:39:19 " local index variable "
2018/06/19 13:39:19 " Check to see if user has supplied a time chunk "
2018/06/19 13:39:19 " Loop through comment chunks "
2018/06/19 13:39:19 " An internationalized chunk? "
2018/06/19 13:39:19 " Write international chunk "
2018/06/19 13:39:19 " Mark this chunk as written "
2018/06/19 13:39:19 " Write compressed chunk "
2018/06/19 13:39:19 " Mark this chunk as written "
2018/06/19 13:39:19 " Write uncompressed chunk "
2018/06/19 13:39:19 " Mark this chunk as written "
2018/06/19 13:39:19 " Write end of PNG file "
2018/06/19 13:39:19 " This flush, added in libpng-1.0.8, removed from libpng-1.0.9beta03,\n    * and restored again in libpng-1.2.30, may cause some applications that\n    * do not set png_ptr->output_flush_fn to crash.  If your application\n    * experiences a problem, please try building libpng with\n    * PNG_WRITE_FLUSH_AFTER_IEND_SUPPORTED defined, and report the event to\n    * png-mng-implement at lists.sf.net .\n    "
2018/06/19 13:39:19 " Initialize png_ptr structure, and allocate any memory needed "
2018/06/19 13:39:19 " Alternate initialize png_ptr structure, and allocate any memory needed "
2018/06/19 13:39:19 " USER_MEM "
2018/06/19 13:39:19 " Set the zlib control values to defaults; they can be overridden by the\n       * application after the struct has been created.\n       "
2018/06/19 13:39:19 " The 'zlib_strategy' setting is irrelevant because png_default_claim in\n       * pngwutil.c defaults it according to whether or not filters will be\n       * used, and ignores this setting.\n       "
2018/06/19 13:39:19 " WRITE_COMPRESSED_TEXT "
2018/06/19 13:39:19 " This is a highly dubious configuration option; by default it is off,\n       * but it may be appropriate for private builds that are testing\n       * extensions not conformant to the current specification, or of\n       * applications that must not fail to write at all costs!\n       "
2018/06/19 13:39:19 " In stable builds only warn if an application error can be completely\n       * handled.\n       "
2018/06/19 13:39:19 " App warnings are warnings in release (or release candidate) builds but\n       * are errors during development.\n       "
2018/06/19 13:39:19 " TODO: delay this, it can be done in png_init_io() (if the app doesn't\n       * do it itself) avoiding setting the default function if it is not\n       * required.\n       "
2018/06/19 13:39:19 " Write a few rows of image data.  If the image is interlaced,\n * either you will have to write the 7 sub images, or, if you\n * have called png_set_interlace_handling(), you will have to\n * \"write\" the image seven times.\n "
2018/06/19 13:39:19 " row counter \n row pointer "
2018/06/19 13:39:19 " Loop through the rows "
2018/06/19 13:39:19 " Write the image.  You only need to call this function once, even\n * if you are writing an interlaced image.\n "
2018/06/19 13:39:19 " row index \n pass variables \n points to current row "
2018/06/19 13:39:19 " Initialize interlace handling.  If image is not interlaced,\n    * this will set pass to 1\n    "
2018/06/19 13:39:19 " Loop through passes "
2018/06/19 13:39:19 " Loop through image "
2018/06/19 13:39:19 " Performs intrapixel differencing  "
2018/06/19 13:39:19 " WRITE_16BIT "
2018/06/19 13:39:19 " MNG_FEATURES "
2018/06/19 13:39:19 " Called by user to write a row of image data "
2018/06/19 13:39:19 " 1.5.6: moved from png_struct to be a local structure: "
2018/06/19 13:39:19 " Initialize transformations and other stuff if first time "
2018/06/19 13:39:19 " Make sure we wrote the header info "
2018/06/19 13:39:19 " Check for transforms that have been set but were defined out "
2018/06/19 13:39:19 " If interlaced and not interested in row, return "
2018/06/19 13:39:19 " error: ignore it "
2018/06/19 13:39:19 " Set up row info for transformations "
2018/06/19 13:39:19 " Copy user's row into buffer, leaving room for filter byte. "
2018/06/19 13:39:19 " Handle interlacing "
2018/06/19 13:39:19 " This should always get caught above, but still ... "
2018/06/19 13:39:19 " Handle other transformations "
2018/06/19 13:39:19 " At this point the row_info pixel depth must match the 'transformed' depth,\n    * which is also the output depth.\n    "
2018/06/19 13:39:19 " Write filter_method 64 (intrapixel differencing) only if\n    * 1. Libpng was compiled with PNG_MNG_FEATURES_SUPPORTED and\n    * 2. Libpng did not write a PNG signature (this filter_method is only\n    *    used in PNG datastreams that are embedded in MNG datastreams) and\n    * 3. The application called png_permit_mng_features with a mask that\n    *    included PNG_FLAG_MNG_FILTER_64 and\n    * 4. The filter_method is 64 and\n    * 5. The color_type is RGB or RGBA\n    "
2018/06/19 13:39:19 " Intrapixel differencing "
2018/06/19 13:39:19 " Added at libpng-1.5.10 "
2018/06/19 13:39:19 " Check for out-of-range palette index "
2018/06/19 13:39:19 " Find a filter if necessary, filter the row and write it out. "
2018/06/19 13:39:19 " Set the automatic flush interval or 0 to turn flushing off "
2018/06/19 13:39:19 " Flush the current output buffers now "
2018/06/19 13:39:19 " We have already written out all of the data "
2018/06/19 13:39:19 " WRITE_FLUSH "
2018/06/19 13:39:19 " Free any memory used in png_ptr struct without freeing the struct itself. "
2018/06/19 13:39:19 " Free any memory zlib uses "
2018/06/19 13:39:19 " Free our memory.  png_free checks NULL for us. "
2018/06/19 13:39:19 " The error handling and memory handling information is left intact at this\n    * point: the jmp_buf may still have to be freed.  See png_destroy_png_struct\n    * for how this happens.\n    "
2018/06/19 13:39:19 " Free all memory used by the write.\n * In libpng 1.6.0 this API changed quietly to no longer accept a NULL value for\n * *png_ptr_ptr.  Prior to 1.6.0 it would accept such a value and it would free\n * the passed in info_structs but it would quietly fail to free any of the data\n * inside them.  In 1.6.0 it quietly does nothing (it has to be quiet because it\n * has no png_ptr.)\n "
2018/06/19 13:39:19 " added in libpng 1.6.0 "
2018/06/19 13:39:19 " Allow the application to select one or more row filters to use. "
2018/06/19 13:39:19 " WRITE_FILTER \n FALLTHROUGH "
2018/06/19 13:39:19 " WRITE_FILTER "
2018/06/19 13:39:19 " If we have allocated the row_buf, this means we have already started\n       * with the image and we should have allocated all of the filter buffers\n       * that have been selected.  If prev_row isn't already allocated, then\n       * it is too late to start using the filters that need it, since we\n       * will be missing the data in the previous row.  If an application\n       * wants to start and stop using particular filters during compression,\n       * it should start out with all of the filters, and then remove them\n       * or add them back after the start of compression.\n       *\n       * NOTE: this is a nasty constraint on the code, because it means that the\n       * prev_row buffer must be maintained even if there are currently no\n       * 'prev_row' requiring filters active.\n       "
2018/06/19 13:39:19 " Repeat the checks in png_write_start_row; 1 pixel high or wide\n          * images cannot benefit from certain filters.  If this isn't done here\n          * the check below will fire on 1 pixel high images.\n          "
2018/06/19 13:39:19 " This is the error case, however it is benign - the previous row\n             * is not available so the filter can't be used.  Just warn here.\n             "
2018/06/19 13:39:19 " Allocate needed row buffers if they have not already been\n          * allocated.\n          "
2018/06/19 13:39:19 " DEPRECATED \n Provide floating and fixed point APIs "
2018/06/19 13:39:19 " FLOATING_POINT "
2018/06/19 13:39:19 " FIXED_POINT \n WRITE_WEIGHTED_FILTER "
2018/06/19 13:39:19 " The flag setting here prevents the libpng dynamic selection of strategy.\n    "
2018/06/19 13:39:19 " If PNG_WRITE_OPTIMIZE_CMF_SUPPORTED is defined, libpng will use a\n * smaller value of window_bits if it can do so safely.\n "
2018/06/19 13:39:19 " Prior to 1.6.0 this would warn but then set the window_bits value. This\n    * meant that negative window bits values could be selected that would cause\n    * libpng to write a non-standard PNG file with raw deflate or gzip\n    * compressed IDAT or ancillary chunks.  Such files can be read and there is\n    * no warning on read, so this seems like a very bad idea.\n    "
2018/06/19 13:39:19 " This would produce an invalid PNG file if it worked, but it doesn't and\n    * deflate will fault it, so it is harmless to just warn here.\n    "
2018/06/19 13:39:19 " WRITE_CUSTOMIZE_COMPRESSION "
2018/06/19 13:39:19 " The following were added to libpng-1.5.4 "
2018/06/19 13:39:19 " If PNG_WRITE_OPTIMIZE_CMF_SUPPORTED is defined, libpng will use a\n * smaller value of window_bits if it can do so safely.\n "
2018/06/19 13:39:19 " WRITE_CUSTOMIZE_ZTXT_COMPRESSION \n end of API added to libpng-1.5.4 "
2018/06/19 13:39:19 " Write the file header information. "
2018/06/19 13:39:19 " ------ these transformations don't touch the info structure ------- "
2018/06/19 13:39:19 " Invert monochrome pixels "
2018/06/19 13:39:19 " Shift the pixels up to a legal bit depth and fill in\n    * as appropriate to correctly scale the image.\n    "
2018/06/19 13:39:19 " Pack pixels into bytes "
2018/06/19 13:39:19 " Swap location of alpha bytes from ARGB to RGBA "
2018/06/19 13:39:19 " Remove a filler (X) from XRGB/RGBX/AG/GA into to convert it into\n    * RGB, note that the code expects the input color type to be G or RGB; no\n    * alpha channel.\n    "
2018/06/19 13:39:19 " Continue if ignored - this is the pre-1.6.10 behavior "
2018/06/19 13:39:19 " Flip BGR pixels to RGB "
2018/06/19 13:39:19 " Swap bytes of 16-bit files to most significant byte first "
2018/06/19 13:39:19 " Swap bits of 1-bit, 2-bit, 4-bit packed pixel formats "
2018/06/19 13:39:19 " Invert the alpha channel from opacity to transparency "
2018/06/19 13:39:19 " ----------------------- end of transformations ------------------- "
2018/06/19 13:39:19 " Write the bits "
2018/06/19 13:39:19 " It is REQUIRED to call this to finish writing the rest of the file "
2018/06/19 13:39:19 " Initialize the write structure - general purpose utility. "
2018/06/19 13:39:19 " Error clean up "
2018/06/19 13:39:19 " Arguments to png_image_write_main: "
2018/06/19 13:39:19 " Arguments: "
2018/06/19 13:39:19 " Local variables: "
2018/06/19 13:39:19 " Byte count for memory writing "
2018/06/19 13:39:19 " not used for STDIO \n running total "
2018/06/19 13:39:19 " Write png_uint_16 input to a 16-bit PNG; the png_ptr has already been set to\n * do any necessary byte swapping.  The component order is defined by the\n * png_image format value.\n "
2018/06/19 13:39:19 " To point to the first component "
2018/06/19 13:39:19 " Work out the output row end and count over this, note that the increment\n    * above to 'row' means that row_end can actually be beyond the end of the\n    * row; this is correct.\n    "
2018/06/19 13:39:19 " Calculate a reciprocal.  The correct calculation is simply\n          * component/alpha*65535 << 15. (I.e. 15 bits of precision); this\n          * allows correct rounding by adding .5 before the shift.  'reciprocal'\n          * is only initialized when required.\n          "
2018/06/19 13:39:19 " always at least one channel "
2018/06/19 13:39:19 " The following gives 65535 for an alpha of 0, which is fine,\n             * otherwise if 0/0 is represented as some other value there is more\n             * likely to be a discontinuity which will probably damage\n             * compression when moving from a fully transparent area to a\n             * nearly transparent one.  (The assumption here is that opaque\n             * areas tend not to be 0 intensity.)\n             "
2018/06/19 13:39:19 " component<alpha, so component/alpha is less than one and\n             * component*reciprocal is less than 2^31.\n             "
2018/06/19 13:39:19 " round to nearest "
2018/06/19 13:39:19 " Skip to next component (skip the intervening alpha channel) "
2018/06/19 13:39:19 " Given 16-bit input (1 to 4 channels) write 8-bit output.  If an alpha channel\n * is present it must be removed from the components, the components are then\n * written in sRGB encoding.  No components are added or removed.\n *\n * Calculate an alpha reciprocal to reverse pre-multiplication.  As above the\n * calculation can be done to 15 bits of accuracy; however, the output needs to\n * be scaled in the range 0..255*65535, so include that scaling here.\n "
2018/06/19 13:39:19 "from the above macro"
2018/06/19 13:39:19 " The following gives 1.0 for an alpha of 0, which is fine, otherwise if 0/0\n    * is represented as some other value there is more likely to be a\n    * discontinuity which will probably damage compression when moving from a\n    * fully transparent area to a nearly transparent one.  (The assumption here\n    * is that opaque areas tend not to be 0 intensity.)\n    *\n    * There is a rounding problem here; if alpha is less than 128 it will end up\n    * as 0 when scaled to 8 bits.  To avoid introducing spurious colors into the\n    * output change for this too.\n    "
2018/06/19 13:39:19 " component<alpha, so component/alpha is less than one and\n    * component*reciprocal is less than 2^31.\n    "
2018/06/19 13:39:19 " The test is that alpha/257 (rounded) is less than 255, the first value\n       * that becomes 255 is 65407.\n       * NOTE: this must agree with the PNG_DIV257 macro (which must, therefore,\n       * be exact!)  [Could also test reciprocal != 0]\n       "
2018/06/19 13:39:19 " round to nearest "
2018/06/19 13:39:19 " Convert the component to sRGB. "
2018/06/19 13:39:19 " To point to the first component "
2018/06/19 13:39:19 " Use row_end in place of a loop counter: "
2018/06/19 13:39:19 " Scale and write the alpha channel. "
2018/06/19 13:39:19 " always at least one channel "
2018/06/19 13:39:19 " Skip to next component (skip the intervening alpha channel) "
2018/06/19 13:39:19 " while out_ptr < row_end "
2018/06/19 13:39:19 " while y "
2018/06/19 13:39:19 " No alpha channel, so the row_end really is the end of the row and it\n       * is sufficient to loop over the components one by one.\n       "
2018/06/19 13:39:19 " NOTE: the caller must check for cmap != NULL and entries != 0 "
2018/06/19 13:39:19 " This gets automatically converted to sRGB with reversal of the\n       * pre-multiplication if the color-map has an alpha channel.\n       "
2018/06/19 13:39:19 " no alpha "
2018/06/19 13:39:19 " RGB "
2018/06/19 13:39:19 " Gray "
2018/06/19 13:39:19 " alpha "
2018/06/19 13:39:19 " Calculate a reciprocal, as in the png_write_image_8bit code above\n             * this is designed to produce a value scaled to 255*65535 when\n             * divided by 128 (i.e. asr 7).\n             "
2018/06/19 13:39:19 " RGB "
2018/06/19 13:39:19 " gray "
2018/06/19 13:39:19 " Color-map has sRGB values "
2018/06/19 13:39:19 " FALLTHROUGH "
2018/06/19 13:39:19 " FALLTHROUGH "
2018/06/19 13:39:19 " The following four ints are actually booleans "
2018/06/19 13:39:19 " input "
2018/06/19 13:39:19 " Make sure we error out on any bad situation \nerror"
2018/06/19 13:39:19 " Default the 'row_stride' parameter if required, also check the row stride\n    * and total image size to ensure that they are within the system limits.\n    "
2018/06/19 13:39:19 " no overflow "
2018/06/19 13:39:19 "SAFE"
2018/06/19 13:39:19 " Now check for overflow of the image buffer calculation; this\n             * limits the whole image size to 32 bits for API compatibility with\n             * the current, 32-bit, PNG_IMAGE_BUFFER_SIZE macro.\n             "
2018/06/19 13:39:19 " Set the required transforms then write the rows in the correct order. "
2018/06/19 13:39:19 " Counter-intuitively the data transformations must be called *after*\n    * png_write_info, not before as in the read code, but the 'set' functions\n    * must still be called before.  Just set the color space information, never\n    * write an interlaced image.\n    "
2018/06/19 13:39:19 " The gamma here is 1.0 (linear) and the cHRM chunk matches sRGB. "
2018/06/19 13:39:19 " color      x       y \n white \n red   \n green \n blue  "
2018/06/19 13:39:19 " Else writing an 8-bit file and the *colors* aren't sRGB, but the 8-bit\n    * space must still be gamma encoded.\n    "
2018/06/19 13:39:19 " Write the file header. "
2018/06/19 13:39:19 " Now set up the data transformations (*after* the header is written),\n    * remove the handled transformations from the 'format' flags for checking.\n    *\n    * First check for a little endian system if writing 16-bit files.\n    "
2018/06/19 13:39:19 " If there are 16 or fewer color-map entries we wrote a lower bit depth\n    * above, but the application data is still byte packed.\n    "
2018/06/19 13:39:19 " That should have handled all (both) the transforms. "
2018/06/19 13:39:19 " Apply 'fast' options if the flag is set. "
2018/06/19 13:39:19 " NOTE: determined by experiment using pngstest, this reflects some\n       * balance between the time to write the image once and the time to read\n       * it about 50 times.  The speed-up in pngstest was about 10-20% of the\n       * total (user) time on a heavily loaded system.\n       "
2018/06/19 13:39:19 " Check for the cases that currently require a pre-transform on the row\n    * before it is written.  This only applies when the input is 16-bit and\n    * either there is an alpha channel or it is converted to 8-bit.\n    "
2018/06/19 13:39:19 " Skip the 'write_end' on error: "
2018/06/19 13:39:19 " Otherwise this is the case where the input is in a format currently\n    * supported by the rest of the libpng write code; call it directly.\n    "
2018/06/19 13:39:19 "const"
2018/06/19 13:39:19 "backdoor: png_get_io_ptr(png_ptr)"
2018/06/19 13:39:19 " Check for overflow; this should never happen: "
2018/06/19 13:39:19 " I don't think libpng ever does this, but just in case: "
2018/06/19 13:39:19 " writing "
2018/06/19 13:39:19 " Always update the size: "
2018/06/19 13:39:19 " The rest of the memory-specific init and write_main in an error protected\n    * environment.  This case needs to use callbacks for the write operations\n    * since libpng has no built in support for writing to memory.\n    "
2018/06/19 13:39:19 "io_ptr"
2018/06/19 13:39:19 " Write the image to the given buffer, or count the bytes if it is NULL "
2018/06/19 13:39:19 " This is to give the caller an easier error detection in the NULL\n          * case and guard against uninitialized variable problems:\n          "
2018/06/19 13:39:19 " write_memory returns true even if we ran out of buffer. "
2018/06/19 13:39:19 " On out-of-buffer this function returns '0' but still updates\n                * memory_bytes:\n                "
2018/06/19 13:39:19 " Write the image to the given (FILE*). "
2018/06/19 13:39:19 " This is slightly evil, but png_init_io doesn't do anything other\n             * than this and we haven't changed the standard IO functions so\n             * this saves a 'safe' function.\n             "
2018/06/19 13:39:19 " Write the image to the named file. "
2018/06/19 13:39:19 " from fflush/fclose "
2018/06/19 13:39:19 " Make sure the file is flushed correctly. "
2018/06/19 13:39:19 " from fclose "
2018/06/19 13:39:19 " from fflush or ferror "
2018/06/19 13:39:19 " The image has already been cleaned up; this is just used to\n                * set the error (because the original write succeeded).\n                "
2018/06/19 13:39:19 " Clean up: just the opened file. "
2018/06/19 13:39:19 " SIMPLIFIED_WRITE_STDIO \n SIMPLIFIED_WRITE \n WRITE "
2018/06/19 13:39:19 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngwrite.c": 82.218096ms
2018/06/19 13:39:19 Couldn't classify license(s)
2018/06/19 13:39:20 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pnginfo.h
2018/06/19 13:39:20 detected language: 4
2018/06/19 13:39:20 " pnginfo.h - header file for PNG reference library\n *\n * Last changed in libpng 1.6.1 [March 28, 2013]\n * Copyright (c) 1998-2002,2004,2006-2013 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:39:20 " png_info is a structure that holds the information in a PNG file so\n * that the application can find out the characteristics of the image.\n * If you are reading the file, this structure will tell you what is\n * in the PNG file.  If you are writing the file, fill in the information\n * you want to put into the PNG file, using png_set_*() functions, then\n * call png_write_info().\n *\n * The names chosen should be very close to the PNG specification, so\n * consult that document for information about the meaning of each field.\n *\n * With libpng < 0.95, it was only possible to directly set and read the\n * the values in the png_info_struct, which meant that the contents and\n * order of the values had to remain fixed.  With libpng 0.95 and later,\n * however, there are now functions that abstract the contents of\n * png_info_struct from the application, so this makes it easier to use\n * libpng with dynamic libraries, and even makes it possible to use\n * libraries that don't have all of the libpng ancillary chunk-handing\n * functionality.  In libpng-1.5.0 this was moved into a separate private\n * file that is not visible to applications.\n *\n * The following members may have allocated storage attached that should be\n * cleaned up before the structure is discarded: palette, trans, text,\n * pcal_purpose, pcal_units, pcal_params, hist, iccp_name, iccp_profile,\n * splt_palettes, scal_unit, row_pointers, and unknowns.   By default, these\n * are automatically freed when the info structure is deallocated, if they were\n * allocated internally by libpng.  This behavior can be changed by means\n * of the png_data_freer() function.\n *\n * More allocation details: all the chunk-reading functions that\n * change these members go through the corresponding png_set_*\n * functions.  A function to clear these members is available: see\n * png_free_data().  The png_set_* functions do not depend on being\n * able to point info structure members to any of the storage they are\n * passed (they make their own copies), EXCEPT that the png_set_text\n * functions use the same storage passed to them in the text_ptr or\n * itxt_ptr structure argument, and the png_set_rows and png_set_unknowns\n * functions do not make their own copies.\n "
2018/06/19 13:39:20 " The following are necessary for every PNG file \n width of image in pixels (from IHDR) \n height of image in pixels (from IHDR) \n valid chunk data (see PNG_INFO_ below) \n bytes needed to hold an untransformed row \n array of color values (valid & PNG_INFO_PLTE) \n number of color entries in \"palette\" (PLTE) \n number of transparent palette color (tRNS) \n 1, 2, 4, 8, or 16 bits/channel (from IHDR) \n see PNG_COLOR_TYPE_ below (from IHDR) \n The following three should have been named *_method not *_type \n must be PNG_COMPRESSION_TYPE_BASE (IHDR) \n must be PNG_FILTER_TYPE_BASE (from IHDR) \n One of PNG_INTERLACE_NONE, PNG_INTERLACE_ADAM7 "
2018/06/19 13:39:20 " The following are set by png_set_IHDR, called from the application on\n    * write, but the are never actually used by the write code.\n    "
2018/06/19 13:39:20 " number of data channels per pixel (1, 2, 3, 4) \n number of bits per pixel \n to align the data, and for future use "
2018/06/19 13:39:20 " This is never set during write \n magic bytes read by libpng from start of file "
2018/06/19 13:39:20 " The rest of the data is optional.  If you are reading, check the\n    * valid field to see if the information in these are valid.  If you\n    * are writing, set the valid field to those chunks you want written,\n    * and initialize the appropriate fields below.\n    "
2018/06/19 13:39:20 " png_colorspace only contains 'flags' if neither GAMMA or COLORSPACE are\n    * defined.  When COLORSPACE is switched on all the colorspace-defining\n    * chunks should be enabled, when GAMMA is switched on all the gamma-defining\n    * chunks should be enabled.  If this is not done it becomes possible to read\n    * inconsistent PNG files and assign a probably incorrect interpretation to\n    * the information.  (In other words, by carefully choosing which chunks to\n    * recognize the system configuration can select an interpretation for PNG\n    * files containing ambiguous data and this will result in inconsistent\n    * behavior between different libpng builds!)\n    "
2018/06/19 13:39:20 " iCCP chunk data. \n profile name \n International Color Consortium profile data \n ICC profile data length "
2018/06/19 13:39:20 " The tEXt, and zTXt chunks contain human-readable textual data in\n    * uncompressed, compressed, and optionally compressed forms, respectively.\n    * The data in \"text\" is an array of pointers to uncompressed,\n    * null-terminated C strings. Each chunk has a keyword that describes the\n    * textual data contained in that chunk.  Keywords are not required to be\n    * unique, and the text string may be empty.  Any number of text chunks may\n    * be in an image.\n    "
2018/06/19 13:39:20 " number of comments read or comments to write \n current size of text array \n array of comments read or comments to write \n TEXT "
2018/06/19 13:39:20 " The tIME chunk holds the last time the displayed image data was\n    * modified.  See the png_time struct for the contents of this struct.\n    "
2018/06/19 13:39:20 " The sBIT chunk specifies the number of significant high-order bits\n    * in the pixel data.  Values are in the range [1, bit_depth], and are\n    * only specified for the channels in the pixel data.  The contents of\n    * the low-order bits is not specified.  Data is valid if\n    * (valid & PNG_INFO_sBIT) is non-zero.\n    "
2018/06/19 13:39:20 " significant bits in color channels "
2018/06/19 13:39:20 " The tRNS chunk supplies transparency data for paletted images and\n    * other image types that don't need a full alpha channel.  There are\n    * \"num_trans\" transparency values for a paletted image, stored in the\n    * same order as the palette colors, starting from index 0.  Values\n    * for the data are in the range [0, 255], ranging from fully transparent\n    * to fully opaque, respectively.  For non-paletted images, there is a\n    * single color specified that should be treated as fully transparent.\n    * Data is valid if (valid & PNG_INFO_tRNS) is non-zero.\n    "
2018/06/19 13:39:20 " alpha values for paletted image \n transparent color for non-palette image "
2018/06/19 13:39:20 " The bKGD chunk gives the suggested image background color if the\n    * display program does not have its own background color and the image\n    * is needs to composited onto a background before display.  The colors\n    * in \"background\" are normally in the same color space/depth as the\n    * pixel data.  Data is valid if (valid & PNG_INFO_bKGD) is non-zero.\n    "
2018/06/19 13:39:20 " The oFFs chunk gives the offset in \"offset_unit_type\" units rightwards\n    * and downwards from the top-left corner of the display, page, or other\n    * application-specific co-ordinate space.  See the PNG_OFFSET_ defines\n    * below for the unit types.  Valid if (valid & PNG_INFO_oFFs) non-zero.\n    "
2018/06/19 13:39:20 " x offset on page \n y offset on page \n offset units type "
2018/06/19 13:39:20 " The pHYs chunk gives the physical pixel density of the image for\n    * display or printing in \"phys_unit_type\" units (see PNG_RESOLUTION_\n    * defines below).  Data is valid if (valid & PNG_INFO_pHYs) is non-zero.\n    "
2018/06/19 13:39:20 " horizontal pixel density \n vertical pixel density \n resolution type (see PNG_RESOLUTION_ below) "
2018/06/19 13:39:20 " Added at libpng-1.6.31 "
2018/06/19 13:39:20 " Added at libpng-1.6.32 "
2018/06/19 13:39:20 " The hIST chunk contains the relative frequency or importance of the\n    * various palette entries, so that a viewer can intelligently select a\n    * reduced-color palette, if required.  Data is an array of \"num_palette\"\n    * values in the range [0,65535]. Data valid if (valid & PNG_INFO_hIST)\n    * is non-zero.\n    "
2018/06/19 13:39:20 " The pCAL chunk describes a transformation between the stored pixel\n    * values and original physical data values used to create the image.\n    * The integer range [0, 2^bit_depth - 1] maps to the floating-point\n    * range given by [pcal_X0, pcal_X1], and are further transformed by a\n    * (possibly non-linear) transformation function given by \"pcal_type\"\n    * and \"pcal_params\" into \"pcal_units\".  Please see the PNG_EQUATION_\n    * defines below, and the PNG-Group's PNG extensions document for a\n    * complete description of the transformations and how they should be\n    * implemented, and for a description of the ASCII parameter strings.\n    * Data values are valid if (valid & PNG_INFO_pCAL) non-zero.\n    "
2018/06/19 13:39:20 " pCAL chunk description string \n minimum value \n maximum value \n Latin-1 string giving physical units \n ASCII strings containing parameter values \n equation type (see PNG_EQUATION_ below) \n number of parameters given in pcal_params "
2018/06/19 13:39:20 " New members added in libpng-1.0.6 \n flags items libpng is responsible for freeing "
2018/06/19 13:39:20 " Storage for unknown chunks that the library doesn't recognize. "
2018/06/19 13:39:20 " The type of this field is limited by the type of\n    * png_struct::user_chunk_cache_max, else overflow can occur.\n    "
2018/06/19 13:39:20 " Data on sPLT chunks (there may be more than one). "
2018/06/19 13:39:20 " Match type returned by png_get API "
2018/06/19 13:39:20 " The sCAL chunk describes the actual physical dimensions of the\n    * subject matter of the graphic.  The chunk contains a unit specification\n    * a byte value, and two ASCII strings representing floating-point\n    * values.  The values are width and height corresponsing to one pixel\n    * in the image.  Data values are valid if (valid & PNG_INFO_sCAL) is\n    * non-zero.\n    "
2018/06/19 13:39:20 " unit of physical scale \n string containing height \n string containing width "
2018/06/19 13:39:20 " Memory has been allocated if (valid & PNG_ALLOCATED_INFO_ROWS)\n      non-zero "
2018/06/19 13:39:20 " Data valid if (valid & PNG_INFO_IDAT) non-zero \n the image bits "
2018/06/19 13:39:20 " PNGINFO_H "
2018/06/19 13:39:20 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pnginfo.h": 36.849586ms
2018/06/19 13:39:20 Couldn't classify license(s)
2018/06/19 13:39:21 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngrtran.c
2018/06/19 13:39:21 detected language: 4
2018/06/19 13:39:21 " pngrtran.c - transforms the data in a row for PNG readers\n *\n * Last changed in libpng 1.6.33 [September 28, 2017]\n * Copyright (c) 1998-2002,2004,2006-2017 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * This file contains functions optionally called by an application\n * in order to tell libpng how to handle data when reading a PNG.\n * Transformations that are used in both reading and writing are\n * in pngtrans.c.\n "
2018/06/19 13:39:21 " Set the action on getting a CRC error for an ancillary or critical chunk. "
2018/06/19 13:39:21 " Tell libpng how we react to CRC errors in critical chunks "
2018/06/19 13:39:21 " Leave setting as is "
2018/06/19 13:39:21 " Warn/use data "
2018/06/19 13:39:21 " Quiet/use data "
2018/06/19 13:39:21 " Not a valid action for critical data "
2018/06/19 13:39:21 " FALLTHROUGH \n Error/quit "
2018/06/19 13:39:21 " Tell libpng how we react to CRC errors in ancillary chunks "
2018/06/19 13:39:21 " Leave setting as is "
2018/06/19 13:39:21 " Warn/use data "
2018/06/19 13:39:21 " Quiet/use data "
2018/06/19 13:39:21 " Error/quit "
2018/06/19 13:39:21 " Warn/discard data "
2018/06/19 13:39:21 " Is it OK to set a transformation now?  Only if png_start_read_image or\n * png_read_update_info have not been called.  It is not necessary for the IHDR\n * to have been read in all cases; the need_IHDR parameter allows for this\n * check too.\n "
2018/06/19 13:39:21 " Turn on failure to initialize correctly for all transforms. "
2018/06/19 13:39:21 " Ok "
2018/06/19 13:39:21 " no png_error possible! "
2018/06/19 13:39:21 " Handle alpha and tRNS via a background color "
2018/06/19 13:39:21 " FLOATING_POINT \n READ_BACKGROUND "
2018/06/19 13:39:21 " Scale 16-bit depth files to 8-bit depth.  If both of these are set then the\n * one that pngrtran does first (scale) happens.  This is necessary to allow the\n * TRANSFORM and API behavior to be somewhat consistent, and it's simpler.\n "
2018/06/19 13:39:21 " Chop 16-bit depth files to 8-bit depth "
2018/06/19 13:39:21 " Check for flag values.  The main reason for having the old Mac value as a\n    * flag is that it is pretty near impossible to work out what the correct\n    * value is from Apple documentation - a working Mac system is needed to\n    * discover the value!\n    "
2018/06/19 13:39:21 " If there is no sRGB support this just sets the gamma to the standard\n       * sRGB value.  (This is a side effect of using this function!)\n       "
2018/06/19 13:39:21 " The following silently ignores cases where fixed point (times 100,000)\n    * gamma values are passed to the floating point API.  This is safe and it\n    * means the fixed point constants work just fine with the floating point\n    * API.  The alternative would just lead to undetected errors and spurious\n    * bug reports.  Negative values fail inside the _fixed API unless they\n    * correspond to the flag values.\n    "
2018/06/19 13:39:21 " This preserves -1 and -2 exactly: "
2018/06/19 13:39:21 " READ_ALPHA_MODE || READ_GAMMA "
2018/06/19 13:39:21 "screen"
2018/06/19 13:39:21 " Validate the value to ensure it is in a reasonable range. The value\n    * is expected to be 1 or greater, but this range test allows for some\n    * viewing correction values.  The intent is to weed out users of this API\n    * who use the inverse of the gamma value accidentally!  Since some of these\n    * values are reasonable this may have to be changed:\n    *\n    * 1.6.x: changed from 0.07..3 to 0.01..100 (to accomodate the optimal 16-bit\n    * gamma of 36, and its reciprocal.)\n    "
2018/06/19 13:39:21 " The default file gamma is the inverse of the output gamma; the output\n    * gamma may be changed below so get the file value first:\n    "
2018/06/19 13:39:21 " There are really 8 possibilities here, composed of any combination\n    * of:\n    *\n    *    premultiply the color channels\n    *    do not encode non-opaque pixels\n    *    encode the alpha as well as the color channels\n    *\n    * The differences disappear if the input/output ('screen') gamma is 1.0,\n    * because then the encoding is a no-op and there is only the choice of\n    * premultiplying the color channels or not.\n    *\n    * png_set_alpha_mode and png_set_background interact because both use\n    * png_compose to do the work.  Calling both is only useful when\n    * png_set_alpha_mode is used to set the default mode - PNG_ALPHA_PNG - along\n    * with a default gamma value.  Otherwise PNG_COMPOSE must not be set.\n    "
2018/06/19 13:39:21 " default: png standard \n No compose, but it may be set by png_set_background! "
2018/06/19 13:39:21 " color channels premultiplied "
2018/06/19 13:39:21 " The output is linear: "
2018/06/19 13:39:21 " associated, non-opaque pixels linear "
2018/06/19 13:39:21 " output_gamma records the encoding of opaque pixels! "
2018/06/19 13:39:21 " associated, non-linear, alpha encoded "
2018/06/19 13:39:21 " Only set the default gamma if the file gamma has not been set (this has\n    * the side effect that the gamma in a second call to png_set_alpha_mode will\n    * be ignored.)\n    "
2018/06/19 13:39:21 " But always set the output gamma: "
2018/06/19 13:39:21 " Finally, if pre-multiplying, set the background fields to achieve the\n    * desired result.\n    "
2018/06/19 13:39:21 " And obtain alpha pre-multiplication by composing on black: "
2018/06/19 13:39:21 " just in case "
2018/06/19 13:39:21 " Dither file to 8-bit.  Supply a palette, the current number\n * of elements in the palette, the maximum number of elements\n * allowed, and a histogram if possible.  If the current number\n * of colors is greater than the maximum number, the palette will be\n * modified to fit in the maximum number.  \"full_quantize\" indicates\n * whether we need a quantizing cube set up for RGB images, or if we\n * simply are reducing the number of colors in a paletted image.\n "
2018/06/19 13:39:21 " This is easy enough, just throw out the least used colors.\n          * Perhaps not the best solution, but good enough.\n          "
2018/06/19 13:39:21 " Initialize an array to sort colors "
2018/06/19 13:39:21 " Initialize the quantize_sort array "
2018/06/19 13:39:21 " Find the least used palette entries by starting a\n          * bubble sort, and running it until we have sorted\n          * out enough colors.  Note that we don't care about\n          * sorting all the colors, just finding which are\n          * least used.\n          "
2018/06/19 13:39:21 " To stop early if the list is pre-sorted "
2018/06/19 13:39:21 " Swap the palette around, and set up a table, if necessary "
2018/06/19 13:39:21 " Put all the useful colors within the max, but don't\n             * move the others.\n             "
2018/06/19 13:39:21 " Move all the used colors inside the max limit, and\n             * develop a translation table.\n             "
2018/06/19 13:39:21 " Only move the colors we need to "
2018/06/19 13:39:21 " Indicate where the color went "
2018/06/19 13:39:21 " Find closest color for those colors we are not using "
2018/06/19 13:39:21 " Find the closest color to one we threw out "
2018/06/19 13:39:21 " Point to closest color "
2018/06/19 13:39:21 " This is much harder to do simply (and quickly).  Perhaps\n          * we need to go through a median cut routine, but those\n          * don't always behave themselves with only a few colors\n          * as input.  So we will just find the closest two colors,\n          * and throw out one of them (chosen somewhat randomly).\n          * [We don't understand this at all, so if someone wants to\n          *  work on improving it, be our guest - AED, GRP]\n          "
2018/06/19 13:39:21 " Initialize palette index arrays "
2018/06/19 13:39:21 " Initialize the sort array "
2018/06/19 13:39:21 " Initial wild guess at how far apart the farthest pixel\n          * pair we will be eliminating will be.  Larger\n          * numbers mean more areas will be allocated, Smaller\n          * numbers run the risk of not saving enough data, and\n          * having to do this all over again.\n          *\n          * I have not done extensive checking on this number.\n          "
2018/06/19 13:39:21 " int dr = abs(ir - r); "
2018/06/19 13:39:21 " int dg = abs(ig - g); "
2018/06/19 13:39:21 " int db = abs(ib - b); "
2018/06/19 13:39:21 " READ_QUANTIZE "
2018/06/19 13:39:21 " New in libpng-1.5.4 - reserve particular negative values as flags. \nscreen\nfile"
2018/06/19 13:39:21 " Checking the gamma values for being >0 was added in 1.5.4 along with the\n    * premultiplied alpha support; this actually hides an undocumented feature\n    * of the previous implementation which allowed gamma processing to be\n    * disabled in background handling.  There is no evidence (so far) that this\n    * was being used; however, png_set_background itself accepted and must still\n    * accept '0' for the gamma value it takes, because it isn't always used.\n    *\n    * Since this is an API change (albeit a very minor one that removes an\n    * undocumented API feature) the following checks were only enabled in\n    * libpng-1.6.0.\n    "
2018/06/19 13:39:21 " Set the gamma values unconditionally - this overrides the value in the PNG\n    * file if a gAMA chunk was present.  png_set_alpha_mode provides a\n    * different, easier, way to default the file gamma.\n    "
2018/06/19 13:39:21 " FLOATING_POINT \n READ_GAMMA "
2018/06/19 13:39:21 " Expand paletted images to RGB, expand grayscale images of\n * less than 8-bit depth to 8-bit depth, and expand tRNS chunks\n * to alpha channels.\n "
2018/06/19 13:39:21 " GRR 19990627:  the following three functions currently are identical\n *  to png_set_expand().  However, it is entirely reasonable that someone\n *  might wish to expand an indexed image to RGB but *not* expand a single,\n *  fully transparent palette entry to a full alpha channel--perhaps instead\n *  convert tRNS to the grayscale/RGB format (16-bit RGB value), or replace\n *  the transparent color with a particular RGB value, or drop tRNS entirely.\n *  IOW, a future version of the library may make the transformations flag\n *  a bit more fine-grained, with separate bits for each of these three\n *  functions.\n *\n *  More to the point, these functions make it obvious what libpng will be\n *  doing, whereas \"expand\" can (and does) mean any number of things.\n *\n *  GRP 20060307: In libpng-1.2.9, png_set_gray_1_2_4_to_8() was modified\n *  to expand only the sample depth but not to expand the tRNS to alpha\n *  and its name was changed to png_set_expand_gray_1_2_4_to_8().\n "
2018/06/19 13:39:21 " Expand paletted images to RGB. "
2018/06/19 13:39:21 " Expand grayscale images of less than 8-bit depth to 8 bits. "
2018/06/19 13:39:21 " Expand tRNS chunks to alpha channels. "
2018/06/19 13:39:21 " READ_EXPAND "
2018/06/19 13:39:21 " Expand to 16-bit channels, expand the tRNS chunk too (because otherwise\n * it may not work correctly.)\n "
2018/06/19 13:39:21 " Because rgb must be 8 bits or more: "
2018/06/19 13:39:21 " Need the IHDR here because of the check on color_type below. \n TODO: fix this "
2018/06/19 13:39:21 " Make this an error in 1.6 because otherwise the application may assume\n       * that it just worked and get a memory overwrite.\n       "
2018/06/19 13:39:21 " png_ptr->transformations &= ~PNG_RGB_TO_GRAY; "
2018/06/19 13:39:21 " NOTE: this calculation does not round, but this behavior is retained\n          * for consistency; the inaccuracy is very small.  The code here always\n          * overwrites the coefficients, regardless of whether they have been\n          * defaulted or set already.\n          "
2018/06/19 13:39:21 " Use the defaults, from the cHRM chunk if set, else the historical\n          * values which are close to the sRGB/HDTV/ITU-Rec 709 values.  See\n          * png_do_rgb_to_gray for more discussion of the values.  In this case\n          * the coefficients are not marked as 'set' and are not overwritten if\n          * something has already provided a default.\n          "
2018/06/19 13:39:21 " png_ptr->rgb_to_gray_blue_coeff  = 2366; "
2018/06/19 13:39:21 " Convert a RGB image to a grayscale of the same width.  This allows us,\n * for example, to convert a 24 bpp RGB image into an 8 bpp grayscale image.\n "
2018/06/19 13:39:21 " FLOATING POINT "
2018/06/19 13:39:21 " RGB_TO_GRAY "
2018/06/19 13:39:21 " In the case of gamma transformations only do transformations on images where\n * the [file] gamma and screen_gamma are not close reciprocals, otherwise it\n * slows things down slightly, and also needlessly introduces small errors.\n "
2018/06/19 13:39:21 " PRIVATE "
2018/06/19 13:39:21 " PNG_GAMMA_THRESHOLD is the threshold for performing gamma\n    * correction as a difference of the overall transform from 1.0\n    *\n    * We want to compare the threshold with s*f - 1, if we get\n    * overflow here it is because of wacky gamma values so we\n    * turn on processing anyway.\n    "
2018/06/19 13:39:21 " Initialize everything needed for the read.  This includes modifying\n * the palette.\n "
2018/06/19 13:39:21 " For the moment 'png_init_palette_transformations' and\n * 'png_init_rgb_transformations' only do some flag canceling optimizations.\n * The intent is that these two routines should have palette or rgb operations\n * extracted from 'png_init_read_transformations'.\n "
2018/06/19 13:39:21 " PRIVATE "
2018/06/19 13:39:21 " Called to handle the (input) palette case.  In png_do_read_transformations\n    * the first step is to expand the palette if requested, so this code must\n    * take care to only make changes that are invariant with respect to the\n    * palette expansion, or only do them if there is no expansion.\n    *\n    * STRIP_ALPHA has already been handled in the caller (by setting num_trans\n    * to 0.)\n    "
2018/06/19 13:39:21 " Ignore if all the entries are opaque (unlikely!) "
2018/06/19 13:39:21 " If no alpha we can optimize. "
2018/06/19 13:39:21 " Any alpha means background and associative alpha processing is\n       * required, however if the alpha is 0 or 1 throughout OPTIMIZE_ALPHA\n       * and ENCODE_ALPHA are irrelevant.\n       "
2018/06/19 13:39:21 " png_set_background handling - deals with the complexity of whether the\n    * background color is in the file format or the screen format in the case\n    * where an 'expand' will happen.\n    "
2018/06/19 13:39:21 " The following code cannot be entered in the alpha pre-multiplication case\n    * because PNG_BACKGROUND_EXPAND is cancelled below.\n    "
2018/06/19 13:39:21 " Invert the alpha channel (in tRNS) unless the pixels are\n               * going to be expanded, in which case leave it for later\n               "
2018/06/19 13:39:21 " READ_INVERT_ALPHA "
2018/06/19 13:39:21 " background expand and (therefore) no alpha association. \n READ_EXPAND && READ_BACKGROUND "
2018/06/19 13:39:21 " PRIVATE "
2018/06/19 13:39:21 " Added to libpng-1.5.4: check the color type to determine whether there\n    * is any alpha or transparency in the image and simply cancel the\n    * background and alpha mode stuff if there isn't.\n    "
2018/06/19 13:39:21 " If no alpha we can optimize. "
2018/06/19 13:39:21 " Any alpha means background and associative alpha processing is\n       * required, however if the alpha is 0 or 1 throughout OPTIMIZE_ALPHA\n       * and ENCODE_ALPHA are irrelevant.\n       "
2018/06/19 13:39:21 " png_set_background handling - deals with the complexity of whether the\n    * background color is in the file format or the screen format in the case\n    * where an 'expand' will happen.\n    "
2018/06/19 13:39:21 " The following code cannot be entered in the alpha pre-multiplication case\n    * because PNG_BACKGROUND_EXPAND is cancelled below.\n    "
2018/06/19 13:39:21 " i.e., GRAY or GRAY_ALPHA "
2018/06/19 13:39:21 " Expand background and tRNS chunks "
2018/06/19 13:39:21 " FALLTHROUGH \n  (Already 8 bits) "
2018/06/19 13:39:21 " Already a full 16 bits "
2018/06/19 13:39:21 " background expand and (therefore) no alpha association. \n READ_EXPAND && READ_BACKGROUND "
2018/06/19 13:39:21 " PRIVATE "
2018/06/19 13:39:21 " This internal function is called from png_read_start_row in pngrutil.c\n    * and it is called before the 'rowbytes' calculation is done, so the code\n    * in here can change or update the transformations flags.\n    *\n    * First do updates that do not depend on the details of the PNG image data\n    * being processed.\n    "
2018/06/19 13:39:21 " Prior to 1.5.4 these tests were performed from png_set_gamma, 1.5.4 adds\n    * png_set_alpha_mode and this is another source for a default file gamma so\n    * the test needs to be performed later - here.  In addition prior to 1.5.4\n    * the tests were repeated for the PALETTE color type here - this is no\n    * longer necessary (and doesn't seem to have been necessary before.)\n    "
2018/06/19 13:39:21 " The following temporary indicates if overall gamma correction is\n       * required.\n       "
2018/06/19 13:39:21 " has been set "
2018/06/19 13:39:21 " screen set too "
2018/06/19 13:39:21 " Assume the output matches the input; a long time default behavior\n             * of libpng, although the standard has nothing to say about this.\n             "
2018/06/19 13:39:21 " The converse - assume the file matches the screen, note that this\n          * perhaps undesireable default can (from 1.5.4) be changed by calling\n          * png_set_alpha_mode (even if the alpha handling mode isn't required\n          * or isn't changed from the default.)\n          "
2018/06/19 13:39:21 " neither are set \n Just in case the following prevents any processing - file and screen\n          * are both assumed to be linear and there is no way to introduce a\n          * third gamma value other than png_set_background with 'UNIQUE', and,\n          * prior to 1.5.4\n          "
2018/06/19 13:39:21 " We have a gamma value now. "
2018/06/19 13:39:21 " Now turn the gamma transformation on or off as appropriate.  Notice\n       * that PNG_GAMMA just refers to the file->screen correction.  Alpha\n       * composition may independently cause gamma correction because it needs\n       * linear data (e.g. if the file has a gAMA chunk but the screen gamma\n       * hasn't been specified.)  In any case this flag may get turned off in\n       * the code immediately below if the transform can be handled outside the\n       * row loop.\n       "
2018/06/19 13:39:21 " Certain transformations have the effect of preventing other\n    * transformations that happen afterward in png_do_read_transformations;\n    * resolve the interdependencies here.  From the code of\n    * png_do_read_transformations the order is:\n    *\n    *  1) PNG_EXPAND (including PNG_EXPAND_tRNS)\n    *  2) PNG_STRIP_ALPHA (if no compose)\n    *  3) PNG_RGB_TO_GRAY\n    *  4) PNG_GRAY_TO_RGB iff !PNG_BACKGROUND_IS_GRAY\n    *  5) PNG_COMPOSE\n    *  6) PNG_GAMMA\n    *  7) PNG_STRIP_ALPHA (if compose)\n    *  8) PNG_ENCODE_ALPHA\n    *  9) PNG_SCALE_16_TO_8\n    * 10) PNG_16_TO_8\n    * 11) PNG_QUANTIZE (converts to palette)\n    * 12) PNG_EXPAND_16\n    * 13) PNG_GRAY_TO_RGB iff PNG_BACKGROUND_IS_GRAY\n    * 14) PNG_INVERT_MONO\n    * 15) PNG_INVERT_ALPHA\n    * 16) PNG_SHIFT\n    * 17) PNG_PACK\n    * 18) PNG_BGR\n    * 19) PNG_PACKSWAP\n    * 20) PNG_FILLER (includes PNG_ADD_ALPHA)\n    * 21) PNG_SWAP_ALPHA\n    * 22) PNG_SWAP_BYTES\n    * 23) PNG_USER_TRANSFORM [must be last]\n    "
2018/06/19 13:39:21 " Stripping the alpha channel happens immediately after the 'expand'\n       * transformations, before all other transformation, so it cancels out\n       * the alpha handling.  It has the side effect negating the effect of\n       * PNG_EXPAND_tRNS too:\n       "
2018/06/19 13:39:21 " Kill the tRNS chunk itself too.  Prior to 1.5.4 this did not happen\n       * so transparency information would remain just so long as it wasn't\n       * expanded.  This produces unexpected API changes if the set of things\n       * that do PNG_EXPAND_tRNS changes (perfectly possible given the\n       * documentation - which says ask for what you want, accept what you\n       * get.)  This makes the behavior consistent from 1.5.4:\n       "
2018/06/19 13:39:21 " STRIP_ALPHA supported, no COMPOSE "
2018/06/19 13:39:21 " If the screen gamma is about 1.0 then the OPTIMIZE_ALPHA and ENCODE_ALPHA\n    * settings will have no effect.\n    "
2018/06/19 13:39:21 " Make sure the coefficients for the rgb to gray conversion are set\n    * appropriately.\n    "
2018/06/19 13:39:21 " Detect gray background and attempt to enable optimization for\n    * gray --> RGB case.\n    *\n    * Note:  if PNG_BACKGROUND_EXPAND is set and color_type is either RGB or\n    * RGB_ALPHA (in which case need_expand is superfluous anyway), the\n    * background color might actually be gray yet not be flagged as such.\n    * This is not a problem for the current code, which uses\n    * PNG_BACKGROUND_IS_GRAY only to decide when to do the\n    * png_do_gray_to_rgb() transformation.\n    *\n    * TODO: this code needs to be revised to avoid the complexity and\n    * interdependencies.  The color type of the background should be recorded in\n    * png_set_background, along with the bit depth, then the code has a record\n    * of exactly what color space the background is currently in.\n    "
2018/06/19 13:39:21 " PNG_BACKGROUND_EXPAND: the background is in the file color space, so if\n       * the file was grayscale the background value is gray.\n       "
2018/06/19 13:39:21 " PNG_COMPOSE: png_set_background was called with need_expand false,\n       * so the color is in the color space of the output or png_set_alpha_mode\n       * was called and the color is black.  Ignore RGB_TO_GRAY because that\n       * happens before GRAY_TO_RGB.\n       "
2018/06/19 13:39:21 " READ_EXPAND && READ_BACKGROUND \n READ_GRAY_TO_RGB "
2018/06/19 13:39:21 " For indexed PNG data (PNG_COLOR_TYPE_PALETTE) many of the transformations\n    * can be performed directly on the palette, and some (such as rgb to gray)\n    * can be optimized inside the palette.  This is particularly true of the\n    * composite (background and alpha) stuff, which can be pretty much all done\n    * in the palette even if the result is expanded to RGB or gray afterward.\n    *\n    * NOTE: this is Not Yet Implemented, the code behaves as in 1.5.1 and\n    * earlier and the palette stuff is actually handled on the first row.  This\n    * leads to the reported bug that the palette returned by png_get_PLTE is not\n    * updated.\n    "
2018/06/19 13:39:21 " TODO: fix this.  Because the expand_16 operation is after the compose\n       * handling the background color must be 8, not 16, bits deep, but the\n       * application will supply a 16-bit value so reduce it here.\n       *\n       * The PNG_BACKGROUND_EXPAND code above does not expand to 16 bits at\n       * present, so that case is ok (until do_expand_16 is moved.)\n       *\n       * NOTE: this discards the low 16 bits of the user supplied background\n       * color, but until expand_16 works properly there is no choice!\n       "
2018/06/19 13:39:21 " READ_BACKGROUND && READ_EXPAND_16 "
2018/06/19 13:39:21 " On the other hand, if a 16-bit file is to be reduced to 8-bits per\n       * component this will also happen after PNG_COMPOSE and so the background\n       * color must be pre-expanded here.\n       *\n       * TODO: fix this too.\n       "
2018/06/19 13:39:21 " NOTE: below 'PNG_READ_ALPHA_MODE_SUPPORTED' is presumed to also enable the\n    * background support (see the comments in scripts/pnglibconf.dfa), this\n    * allows pre-multiplication of the alpha channel to be implemented as\n    * compositing on black.  This is probably sub-optimal and has been done in\n    * 1.5.4 betas simply to enable external critique and testing (i.e. to\n    * implement the new API quickly, without lots of internal changes.)\n    "
2018/06/19 13:39:21 " Includes ALPHA_MODE "
2018/06/19 13:39:21 " This needs to change - in the palette image case a whole set of tables are\n    * built when it would be quicker to just calculate the correct value for\n    * each palette entry directly.  Also, the test is too tricky - why check\n    * PNG_RGB_TO_GRAY if PNG_GAMMA is not set?  The answer seems to be that\n    * PNG_GAMMA is cancelled even if the gamma is known?  The test excludes the\n    * PNG_COMPOSE case, so apparently if there is no *overall* gamma correction\n    * the gamma tables will not be built even if composition is required on a\n    * gamma encoded value.\n    *\n    * In 1.5.4 this is addressed below by an additional check on the individual\n    * file gamma - if it is not 1.0 both RGB_TO_GRAY and COMPOSE need the\n    * tables.\n    "
2018/06/19 13:39:21 " Issue a warning about this combination: because RGB_TO_GRAY is\n          * optimized to do the gamma transform if present yet do_background has\n          * to do the same thing if both options are set a\n          * double-gamma-correction happens.  This is true in all versions of\n          * libpng to date.\n          "
2018/06/19 13:39:21 " We don't get to here unless there is a tRNS chunk with non-opaque\n             * entries - see the checking code at the start of this function.\n             "
2018/06/19 13:39:21 " back_1 \n back "
2018/06/19 13:39:21 " if (png_ptr->trans_alpha[i] != 0xff) "
2018/06/19 13:39:21 " Prevent the transformations being done again.\n             *\n             * NOTE: this is highly dubious; it removes the transformations in\n             * place.  This seems inconsistent with the general treatment of the\n             * transformations elsewhere.\n             "
2018/06/19 13:39:21 " color_type == PNG_COLOR_TYPE_PALETTE "
2018/06/19 13:39:21 " if (png_ptr->background_gamma_type!=PNG_BACKGROUND_GAMMA_UNKNOWN) \n color_type != PNG_COLOR_TYPE_PALETTE "
2018/06/19 13:39:21 " Correction to linear \n Correction to screen "
2018/06/19 13:39:21 " gs = PNG_FP_1; "
2018/06/19 13:39:21 " RGB or RGBA with color background "
2018/06/19 13:39:21 " GRAY, GRAY ALPHA, RGB, or RGBA with gray background "
2018/06/19 13:39:21 " The background is now in screen gamma: "
2018/06/19 13:39:21 " color_type != PNG_COLOR_TYPE_PALETTE \n png_ptr->transformations & PNG_BACKGROUND "
2018/06/19 13:39:21 " Transformation does not include PNG_BACKGROUND \n READ_BACKGROUND "
2018/06/19 13:39:21 " RGB_TO_GRAY needs to have non-gamma-corrected values! "
2018/06/19 13:39:21 " NOTE: there are other transformations that should probably be in\n          * here too.\n          "
2018/06/19 13:39:21 " Done the gamma correction. "
2018/06/19 13:39:21 " color_type == PALETTE && !PNG_BACKGROUND transformation "
2018/06/19 13:39:21 " READ_GAMMA "
2018/06/19 13:39:21 " No GAMMA transformation (see the hanging else 4 lines above) "
2018/06/19 13:39:21 " The png_composite() macro is defined in png.h "
2018/06/19 13:39:21 " READ_BACKGROUND "
2018/06/19 13:39:21 " significant bits can be in the range 1 to 7 for a meaninful result, if\n       * the number of significant bits is 0 then no shift is done (this is an\n       * error condition which is silently ignored.)\n       "
2018/06/19 13:39:21 " READ_SHIFT "
2018/06/19 13:39:21 " Modify the info structure to reflect the transformations.  The\n * info should be updated so a PNG file could be written with it,\n * assuming the transformations result in valid PNG data.\n "
2018/06/19 13:39:21 " PRIVATE "
2018/06/19 13:39:21 " This check must match what actually happens in\n          * png_do_expand_palette; if it ever checks the tRNS chunk to see if\n          * it is all opaque we must do the same (at present it does not.)\n          "
2018/06/19 13:39:21 " The following is almost certainly wrong unless the background value is in\n    * the screen space!\n    "
2018/06/19 13:39:21 " The following used to be conditional on PNG_GAMMA (prior to 1.5.4),\n    * however it seems that the code in png_init_read_transformations, which has\n    * been called before this from png_read_update_info->png_read_start_row\n    * sometimes does the gamma transform and cancels the flag.\n    *\n    * TODO: this looks wrong; the info_ptr should end up with a gamma equal to\n    * the screen_gamma value.  The following probably results in weirdness if\n    * the info_ptr is used by the app after the rows have been read.\n    "
2018/06/19 13:39:21 " No 16-bit support: force chopping 16-bit input down to 8, in this case\n       * the app program can chose if both APIs are available by setting the\n       * correct scaling to use.\n       "
2018/06/19 13:39:21 " For compatibility with previous versions use the strip method by\n          * default.  This code works because if PNG_SCALE_16_TO_8 is already\n          * set the code below will do that in preference to the chop.\n          "
2018/06/19 13:39:21 " !READ_16BIT "
2018/06/19 13:39:21 " STRIP_ALPHA and FILLER allowed:  MASK_ALPHA bit stripped above "
2018/06/19 13:39:21 " If adding a true alpha channel not just filler "
2018/06/19 13:39:21 " Adding in 1.5.4: cache the above value in png_struct so that we can later\n    * check in png_rowbytes that the user buffer won't get overwritten.  Note\n    * that the field is not always set - if png_read_update_info isn't called\n    * the application has to either not do any transforms or get the calculation\n    * right itself.\n    "
2018/06/19 13:39:21 " Unpack pixels of 1, 2, or 4 bits per pixel into 1 byte per pixel,\n * without changing the actual values.  Thus, if you had a row with\n * a bit depth of 1, you would end up with bytes that only contained\n * the numbers 0 or 1.  If you would rather they contain 0 and 255, use\n * png_do_shift() after this.\n "
2018/06/19 13:39:21 " Reverse the effects of png_do_shift.  This routine merely shifts the\n * pixels back to their significant bits values.  Thus, if you have\n * a row of bit depth 8, but only 5 are significant, this will shift\n * the values back to 0 through 31.\n "
2018/06/19 13:39:21 " The palette case has already been handled in the _init routine. "
2018/06/19 13:39:21 " A shift of more than the bit depth is an error condition but it\n             * gets ignored here.\n             "
2018/06/19 13:39:21 " Must be 1bpp gray: should not be here! \n NOTREACHED "
2018/06/19 13:39:21 " Must be 2bpp gray \n assert(channels == 1 && shift[0] == 1) "
2018/06/19 13:39:21 " Must be 4bpp gray \n assert(channels == 1) "
2018/06/19 13:39:21 " Single byte components, G, GA, RGB, RGBA "
2018/06/19 13:39:21 " Double byte components, G, GA, RGB, RGBA "
2018/06/19 13:39:21 " Scale rows of bit depth 16 down to 8 accurately "
2018/06/19 13:39:21 " source \n destination \n end+1 "
2018/06/19 13:39:21 " The input is an array of 16-bit components, these must be scaled to\n          * 8 bits each.  For a 16-bit value V the required value (from the PNG\n          * specification) is:\n          *\n          *    (V * 255) / 65535\n          *\n          * This reduces to round(V / 257), or floor((V + 128.5)/257)\n          *\n          * Represent V as the two byte value vhi.vlo.  Make a guess that the\n          * result is the top byte of V, vhi, then the correction to this value\n          * is:\n          *\n          *    error = floor(((V-vhi.vhi) + 128.5) / 257)\n          *          = floor(((vlo-vhi) + 128.5) / 257)\n          *\n          * This can be approximated using integer arithmetic (and a signed\n          * shift):\n          *\n          *    error = (vlo-vhi+128) >> 8;\n          *\n          * The approximate differs from the exact answer only when (vlo-vhi) is\n          * 128; it then gives a correction of +1 when the exact correction is\n          * 0.  This gives 128 errors.  The exact answer (correct for all 16-bit\n          * input values) is:\n          *\n          *    error = (vlo-vhi+128)*65535 >> 24;\n          *\n          * An alternative arithmetic calculation which also gives no errors is:\n          *\n          *    (V * 255 + 32895) >> 16\n          "
2018/06/19 13:39:21 " must be signed! "
2018/06/19 13:39:21 " Simply discard the low byte.  This was the default behavior prior\n * to libpng-1.5.4.\n "
2018/06/19 13:39:21 " source \n destination \n end+1 "
2018/06/19 13:39:21 " skip low byte "
2018/06/19 13:39:21 " This converts from RGBA to ARGB "
2018/06/19 13:39:21 " This converts from RRGGBBAA to AARRGGBB "
2018/06/19 13:39:21 " This converts from GA to AG "
2018/06/19 13:39:21 " This converts from GGAA to AAGG "
2018/06/19 13:39:21 " This inverts the alpha channel in RGBA "
2018/06/19 13:39:21 "          This does nothing:\n            *(--dp) = *(--sp);\n            *(--dp) = *(--sp);\n            *(--dp) = *(--sp);\n            We can replace it with:\n"
2018/06/19 13:39:21 " This inverts the alpha channel in RRGGBBAA "
2018/06/19 13:39:21 "          This does nothing:\n            *(--dp) = *(--sp);\n            *(--dp) = *(--sp);\n            *(--dp) = *(--sp);\n            *(--dp) = *(--sp);\n            *(--dp) = *(--sp);\n            *(--dp) = *(--sp);\n            We can replace it with:\n"
2018/06/19 13:39:21 " This inverts the alpha channel in GA "
2018/06/19 13:39:21 " This inverts the alpha channel in GGAA "
2018/06/19 13:39:21 "\n            *(--dp) = *(--sp);\n            *(--dp) = *(--sp);\n"
2018/06/19 13:39:21 " Add filler channel if we have RGB color "
2018/06/19 13:39:21 " This changes the data from G to GX "
2018/06/19 13:39:21 " This changes the data from G to XG "
2018/06/19 13:39:21 " This changes the data from GG to GGXX "
2018/06/19 13:39:21 " This changes the data from GG to XXGG "
2018/06/19 13:39:21 " COLOR_TYPE == GRAY "
2018/06/19 13:39:21 " This changes the data from RGB to RGBX "
2018/06/19 13:39:21 " This changes the data from RGB to XRGB "
2018/06/19 13:39:21 " This changes the data from RRGGBB to RRGGBBXX "
2018/06/19 13:39:21 " This changes the data from RRGGBB to XXRRGGBB "
2018/06/19 13:39:21 " COLOR_TYPE == RGB "
2018/06/19 13:39:21 " Expand grayscale files to RGB, with or without alpha "
2018/06/19 13:39:21 " This changes G to RGB "
2018/06/19 13:39:21 " This changes GG to RRGGBB "
2018/06/19 13:39:21 " This changes GA to RGBA "
2018/06/19 13:39:21 " This changes GGAA to RRGGBBAA "
2018/06/19 13:39:21 " Reduce RGB files to grayscale, with or without alpha\n * using the equation given in Poynton's ColorFAQ of 1998-01-04 at\n * <http://www.inforamp.net/~poynton/>  (THIS LINK IS DEAD June 2008 but\n * versions dated 1998 through November 2002 have been archived at\n * https://web.archive.org/web/20000816232553/www.inforamp.net/\n * ~poynton/notes/colour_and_gamma/ColorFAQ.txt )\n * Charles Poynton poynton at poynton.com\n *\n *     Y = 0.212671 * R + 0.715160 * G + 0.072169 * B\n *\n *  which can be expressed with integers as\n *\n *     Y = (6969 * R + 23434 * G + 2365 * B)/32768\n *\n * Poynton's current link (as of January 2003 through July 2011):\n * <http://www.poynton.com/notes/colour_and_gamma/>\n * has changed the numbers slightly:\n *\n *     Y = 0.2126*R + 0.7152*G + 0.0722*B\n *\n *  which can be expressed with integers as\n *\n *     Y = (6966 * R + 23436 * G + 2366 * B)/32768\n *\n *  Historically, however, libpng uses numbers derived from the ITU-R Rec 709\n *  end point chromaticities and the D65 white point.  Depending on the\n *  precision used for the D65 white point this produces a variety of different\n *  numbers, however if the four decimal place value used in ITU-R Rec 709 is\n *  used (0.3127,0.3290) the Y calculation would be:\n *\n *     Y = (6968 * R + 23435 * G + 2366 * B)/32768\n *\n *  While this is correct the rounding results in an overflow for white, because\n *  the sum of the rounded coefficients is 32769, not 32768.  Consequently\n *  libpng uses, instead, the closest non-overflowing approximation:\n *\n *     Y = (6968 * R + 23434 * G + 2366 * B)/32768\n *\n *  Starting with libpng-1.5.5, if the image being converted has a cHRM chunk\n *  (including an sRGB chunk) then the chromaticities are used to calculate the\n *  coefficients.  See the chunk handling in pngrutil.c for more information.\n *\n *  In all cases the calculation is to be done in a linear colorspace.  If no\n *  gamma information is available to correct the encoding of the original RGB\n *  values this results in an implicit assumption that the original PNG RGB\n *  values were linear.\n *\n *  Other integer coefficents can be used via png_set_rgb_to_gray().  Because\n *  the API takes just red and green coefficients the blue coefficient is\n *  calculated to make the sum 32768.  This will result in different rounding\n *  to that used above.\n "
2018/06/19 13:39:21 " Notice that gamma to/from 1 are not necessarily inverses (if\n          * there is an overall gamma correction).  Prior to 1.5.5 this code\n          * checked the linearized values for equality; this doesn't match\n          * the documentation, the original values must be checked.\n          "
2018/06/19 13:39:21 " If there is no overall correction the table will not be\n                   * set.\n                   "
2018/06/19 13:39:21 " NOTE: this is the historical approach which simply\n                   * truncates the results.\n                   "
2018/06/19 13:39:21 " RGB bit_depth == 16 "
2018/06/19 13:39:21 " From 1.5.5 in the 16-bit case do the accurate conversion even\n                * in the 'fast' case - this is because this is where the code\n                * ends up when handling linear 16-bit data.\n                "
2018/06/19 13:39:21 " Replace any alpha or transparency with the supplied background color.\n * \"background\" is already in the screen gamma, while \"background_1\" is\n * at a gamma of 1.0.  Paletted files have already been taken care of.\n "
2018/06/19 13:39:21 " Background is already in screen gamma "
2018/06/19 13:39:21 " if (row_info->bit_depth == 16) "
2018/06/19 13:39:21 " Background is already in screen gamma "
2018/06/19 13:39:21 " Background is already in screen gamma "
2018/06/19 13:39:21 " if (png_ptr->bit_depth == 16) "
2018/06/19 13:39:21 " Background is already in screen gamma "
2018/06/19 13:39:21 " Background is already in screen gamma "
2018/06/19 13:39:21 " if (row_info->bit_depth == 16) "
2018/06/19 13:39:21 " Background is already in screen gamma "
2018/06/19 13:39:21 " READ_BACKGROUND || READ_ALPHA_MODE "
2018/06/19 13:39:21 " Gamma correct the image, avoiding the alpha channel.  Make sure\n * you do this after you deal with the transparency issue on grayscale\n * or RGB images. If your bit depth is 8, use gamma_table, if it\n * is 16, use gamma_16_table and gamma_shift.  Build these with\n * build_gamma_table().\n "
2018/06/19 13:39:21 " if (row_info->bit_depth == 16) "
2018/06/19 13:39:21 " if (row_info->bit_depth == 16) "
2018/06/19 13:39:21 " if (row_info->bit_depth == 16) "
2018/06/19 13:39:21 " Encode the alpha channel to the output gamma (the input channel is always\n * linear.)  Called only with color types that have an alpha channel.  Needs the\n * from_1 tables.\n "
2018/06/19 13:39:21 " The alpha channel is the last component: "
2018/06/19 13:39:21 " The alpha channel is the last component: "
2018/06/19 13:39:21 " Only get to here if called with a weird row_info; no harm has been done,\n    * so just issue a warning.\n    "
2018/06/19 13:39:21 " Expands a palette row to an RGB or RGBA row depending\n * upon whether you supply trans and num_trans.\n "
2018/06/19 13:39:21 " If the bit depth < 8, it is expanded to 8.  Also, if the already\n * expanded transparency value is supplied, an alpha channel is built.\n "
2018/06/19 13:39:21 " If the bit depth is 8 and the color type is not a palette type expand the\n * whole row to 16 bits.  Has no effect otherwise.\n "
2018/06/19 13:39:21 " The row have a sequence of bytes containing [0..255] and we need\n       * to turn it into another row containing [0..65535], to do this we\n       * calculate:\n       *\n       *  (input / 255) * 65535\n       *\n       *  Which happens to be exactly input * 257 and this can be achieved\n       *  simply by byte replication in place (copying backwards).\n       "
2018/06/19 13:39:21 " source, last byte + 1 \n destination, end + 1 "
2018/06/19 13:39:21 " This looks real messy, but the compiler will reduce\n             * it down to a reasonable formula.  For example, with\n             * 5 bits per color, we get:\n             * p = (((r >> 3) & 0x1f) << 10) |\n             *    (((g >> 3) & 0x1f) << 5) |\n             *    ((b >> 3) & 0x1f);\n             "
2018/06/19 13:39:21 " READ_QUANTIZE "
2018/06/19 13:39:21 " Transform the row.  The order of transformations is significant,\n * and is very touchy.  If you add a transformation, take care to\n * decide how it fits in with the other transformations here.\n "
2018/06/19 13:39:21 " PRIVATE "
2018/06/19 13:39:21 " Prior to 1.5.4 this output row/pass where the NULL pointer is, but this\n       * error is incredibly rare and incredibly easy to debug without this\n       * information.\n       "
2018/06/19 13:39:21 " The following is debugging; prior to 1.5.4 the code was never compiled in;\n    * in 1.5.4 PNG_FLAG_DETECT_UNINITIALIZED was added and the macro\n    * PNG_WARN_UNINITIALIZED_ROW removed.  In 1.6 the new flag is set only for\n    * all transformations, however in practice the ROW_INIT always gets done on\n    * demand, if necessary.\n    "
2018/06/19 13:39:21 " Application has failed to call either png_read_start_image() or\n       * png_read_update_info() after setting transforms that expand pixels.\n       * This check added to libpng-1.2.19 (but not enabled until 1.5.4).\n       "
2018/06/19 13:39:21 " at_start == false, because SWAP_ALPHA happens later "
2018/06/19 13:39:21 " From Andreas Dilger e-mail to png-implement, 26 March 1998:\n *\n *   In most cases, the \"simple transparency\" should be done prior to doing\n *   gray-to-RGB, or you will have to test 3x as many bytes to check if a\n *   pixel is transparent.  You would also need to make sure that the\n *   transparency information is upgraded to RGB.\n *\n *   To summarize, the current flow is:\n *   - Gray + simple transparency -> compare 1 or 2 gray bytes and composite\n *                                   with background \"in place\" if transparent,\n *                                   convert to RGB if necessary\n *   - Gray + alpha -> composite with gray background and remove alpha bytes,\n *                                   convert to RGB if necessary\n *\n *   To support RGB backgrounds for gray images we need:\n *   - Gray + simple transparency -> convert to RGB + simple transparency,\n *                                   compare 3 or 6 bytes and composite with\n *                                   background \"in place\" if transparent\n *                                   (3x compare/pixel compared to doing\n *                                   composite with gray bkgrnd)\n *   - Gray + alpha -> convert to RGB + alpha, composite with background and\n *                                   remove alpha bytes (3x float\n *                                   operations/pixel compared with composite\n *                                   on gray background)\n *\n *  Greg's change will do this.  The reason it wasn't done before is for\n *  performance, as this increases the per-pixel operations.  If we would check\n *  in advance if the background was gray or RGB, and position the gray-to-RGB\n *  transform appropriately, then it would save a lot of work/time.\n "
2018/06/19 13:39:21 " If gray -> RGB, do so now only if background is non-gray; else do later\n    * for performance reasons\n    "
2018/06/19 13:39:21 " Because RGB_TO_GRAY does the gamma transform. "
2018/06/19 13:39:21 " Because PNG_COMPOSE does the gamma transform if there is something to\n       * do (if there is an alpha channel or transparency.)\n       "
2018/06/19 13:39:21 " Because png_init_read_transformations transforms the palette, unless\n       * RGB_TO_GRAY will do the transform.\n       "
2018/06/19 13:39:21 " at_start == false, because SWAP_ALPHA happens later "
2018/06/19 13:39:21 " There is no harm in doing both of these because only one has any effect,\n    * by putting the 'scale' option first if the app asks for scale (either by\n    * calling the API or in a TRANSFORM flag) this is what happens.\n    "
2018/06/19 13:39:21 " READ_QUANTIZE "
2018/06/19 13:39:21 " Do the expansion now, after all the arithmetic has been done.  Notice\n    * that previous transformations can handle the PNG_EXPAND_16 flag if this\n    * is efficient (particularly true in the case of gamma correction, where\n    * better accuracy results faster!)\n    "
2018/06/19 13:39:21 " NOTE: moved here in 1.5.4 (from much later in this list.) "
2018/06/19 13:39:21 " Added at libpng-1.5.10 "
2018/06/19 13:39:21 " User read transform function \n png_ptr \n row_info: \n  png_uint_32 width;       width of row \n  png_size_t rowbytes;     number of bytes in row \n  png_byte color_type;     color type of pixels \n  png_byte bit_depth;      bit depth of samples \n  png_byte channels;       number of channels (1-4) \n  png_byte pixel_depth;    bits per pixel (depth*channels) \n start of pixel data for row "
2018/06/19 13:39:21 " READ_TRANSFORMS \n READ "
2018/06/19 13:39:21 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngrtran.c": 180.465695ms
2018/06/19 13:39:21 Couldn't classify license(s)
2018/06/19 13:39:22 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngpread.c
2018/06/19 13:39:22 detected language: 4
2018/06/19 13:39:22 " pngpread.c - read a png file in push mode\n *\n * Last changed in libpng 1.6.32 [August 24, 2017]\n * Copyright (c) 1998-2002,2004,2006-2017 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:39:22 " Push model modes "
2018/06/19 13:39:22 " It's easiest for the caller if we do the save; then the caller doesn't\n       * have to supply the same data again:\n       "
2018/06/19 13:39:22 " This includes any pending saved bytes: "
2018/06/19 13:39:22 " So subtract the saved buffer size, unless all the data\n          * is actually 'saved', in which case we just return 0\n          "
2018/06/19 13:39:22 " TODO: Deprecate and remove this API.\n * Somewhere the implementation of this seems to have been lost,\n * or abandoned.  It was only to support some internal back-door access\n * to png_struct) in libpng-1.4.x.\n "
2018/06/19 13:39:22 " What we do with the incoming data depends on what we were previously\n * doing before we ran out of data...\n "
2018/06/19 13:39:22 " PRIVATE "
2018/06/19 13:39:22 " Read any remaining signature bytes from the stream and compare them with\n * the correct PNG signature.  It is possible that this routine is called\n * with bytes already read from the signature, either because they have been\n * checked by the calling application, or because of multiple calls to this\n * routine.\n "
2018/06/19 13:39:22 " PRIVATE "
2018/06/19 13:39:22 " SAFE, does not exceed 8 "
2018/06/19 13:39:22 " PRIVATE "
2018/06/19 13:39:22 " unknown handling method "
2018/06/19 13:39:22 " First we make sure we have enough data for the 4-byte chunk name\n    * and the 4-byte chunk length before proceeding with decoding the\n    * chunk data.  To fully decode each of these chunks, we also make\n    * sure we have enough data in the buffer for the 4-byte CRC at the\n    * end of every chunk (except IDAT, which is handled separately).\n    "
2018/06/19 13:39:22 " If we reach an IDAT chunk, this means we have read all of the\n       * header chunks, and we can start reading the image (or if this\n       * is called after the image has been read - we have an error).\n       "
2018/06/19 13:39:22 " PRIVATE "
2018/06/19 13:39:22 " PRIVATE "
2018/06/19 13:39:22 " PRIVATE "
2018/06/19 13:39:22 " TODO: this code can be commoned up with the same code in push_read "
2018/06/19 13:39:22 " We want the smaller of 'idat_size' and 'current_buffer_size', but they\n       * are of different types and we don't know which variable has the fewest\n       * bits.  Carefully select the smaller and cast it to the type of the\n       * larger - this cannot overflow.  Do not cast in the following test - it\n       * will break on either 16-bit or 64-bit platforms.\n       "
2018/06/19 13:39:22 " We want the smaller of 'idat_size' and 'current_buffer_size', but they\n       * are of different types and we don't know which variable has the fewest\n       * bits.  Carefully select the smaller and cast it to the type of the\n       * larger - this cannot overflow.\n       "
2018/06/19 13:39:22 " PRIVATE "
2018/06/19 13:39:22 " The caller checks for a non-zero buffer length. "
2018/06/19 13:39:22 " This routine must process all the data it has been given\n    * before returning, calling the row callback as required to\n    * handle the uncompressed results.\n    "
2018/06/19 13:39:22 " TODO: WARNING: TRUNCATION ERROR: DANGER WILL ROBINSON: "
2018/06/19 13:39:22 " Keep going until the decompressed data is all processed\n    * or the stream marked as finished.\n    "
2018/06/19 13:39:22 " We have data for zlib, but we must check that zlib\n       * has someplace to put the results.  It doesn't matter\n       * if we don't expect any results -- it may be the input\n       * data is just the LZ end code.\n       "
2018/06/19 13:39:22 " TODO: WARNING: TRUNCATION ERROR: DANGER WILL ROBINSON: "
2018/06/19 13:39:22 " Using Z_SYNC_FLUSH here means that an unterminated\n       * LZ stream (a stream with a missing end code) can still\n       * be handled, otherwise (Z_NO_FLUSH) a future zlib\n       * implementation might defer output and therefore\n       * change the current behavior (see comments in inflate.c\n       * for why this doesn't happen at present with zlib 1.2.5).\n       "
2018/06/19 13:39:22 " Check for any failure before proceeding. "
2018/06/19 13:39:22 " Terminate the decompression. "
2018/06/19 13:39:22 " This may be a truncated stream (missing or\n          * damaged end code).  Treat that as a warning.\n          "
2018/06/19 13:39:22 " Skip the check on unprocessed input "
2018/06/19 13:39:22 " Did inflate output any data? "
2018/06/19 13:39:22 " Is this unexpected data after the last row?\n          * If it is, artificially terminate the LZ output\n          * here.\n          "
2018/06/19 13:39:22 " Extra data. "
2018/06/19 13:39:22 " Do no more processing; skip the unprocessed\n             * input check below.\n             "
2018/06/19 13:39:22 " Do we have a complete row? "
2018/06/19 13:39:22 " And check for the end of the stream. "
2018/06/19 13:39:22 " All the data should have been processed, if anything\n    * is left at this point we have bytes of IDAT data\n    * after the zlib end code.\n    "
2018/06/19 13:39:22 " PRIVATE "
2018/06/19 13:39:22 " 1.5.6: row_info moved out of png_struct to a local here. "
2018/06/19 13:39:22 " NOTE: width of current interlaced row "
2018/06/19 13:39:22 " libpng 1.5.6: the following line was copying png_ptr->rowbytes before\n    * 1.5.6, while the buffer really is this big in current versions of libpng\n    * it may not be in the future, so this was changed just to copy the\n    * interlaced row count:\n    "
2018/06/19 13:39:22 " The transformed pixel depth should match the depth now in row_info. "
2018/06/19 13:39:22 " Expand interlaced rows to full size "
2018/06/19 13:39:22 " Updates png_ptr->pass "
2018/06/19 13:39:22 " Pass 1 might be empty "
2018/06/19 13:39:22 " Skip top 4 generated rows "
2018/06/19 13:39:22 " Pass 3 might be empty "
2018/06/19 13:39:22 " Skip top two generated rows "
2018/06/19 13:39:22 " Pass 5 might be empty "
2018/06/19 13:39:22 " Skip top generated row "
2018/06/19 13:39:22 " PRIVATE "
2018/06/19 13:39:22 " Arrays to facilitate easy interlacing - use pass (0 - 6) as index "
2018/06/19 13:39:22 " Start of interlace block "
2018/06/19 13:39:22 " Offset to next interlace block "
2018/06/19 13:39:22 " Start of interlace block in the y direction "
2018/06/19 13:39:22 " Offset to next interlace block in the y direction "
2018/06/19 13:39:22 " Height of interlace block.  This is not currently used - if you need\n    * it, uncomment it here and in png.h\n   static PNG_CONST png_byte png_pass_height[] = {8, 8, 4, 4, 2, 2, 1};\n   "
2018/06/19 13:39:22 " READ_INTERLACING "
2018/06/19 13:39:22 " PRIVATE "
2018/06/19 13:39:22 " PRIVATE "
2018/06/19 13:39:22 " PRIVATE "
2018/06/19 13:39:22 " new_row is a flag here - if it is NULL then the app callback was called\n    * from an empty row (see the calls to png_struct::row_fn below), otherwise\n    * it must be png_ptr->row_buf+1\n    "
2018/06/19 13:39:22 "blocky display"
2018/06/19 13:39:22 " READ_INTERLACING "
2018/06/19 13:39:22 " PROGRESSIVE_READ "
2018/06/19 13:39:22 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngpread.c": 33.769595ms
2018/06/19 13:39:22 Couldn't classify license(s)
2018/06/19 13:39:22 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/LICENSE
2018/06/19 13:39:23 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/LICENSE": 21.524728ms
2018/06/19 13:39:23 Couldn't classify license(s)
2018/06/19 13:39:23 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngusr.dfa
2018/06/19 13:39:23 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngusr.dfa": 1.193314ms
2018/06/19 13:39:23 Couldn't classify license(s)
2018/06/19 13:39:24 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngread.c
2018/06/19 13:39:24 detected language: 4
2018/06/19 13:39:24 " pngread.c - read a PNG file\n *\n * Last changed in libpng 1.6.33 [September 28, 2017]\n * Copyright (c) 1998-2002,2004,2006-2017 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * This file contains routines that an application calls directly to\n * read a PNG file or stream.\n "
2018/06/19 13:39:24 " Create a PNG structure for reading, and allocate any memory needed. "
2018/06/19 13:39:24 " Alternate create PNG structure for reading, and allocate any memory\n * needed.\n "
2018/06/19 13:39:24 " USER_MEM "
2018/06/19 13:39:24 " Added in libpng-1.6.0; this can be used to detect a read structure if\n       * required (it will be zero in a write structure.)\n       "
2018/06/19 13:39:24 " In stable builds only warn if an application error can be completely\n          * handled.\n          "
2018/06/19 13:39:24 " TODO: delay this, it can be done in png_init_io (if the app doesn't\n       * do it itself) avoiding setting the default function if it is not\n       * required.\n       "
2018/06/19 13:39:24 " Read the information before the actual image data.  This has been\n * changed in v0.90 to allow reading a file that already has the magic\n * bytes read from the stream.  You can tell libpng how many bytes have\n * been read from the beginning of the stream (up to the maximum of 8)\n * via png_set_sig_bytes(), and we will only check the remaining bytes\n * here.  The application can then have access to the signature bytes we\n * read if it is determined that this isn't a valid PNG file.\n "
2018/06/19 13:39:24 " Read and check the PNG file signature. "
2018/06/19 13:39:24 " IDAT logic needs to happen here to simplify getting the two flags\n       * right.\n       "
2018/06/19 13:39:24 " This should be a binary subdivision search or a hash for\n       * matching the chunk name rather than a linear search.\n       "
2018/06/19 13:39:24 " It has been consumed "
2018/06/19 13:39:24 " SEQUENTIAL_READ "
2018/06/19 13:39:24 " Optional call to update the users info_ptr structure "
2018/06/19 13:39:24 " New in 1.6.0 this avoids the bug of doing the initializations twice "
2018/06/19 13:39:24 " Initialize palette, background, etc, after transformations\n * are set, but before any reading takes place.  This allows\n * the user to obtain a gamma-corrected palette, for example.\n * If the user doesn't call this, we will do it ourselves.\n "
2018/06/19 13:39:24 " New in 1.6.0 this avoids the bug of doing the initializations twice "
2018/06/19 13:39:24 " SEQUENTIAL_READ "
2018/06/19 13:39:24 " Undoes intrapixel differencing,\n * NOTE: this is apparently only supported in the 'sequential' reader.\n "
2018/06/19 13:39:24 " MNG_FEATURES "
2018/06/19 13:39:24 " png_read_start_row sets the information (in particular iwidth) for this\n    * interlace pass.\n    "
2018/06/19 13:39:24 " 1.5.6: row_info moved out of png_struct to a local here. \n NOTE: width of current interlaced row "
2018/06/19 13:39:24 " Check for transforms that have been set but were defined out "
2018/06/19 13:39:24 " WARNINGS "
2018/06/19 13:39:24 " If interlaced and we do not need a new row, combine row and return.\n    * Notice that the pixels we have from previous rows have been transformed\n    * already; we can only combine like with like (transformed or\n    * untransformed) and, because of the libpng API for interlaced images, this\n    * means we must transform before de-interlacing.\n    "
2018/06/19 13:39:24 "display"
2018/06/19 13:39:24 "display"
2018/06/19 13:39:24 "display"
2018/06/19 13:39:24 "display"
2018/06/19 13:39:24 "display"
2018/06/19 13:39:24 "display"
2018/06/19 13:39:24 " Fill the row with IDAT data: \n to force error if no data was found "
2018/06/19 13:39:24 " libpng 1.5.6: the following line was copying png_ptr->rowbytes before\n    * 1.5.6, while the buffer really is this big in current versions of libpng\n    * it may not be in the future, so this was changed just to copy the\n    * interlaced count:\n    "
2018/06/19 13:39:24 " Intrapixel differencing "
2018/06/19 13:39:24 " The transformed pixel depth should match the depth now in row_info. "
2018/06/19 13:39:24 " Expand interlaced rows to full size "
2018/06/19 13:39:24 "display"
2018/06/19 13:39:24 "row"
2018/06/19 13:39:24 "ignored"
2018/06/19 13:39:24 "ignored"
2018/06/19 13:39:24 " SEQUENTIAL_READ "
2018/06/19 13:39:24 " Read one or more rows of image data.  If the image is interlaced,\n * and png_set_interlace_handling() has been called, the rows need to\n * contain the contents of the rows from the previous pass.  If the\n * image has alpha or transparency, and png_handle_alpha()[*] has been\n * called, the rows contents must be initialized to the contents of the\n * screen.\n *\n * \"row\" holds the actual image, and pixels are placed in it\n * as they arrive.  If the image is displayed after each pass, it will\n * appear to \"sparkle\" in.  \"display_row\" can be used to display a\n * \"chunky\" progressive image, with finer detail added as it becomes\n * available.  If you do not want this \"chunky\" display, you may pass\n * NULL for display_row.  If you do not want the sparkle display, and\n * you have not called png_handle_alpha(), you may pass NULL for rows.\n * If you have called png_handle_alpha(), and the image has either an\n * alpha channel or a transparency chunk, you must provide a buffer for\n * rows.  In this case, you do not have to provide a display_row buffer\n * also, but you may.  If the image is not interlaced, or if you have\n * not called png_set_interlace_handling(), the display_row buffer will\n * be ignored, so pass NULL to it.\n *\n * [*] png_handle_alpha() does not exist yet, as of this version of libpng\n "
2018/06/19 13:39:24 " SEQUENTIAL_READ "
2018/06/19 13:39:24 " Read the entire image.  If the image has an alpha channel or a tRNS\n * chunk, and you have called png_handle_alpha()[*], you will need to\n * initialize the image to the current image that PNG will be overlaying.\n * We set the num_rows again here, in case it was incorrectly set in\n * png_read_start_row() by a call to png_read_update_info() or\n * png_start_read_image() if png_set_interlace_handling() wasn't called\n * prior to either of these functions like it should have been.  You can\n * only call this function once.  If you desire to have an image for\n * each pass of a interlaced image, use png_read_rows() instead.\n *\n * [*] png_handle_alpha() does not exist yet, as of this version of libpng\n "
2018/06/19 13:39:24 " And make sure transforms are initialized. "
2018/06/19 13:39:24 " Caller called png_start_read_image or png_read_update_info without\n          * first turning on the PNG_INTERLACE transform.  We can fix this here,\n          * but the caller should do it!\n          "
2018/06/19 13:39:24 " Make sure this is set correctly "
2018/06/19 13:39:24 " Obtain the pass number, which also turns on the PNG_INTERLACE flag in\n       * the above error case.\n       "
2018/06/19 13:39:24 " SEQUENTIAL_READ "
2018/06/19 13:39:24 " Read the end of the PNG file.  Will not read past the end of the\n * file, will verify the end is accurate, and will read any comments\n * or time information at the end of the file, if info is not NULL.\n "
2018/06/19 13:39:24 " If png_read_end is called in the middle of reading the rows there may\n    * still be pending IDAT data and an owned zstream.  Deal with this here.\n    "
2018/06/19 13:39:24 " Report invalid palette index; added at libng-1.5.10 "
2018/06/19 13:39:24 " Zero length IDATs are legal after the last IDAT has been\n          * read, but not after other chunks have been read.  1.6 does not\n          * always read all the deflate data; specifically it cannot be relied\n          * upon to read the Adler32 at the end.  If it doesn't ignore IDAT\n          * chunks which are longer than zero as well:\n          "
2018/06/19 13:39:24 " SEQUENTIAL_READ "
2018/06/19 13:39:24 " Free all memory used in the read struct "
2018/06/19 13:39:24 " NOTE: the 'setjmp' buffer may still be allocated and the memory and error\n    * callbacks are still set at this point.  They are required to complete the\n    * destruction of the png_struct itself.\n    "
2018/06/19 13:39:24 " Free all memory used by the read "
2018/06/19 13:39:24 " libpng 1.6.0: use the API to destroy info structs to ensure consistent\n    * behavior.  Prior to 1.6.0 libpng did extra 'info' destruction in this API.\n    * The extra was, apparently, unnecessary yet this hides memory leak bugs.\n    "
2018/06/19 13:39:24 " png_read_info() gives us all of the information from the\n    * PNG file before the first IDAT (image data chunk).\n    "
2018/06/19 13:39:24 " -------------- image transformations start here ------------------- \n libpng 1.6.10: add code to cause a png_app_error if a selected TRANSFORM\n    * is not implemented.  This will only happen in de-configured (non-default)\n    * libpng builds.  The results can be unexpected - png_read_png may return\n    * short or mal-formed rows because the transform is skipped.\n    "
2018/06/19 13:39:24 " Tell libpng to strip 16-bit/color files down to 8 bits per color.\n    "
2018/06/19 13:39:24 " Added at libpng-1.5.4. \"strip_16\" produces the same result that it\n       * did in earlier versions, while \"scale_16\" is now more accurate.\n       "
2018/06/19 13:39:24 " If both SCALE and STRIP are required pngrtran will effectively cancel the\n    * latter by doing SCALE first.  This is ok and allows apps not to check for\n    * which is supported to get the right answer.\n    "
2018/06/19 13:39:24 " Strip alpha bytes from the input data without combining with\n    * the background (not recommended).\n    "
2018/06/19 13:39:24 " Extract multiple pixels with bit depths of 1, 2, or 4 from a single\n    * byte into separate bytes (useful for paletted and grayscale images).\n    "
2018/06/19 13:39:24 " Change the order of packed pixels to least significant bit first\n    * (not useful if you are using png_set_packing).\n    "
2018/06/19 13:39:24 " Expand paletted colors into true RGB triplets\n    * Expand grayscale images to full 8 bits from 1, 2, or 4 bits/pixel\n    * Expand paletted or RGB images with transparency to full alpha\n    * channels so the data will be available as RGBA quartets.\n    "
2018/06/19 13:39:24 " We don't handle background color or gamma transformation or quantizing.\n    "
2018/06/19 13:39:24 " Invert monochrome files to have 0 as white and 1 as black\n    "
2018/06/19 13:39:24 " If you want to shift the pixel values from the range [0,255] or\n    * [0,65535] to the original [0,7] or [0,31], or whatever range the\n    * colors were originally in:\n    "
2018/06/19 13:39:24 " Flip the RGB pixels to BGR (or RGBA to BGRA) "
2018/06/19 13:39:24 " Swap the RGBA or GA data to ARGB or AG (or BGRA to ABGR) "
2018/06/19 13:39:24 " Swap bytes of 16-bit files to least significant byte first "
2018/06/19 13:39:24 " Added at libpng-1.2.41 \n Invert the alpha channel from opacity to transparency "
2018/06/19 13:39:24 " Added at libpng-1.2.41 \n Expand grayscale image to RGB "
2018/06/19 13:39:24 " Added at libpng-1.5.4 "
2018/06/19 13:39:24 " We don't handle adding filler bytes "
2018/06/19 13:39:24 " We use png_read_image and rely on that for interlace handling, but we also\n    * call png_read_update_info therefore must turn on interlace handling now:\n    "
2018/06/19 13:39:24 " Optional call to gamma correct and add the background to the palette\n    * and update info structure.  REQUIRED if you are expecting libpng to\n    * update the palette for you (i.e., you selected such a transform above).\n    "
2018/06/19 13:39:24 " -------------- image transformations end here ------------------- "
2018/06/19 13:39:24 " Read rest of file, and get additional chunks in info_ptr - REQUIRED "
2018/06/19 13:39:24 " INFO_IMAGE \n SEQUENTIAL_READ "
2018/06/19 13:39:24 " SIMPLIFIED READ\n *\n * This code currently relies on the sequential reader, though it could easily\n * be made to work with the progressive one.\n "
2018/06/19 13:39:24 " Arguments to png_image_finish_read: "
2018/06/19 13:39:24 " Encoding of PNG data (used by the color-map code) \n File encoding not yet known \n 8-bit encoded to sRGB gamma \n 16-bit linear: not encoded, NOT pre-multiplied! \n 8-bit encoded to file gamma, not sRGB or linear \n 8-bit linear: only from a file value "
2018/06/19 13:39:24 " Color-map processing: after libpng has run on the PNG image further\n * processing may be needed to convert the data to color-map indices.\n "
2018/06/19 13:39:24 " Process GA data to a color-map with alpha \n Process GA data to a background index \n Process RGB data \n Process RGBA data "
2018/06/19 13:39:24 " The following document where the background is for each processing case. "
2018/06/19 13:39:24 " Arguments: "
2018/06/19 13:39:24 " Local variables: "
2018/06/19 13:39:24 " step between rows \n E_ values above \n For P_FILE, reciprocal of gamma \n PNG_CMAP_ values above "
2018/06/19 13:39:24 " Do all the *safe* initialization - 'safe' means that png_error won't be\n * called, so setting up the jmp_buf is not required.  This means that anything\n * called from here must *not* call png_malloc - it has to call png_malloc_warn\n * instead so that control is returned safely back to this routine.\n "
2018/06/19 13:39:24 " And set the rest of the structure to NULL to ensure that the various\n       * fields are consistent.\n       "
2018/06/19 13:39:24 " Error clean up "
2018/06/19 13:39:24 " Utility to find the base format of a PNG file from a png_struct. "
2018/06/19 13:39:24 " Use png_ptr here, not info_ptr, because by examination png_handle_tRNS\n    * sets the png_struct fields; that's all we are interested in here.  The\n    * precise interaction with an app call to png_set_tRNS and PNG file reading\n    * is unclear.\n    "
2018/06/19 13:39:24 " Is the given gamma significantly different from sRGB?  The test is the same\n * one used in pngrtran.c when deciding whether to do gamma correction.  The\n * arithmetic optimizes the division by using the fact that the inverse of the\n * file sRGB gamma is 2.2\n "
2018/06/19 13:39:24 " An uninitialized gamma is assumed to be sRGB for the simplified API. "
2018/06/19 13:39:24 " i.e. *2.2, rounded "
2018/06/19 13:39:24 " Do the main body of a 'png_image_begin_read' function; read the PNG file\n * header and fill in all the information.  This is executed in a safe context,\n * unlike the init routine above.\n "
2018/06/19 13:39:24 "warn"
2018/06/19 13:39:24 " Do this the fast way; just read directly out of png_struct. "
2018/06/19 13:39:24 " Does the colorspace match sRGB?  If there is no color endpoint\n       * (colorant) information assume yes, otherwise require the\n       * 'ENDPOINTS_MATCHP_sRGB' colorspace flag to have been set.  If the\n       * colorspace has been determined to be invalid ignore it.\n       "
2018/06/19 13:39:24 " We need the maximum number of entries regardless of the format the\n    * application sets here.\n    "
2018/06/19 13:39:24 " This is slightly evil, but png_init_io doesn't do anything other\n             * than this and we haven't changed the standard IO functions so\n             * this saves a 'safe' function.\n             "
2018/06/19 13:39:24 " Clean up: just the opened file. "
2018/06/19 13:39:24 " STDIO "
2018/06/19 13:39:24 " Now set the IO functions to read from the memory buffer and\n             * store it into io_ptr.  Again do this in-place to avoid calling a\n             * libpng function that requires error handling.\n             "
2018/06/19 13:39:24 " Utility function to skip chunks that are not used by the simplified image\n * read functions and an appropriate macro to call it.\n "
2018/06/19 13:39:24 " Prepare the reader to ignore all recognized chunks whose data will not\n    * be used, i.e., all chunks recognized by libpng except for those\n    * involved in basic image reading:\n    *\n    *    IHDR, PLTE, IDAT, IEND\n    *\n    * Or image data handling:\n    *\n    *    tRNS, bKGD, gAMA, cHRM, sRGB, [iCCP] and sBIT.\n    *\n    * This provides a small performance improvement and eliminates any\n    * potential vulnerability to security problems in the unused chunks.\n    *\n    * At present the iCCP chunk data isn't used, so iCCP chunk can be ignored\n    * too.  This allows the simplified API to be compiled without iCCP support,\n    * however if the support is there the chunk is still checked to detect\n    * errors (which are unfortunately quite common.)\n    "
2018/06/19 13:39:24 " bKGD \n cHRM \n gAMA "
2018/06/19 13:39:24 " iCCP "
2018/06/19 13:39:24 " sBIT \n sRGB "
2018/06/19 13:39:24 " Ignore unknown chunks and all other chunks except for the\n        * IHDR, PLTE, tRNS, IDAT, and IEND chunks.\n        "
2018/06/19 13:39:24 " But do not ignore image data handling chunks "
2018/06/19 13:39:24 "SAFE"
2018/06/19 13:39:24 " HANDLE_AS_UNKNOWN "
2018/06/19 13:39:24 " The following macro gives the exact rounded answer for all values in the\n * range 0..255 (it actually divides by 51.2, but the rounding still generates\n * the correct numbers 0..5\n "
2018/06/19 13:39:24 " Utility functions to make particular color-maps "
2018/06/19 13:39:24 " double check "
2018/06/19 13:39:24 " must be the file encoding "
2018/06/19 13:39:24 " The file value is composed on the background, the background has the given\n    * encoding and so does the result, the file is encoded with P_FILE and the\n    * file and alpha are 8-bit values.  The (output) encoding will always be\n    * P_LINEAR or P_sRGB.\n    "
2018/06/19 13:39:24 " The alpha is always an 8-bit value (it comes from the palette), the value\n    * scaled by 255 is what PNG_sRGB_FROM_LINEAR requires.\n    "
2018/06/19 13:39:24 " Scale to 65535; divide by 255, approximately (in fact this is extremely\n       * accurate, it divides by 255.00000005937181414556, with no overflow.)\n       "
2018/06/19 13:39:24 " Now scaled by 65535 "
2018/06/19 13:39:24 " P_sRGB "
2018/06/19 13:39:24 " NOTE: P_LINEAR values to this routine must be 16-bit, but P_FILE values must\n * be 8-bit.\n "
2018/06/19 13:39:24 " Update the cache with whether the file gamma is significantly different\n    * from sRGB.\n    "
2018/06/19 13:39:24 " Note that the cached value may be P_FILE too, but if it is then the\n       * gamma_to_linear member has been set.\n       "
2018/06/19 13:39:24 " This encoding occurs quite frequently in test cases because PngSuite\n       * includes a gAMA 1.0 chunk with most images.\n       "
2018/06/19 13:39:24 " The values are 8-bit sRGB values, but must be converted to 16-bit\n       * linear.\n       "
2018/06/19 13:39:24 " This is set if the color isn't gray but the output is. "
2018/06/19 13:39:24 " NOTE: these values are copied from png_do_rgb_to_gray "
2018/06/19 13:39:24 " y is scaled by 32768, we need it scaled by 255: "
2018/06/19 13:39:24 " Store the value. "
2018/06/19 13:39:24 " The linear 16-bit values must be pre-multiplied by the alpha channel\n          * value, if less than 65535 (this is, effectively, composite on black\n          * if the alpha channel is removed.)\n          "
2018/06/19 13:39:24 " FALLTHROUGH "
2018/06/19 13:39:24 " FALLTHROUGH "
2018/06/19 13:39:24 " output encoding is P_sRGB "
2018/06/19 13:39:24 " FALLTHROUGH "
2018/06/19 13:39:24 " FALLTHROUGH "
2018/06/19 13:39:24 " Alpha is retained, the output will be a color-map with entries\n    * selected by six levels of alpha.  One transparent entry, 6 gray\n    * levels for all the intermediate alpha values, leaving 230 entries\n    * for the opaque grays.  The color-map entries are the six values\n    * [0..5]*51, the GA processing uses PNG_DIV51(value) to find the\n    * relevant entry.\n    *\n    * if (alpha > 229) // opaque\n    * {\n    *    // The 231 entries are selected to make the math below work:\n    *    base = 0;\n    *    entry = (231 * gray + 128) >> 8;\n    * }\n    * else if (alpha < 26) // transparent\n    * {\n    *    base = 231;\n    *    entry = 0;\n    * }\n    * else // partially opaque\n    * {\n    *    base = 226 + 6 * PNG_DIV51(alpha);\n    *    entry = PNG_DIV51(gray);\n    * }\n    "
2018/06/19 13:39:24 " 255 is used here for the component values for consistency with the code\n    * that undoes premultiplication in pngwrite.c.\n    "
2018/06/19 13:39:24 " Build a 6x6x6 opaque RGB cube "
2018/06/19 13:39:24 " Return a palette index to the above palette given three 8-bit sRGB values. "
2018/06/19 13:39:24 " Output processing option \n Encoding libpng must produce "
2018/06/19 13:39:24 " Background information; the background color and the index of this color\n    * in the color-map if it exists (else 256).\n    "
2018/06/19 13:39:24 " Flags to accumulate things that need to be done to the input. "
2018/06/19 13:39:24 " Exclude the NYI feature of compositing onto a color-mapped buffer; it is\n    * very difficult to do, the results look awful, and it is difficult to see\n    * what possible use it is because the application can't control the\n    * color-map.\n    "
2018/06/19 13:39:24 " alpha in input \n no alpha in output "
2018/06/19 13:39:24 " compose on black "
2018/06/19 13:39:24 " no way to remove it "
2018/06/19 13:39:24 " Get a copy of the background color (this avoids repeating the checks\n       * below.)  The encoding is 8-bit sRGB or 16-bit linear, depending on the\n       * output format.\n       "
2018/06/19 13:39:24 " Default the input file gamma if required - this is necessary because\n    * libpng assumes that if no gamma information is present the data is in the\n    * output format, but the simplified API deduces the gamma from the input\n    * format.\n    "
2018/06/19 13:39:24 " Do this directly, not using the png_colorspace functions, to ensure\n       * that it happens even if the colorspace is invalid (though probably if\n       * it is the setting will be ignored)  Note that the same thing can be\n       * achieved at the application interface with png_set_gAMA.\n       "
2018/06/19 13:39:24 " Decide what to do based on the PNG color type of the input data.  The\n    * utility function png_create_colormap_entry deals with most aspects of the\n    * output transformations; this code works out how to produce bytes of\n    * color-map entries from the original format.\n    "
2018/06/19 13:39:24 " There at most 256 colors in the output, regardless of\n             * transparency.\n             "
2018/06/19 13:39:24 "ignore"
2018/06/19 13:39:24 " If there is a tRNS chunk then this either selects a transparent\n             * value or, if the output has no alpha, the background color.\n             "
2018/06/19 13:39:24 " png_create_colormap_entry just takes an RGBA and writes the\n             * corresponding color-map entry using the format from 'image',\n             * including the required conversion to sRGB or linear as\n             * appropriate.  The input values are always either sRGB (if the\n             * gamma correction flag is 0) or 0..255 scaled file encoded values\n             * (if the function must gamma correct them).\n             "
2018/06/19 13:39:24 " 'i' is a file value.  While this will result in duplicated\n                * entries for 8-bit non-sRGB encoded files it is necessary to\n                * have non-gamma corrected values to do tRNS handling.\n                "
2018/06/19 13:39:24 "8-bit with file gamma"
2018/06/19 13:39:24 " Else this entry is transparent.  The colors don't matter if\n                * there is an alpha channel (back_alpha == 0), but it does no\n                * harm to pass them in; the values are not set above so this\n                * passes in white.\n                *\n                * NOTE: this preserves the full precision of the application\n                * supplied background color when it is used.\n                "
2018/06/19 13:39:24 " We need libpng to preserve the original encoding. "
2018/06/19 13:39:24 " The rows from libpng, while technically gray values, are now also\n             * color-map indices; however, they may need to be expanded to 1\n             * byte per pixel.  This is what png_set_packing does (i.e., it\n             * unpacks the bit values into bytes.)\n             "
2018/06/19 13:39:24 " bit depth is 16 "
2018/06/19 13:39:24 " The 16-bit input values can be converted directly to 8-bit gamma\n             * encoded values; however, if a tRNS chunk is present 257 color-map\n             * entries are required.  This means that the extra entry requires\n             * special processing; add an alpha channel, sacrifice gray level\n             * 254 and convert transparent (alpha==0) entries to that.\n             *\n             * Use libpng to chop the data to 8 bits.  Convert it to sRGB at the\n             * same time to minimize quality loss.  If a tRNS chunk is present\n             * this means libpng must handle it too; otherwise it is impossible\n             * to do the exact match on the 16-bit value.\n             *\n             * If the output has no alpha channel *and* the background color is\n             * gray then it is possible to let libpng handle the substitution by\n             * ensuring that the corresponding gray level matches the background\n             * color exactly.\n             "
2018/06/19 13:39:24 " Background is gray; no special processing will be\n                      * required.\n                      "
2018/06/19 13:39:24 " And make sure the corresponding palette entry\n                         * matches.\n                         "
2018/06/19 13:39:24 " The background passed to libpng, however, must be the\n                      * sRGB value.\n                      "
2018/06/19 13:39:24 "unused"
2018/06/19 13:39:24 " NOTE: does this work without expanding tRNS to alpha?\n                      * It should be the color->gray case below apparently\n                      * doesn't.\n                      "
2018/06/19 13:39:24 "need_expand\ngamma: not used"
2018/06/19 13:39:24 " Coverity claims that output_encoding cannot be 2 (P_LINEAR)\n                  * here.\n                  "
2018/06/19 13:39:24 " output_processing means that the libpng-processed row will be\n                * 8-bit GA and it has to be processing to single byte color-map\n                * values.  Entry 254 is replaced by either a completely\n                * transparent entry or by the background color at full\n                * precision (and the background color is not a simple gray\n                * level in this case.)\n                "
2018/06/19 13:39:24 " And set (overwrite) color-map entry 254 to the actual\n                * background color at full precision.\n                "
2018/06/19 13:39:24 " 8-bit or 16-bit PNG with two channels - gray and alpha.  A minimum\n          * of 65536 combinations.  If, however, the alpha channel is to be\n          * removed there are only 256 possibilities if the background is gray.\n          * (Otherwise there is a subset of the 65536 possibilities defined by\n          * the triangle between black, white and the background color.)\n          *\n          * Reduce 16-bit files to 8-bit and sRGB encode the result.  No need to\n          * worry about tRNS matching - tRNS is ignored if there is an alpha\n          * channel.\n          "
2018/06/19 13:39:24 " alpha is removed "
2018/06/19 13:39:24 " Alpha must be removed as the PNG data is processed when the\n             * background is a color because the G and A channels are\n             * independent and the vector addition (non-parallel vectors) is a\n             * 2-D problem.\n             *\n             * This can be reduced to the same algorithm as above by making a\n             * colormap containing gray levels (for the opaque grays), a\n             * background entry (for a transparent pixel) and a set of four six\n             * level color values, one set for each intermediate alpha value.\n             * See the comments in make_ga_colormap for how this works in the\n             * per-pixel processing.\n             *\n             * If the background is gray, however, we only need a 256 entry gray\n             * level color map.  It is sufficient to make the entry generated\n             * for the background color be exactly the color specified.\n             "
2018/06/19 13:39:24 " Background is gray; no special processing will be required. "
2018/06/19 13:39:24 " And make sure the corresponding palette entry matches. "
2018/06/19 13:39:24 " The background passed to libpng, however, must be the sRGB\n                * value.\n                "
2018/06/19 13:39:24 "unused"
2018/06/19 13:39:24 "need_expand\ngamma: not used"
2018/06/19 13:39:24 " This is the same as png_make_ga_colormap, above, except that\n                * the entries are all opaque.\n                "
2018/06/19 13:39:24 " NOTE: this preserves the full precision of the application\n                * background color.\n                "
2018/06/19 13:39:24 " Coverity claims that output_encoding\n                    * cannot be 2 (P_LINEAR) here.\n                    "
2018/06/19 13:39:24 " For non-opaque input composite on the sRGB background - this\n                * requires inverting the encoding for each component.  The input\n                * is still converted to the sRGB encoding because this is a\n                * reasonable approximate to the logarithmic curve of human\n                * visual sensitivity, at least over the narrow range which PNG\n                * represents.  Consequently 'G' is always sRGB encoded, while\n                * 'A' is linear.  We need the linear background colors.\n                "
2018/06/19 13:39:24 " else already linear "
2018/06/19 13:39:24 " This may produce a value not exactly matching the\n                   * background, but that's ok because these numbers are only\n                   * used when alpha != 0\n                   "
2018/06/19 13:39:24 " PNG_sRGB_FROM_LINEAR expects a 16-bit linear value scaled\n                   * by an 8-bit alpha value (0..255).\n                   "
2018/06/19 13:39:24 " Exclude the case where the output is gray; we can always handle this\n          * with the cases above.\n          "
2018/06/19 13:39:24 " The color-map will be grayscale, so we may as well convert the\n             * input RGB values to a simple grayscale and use the grayscale\n             * code above.\n             *\n             * NOTE: calling this apparently damages the recognition of the\n             * transparent color in background color handling; call\n             * png_set_tRNS_to_alpha before png_set_background_fixed.\n             "
2018/06/19 13:39:24 " The output will now be one or two 8-bit gray or gray+alpha\n             * channels.  The more complex case arises when the input has alpha.\n             "
2018/06/19 13:39:24 " Both input and output have an alpha channel, so no background\n                * processing is required; just map the GA bytes to the right\n                * color-map entry.\n                "
2018/06/19 13:39:24 " Either the input or the output has no alpha channel, so there\n                * will be no non-opaque pixels in the color-map; it will just be\n                * grayscale.\n                "
2018/06/19 13:39:24 " Ideally this code would use libpng to do the gamma correction,\n                * but if an input alpha channel is to be removed we will hit the\n                * libpng bug in gamma+compose+rgb-to-gray (the double gamma\n                * correction bug).  Fix this by dropping the gamma correction in\n                * this case and doing it in the palette; this will result in\n                * duplicate palette entries, but that's better than the\n                * alternative of double gamma correction.\n                "
2018/06/19 13:39:24 " But if the input has alpha or transparency it must be removed\n                "
2018/06/19 13:39:24 " We need to ensure that the application background exists in\n                   * the colormap and that completely transparent pixels map to\n                   * it.  Achieve this simply by ensuring that the entry\n                   * selected for the background really is the background color.\n                   "
2018/06/19 13:39:24 " from the fixup above "
2018/06/19 13:39:24 " The app supplied a gray which is in output_encoding, we\n                      * need to convert it to a value of the input (P_FILE)\n                      * encoding then set this palette entry to the required\n                      * output encoding.\n                      "
2018/06/19 13:39:24 " now P_LINEAR "
2018/06/19 13:39:24 " now P_FILE "
2018/06/19 13:39:24 " And make sure the corresponding palette entry contains\n                      * exactly the required sRGB value.\n                      "
2018/06/19 13:39:24 "unused"
2018/06/19 13:39:24 " And make sure the corresponding palette entry matches.\n                      "
2018/06/19 13:39:24 "unused"
2018/06/19 13:39:24 " The background passed to libpng, however, must be the\n                   * output (normally sRGB) value.\n                   "
2018/06/19 13:39:24 "unused"
2018/06/19 13:39:24 " NOTE: the following is apparently a bug in libpng. Without\n                   * it the transparent color recognition in\n                   * png_set_background_fixed seems to go wrong.\n                   "
2018/06/19 13:39:24 "need_expand\ngamma: not used"
2018/06/19 13:39:24 " output is color "
2018/06/19 13:39:24 " We could use png_quantize here so long as there is no transparent\n             * color or alpha; png_quantize ignores alpha.  Easier overall just\n             * to do it once and using PNG_DIV51 on the 6x6x6 reduced RGB cube.\n             * Consequently we always want libpng to produce sRGB data.\n             "
2018/06/19 13:39:24 " Is there any transparency or alpha? "
2018/06/19 13:39:24 " Is there alpha in the output too?  If so all four channels are\n                * processed into a special RGB cube with alpha support.\n                "
2018/06/19 13:39:24 " Add a transparent entry. "
2018/06/19 13:39:24 " This is stored as the background index for the processing\n                   * algorithm.\n                   "
2018/06/19 13:39:24 " Add 27 r,g,b entries each with alpha 0.5. "
2018/06/19 13:39:24 " This generates components with the values 0, 127 and\n                         * 255\n                         "
2018/06/19 13:39:24 " Alpha/transparency must be removed.  The background must\n                   * exist in the color map (achieved by setting adding it after\n                   * the 666 color-map).  If the standard processing code will\n                   * pick up this entry automatically that's all that is\n                   * required; libpng can be called to do the background\n                   * processing.\n                   "
2018/06/19 13:39:24 " sRGB background "
2018/06/19 13:39:24 "unused"
2018/06/19 13:39:24 " Compare the newly-created color-map entry with the one the\n                   * PNG_CMAP_RGB algorithm will use.  If the two entries don't\n                   * match, add the new one and set this as the background\n                   * index.\n                   "
2018/06/19 13:39:24 " The background color must be added. "
2018/06/19 13:39:24 " Add 27 r,g,b entries each with created by composing with\n                      * the background at alpha 0.5.\n                      "
2018/06/19 13:39:24 " This generates components with the values 0, 127\n                            * and 255\n                            "
2018/06/19 13:39:24 "unused"
2018/06/19 13:39:24 " background color is in the standard color-map "
2018/06/19 13:39:24 "unused"
2018/06/19 13:39:24 "need_expand\ngamma: not used"
2018/06/19 13:39:24 " no alpha or transparency in the input "
2018/06/19 13:39:24 " Alpha in the output is irrelevant, simply map the opaque input\n                * pixels to the 6x6x6 color-map.\n                "
2018/06/19 13:39:24 " It's already got a color-map.  It may be necessary to eliminate the\n          * tRNS entries though.\n          "
2018/06/19 13:39:24 " Just in case: "
2018/06/19 13:39:24 " Don't change from color-map indices "
2018/06/19 13:39:24 " Must compose the PNG file color in the color-map entry\n                      * on the sRGB color in 'back'.\n                      "
2018/06/19 13:39:24 "8-bit"
2018/06/19 13:39:24 " The PNG data may have indices packed in fewer than 8 bits, it\n             * must be expanded if so.\n             "
2018/06/19 13:39:24 "NOT REACHED"
2018/06/19 13:39:24 " Now deal with the output processing "
2018/06/19 13:39:24 " Change to 8-bit sRGB "
2018/06/19 13:39:24 " FALLTHROUGH "
2018/06/19 13:39:24 " Double check using the recorded background index "
2018/06/19 13:39:24 "ok"
2018/06/19 13:39:24 " The final part of the color-map read called from png_image_finish_read. "
2018/06/19 13:39:24 " Called when the libpng data must be transformed into the color-mapped\n    * form.  There is a local row buffer in display->local and this routine must\n    * do the interlace handling.\n    "
2018/06/19 13:39:24 " The row may be empty for a short image: "
2018/06/19 13:39:24 " Read read the libpng data into the temporary buffer. "
2018/06/19 13:39:24 " Now process the row according to the processing option, note\n             * that the caller verifies that the format of the libpng output\n             * data is as required.\n             "
2018/06/19 13:39:24 " The data is always in the PNG order "
2018/06/19 13:39:24 " NOTE: this code is copied as a comment in\n                      * make_ga_colormap above.  Please update the\n                      * comment if you change this code!\n                      "
2018/06/19 13:39:24 " opaque "
2018/06/19 13:39:24 " transparent "
2018/06/19 13:39:24 " partially opaque "
2018/06/19 13:39:24 " Because the alpha entries only hold alpha==0.5 values\n                      * split the processing at alpha==0.25 (64) and 0.75\n                      * (196).\n                      "
2018/06/19 13:39:24 " Likewise there are three entries for each of r, g\n                         * and b.  We could select the entry by popcount on\n                         * the top two bits on those architectures that\n                         * support it, this is what the code below does,\n                         * crudely.\n                         "
2018/06/19 13:39:24 " Here are how the values map:\n                         *\n                         * 0x00 .. 0x3f -> 0\n                         * 0x40 .. 0xbf -> 1\n                         * 0xc0 .. 0xff -> 2\n                         *\n                         * So, as above with the explicit alpha checks, the\n                         * breakpoints are at 64 and 196.\n                         "
2018/06/19 13:39:24 " red "
2018/06/19 13:39:24 " green "
2018/06/19 13:39:24 " blue "
2018/06/19 13:39:24 " As a flag "
2018/06/19 13:39:24 " Update the 'info' structure and make sure the result is as required; first\n    * make sure to turn on the interlace handling if it will be required\n    * (because it can't be turned on *after* the call to png_read_update_info!)\n    "
2018/06/19 13:39:24 " The expected output can be deduced from the colormap_processing option. "
2018/06/19 13:39:24 " Output must be one channel and one byte per pixel, the output\n          * encoding can be anything.\n          "
2018/06/19 13:39:24 " Output must be two channels and the 'G' one must be sRGB, the latter\n          * can be checked with an exact number because it should have been set\n          * to this number above!\n          "
2018/06/19 13:39:24 " Output must be 8-bit sRGB encoded RGB "
2018/06/19 13:39:24 " Output must be 8-bit sRGB encoded RGBA "
2018/06/19 13:39:24 " 216 + 1 + 27 "
2018/06/19 13:39:24 " Now read the rows.  Do this here if it is possible to read directly into\n    * the output buffer, otherwise allocate a local row buffer of the maximum\n    * size libpng requires and call the relevant processing routine safely.\n    "
2018/06/19 13:39:24 " The following expression is designed to work correctly whether it gives\n       * a signed or an unsigned result.\n       "
2018/06/19 13:39:24 " Just the row reading part of png_image_read. "
2018/06/19 13:39:24 " The row may be empty for a short image: "
2018/06/19 13:39:24 " Read the row, which is packed: "
2018/06/19 13:39:24 " Now do the composition on each pixel in this row. "
2018/06/19 13:39:24 " else no change to the output "
2018/06/19 13:39:24 " else just use component "
2018/06/19 13:39:24 " This is PNG_OPTIMIZED_ALPHA, the component value\n                         * is a linear 8-bit value.  Combine this with the\n                         * current outrow[c] value which is sRGB encoded.\n                         * Arithmetic here is 16-bits to preserve the output\n                         * values correctly.\n                         "
2018/06/19 13:39:24 " =65535 "
2018/06/19 13:39:24 " So 'component' is scaled by 255*65535 and is\n                         * therefore appropriate for the sRGB to linear\n                         * conversion table.\n                         "
2018/06/19 13:39:24 " components and alpha channel "
2018/06/19 13:39:24 " The do_local_background case; called when all the following transforms are to\n * be done:\n *\n * PNG_RGB_TO_GRAY\n * PNG_COMPOSITE\n * PNG_GAMMA\n *\n * This is a work-around for the fact that both the PNG_RGB_TO_GRAY and\n * PNG_COMPOSITE code performs gamma correction, so we get double gamma\n * correction.  The fix-up is to prevent the PNG_COMPOSITE operation from\n * happening inside libpng, so this routine sees an 8 or 16-bit gray+alpha\n * row and handles the removal or pre-multiplication of the alpha channel.\n "
2018/06/19 13:39:24 " Double check the convoluted logic below.  We expect to get here with\n    * libpng doing rgb to gray and gamma correction but background processing\n    * left to the png_image_read_background function.  The rows libpng produce\n    * might be 8 or 16-bit but should always have two channels; gray plus alpha.\n    "
2018/06/19 13:39:24 " Expect the 8-bit case to always remove the alpha channel "
2018/06/19 13:39:24 " Use direct access to info_ptr here because otherwise the simplified API\n    * would require PNG_EASY_ACCESS_SUPPORTED (just for this.)  Note this is\n    * checking the value after libpng expansions, not the original value in the\n    * PNG.\n    "
2018/06/19 13:39:24 " 8-bit sRGB gray values with an alpha channel; the alpha channel is\n          * to be removed by composing on a background: either the row if\n          * display->background is NULL or display->background->green if not.\n          * Unlike the code above ALPHA_OPTIMIZED has *not* been done.\n          "
2018/06/19 13:39:24 " The row may be empty for a short image: "
2018/06/19 13:39:24 " Read the row, which is packed: "
2018/06/19 13:39:24 " Now do the composition on each pixel in this row. "
2018/06/19 13:39:24 " else no change to the output "
2018/06/19 13:39:24 " else just use component "
2018/06/19 13:39:24 " Since PNG_OPTIMIZED_ALPHA was not set it is\n                               * necessary to invert the sRGB transfer\n                               * function and multiply the alpha out.\n                               "
2018/06/19 13:39:24 " gray and alpha channel "
2018/06/19 13:39:24 " constant background value "
2018/06/19 13:39:24 " Read the row, which is packed: "
2018/06/19 13:39:24 " Now do the composition on each pixel in this row. "
2018/06/19 13:39:24 " else use background "
2018/06/19 13:39:24 " else just use component "
2018/06/19 13:39:24 " gray and alpha channel "
2018/06/19 13:39:24 " 16-bit linear with pre-multiplied alpha; the pre-multiplication must\n          * still be done and, maybe, the alpha channel removed.  This code also\n          * handles the alpha-first option.\n          "
2018/06/19 13:39:24 " The division by two is safe because the caller passed in a\n             * stride which was multiplied by 2 (below) to get row_bytes.\n             "
2018/06/19 13:39:24 " The 'x' start and step are adjusted to output components here.\n                "
2018/06/19 13:39:24 " The row may be empty for a short image: "
2018/06/19 13:39:24 " Read the row, which is packed: "
2018/06/19 13:39:24 " Now do the pre-multiplication on each pixel in this row.\n                   "
2018/06/19 13:39:24 " else 0 "
2018/06/19 13:39:24 " else just use component "
2018/06/19 13:39:24 " components and alpha channel "
2018/06/19 13:39:24 " The guts of png_image_finish_read as a png_safe_execute callback. "
2018/06/19 13:39:24 " to avoid double gamma correction bug "
2018/06/19 13:39:24 " Add transforms to ensure the correct output format is produced then check\n    * that the required implementation support is there.  Always expand; always\n    * need 8 bits minimum, no palette and expanded tRNS.\n    "
2018/06/19 13:39:24 " Now check the format to see if it was modified. "
2018/06/19 13:39:24 " removed by png_set_expand "
2018/06/19 13:39:24 " alpha mode "
2018/06/19 13:39:24 " Do this first so that we have a record if rgb to gray is happening. "
2018/06/19 13:39:24 " gray<->color transformation required. "
2018/06/19 13:39:24 " libpng can't do both rgb to gray and\n             * background/pre-multiplication if there is also significant gamma\n             * correction, because both operations require linear colors and\n             * the code only supports one transform doing the gamma correction.\n             * Handle this by doing the pre-multiplication or background\n             * operation in this code, if necessary.\n             *\n             * TODO: fix this by rewriting pngrtran.c (!)\n             *\n             * For the moment (given that fixing this in pngrtran.c is an\n             * enormous change) 'do_local_background' is used to indicate that\n             * the problem exists.\n             "
2018/06/19 13:39:24 "maybe"
2018/06/19 13:39:24 " Set the gamma appropriately, linear for 16-bit input, sRGB otherwise.\n       "
2018/06/19 13:39:24 " Call png_set_alpha_mode to set the default for the input gamma; the\n          * output gamma is set by a second call below.\n          "
2018/06/19 13:39:24 " If there *is* an alpha channel in the input it must be multiplied\n          * out; use PNG_ALPHA_STANDARD, otherwise just use PNG_ALPHA_PNG.\n          "
2018/06/19 13:39:24 " associated alpha "
2018/06/19 13:39:24 " If 'do_local_background' is set check for the presence of gamma\n       * correction; this is part of the work-round for the libpng bug\n       * described above.\n       *\n       * TODO: fix libpng and remove this.\n       "
2018/06/19 13:39:24 " This is 'png_gamma_threshold' from pngrtran.c; the test used for\n          * gamma correction, the screen gamma hasn't been set on png_struct\n          * yet; it's set below.  png_struct::gamma, however, is set to the\n          * final value.\n          "
2018/06/19 13:39:24 "required\n prevent libpng doing it "
2018/06/19 13:39:24 " else leave as 1 for the checks below "
2018/06/19 13:39:24 " If the bit-depth changes then handle that here. "
2018/06/19 13:39:24 "16-bit output"
2018/06/19 13:39:24 " 8-bit output "
2018/06/19 13:39:24 " Now the background/alpha channel changes. "
2018/06/19 13:39:24 " Removing an alpha channel requires composition for the 8-bit\n          * formats; for the 16-bit it is already done, above, by the\n          * pre-multiplication and the channel just needs to be stripped.\n          "
2018/06/19 13:39:24 " If RGB->gray is happening the alpha channel must be left and the\n             * operation completed locally.\n             *\n             * TODO: fix libpng and remove this.\n             "
2018/06/19 13:39:24 "required"
2018/06/19 13:39:24 " 16-bit output: just remove the channel \n compose on black (well, pre-multiply) "
2018/06/19 13:39:24 " 8-bit output: do an appropriate compose "
2018/06/19 13:39:24 "unused"
2018/06/19 13:39:24 " This is always an 8-bit sRGB value, using the 'green' channel\n                * for gray is much better than calculating the luminance here;\n                * we can get off-by-one errors in that calculation relative to\n                * the app expectations and that will show up in transparent\n                * pixels.\n                "
2018/06/19 13:39:24 "need_expand\ngamma: not used"
2018/06/19 13:39:24 " compose on row: implemented below. "
2018/06/19 13:39:24 " This leaves the alpha channel in the output, so it has to be\n                * removed by the code below.  Set the encoding to the 'OPTIMIZE'\n                * one so the code only has to hack on the pixels that require\n                * composition.\n                "
2018/06/19 13:39:24 " output needs an alpha channel "
2018/06/19 13:39:24 " This is tricky because it happens before the swap operation has\n             * been accomplished; however, the swap does *not* swap the added\n             * alpha channel (weird API), so it must be added in the correct\n             * place.\n             "
2018/06/19 13:39:24 " opaque filler "
2018/06/19 13:39:24 " This stops the (irrelevant) call to swap_alpha below. "
2018/06/19 13:39:24 " Now set the alpha mode correctly; this is always done, even if there is\n       * no alpha channel in either the input or the output because it correctly\n       * sets the output gamma.\n       "
2018/06/19 13:39:24 " Check only the output format; PNG is never BGR; don't do this if\n             * the output is gray, but fix up the 'format' value in that case.\n             "
2018/06/19 13:39:24 " Only relevant if there is an alpha channel - it's particularly\n             * important to handle this correctly because do_local_compose may\n             * be set above and then libpng will keep the alpha channel for this\n             * code to remove.\n             "
2018/06/19 13:39:24 " Disable this if doing a local background,\n                * TODO: remove this when local background is no longer required.\n                "
2018/06/19 13:39:24 " If the *output* is 16-bit then we need to check for a byte-swap on this\n       * architecture.\n       "
2018/06/19 13:39:24 " If change is not now 0 some transformation is missing - error out. "
2018/06/19 13:39:24 " Update the 'info' structure and make sure the result is as required; first\n    * make sure to turn on the interlace handling if it will be required\n    * (because it can't be turned on *after* the call to png_read_update_info!)\n    *\n    * TODO: remove the do_local_background fixup below.\n    "
2018/06/19 13:39:24 " do_local_compose removes this channel below. "
2018/06/19 13:39:24 " do_local_background does the same if required. "
2018/06/19 13:39:24 " internal error "
2018/06/19 13:39:24 " This is actually an internal error. "
2018/06/19 13:39:24 " Now read the rows.  If do_local_compose is set then it is necessary to use\n    * a local row buffer.  The output will be GA, RGBA or BGRA and must be\n    * converted to G, RGB or BGR as appropriate.  The 'local_row' member of the\n    * display acts as a flag.\n    "
2018/06/19 13:39:24 " The following expression is designed to work correctly whether it gives\n       * a signed or an unsigned result.\n       "
2018/06/19 13:39:24 " Check for row_stride overflow.  This check is not performed on the\n       * original PNG format because it may not occur in the output PNG format\n       * and libpng deals with the issues of reading the original.\n       "
2018/06/19 13:39:24 " The following checks just the 'row_stride' calculation to ensure it\n       * fits in a signed 32-bit value.  Because channels/components can be\n       * either 1 or 2 bytes in size the length of a row can still overflow 32\n       * bits; this is just to verify that the 'row_stride' argument can be\n       * represented.\n       "
2018/06/19 13:39:24 " no overflow "
2018/06/19 13:39:24 "SAFE"
2018/06/19 13:39:24 " This verifies 'check', the absolute value of the actual stride\n          * passed in and detects overflow in the application calculation (i.e.\n          * if the app did actually pass in a non-zero 'row_stride'.\n          "
2018/06/19 13:39:24 " Now check for overflow of the image buffer calculation; this\n             * limits the whole image size to 32 bits for API compatibility with\n             * the current, 32-bit, PNG_IMAGE_BUFFER_SIZE macro.\n             *\n             * The PNG_IMAGE_BUFFER_SIZE macro is:\n             *\n             *    (PNG_IMAGE_PIXEL_COMPONENT_SIZE(fmt)*height*(row_stride))\n             *\n             * And the component size is always 1 or 2, so make sure that the\n             * number of *bytes* that the application is saying are available\n             * does actually fit into a 32-bit number.\n             *\n             * NOTE: this will be changed in 1.7 because PNG_IMAGE_BUFFER_SIZE\n             * will be changed to use png_alloc_size_t; bigger images can be\n             * accomodated on 64-bit systems.\n             "
2018/06/19 13:39:24 " Choose the correct 'end' routine; for the color-map case\n                   * all the setup has already been done.\n                   "
2018/06/19 13:39:24 " SIMPLIFIED_READ \n READ "
2018/06/19 13:39:24 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngread.c": 187.015616ms
2018/06/19 13:39:24 Couldn't classify license(s)
2018/06/19 13:39:25 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/arm/arm_init.c
2018/06/19 13:39:25 detected language: 4
2018/06/19 13:39:25 " arm_init.c - NEON optimised filter functions\n *\n * Copyright (c) 2014,2016 Glenn Randers-Pehrson\n * Written by Mans Rullgard, 2011.\n * Last changed in libpng 1.6.22 [May 26, 2016]\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:39:25 " Below, after checking __linux__, various non-C90 POSIX 1003.1 functions are\n * called.\n "
2018/06/19 13:39:25 " Do run-time checks \n WARNING: it is strongly recommended that you do not build libpng with\n * run-time checks for CPU features if at all possible.  In the case of the ARM\n * NEON instructions there is no processor-specific way of detecting the\n * presence of the required support, therefore run-time detection is extremely\n * OS specific.\n *\n * You may set the macro PNG_ARM_NEON_FILE to the file name of file containing\n * a fragment of C source code which defines the png_have_neon function.  There\n * are a number of implementations in contrib/arm-neon, but the only one that\n * has partial support is contrib/arm-neon/linux.c - a generic Linux\n * implementation which reads /proc/cpufino.\n "
2018/06/19 13:39:25 " for sig_atomic_t "
2018/06/19 13:39:25 " PNG_ARM_NEON_FILE "
2018/06/19 13:39:25 " PNG_ARM_NEON_FILE \n PNG_ARM_NEON_CHECK_SUPPORTED "
2018/06/19 13:39:25 " The switch statement is compiled in for ARM_NEON_API, the call to\n    * png_have_neon is compiled in for ARM_NEON_CHECK.  If both are defined\n    * the check is only performed if the API has not set the NEON option on\n    * or off explicitly.  In this case the check controls what happens.\n    *\n    * If the CHECK is not compiled in and the option is UNSET the behavior prior\n    * to 1.6.7 was to use the NEON code - this was a bug caused by having the\n    * wrong order of the 'ON' and 'default' cases.  UNSET now defaults to OFF,\n    * as documented in png.h\n    "
2018/06/19 13:39:25 " Allow the run-time check to execute if it has been enabled -\n          * thus both API and CHECK can be turned on.  If it isn't supported\n          * this case will fall through to the 'default' below, which just\n          * returns.\n          "
2018/06/19 13:39:25 " PNG_ARM_NEON_API_SUPPORTED "
2018/06/19 13:39:25 " not checked "
2018/06/19 13:39:25 " PNG_ARM_NEON_CHECK_SUPPORTED "
2018/06/19 13:39:25 " OFF or INVALID "
2018/06/19 13:39:25 " Option turned on "
2018/06/19 13:39:25 " IMPORTANT: any new external functions used here must be declared using\n    * PNG_INTERNAL_FUNCTION in ../pngpriv.h.  This is required so that the\n    * 'prefix' option to configure works:\n    *\n    *    ./configure --with-libpng-prefix=foobar_\n    *\n    * Verify you have got this right by running the above command, doing a build\n    * and examining pngprefix.h; it must contain a #define for every external\n    * function you add.  (Notice that this happens automatically for the\n    * initialization function.)\n    "
2018/06/19 13:39:25 " PNG_ARM_NEON_OPT > 0 \n READ "
2018/06/19 13:39:25 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/arm/arm_init.c": 18.123195ms
2018/06/19 13:39:25 Couldn't classify license(s)
2018/06/19 13:39:26 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/arm/filter_neon_intrinsics.c
2018/06/19 13:39:26 detected language: 4
2018/06/19 13:39:26 " filter_neon_intrinsics.c - NEON optimised filter functions\n *\n * Copyright (c) 2014,2016 Glenn Randers-Pehrson\n * Written by James Yu <james.yu at linaro.org>, October 2013.\n * Based on filter_neon.S, written by Mans Rullgard, 2011.\n *\n * Last changed in libpng 1.6.22 [May 26, 2016]\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:39:26 " This code requires -mfpu=neon on the command line: \n intrinsics code from pngpriv.h "
2018/06/19 13:39:26 " libpng row pointers are not necessarily aligned to any particular boundary,\n * however this code will only work with appropriate alignment.  arm/arm_init.c\n * checks for this (and will not compile unless it is done). This code uses\n * variants of png_aligncast to avoid compiler warnings.\n "
2018/06/19 13:39:26 " The following relies on a variable 'temp_pointer' being declared with type\n * 'type'.  This is written this way just to hide the GCC strict aliasing\n * warning; note that the code is safe because there never is an alias between\n * the input and output pointers.\n "
2018/06/19 13:39:26 " a + b \n c * 2 \n pa \n pb \n pc "
2018/06/19 13:39:26 " pa <= pb \n pa <= pc \n pb <= pc "
2018/06/19 13:39:26 " pa <= pb && pa <= pc "
2018/06/19 13:39:26 " PNG_ARM_NEON_OPT > 0 \n PNG_ARM_NEON_IMPLEMENTATION == 1 (intrinsics) \n READ "
2018/06/19 13:39:26 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/arm/filter_neon_intrinsics.c": 16.983853ms
2018/06/19 13:39:26 Couldn't classify license(s)
2018/06/19 13:39:27 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/arm/filter_neon.S
2018/06/19 13:39:27 detected language: 2
2018/06/19 13:39:27 " filter_neon.S - NEON optimised filter functions\n *\n * Copyright (c) 2014,2017 Glenn Randers-Pehrson\n * Written by Mans Rullgard, 2011.\n * Last changed in libpng 1.6.31 [July 27, 2017]\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:39:27 " This is required to get the symbol renames, which are #defines, and the\n * definitions (or not) of PNG_ARM_NEON_OPT and PNG_ARM_NEON_IMPLEMENTATION.\n "
2018/06/19 13:39:27 " mark stack as non-executable "
2018/06/19 13:39:27 " Assembler NEON support - only works for 32-bit ARM (i.e. it does not work for\n * ARM64).  The code in arm/filter_neon_intrinsics.c supports ARM64, however it\n * only works if -mfpu=neon is specified on the GCC command line.  See pngpriv.h\n * for the logic which sets PNG_USE_ARM_NEON_ASM:\n "
2018/06/19 13:39:27 " hand-coded assembler "
2018/06/19 13:39:27 " Explicitly specifying alignment here because some versions of\n         * GAS don't align code correctly.  This is harmless in correctly\n         * written versions of GAS.\n         "
2018/06/19 13:39:27 " PNG_ARM_NEON_OPT > 0 \n PNG_ARM_NEON_IMPLEMENTATION == 2 (assembler) \n READ "
2018/06/19 13:39:27 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/arm/filter_neon.S": 14.765138ms
2018/06/19 13:39:27 Couldn't classify license(s)
2018/06/19 13:39:28 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngmem.c
2018/06/19 13:39:28 detected language: 4
2018/06/19 13:39:28 " pngmem.c - stub functions for memory allocation\n *\n * Last changed in libpng 1.6.26 [October 20, 2016]\n * Copyright (c) 1998-2002,2004,2006-2014,2016 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * This file provides a location for all memory allocation.  Users who\n * need special memory handling are expected to supply replacement\n * functions for png_malloc() and png_free(), and to use\n * png_create_read_struct_2() and png_create_write_struct_2() to\n * identify the replacement functions.\n "
2018/06/19 13:39:28 " Free a png_struct \n PRIVATE "
2018/06/19 13:39:28 " png_free might call png_error and may certainly call\n       * png_get_mem_ptr, so fake a temporary png_struct to support this.\n       "
2018/06/19 13:39:28 " We may have a jmp_buf left to deallocate. "
2018/06/19 13:39:28 " Allocate memory.  For reasonable files, size should never exceed\n * 64K.  However, zlib may allocate more than 64K if you don't tell\n * it not to.  See zconf.h and png.h for more information.  zlib does\n * need to allocate exactly 64K, so whatever you call here must\n * have the ability to do that.\n "
2018/06/19 13:39:28 " png_malloc_base, an internal function added at libpng 1.6.0, does the work of\n * allocating memory, taking into account limits and PNG_USER_MEM_SUPPORTED.\n * Checking and error handling must happen outside this routine; it returns NULL\n * if the allocation cannot be done (for any reason.)\n "
2018/06/19 13:39:28 " PRIVATE "
2018/06/19 13:39:28 " Moved to png_malloc_base from png_malloc_default in 1.6.0; the DOS\n    * allocators have also been removed in 1.6.0, so any 16-bit system now has\n    * to implement a user memory handler.  This checks to be sure it isn't\n    * called with big numbers.\n    "
2018/06/19 13:39:28 " Some compilers complain that this is always true.  However, it\n    * can be false when integer overflow happens.\n    "
2018/06/19 13:39:28 " checked for truncation above "
2018/06/19 13:39:28 " This is really here only to work round a spurious warning in GCC 4.6 and 4.7\n * that arises because of the checks in png_realloc_array that are repeated in\n * png_malloc_array.\n "
2018/06/19 13:39:28 " known to be > 0 "
2018/06/19 13:39:28 " The failure case when the request is too large "
2018/06/19 13:39:28 " PRIVATE "
2018/06/19 13:39:28 " PRIVATE "
2018/06/19 13:39:28 " These are internal errors: "
2018/06/19 13:39:28 " Check for overflow on the elements count (so the caller does not have to\n    * check.)\n    "
2018/06/19 13:39:28 " Because png_malloc_array worked the size calculations below cannot\n          * overflow.\n          "
2018/06/19 13:39:28 " error "
2018/06/19 13:39:28 " TEXT || sPLT || STORE_UNKNOWN_CHUNKS "
2018/06/19 13:39:28 " Various functions that have different error handling are derived from this.\n * png_malloc always exists, but if PNG_USER_MEM_SUPPORTED is defined a separate\n * function png_malloc_default is also provided.\n "
2018/06/19 13:39:28 " 'm' means png_malloc "
2018/06/19 13:39:28 " Passing 'NULL' here bypasses the application provided memory handler. \nuse malloc"
2018/06/19 13:39:28 " 'M' means png_malloc_default "
2018/06/19 13:39:28 " USER_MEM "
2018/06/19 13:39:28 " This function was added at libpng version 1.2.3.  The png_malloc_warn()\n * function will issue a png_warning and return NULL instead of issuing a\n * png_error, if it fails to allocate the requested memory.\n "
2018/06/19 13:39:28 " Free a pointer allocated by png_malloc().  If ptr is NULL, return\n * without taking any action.\n "
2018/06/19 13:39:28 " USER_MEM "
2018/06/19 13:39:28 " This function is called when the application wants to use another method\n * of allocating and freeing memory.\n "
2018/06/19 13:39:28 " This function returns a pointer to the mem_ptr associated with the user\n * functions.  The application should free any memory associated with this\n * pointer before png_write_destroy and png_read_destroy are called.\n "
2018/06/19 13:39:28 " USER_MEM \n READ || WRITE "
2018/06/19 13:39:28 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngmem.c": 24.490255ms
2018/06/19 13:39:28 Couldn't classify license(s)
2018/06/19 13:39:29 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngimage-quick
2018/06/19 13:39:29 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngimage-quick": 979.484µs
2018/06/19 13:39:29 Couldn't classify license(s)
2018/06/19 13:39:30 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngvalid-progressive-interlace-standard
2018/06/19 13:39:30 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngvalid-progressive-interlace-standard": 738.165µs
2018/06/19 13:39:30 Couldn't classify license(s)
2018/06/19 13:39:31 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngunknown-IDAT
2018/06/19 13:39:31 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngunknown-IDAT": 636.841µs
2018/06/19 13:39:31 Couldn't classify license(s)
2018/06/19 13:39:31 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngstest-linear
2018/06/19 13:39:31 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngstest-linear": 603.254µs
2018/06/19 13:39:31 Couldn't classify license(s)
2018/06/19 13:39:32 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngvalid-gamma-expand16-transform
2018/06/19 13:39:32 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngvalid-gamma-expand16-transform": 504.593µs
2018/06/19 13:39:32 Couldn't classify license(s)
2018/06/19 13:39:33 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngvalid-progressive-size
2018/06/19 13:39:33 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngvalid-progressive-size": 623.624µs
2018/06/19 13:39:33 Couldn't classify license(s)
2018/06/19 13:39:34 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngstest-1.8
2018/06/19 13:39:34 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngstest-1.8": 554.832µs
2018/06/19 13:39:34 Couldn't classify license(s)
2018/06/19 13:39:35 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngstest-none-alpha
2018/06/19 13:39:35 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngstest-none-alpha": 571.645µs
2018/06/19 13:39:35 Couldn't classify license(s)
2018/06/19 13:39:36 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngunknown-sTER
2018/06/19 13:39:36 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngunknown-sTER": 546.195µs
2018/06/19 13:39:36 Couldn't classify license(s)
2018/06/19 13:39:37 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngstest-sRGB
2018/06/19 13:39:37 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngstest-sRGB": 589.429µs
2018/06/19 13:39:37 Couldn't classify license(s)
2018/06/19 13:39:38 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngstest-linear-alpha
2018/06/19 13:39:38 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngstest-linear-alpha": 597.803µs
2018/06/19 13:39:38 Couldn't classify license(s)
2018/06/19 13:39:39 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngvalid-gamma-threshold
2018/06/19 13:39:39 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngvalid-gamma-threshold": 424.444µs
2018/06/19 13:39:39 Couldn't classify license(s)
2018/06/19 13:39:39 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngtest-badpngs
2018/06/19 13:39:39 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngtest-badpngs": 1.361175ms
2018/06/19 13:39:39 Couldn't classify license(s)
2018/06/19 13:39:40 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngunknown-if-safe
2018/06/19 13:39:40 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngunknown-if-safe": 479.425µs
2018/06/19 13:39:40 Couldn't classify license(s)
2018/06/19 13:39:41 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngvalid-gamma-16-to-8
2018/06/19 13:39:41 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngvalid-gamma-16-to-8": 515.963µs
2018/06/19 13:39:41 Couldn't classify license(s)
2018/06/19 13:39:42 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngstest
2018/06/19 13:39:42 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngstest": 3.165972ms
2018/06/19 13:39:42 Couldn't classify license(s)
2018/06/19 13:39:43 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngvalid-gamma-expand16-background
2018/06/19 13:39:43 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngvalid-gamma-expand16-background": 556.331µs
2018/06/19 13:39:43 Couldn't classify license(s)
2018/06/19 13:39:44 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngunknown-discard
2018/06/19 13:39:44 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngunknown-discard": 628.827µs
2018/06/19 13:39:44 Couldn't classify license(s)
2018/06/19 13:39:45 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngstest-sRGB-alpha
2018/06/19 13:39:45 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngstest-sRGB-alpha": 492.077µs
2018/06/19 13:39:45 Couldn't classify license(s)
2018/06/19 13:39:46 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngimage-full
2018/06/19 13:39:46 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngimage-full": 498.264µs
2018/06/19 13:39:46 Couldn't classify license(s)
2018/06/19 13:39:46 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngvalid-gamma-background
2018/06/19 13:39:46 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngvalid-gamma-background": 525.597µs
2018/06/19 13:39:46 Couldn't classify license(s)
2018/06/19 13:39:47 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngvalid-gamma-alpha-mode
2018/06/19 13:39:47 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngvalid-gamma-alpha-mode": 531.981µs
2018/06/19 13:39:47 Couldn't classify license(s)
2018/06/19 13:39:48 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngvalid-gamma-expand16-alpha-mode
2018/06/19 13:39:48 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngvalid-gamma-expand16-alpha-mode": 450.376µs
2018/06/19 13:39:48 Couldn't classify license(s)
2018/06/19 13:39:49 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngunknown-vpAg
2018/06/19 13:39:49 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngunknown-vpAg": 541.052µs
2018/06/19 13:39:49 Couldn't classify license(s)
2018/06/19 13:39:50 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngvalid-transform
2018/06/19 13:39:50 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngvalid-transform": 522.643µs
2018/06/19 13:39:50 Couldn't classify license(s)
2018/06/19 13:39:51 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngvalid-progressive-standard
2018/06/19 13:39:51 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngvalid-progressive-standard": 586.873µs
2018/06/19 13:39:51 Couldn't classify license(s)
2018/06/19 13:39:52 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngunknown-save
2018/06/19 13:39:52 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngunknown-save": 468.597µs
2018/06/19 13:39:52 Couldn't classify license(s)
2018/06/19 13:39:53 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngstest-none
2018/06/19 13:39:53 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngstest-none": 446.834µs
2018/06/19 13:39:53 Couldn't classify license(s)
2018/06/19 13:39:54 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngstest-1.8-alpha
2018/06/19 13:39:54 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngstest-1.8-alpha": 399.957µs
2018/06/19 13:39:54 Couldn't classify license(s)
2018/06/19 13:39:55 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngvalid-gamma-sbit
2018/06/19 13:39:55 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngvalid-gamma-sbit": 413.633µs
2018/06/19 13:39:55 Couldn't classify license(s)
2018/06/19 13:39:55 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngtest
2018/06/19 13:39:55 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngtest": 413.786µs
2018/06/19 13:39:55 Couldn't classify license(s)
2018/06/19 13:39:56 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngunknown-sAPI
2018/06/19 13:39:56 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngunknown-sAPI": 1.534788ms
2018/06/19 13:39:56 Couldn't classify license(s)
2018/06/19 13:39:57 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngvalid-standard
2018/06/19 13:39:57 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngvalid-standard": 492.274µs
2018/06/19 13:39:57 Couldn't classify license(s)
2018/06/19 13:39:58 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/tests/pngvalid-gamma-transform
2018/06/19 13:39:58 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/tests/pngvalid-gamma-transform": 586.803µs
2018/06/19 13:39:58 Couldn't classify license(s)
2018/06/19 13:39:59 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngpriv.h
2018/06/19 13:39:59 detected language: 4
2018/06/19 13:39:59 " pngpriv.h - private declarations for use inside libpng\n *\n * Last changed in libpng 1.6.32 [August 24, 2017]\n * Copyright (c) 1998-2002,2004,2006-2017 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:39:59 " The symbols declared in this file (including the functions declared\n * as extern) are PRIVATE.  They are not part of the libpng public\n * interface, and are not recommended for use by regular applications.\n * Some of them may become public in the future; others may stay private,\n * change in an incompatible way, or even disappear.\n * Although the libpng users are not forbidden to include this header,\n * they should be well aware of the issues that may arise from doing so.\n "
2018/06/19 13:39:59 " Feature Test Macros.  The following are defined here to ensure that correctly\n * implemented libraries reveal the APIs libpng needs to build and hide those\n * that are not needed and potentially damaging to the compilation.\n *\n * Feature Test Macros must be defined before any system header is included (see\n * POSIX 1003.1 2.8.2 \"POSIX Symbols.\"\n *\n * These macros only have an effect if the operating system supports either\n * POSIX 1003.1 or C99, or both.  On other operating systems (particularly\n * Windows/Visual Studio) there is no effect; the OS specific tests below are\n * still required (as of 2011-05-02.)\n "
2018/06/19 13:39:59 " Just the POSIX 1003.1 and C89 APIs "
2018/06/19 13:39:59 " Standard library headers not required by png.h: "
2018/06/19 13:39:59 "libpng is being built, not used"
2018/06/19 13:39:59 " If HAVE_CONFIG_H is defined during the build then the build system must\n * provide an appropriate \"config.h\" file on the include path.  The header file\n * must provide definitions as required below (search for \"HAVE_CONFIG_H\");\n * see configure.ac for more details of the requirements.  The macro\n * \"PNG_NO_CONFIG_H\" is provided for maintainers to test for dependencies on\n * 'configure'; define this macro to prevent the configure build including the\n * configure generated config.h.  Libpng is expected to compile without *any*\n * special build system support on a reasonably ANSI-C compliant system.\n "
2018/06/19 13:39:59 " Pick up the definition of 'restrict' from config.h if it was read: "
2018/06/19 13:39:59 " To support symbol prefixing it is necessary to know *before* including png.h\n * whether the fixed point (and maybe other) APIs are exported, because if they\n * are not internal definitions may be required.  This is handled below just\n * before png.h is included, but load the configuration now if it is available.\n "
2018/06/19 13:39:59 " Local renames may change non-exported API functions from png.h "
2018/06/19 13:39:59 " These should have been defined in pngusr.h "
2018/06/19 13:39:59 " Compile time options.\n * =====================\n * In a multi-arch build the compiler may compile the code several times for the\n * same object module, producing different binaries for different architectures.\n * When this happens configure-time setting of the target host options cannot be\n * done and this interferes with the handling of the ARM NEON optimizations, and\n * possibly other similar optimizations.  Put additional tests here; in general\n * this is needed when the same option can be changed at both compile time and\n * run time depending on the target OS (i.e. iOS vs Android.)\n *\n * NOTE: symbol prefixing does not pass $(CFLAGS) to the preprocessor, because\n * this is not possible with certain compilers (Oracle SUN OS CC), as a result\n * it is necessary to ensure that all extern functions that *might* be used\n * regardless of $(CFLAGS) get declared in this file.  The test on __ARM_NEON__\n * below is one example of this behavior because it is controlled by the\n * presence or not of -mfpu=neon on the GCC command line, it is possible to do\n * this in $(CC), e.g. \"CC=gcc -mfpu=neon\", but people who build libpng rarely\n * do this.\n "
2018/06/19 13:39:59 " ARM NEON optimizations are being controlled by the compiler settings,\n    * typically the target FPU.  If the FPU has been set to NEON (-mfpu=neon\n    * with GCC) then the compiler will define __ARM_NEON__ and we can rely\n    * unconditionally on NEON instructions not crashing, otherwise we must\n    * disable use of NEON instructions.\n    *\n    * NOTE: at present these optimizations depend on 'ALIGNED_MEMORY', so they\n    * can only be turned on automatically if that is supported too.  If\n    * PNG_ARM_NEON_OPT is set in CPPFLAGS (to >0) then arm/arm_init.c will fail\n    * to compile with an appropriate #error if ALIGNED_MEMORY has been turned\n    * off.\n    *\n    * Note that gcc-4.9 defines __ARM_NEON instead of the deprecated\n    * __ARM_NEON__, so we check both variants.\n    *\n    * To disable ARM_NEON optimizations entirely, and skip compiling the\n    * associated assembler code, pass --enable-arm-neon=no to configure\n    * or put -DPNG_ARM_NEON_OPT=0 in CPPFLAGS.\n    "
2018/06/19 13:39:59 " NEON optimizations are to be at least considered by libpng, so enable the\n    * callbacks to do this.\n    "
2018/06/19 13:39:59 " By default the 'intrinsics' code in arm/filter_neon_intrinsics.c is used\n    * if possible - if __ARM_NEON__ is set and the compiler version is not known\n    * to be broken.  This is controlled by PNG_ARM_NEON_IMPLEMENTATION which can\n    * be:\n    *\n    *    1  The intrinsics code (the default with __ARM_NEON__)\n    *    2  The hand coded assembler (the default without __ARM_NEON__)\n    *\n    * It is possible to set PNG_ARM_NEON_IMPLEMENTATION in CPPFLAGS, however\n    * this is *NOT* supported and may cease to work even after a minor revision\n    * to libpng.  It *is* valid to do this for testing purposes, e.g. speed\n    * testing or a new compiler, but the results should be communicated to the\n    * libpng implementation list for incorporation in the next minor release.\n    "
2018/06/19 13:39:59 " At present it is unknown by the libpng developers which versions\n             * of clang support the intrinsics, however some or perhaps all\n             * versions do not work with the assembler so this may be\n             * irrelevant, so just use the default (do nothing here.)\n             "
2018/06/19 13:39:59 " GCC 4.5.4 NEON support is known to be broken.  4.6.3 is known to\n             * work, so if this *is* GCC, or G++, look for a version >4.5\n             "
2018/06/19 13:39:59 " no GNUC support \n __GNUC__ \n !defined __ARM_NEON__ \n The 'intrinsics' code simply won't compile without this -mfpu=neon:\n          "
2018/06/19 13:39:59 " __ARM_NEON__ \n !PNG_ARM_NEON_IMPLEMENTATION "
2018/06/19 13:39:59 " Use the intrinsics code by default. "
2018/06/19 13:39:59 " PNG_ARM_NEON_OPT > 0 "
2018/06/19 13:39:59 " Only check for SSE if the build configuration has been modified to\n       * enable SSE optimizations.  This means that these optimizations will\n       * be off by default.  See contrib/intel for more details.\n       "
2018/06/19 13:39:59 " We are not actually using AVX, but checking for AVX is the best\n             way we can detect SSE4.1 and SSSE3 on MSVC.\n          "
2018/06/19 13:39:59 " no GNUC support \n __GNUC__ \n !defined __mips_msa "
2018/06/19 13:39:59 " __mips_msa \n !PNG_MIPS_MSA_IMPLEMENTATION "
2018/06/19 13:39:59 " PNG_MIPS_MSA_OPT > 0 "
2018/06/19 13:39:59 " Is this a build of a DLL where compilation of the object modules requires\n * different preprocessor settings to those required for a simple library?  If\n * so PNG_BUILD_DLL must be set.\n *\n * If libpng is used inside a DLL but that DLL does not export the libpng APIs\n * PNG_BUILD_DLL must not be set.  To avoid the code below kicking in build a\n * static library of libpng then link the DLL against that.\n "
2018/06/19 13:39:59 " This is set by libtool when files are compiled for a DLL; libtool\n       * always compiles twice, even on systems where it isn't necessary.  Set\n       * PNG_BUILD_DLL in case it is necessary:\n       "
2018/06/19 13:39:59 " This is set by the Microsoft Visual Studio IDE in projects that\n          * build a DLL.  It can't easily be removed from those projects (it\n          * isn't visible in the Visual Studio UI) so it is a fairly reliable\n          * indication that PNG_IMPEXP needs to be set to the DLL export\n          * attributes.\n          "
2018/06/19 13:39:59 " This is set by the Borland C system when compiling for a DLL\n             * (as above.)\n             "
2018/06/19 13:39:59 " Add additional compiler cases here. "
2018/06/19 13:39:59 " Setting PNG_BUILD_DLL if required "
2018/06/19 13:39:59 " See pngconf.h for more details: the builder of the library may set this on\n * the command line to the right thing for the specific compilation system or it\n * may be automagically set above (at present we know of no system where it does\n * need to be set on the command line.)\n *\n * PNG_IMPEXP must be set here when building the library to prevent pngconf.h\n * setting it to the \"import\" setting for a DLL build.\n "
2018/06/19 13:39:59 " Not building a DLL, or the DLL doesn't require specific export\n       * definitions.\n       "
2018/06/19 13:39:59 " No warnings for private or deprecated functions in the build: "
2018/06/19 13:39:59 " Symbol preprocessing support.\n *\n * To enable listing global, but internal, symbols the following macros should\n * always be used to declare an extern data or function object in this file.\n "
2018/06/19 13:39:59 " If floating or fixed point APIs are disabled they may still be compiled\n * internally.  To handle this make sure they are declared as the appropriate\n * internal extern function (otherwise the symbol prefixing stuff won't work and\n * the functions will be used without definitions.)\n *\n * NOTE: although all the API functions are declared here they are not all\n * actually built!  Because the declarations are still made it is necessary to\n * fake out types that they depend on.\n "
2018/06/19 13:39:59 " pngconf.h does not set PNG_DLL_EXPORT unless it is required, so: "
2018/06/19 13:39:59 " This is a global switch to set the compilation for an installed system\n * (a release build).  It can be set for testing debug builds to ensure that\n * they will compile when the build type is switched to RC or STABLE, the\n * default is just to use PNG_LIBPNG_BUILD_BASE_TYPE.  Set this in CPPFLAGS\n * with either:\n *\n *   -DPNG_RELEASE_BUILD Turns on the release compile path\n *   -DPNG_RELEASE_BUILD=0 Turns it off\n * or in your pngusr.h with\n *   #define PNG_RELEASE_BUILD=1 Turns on the release compile path\n *   #define PNG_RELEASE_BUILD=0 Turns it off\n "
2018/06/19 13:39:59 " SECURITY and SAFETY:\n *\n * libpng is built with support for internal limits on image dimensions and\n * memory usage.  These are documented in scripts/pnglibconf.dfa of the\n * source and recorded in the machine generated header file pnglibconf.h.\n "
2018/06/19 13:39:59 " If you are running on a machine where you cannot allocate more\n * than 64K of memory at once, uncomment this.  While libpng will not\n * normally need that much memory in a chunk (unless you load up a very\n * large file), zlib needs to know how big of a chunk it can use, and\n * libpng thus makes sure to check any memory allocation to verify it\n * will fit into memory.\n *\n * zlib provides 'MAXSEG_64K' which, if defined, indicates the\n * same limit and pngconf.h (already included) sets the limit\n * if certain operating systems are detected.\n "
2018/06/19 13:39:59 " Unused formal parameter warnings are silenced using the following macro\n * which is expected to have no bad effects on performance (optimizing\n * compilers will probably remove it entirely).  Note that if you replace\n * it with something other than whitespace, you must include the terminating\n * semicolon.\n "
2018/06/19 13:39:59 " Just a little check that someone hasn't tried to define something\n * contradictory.\n "
2018/06/19 13:39:59 " If warnings or errors are turned off the code is disabled or redirected here.\n * From 1.5.4 functions have been added to allow very limited formatting of\n * error and warning messages - this code will also be disabled here.\n "
2018/06/19 13:39:59 " Some fixed point APIs are still required even if not exported because\n * they get used by the corresponding floating point APIs.  This magic\n * deals with this:\n "
2018/06/19 13:39:59 " PRIVATE "
2018/06/19 13:39:59 " Other defines specific to compilers can go here.  Try to keep\n * them inside an appropriate ifdef/endif pair for portability.\n "
2018/06/19 13:39:59 " C allows up-casts from (void*) to any pointer and (const void*) to any\n * pointer to a const object.  C++ regards this as a type error and requires an\n * explicit, static, cast and provides the static_cast<> rune to ensure that\n * const is not cast away.\n "
2018/06/19 13:39:59 " __cplusplus "
2018/06/19 13:39:59 " png.c requires the following ANSI-C constants if the conversion of\n    * floating point to ASCII is implemented therein:\n    *\n    *  DBL_DIG  Maximum number of decimal digits (can be set to any constant)\n    *  DBL_MIN  Smallest normalized fp number (can be set to an arbitrary value)\n    *  DBL_MAX  Maximum floating point number (can be set to an arbitrary value)\n    "
2018/06/19 13:39:59 " We need to check that <math.h> hasn't already been included earlier\n    * as it seems it doesn't agree with <fp.h>, yet we should really use\n    * <fp.h> if possible.\n    "
2018/06/19 13:39:59 " Amiga SAS/C: We must include builtin FPU functions when compiling using\n    * MATH=68881\n    "
2018/06/19 13:39:59 " This provides the non-ANSI (far) memory allocation routines. "
2018/06/19 13:39:59 " defines _WINDOWS_ macro "
2018/06/19 13:39:59 " PNG_VERSION_INFO_ONLY "
2018/06/19 13:39:59 " Moved here around 1.5.0beta36 from pngconf.h \n Users may want to use these so they are not private.  Any library\n * functions that are passed far data must be model-independent.\n "
2018/06/19 13:39:59 " Memory model/platform independent fns "
2018/06/19 13:39:59 " These macros may need to be architecture dependent. \n do not use data alignment \n assume unaligned accesses are OK "
2018/06/19 13:39:59 " use offsetof to determine alignment "
2018/06/19 13:39:59 " prevent the use of this "
2018/06/19 13:39:59 " use sizeof to determine alignment "
2018/06/19 13:39:59 " Default to using aligned access optimizations and requiring alignment to a\n    * multiple of the data type size.  Override in a compiler specific fashion\n    * if necessary by inserting tests here:\n    "
2018/06/19 13:39:59 " This is used because in some compiler implementations non-aligned\n    * structure members are supported, so the offsetof approach below fails.\n    * Set PNG_ALIGN_SIZE=0 for compiler combinations where unaligned access\n    * is good for performance.  Do not do this unless you have tested the result\n    * and understand it.\n    "
2018/06/19 13:39:59 " Else leave png_alignof undefined to prevent use thereof "
2018/06/19 13:39:59 " This implicitly assumes alignment is always to a power of 2. "
2018/06/19 13:39:59 " End of memory model/platform independent support \n End of 1.5.0beta36 move from pngconf.h "
2018/06/19 13:39:59 " CONSTANTS and UTILITY MACROS\n * These are used internally by libpng and not exposed in the API\n "
2018/06/19 13:39:59 " Various modes of operation.  Note that after an init, mode is set to\n * zero automatically when the structure is created.  Three of these\n * are defined in png.h because they need to be visible to applications\n * that call png_set_unknown_chunk().\n "
2018/06/19 13:39:59 " #define PNG_HAVE_IHDR            0x01U (defined in png.h) \n #define PNG_HAVE_PLTE            0x02U (defined in png.h) "
2018/06/19 13:39:59 " #define PNG_AFTER_IDAT           0x08U (defined in png.h) "
2018/06/19 13:39:59 "               0x20U (unused) \n               0x40U (unused) \n               0x80U (unused) "
2018/06/19 13:39:59 " Have another chunk after IDAT \n             0x4000U (unused) \n Else is a write struct "
2018/06/19 13:39:59 " Flags for the transformations the PNG library does on the image data "
2018/06/19 13:39:59 " Was PNG_BACKGROUND "
2018/06/19 13:39:59 " Added to libpng 1.5.2 \n Becomes 'chop' in 1.5.4 "
2018/06/19 13:39:59 " two bits, RGB_TO_GRAY_ERR|WARN \n Added to libpng-1.5.4 \n Added to libpng-1.2.7 \n Added to libpng-1.2.9 \n Added to libpng-1.5.4 \n    0x8000000U unused \n   0x10000000U unused \n   0x20000000U unused \n   0x40000000U unused \n Flags for png_create_struct "
2018/06/19 13:39:59 " Flags for the png_ptr->flags rather than declaring a byte for each one "
2018/06/19 13:39:59 " Added to libpng-1.6.0 \n      0x0004U    unused \n Added to libpng-1.6.0 \n      0x0010U    unused \n      0x0020U    unused "
2018/06/19 13:39:59 " Added to libpng-1.5.4 \n Added to libpng-1.5.4 \n Added to libpng-1.5.4 \n #define PNG_FLAG_KEEP_UNKNOWN_CHUNKS      0x8000U \n #define PNG_FLAG_KEEP_UNSAFE_CHUNKS      0x10000U "
2018/06/19 13:39:59 " Added to libpng-1.4.0 \n Added to libpng-1.6.0 \n Added to libpng-1.6.0 \n    0x800000U    unused \n   0x1000000U    unused \n   0x2000000U    unused \n   0x4000000U    unused \n   0x8000000U    unused \n  0x10000000U    unused \n  0x20000000U    unused \n  0x40000000U    unused "
2018/06/19 13:39:59 " Save typing and make code easier to understand "
2018/06/19 13:39:59 " Added to libpng-1.6.0: scale a 16-bit value in the range 0..65535 to 0..255\n * by dividing by 257 *with rounding*.  This macro is exact for the given range.\n * See the discourse in pngrtran.c png_do_scale_16_to_8.  The values in the\n * macro were established by experiment (modifying the added value).  The macro\n * has a second variant that takes a value already scaled by 255 and divides by\n * 65535 - this has a maximum error of .502.  Over the range 0..65535*65535 it\n * only gives off-by-one errors and only for 0.5% (1 in 200) of the values.\n "
2018/06/19 13:39:59 " Added to libpng-1.2.6 JB "
2018/06/19 13:39:59 " This returns the number of trailing bits in the last byte of a row, 0 if the\n * last byte is completely full of pixels.  It is, in principle, (pixel_bits x\n * width) % 8, but that would overflow for large 'width'.  The second macro is\n * the same except that it returns the number of unused bits in the last byte;\n * (8-TRAILBITS), but 0 when TRAILBITS is 0.\n *\n * NOTE: these macros are intended to be self-evidently correct and never\n * overflow on the assumption that pixel_bits is in the range 0..255.  The\n * arguments are evaluated only once and they can be signed (e.g. as a result of\n * the integral promotions).  The result of the expression always has type\n * (png_uint_32), however the compiler always knows it is in the range 0..7.\n "
2018/06/19 13:39:59 " PNG_OUT_OF_RANGE returns true if value is outside the range\n * ideal-delta..ideal+delta.  Each argument is evaluated twice.\n * \"ideal\" and \"delta\" should be constants, normally simple\n * integers, \"value\" a variable. Added to libpng-1.2.6 JB\n "
2018/06/19 13:39:59 " Conversions between fixed and floating point, only defined if\n * required (to make sure the code doesn't accidentally use float\n * when it is supposedly disabled.)\n "
2018/06/19 13:39:59 " The floating point conversion can't overflow, though it can and\n * does lose accuracy relative to the original fixed point value.\n * In practice this doesn't matter because png_fixed_point only\n * stores numbers with very low precision.  The png_ptr and s\n * arguments are unused by default but are there in case error\n * checking becomes a requirement.\n "
2018/06/19 13:39:59 " The fixed point conversion performs range checking and evaluates\n * its argument multiple times, so must be used with care.  The\n * range checking uses the PNG specification values for a signed\n * 32-bit fixed point value except that the values are deliberately\n * rounded-to-zero to an integral value - 21474 (21474.83 is roughly\n * (2^31-1) * 100000). 's' is a string that describes the value being\n * converted.\n *\n * NOTE: this macro will raise a png_error if the range check fails,\n * therefore it is normally only appropriate to use this on values\n * that come from API calls or other sources where an out of range\n * error indicates a programming error, not a data error!\n *\n * NOTE: by default this is off - the macro is not used - because the\n * function call saves a lot of code.\n "
2018/06/19 13:39:59 " else the corresponding function is defined below, inside the scope of the\n * cplusplus test.\n "
2018/06/19 13:39:59 " Constants for known chunk types.  If you need to add a chunk, define the name\n * here.  For historical reasons these constants have the form png_<name>; i.e.\n * the prefix is lower case.  Please use decimal values as the parameters to\n * match the ISO PNG specification and to avoid relying on the C locale\n * interpretation of character values.\n *\n * Prior to 1.5.6 these constants were strings, as of 1.5.6 png_uint_32 values\n * are computed and a new macro (PNG_STRING_FROM_CHUNK) added to allow a string\n * to be generated if required.\n *\n * PNG_32b correctly produces a value shifted by up to 24 bits, even on\n * architectures where (int) is only 16 bits.\n "
2018/06/19 13:39:59 " Constants for known chunk types.\n *\n * MAINTAINERS: If you need to add a chunk, define the name here.\n * For historical reasons these constants have the form png_<name>; i.e.\n * the prefix is lower case.  Please use decimal values as the parameters to\n * match the ISO PNG specification and to avoid relying on the C locale\n * interpretation of character values.  Please keep the list sorted.\n *\n * Notice that PNG_U32 is used to define a 32-bit value for the 4 byte chunk\n * type.  In fact the specification does not express chunk types this way,\n * however using a 32-bit value means that the chunk type can be read from the\n * stream using exactly the same code as used for a 32-bit unsigned value and\n * can be examined far more efficiently (using one arithmetic compare).\n *\n * Prior to 1.5.6 the chunk type constants were expressed as C strings.  The\n * libpng API still uses strings for 'unknown' chunks and a macro,\n * PNG_STRING_FROM_CHUNK, allows a string to be generated if required.  Notice\n * that for portable code numeric values must still be used; the string \"IHDR\"\n * is not portable and neither is PNG_U32('I', 'H', 'D', 'R').\n *\n * In 1.7.0 the definitions will be made public in png.h to avoid having to\n * duplicate the same definitions in application code.\n "
2018/06/19 13:39:59 " registered July 2017 \n registered, not defined "
2018/06/19 13:39:59 " deprecated "
2018/06/19 13:39:59 " The following will work on (signed char*) strings, whereas the get_uint_32\n * macro will fail on top-bit-set values because of the sign extension.\n "
2018/06/19 13:39:59 " This uses (char), not (png_byte) to avoid warnings on systems where (char) is\n * signed and the argument is a (char[])  This macro will fail miserably on\n * systems where (char) is more than 8 bits.\n "
2018/06/19 13:39:59 " Do the same but terminate with a null character. "
2018/06/19 13:39:59 " Test on flag values as defined in the spec (section 5.4): "
2018/06/19 13:39:59 " Gamma values (new at libpng-1.5.4): \n Assume '1.8' is really 2.2/1.45! "
2018/06/19 13:39:59 " Almost everything below is C specific; the #defines above can be used in\n * non-C code (so long as it is C-preprocessed) the rest of this stuff cannot.\n "
2018/06/19 13:39:59 " Validate the include paths - the include path used to generate pnglibconf.h\n * must match that used in the build, or we must be using pnglibconf.h.prebuilt:\n "
2018/06/19 13:39:59 " This means that when pnglibconf.h was built the copy of zlib.h that it\n    * used is not the same as the one being used here.  Because the build of\n    * libpng makes decisions to use inflateInit2 and inflateReset2 based on the\n    * zlib version number and because this affects handling of certain broken\n    * PNG files the -I directives must match.\n    *\n    * The most likely explanation is that you passed a -I in CFLAGS. This will\n    * not work; all the preprocessor directories and in particular all the -I\n    * directives must be in CPPFLAGS.\n    "
2018/06/19 13:39:59 " This is used for 16-bit gamma tables -- only the top level pointers are\n * const; this could be changed:\n "
2018/06/19 13:39:59 " Added to libpng-1.5.7: sRGB conversion tables "
2018/06/19 13:39:59 " Convert from an sRGB encoded value 0..255 to a 16-bit linear value,\n    * 0..65535.  This table gives the closest 16-bit answers (no errors).\n    "
2018/06/19 13:39:59 " Given a value 'linear' in the range 0..255*65535 calculate the 8-bit sRGB\n    * encoded value with maximum error 0.646365.  Note that the input is not a\n    * 16-bit value; it has been multiplied by 255! "
2018/06/19 13:39:59 " SIMPLIFIED_READ/WRITE "
2018/06/19 13:39:59 " Inhibit C++ name-mangling for libpng functions but not for system calls. "
2018/06/19 13:39:59 " __cplusplus "
2018/06/19 13:39:59 " Internal functions; these are not exported from a DLL however because they\n * are used within several of the C source files they have to be C extern.\n *\n * All of these functions must be declared with PNG_INTERNAL_FUNCTION.\n "
2018/06/19 13:39:59 " Zlib support "
2018/06/19 13:39:59 " Used by the zlib handling functions to ensure that z_stream::msg is always\n    * set before they return.\n    "
2018/06/19 13:39:59 " Free the buffer list used by the compressed write code. "
2018/06/19 13:39:59 " Check the user version string for compatibility, returns false if the version\n * numbers aren't compatible.\n "
2018/06/19 13:39:59 " Internal base allocator - no messages, NULL on failure to allocate.  This\n * does, however, call the application provided allocator and that could call\n * png_error (although that would be a bug in the application implementation.)\n "
2018/06/19 13:39:59 " Internal array allocator, outputs no error or warning messages on failure,\n * just returns NULL.\n "
2018/06/19 13:39:59 " The same but an existing array is extended by add_elements.  This function\n * also memsets the new elements to 0 and copies the old elements.  The old\n * array is not freed or altered.\n "
2018/06/19 13:39:59 " text, sPLT or unknown chunks "
2018/06/19 13:39:59 " Magic to create a struct when there is no struct to call the user supplied\n * memory allocators.  Because error handling has not been set up the memory\n * handlers can't safely call png_error, but this is an obscure and undocumented\n * restriction so libpng has to assume that the 'free' handler, at least, might\n * call png_error.\n "
2018/06/19 13:39:59 " Free memory from internal libpng struct "
2018/06/19 13:39:59 " Free an allocated jmp_buf (always succeeds) "
2018/06/19 13:39:59 " Function to allocate memory for zlib.  PNGAPI is disallowed. "
2018/06/19 13:39:59 " Function to free memory for zlib.  PNGAPI is disallowed. "
2018/06/19 13:39:59 " Next four functions are used internally as callbacks.  PNGCBAPI is required\n * but not PNG_EXPORT.  PNGAPI added at libpng version 1.2.3, changed to\n * PNGCBAPI at 1.5.0\n "
2018/06/19 13:39:59 " Reset the CRC variable "
2018/06/19 13:39:59 " Write the \"data\" buffer to whatever output you are using "
2018/06/19 13:39:59 " Read and check the PNG file signature "
2018/06/19 13:39:59 " Read the chunk header (length + type name) "
2018/06/19 13:39:59 " Read data from whatever input you are using into the \"data\" buffer "
2018/06/19 13:39:59 " Read bytes into buf, and update png_ptr->crc "
2018/06/19 13:39:59 " Read \"skip\" bytes, read the file crc, and (optionally) verify png_ptr->crc "
2018/06/19 13:39:59 " Read the CRC from the file and compare it to the libpng calculated CRC "
2018/06/19 13:39:59 " Calculate the CRC over a section of data.  Note that we are only\n * passing a maximum of 64K on systems that have this as a memory limit,\n * since this is the maximum buffer size we can specify.\n "
2018/06/19 13:39:59 " Write various chunks "
2018/06/19 13:39:59 " Write the IHDR chunk, and update the png_struct with the necessary\n * information.\n "
2018/06/19 13:39:59 " The xy value must have been previously validated "
2018/06/19 13:39:59 " The profile must have been previously validated for correctness, the\n    * length comes from the first four bytes.  Only the base, deflate,\n    * compression is supported.\n    "
2018/06/19 13:39:59 " Chunks that have keywords "
2018/06/19 13:39:59 " Added at version 1.0.14 and 1.2.4 "
2018/06/19 13:39:59 " Called when finished processing a row of data "
2018/06/19 13:39:59 " Internal use only.   Called before first row of data "
2018/06/19 13:39:59 " Combine a row of data, dealing with alpha, etc. if requested.  'row' is an\n * array of png_ptr->width pixels.  If the image is not interlaced or this\n * is the final pass this just does a memcpy, otherwise the \"display\" flag\n * is used to determine whether to copy pixels that are not in the current pass.\n *\n * Because 'png_do_read_interlace' (below) replicates pixels this allows this\n * function to achieve the documented 'blocky' appearance during interlaced read\n * if display is 1 and the 'sparkle' appearance, where existing pixels in 'row'\n * are not changed if they are not in the current pass, when display is 0.\n *\n * 'display' must be 0 or 1, otherwise the memcpy will be done regardless.\n *\n * The API always reads from the png_struct row buffer and always assumes that\n * it is full width (png_do_read_interlace has already been called.)\n *\n * This function is only ever used to write to row buffers provided by the\n * caller of the relevant libpng API and the row must have already been\n * transformed by the read transformations.\n *\n * The PNG_USE_COMPILE_TIME_MASKS option causes generation of pre-computed\n * bitmasks for use within the code, otherwise runtime generated masks are used.\n * The default is compile time masks.\n "
2018/06/19 13:39:59 " Expand an interlaced row: the 'row_info' describes the pass data that has\n * been read in and must correspond to the pixels in 'row', the pixels are\n * expanded (moved apart) in 'row' to match the final layout, when doing this\n * the pixels are *replicated* to the intervening space.  This is essential for\n * the correct operation of png_combine_row, above.\n "
2018/06/19 13:40:00 " GRR TO DO (2.0 or whenever):  simplify other internal calling interfaces "
2018/06/19 13:40:00 " Grab pixels out of a row for an interlaced pass "
2018/06/19 13:40:00 " Unfilter a row: check the filter value before calling this, there is no point\n * calling it for PNG_FILTER_VALUE_NONE.\n "
2018/06/19 13:40:00 " Choose the best filter to use and filter the row data "
2018/06/19 13:40:00 " Read 'avail_out' bytes of data from the IDAT stream.  If the output buffer\n    * is NULL the function checks, instead, for the end of the stream.  In this\n    * case a benign error will be issued if the stream end is not found or if\n    * extra data has to be consumed.\n    "
2018/06/19 13:40:00 " This cleans up when the IDAT LZ stream does not end when the last image\n    * byte is read; there is still some pending input.\n    "
2018/06/19 13:40:00 " Finish a row while reading, dealing with interlacing passes, etc. \n SEQUENTIAL_READ "
2018/06/19 13:40:00 " Initialize the row buffers, etc. "
2018/06/19 13:40:00 " Zlib < 1.2.4 "
2018/06/19 13:40:00 " Zlib < 1.2.4 "
2018/06/19 13:40:00 " Optional call to update the users info structure "
2018/06/19 13:40:00 " Shared transform functions, defined in pngtran.c "
2018/06/19 13:40:00 " The following decodes the appropriate chunks, and does error correction,\n * then calls the appropriate callback for the chunk if it is valid.\n "
2018/06/19 13:40:00 " Decode the IHDR chunk "
2018/06/19 13:40:00 " READ_iCCP "
2018/06/19 13:40:00 " READ_sPLT "
2018/06/19 13:40:00 " This is the function that gets called for unknown chunks.  The 'keep'\n    * argument is either non-zero for a known chunk that has been set to be\n    * handled as unknown or zero for an unknown chunk.  By default the function\n    * just skips the chunk or errors out if it is critical.\n    "
2018/06/19 13:40:00 " Exactly as the API png_handle_as_unknown() except that the argument is a\n    * 32-bit chunk name, not a string.\n    "
2018/06/19 13:40:00 " READ_UNKNOWN_CHUNKS || HANDLE_AS_UNKNOWN "
2018/06/19 13:40:00 " Handle the transformations for reading and writing "
2018/06/19 13:40:00 " PROGRESSIVE_READ "
2018/06/19 13:40:00 " Added at libpng version 1.6.0 "
2018/06/19 13:40:00 " Set the colorspace gamma with a value provided by the application or by\n    * the gAMA chunk on read.  The value will override anything set by an ICC\n    * profile.\n    "
2018/06/19 13:40:00 " Synchronize the info 'valid' flags with the colorspace "
2018/06/19 13:40:00 " Copy the png_struct colorspace to the info_struct and call the above to\n    * synchronize the flags.  Checks for NULL info_ptr and does nothing.\n    "
2018/06/19 13:40:00 " Added at libpng version 1.4.0 "
2018/06/19 13:40:00 " These internal functions are for maintaining the colorspace structure within\n * a png_info or png_struct (or, indeed, both).\n "
2018/06/19 13:40:00 " This does set the colorspace gAMA and cHRM values too, but doesn't set the\n    * flags to write them, if it returns false there was a problem and an error\n    * message has already been output (but the colorspace may still need to be\n    * synced to record the invalid flag).\n    "
2018/06/19 13:40:00 " sRGB "
2018/06/19 13:40:00 " The 'name' is used for information only "
2018/06/19 13:40:00 " Routines for checking parts of an ICC profile. "
2018/06/19 13:40:00 " READ_iCCP "
2018/06/19 13:40:00 " first 132 bytes only "
2018/06/19 13:40:00 " header plus whole tag table "
2018/06/19 13:40:00 " 'adler' is the Adler32 checksum of the uncompressed profile data. It may\n    * be zero to indicate that it is not available.  It is used, if provided,\n    * as a fast check on the profile when checking to see if it is sRGB.\n    "
2018/06/19 13:40:00 " iCCP "
2018/06/19 13:40:00 " Set the rgb_to_gray coefficients from the colorspace Y values \n READ_RGB_TO_GRAY \n COLORSPACE "
2018/06/19 13:40:00 " Added at libpng version 1.4.0 "
2018/06/19 13:40:00 " Added at libpng version 1.5.10 "
2018/06/19 13:40:00 " Puts 'string' into 'buffer' at buffer[pos], taking care never to overwrite\n * the end.  Always leaves the buffer nul terminated.  Never errors out (and\n * there is no error code.)\n "
2018/06/19 13:40:00 " Various internal functions to handle formatted warning messages, currently\n * only implemented for warnings.\n "
2018/06/19 13:40:00 " Utility to dump an unsigned value into a buffer, given a start pointer and\n * and end pointer (which should point just *beyond* the end of the buffer!)\n * Returns the pointer to the start of the formatted string.  This utility only\n * does unsigned values.\n "
2018/06/19 13:40:00 " Convenience macro that takes an array: "
2018/06/19 13:40:00 " Suggested size for a number buffer (enough for 64 bits and a sign!) "
2018/06/19 13:40:00 " These are the integer formats currently supported, the name is formed from\n * the standard printf(3) format string.\n "
2018/06/19 13:40:00 " chose unsigned API! "
2018/06/19 13:40:00 " chose signed API! "
2018/06/19 13:40:00 " choose the signed API "
2018/06/19 13:40:00 " New defines and members adding in libpng-1.5.4 "
2018/06/19 13:40:00 " Maximum 9; see pngerror.c "
2018/06/19 13:40:00 " An l-value of this type has to be passed to the APIs below to cache the\n * values of the parameters to a formatted warning message.\n "
2018/06/19 13:40:00 " Parameters are limited in size to PNG_WARNING_PARAMETER_SIZE characters,\n    * including the trailing '\\0'.\n    "
2018/06/19 13:40:00 " Use png_alloc_size_t because it is an unsigned type as big as any we\n    * need to output.  Use the following for a signed value.\n    "
2018/06/19 13:40:00 " 'message' follows the X/Open approach of using @1, @2 to insert\n    * parameters previously supplied using the above functions.  Errors in\n    * specifying the parameters will simply result in garbage substitutions.\n    "
2018/06/19 13:40:00 " Application errors (new in 1.6); use these functions (declared below) for\n * errors in the parameters or order of API function calls on read.  The\n * 'warning' should be used for an error that can be handled completely; the\n * 'error' for one which can be handled safely but which may lose application\n * information or settings.\n *\n * By default these both result in a png_error call prior to release, while in a\n * released version the 'warning' is just a warning.  However if the application\n * explicitly disables benign errors (explicitly permitting the code to lose\n * information) they both turn into warnings.\n *\n * If benign errors aren't supported they end up as the corresponding base call\n * (png_warning or png_error.)\n "
2018/06/19 13:40:00 " The application provided invalid parameters to an API function or called\n    * an API function at the wrong time, libpng can completely recover.\n    "
2018/06/19 13:40:00 " As above but libpng will ignore the call, or attempt some other partial\n    * recovery from the error.\n    "
2018/06/19 13:40:00 " Report a recoverable issue in chunk data.  On read this is used to report\n    * a problem found while reading a particular chunk and the\n    * png_chunk_benign_error or png_chunk_warning function is used as\n    * appropriate.  On write this is used to report an error that comes from\n    * data set via an application call to a png_set_ API and png_app_error or\n    * png_app_warning is used as appropriate.\n    *\n    * The 'error' parameter must have one of the following values:\n    "
2018/06/19 13:40:00 " never an error \n an error only on write \n always an error "
2018/06/19 13:40:00 " ASCII to FP interfaces, currently only implemented if sCAL\n * support is required.\n "
2018/06/19 13:40:00 " MAX_DIGITS is actually the maximum number of characters in an sCAL\n * width or height, derived from the precision (number of significant\n * digits - a build time settable option) and assumptions about the\n * maximum ridiculous exponent.\n "
2018/06/19 13:40:00 ".\nE\nexponent"
2018/06/19 13:40:00 " FLOATING_POINT "
2018/06/19 13:40:00 " FIXED_POINT \n sCAL "
2018/06/19 13:40:00 " An internal API to validate the format of a floating point number.\n * The result is the index of the next character.  If the number is\n * not valid it will be the index of a character in the supposed number.\n *\n * The format of a number is defined in the PNG extensions specification\n * and this API is strictly conformant to that spec, not anyone elses!\n *\n * The format as a regular expression is:\n *\n * [+-]?[0-9]+.?([Ee][+-]?[0-9]+)?\n *\n * or:\n *\n * [+-]?.[0-9]+(.[0-9]+)?([Ee][+-]?[0-9]+)?\n *\n * The complexity is that either integer or fraction must be present and the\n * fraction is permitted to have no digits only if the integer is present.\n *\n * NOTE: The dangling E problem.\n *   There is a PNG valid floating point number in the following:\n *\n *       PNG floating point numbers are not greedy.\n *\n *   Working this out requires *TWO* character lookahead (because of the\n *   sign), the parser does not do this - it will fail at the 'r' - this\n *   doesn't matter for PNG sCAL chunk values, but it requires more care\n *   if the value were ever to be embedded in something more complex.  Use\n *   ANSI-C strtod if you need the lookahead.\n "
2018/06/19 13:40:00 " State table for the parser. \n before or in integer \n before or in fraction \n before or in exponent \n mask for the above \n Saw +/- in current state \n Saw a digit in current state \n Saw a dot in current state \n Saw an E (or e) in current state \n Saw any of the above 4 "
2018/06/19 13:40:00 " These three values don't affect the parser.  They are set but not used.\n "
2018/06/19 13:40:00 " Preceding substring is a valid fp number \n A negative number, including \"-0\" \n A non-zero value \n The above three flags "
2018/06/19 13:40:00 " This is available for the caller to store in 'state' if required.  Do not\n * call the parser after setting it (the parser sometimes clears it.)\n "
2018/06/19 13:40:00 " Available for callers as a distinct value "
2018/06/19 13:40:00 " Result codes for the parser (boolean - true meants ok, false means\n * not ok yet.)\n "
2018/06/19 13:40:00 " The number may be valid in the future \n The number is valid "
2018/06/19 13:40:00 " Tests on the sticky non-zero and negative flags.  To pass these checks\n * the state must also indicate that the whole number is valid - this is\n * achieved by testing PNG_FP_SAW_DIGIT (see the implementation for why this\n * is equivalent to PNG_FP_OK above.)\n "
2018/06/19 13:40:00 " NZ_MASK: the string is valid and a non-zero negative value "
2018/06/19 13:40:00 " Z MASK: the string is valid and a non-zero value. \n PNG_FP_SAW_DIGIT: the string is valid. "
2018/06/19 13:40:00 " The actual parser.  This can be called repeatedly. It updates\n * the index into the string and the state variable (which must\n * be initialized to 0).  It returns a result code, as above.  There\n * is no point calling the parser any more if it fails to advance to\n * the end of the string - it is stuck on an invalid character (or\n * terminated by '\\0').\n *\n * Note that the pointer will consume an E or even an E+ and then leave\n * a 'maybe' state even though a preceding integer.fraction is valid.\n * The PNG_FP_WAS_VALID flag indicates that a preceding substring was\n * a valid number.  It's possible to recover from this by calling\n * the parser again (from the start, with state 0) but with a string\n * that omits the last character (i.e. set the size to the index of\n * the problem character.)  This has not been tested within libpng.\n "
2018/06/19 13:40:00 " This is the same but it checks a complete string and returns true\n * only if it just contains a floating point number.  As of 1.5.4 this\n * function also returns the state at the end of parsing the number if\n * it was valid (otherwise it returns 0.)  This can be used for testing\n * for negative or zero values using the sticky flag.\n "
2018/06/19 13:40:00 " pCAL || sCAL "
2018/06/19 13:40:00 " Added at libpng version 1.5.0 \n This is a utility to provide a*times/div (rounded) and indicate\n * if there is an overflow.  The result is a boolean - false (0)\n * for overflow, true (1) if no overflow, in which case *res\n * holds the result.\n "
2018/06/19 13:40:00 " Same deal, but issue a warning on overflow and return 0. "
2018/06/19 13:40:00 " Calculate a reciprocal - used for gamma values.  This returns\n * 0 if the argument is 0 in order to maintain an undefined value;\n * there are no warnings.\n "
2018/06/19 13:40:00 " The same but gives a reciprocal of the product of two fixed point\n * values.  Accuracy is suitable for gamma calculations but this is\n * not exact - use png_muldiv for that.  Only required at present on read.\n "
2018/06/19 13:40:00 " Return true if the gamma value is significantly different from 1.0 "
2018/06/19 13:40:00 " Internal fixed point gamma correction.  These APIs are called as\n * required to convert single values - they don't need to be fast,\n * they are not used when processing image pixel values.\n *\n * While the input is an 'unsigned' value it must actually be the\n * correct bit value - 0..255 or 0..65535 as required.\n "
2018/06/19 13:40:00 " SIMPLIFIED READ/WRITE SUPPORT "
2018/06/19 13:40:00 " The internal structure that png_image::opaque points to. "
2018/06/19 13:40:00 " Always a jmp_buf at present. "
2018/06/19 13:40:00 " Memory buffer. \n Size of the memory buffer. "
2018/06/19 13:40:00 " Otherwise it is a read structure \n We own the file in io_ptr "
2018/06/19 13:40:00 " Return the pointer to the jmp_buf from a png_control: necessary because C\n * does not reveal the type of the elements of jmp_buf.\n "
2018/06/19 13:40:00 " Utility to safely execute a piece of libpng code catching and logging any\n * errors that might occur.  Returns true on success, false on failure (either\n * of the function or as a result of a png_error.)\n "
2018/06/19 13:40:00 "dummy argument"
2018/06/19 13:40:00 " Utility to log an error; this also cleans up the png_image; the function\n * always returns 0 (false).\n "
2018/06/19 13:40:00 " png_image_free is used by the write code but not exported "
2018/06/19 13:40:00 " !SIMPLIFIED_READ "
2018/06/19 13:40:00 " SIMPLIFIED READ/WRITE "
2018/06/19 13:40:00 " These are initialization functions for hardware specific PNG filter\n * optimizations; list these here then select the appropriate one at compile\n * time using the macro PNG_FILTER_OPTIMIZATIONS.  If the macro is not defined\n * the generic code is used.\n "
2018/06/19 13:40:00 " Just declare the optimization that will be used "
2018/06/19 13:40:00 " List *all* the possible optimizations here - this branch is required if\n    * the builder of libpng passes the definition of PNG_FILTER_OPTIMIZATIONS in\n    * CFLAGS in place of CPPFLAGS *and* uses symbol prefixing.\n    "
2018/06/19 13:40:00 " Maintainer: Put new private prototypes here ^ "
2018/06/19 13:40:00 " PNG_VERSION_INFO_ONLY \n PNGPRIV_H "
2018/06/19 13:40:00 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngpriv.h": 278.058555ms
2018/06/19 13:40:00 Couldn't classify license(s)
2018/06/19 13:40:01 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/INSTALL
2018/06/19 13:40:01 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/INSTALL": 79.566773ms
2018/06/19 13:40:01 Couldn't classify license(s)
2018/06/19 13:40:02 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/config.guess
2018/06/19 13:40:02 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/config.guess": 186.468954ms
2018/06/19 13:40:03 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/Makefile.am
2018/06/19 13:40:03 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/Makefile.am": 64.215653ms
2018/06/19 13:40:03 Couldn't classify license(s)
2018/06/19 13:40:04 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/png.h
2018/06/19 13:40:04 detected language: 4
2018/06/19 13:40:04 " png.h - header file for PNG reference library\n *\n * libpng version 1.6.34, September 29, 2017\n *\n * Copyright (c) 1998-2002,2004,2006-2017 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license (See LICENSE, below)\n *\n * Authors and maintainers:\n *   libpng versions 0.71, May 1995, through 0.88, January 1996: Guy Schalnat\n *   libpng versions 0.89, June 1996, through 0.96, May 1997: Andreas Dilger\n *   libpng versions 0.97, January 1998, through 1.6.34, September 29, 2017:\n *     Glenn Randers-Pehrson.\n *   See also \"Contributing Authors\", below.\n "
2018/06/19 13:40:04 "\n * COPYRIGHT NOTICE, DISCLAIMER, and LICENSE:\n *\n * If you modify libpng you may insert additional notices immediately following\n * this sentence.\n *\n * This code is released under the libpng license.\n *\n * libpng versions 1.0.7, July 1, 2000 through 1.6.34, September 29, 2017 are\n * Copyright (c) 2000-2002, 2004, 2006-2017 Glenn Randers-Pehrson, are\n * derived from libpng-1.0.6, and are distributed according to the same\n * disclaimer and license as libpng-1.0.6 with the following individuals\n * added to the list of Contributing Authors:\n *\n *    Simon-Pierre Cadieux\n *    Eric S. Raymond\n *    Mans Rullgard\n *    Cosmin Truta\n *    Gilles Vollant\n *    James Yu\n *    Mandar Sahastrabuddhe\n *    Google Inc.\n *    Vadim Barkov\n *\n * and with the following additions to the disclaimer:\n *\n *    There is no warranty against interference with your enjoyment of the\n *    library or against infringement.  There is no warranty that our\n *    efforts or the library will fulfill any of your particular purposes\n *    or needs.  This library is provided with all faults, and the entire\n *    risk of satisfactory quality, performance, accuracy, and effort is with\n *    the user.\n *\n * Some files in the \"contrib\" directory and some configure-generated\n * files that are distributed with libpng have other copyright owners and\n * are released under other open source licenses.\n *\n * libpng versions 0.97, January 1998, through 1.0.6, March 20, 2000, are\n * Copyright (c) 1998-2000 Glenn Randers-Pehrson, are derived from\n * libpng-0.96, and are distributed according to the same disclaimer and\n * license as libpng-0.96, with the following individuals added to the list\n * of Contributing Authors:\n *\n *    Tom Lane\n *    Glenn Randers-Pehrson\n *    Willem van Schaik\n *\n * libpng versions 0.89, June 1996, through 0.96, May 1997, are\n * Copyright (c) 1996-1997 Andreas Dilger, are derived from libpng-0.88,\n * and are distributed according to the same disclaimer and license as\n * libpng-0.88, with the following individuals added to the list of\n * Contributing Authors:\n *\n *    John Bowler\n *    Kevin Bracey\n *    Sam Bushell\n *    Magnus Holmgren\n *    Greg Roelofs\n *    Tom Tanner\n *\n * Some files in the \"scripts\" directory have other copyright owners\n * but are released under this license.\n *\n * libpng versions 0.5, May 1995, through 0.88, January 1996, are\n * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.\n *\n * For the purposes of this copyright and license, \"Contributing Authors\"\n * is defined as the following set of individuals:\n *\n *    Andreas Dilger\n *    Dave Martindale\n *    Guy Eric Schalnat\n *    Paul Schmidt\n *    Tim Wegner\n *\n * The PNG Reference Library is supplied \"AS IS\".  The Contributing Authors\n * and Group 42, Inc. disclaim all warranties, expressed or implied,\n * including, without limitation, the warranties of merchantability and of\n * fitness for any purpose.  The Contributing Authors and Group 42, Inc.\n * assume no liability for direct, indirect, incidental, special, exemplary,\n * or consequential damages, which may result from the use of the PNG\n * Reference Library, even if advised of the possibility of such damage.\n *\n * Permission is hereby granted to use, copy, modify, and distribute this\n * source code, or portions hereof, for any purpose, without fee, subject\n * to the following restrictions:\n *\n *   1. The origin of this source code must not be misrepresented.\n *\n *   2. Altered versions must be plainly marked as such and must not\n *      be misrepresented as being the original source.\n *\n *   3. This Copyright notice may not be removed or altered from any\n *      source or altered source distribution.\n *\n * The Contributing Authors and Group 42, Inc. specifically permit, without\n * fee, and encourage the use of this source code as a component to\n * supporting the PNG file format in commercial products.  If you use this\n * source code in a product, acknowledgment is not required but would be\n * appreciated.\n *\n * END OF COPYRIGHT NOTICE, DISCLAIMER, and LICENSE.\n *\n * TRADEMARK:\n *\n * The name \"libpng\" has not been registered by the Copyright owner\n * as a trademark in any jurisdiction.  However, because libpng has\n * been distributed and maintained world-wide, continually since 1995,\n * the Copyright owner claims \"common-law trademark protection\" in any\n * jurisdiction where common-law trademark is recognized.\n *\n * OSI CERTIFICATION:\n *\n * Libpng is OSI Certified Open Source Software.  OSI Certified Open Source is\n * a certification mark of the Open Source Initiative. OSI has not addressed\n * the additional disclaimers inserted at version 1.0.7.\n *\n * EXPORT CONTROL:\n *\n * The Copyright owner believes that the Export Control Classification\n * Number (ECCN) for libpng is EAR99, which means not subject to export\n * controls or International Traffic in Arms Regulations (ITAR) because\n * it is open source, publicly available software, that does not contain\n * any encryption software.  See the EAR, paragraphs 734.3(b)(3) and\n * 734.7(b).\n "
2018/06/19 13:40:04 "\n * A \"png_get_copyright\" function is available, for convenient use in \"about\"\n * boxes and the like:\n *\n *    printf(\"%s\", png_get_copyright(NULL));\n *\n * Also, the PNG logo (in PNG format, of course) is supplied in the\n * files \"pngbar.png\" and \"pngbar.jpg (88x31) and \"pngnow.png\" (98x31).\n "
2018/06/19 13:40:04 "\n * The contributing authors would like to thank all those who helped\n * with testing, bug fixes, and patience.  This wouldn't have been\n * possible without all of you.\n *\n * Thanks to Frank J. T. Wojcik for helping with the documentation.\n "
2018/06/19 13:40:04 " Note about libpng version numbers:\n *\n *    Due to various miscommunications, unforeseen code incompatibilities\n *    and occasional factors outside the authors' control, version numbering\n *    on the library has not always been consistent and straightforward.\n *    The following table summarizes matters since version 0.89c, which was\n *    the first widely used release:\n *\n *    source                 png.h  png.h  shared-lib\n *    version                string   int  version\n *    -------                ------ -----  ----------\n *    0.89c \"1.0 beta 3\"     0.89      89  1.0.89\n *    0.90  \"1.0 beta 4\"     0.90      90  0.90  [should have been 2.0.90]\n *    0.95  \"1.0 beta 5\"     0.95      95  0.95  [should have been 2.0.95]\n *    0.96  \"1.0 beta 6\"     0.96      96  0.96  [should have been 2.0.96]\n *    0.97b \"1.00.97 beta 7\" 1.00.97   97  1.0.1 [should have been 2.0.97]\n *    0.97c                  0.97      97  2.0.97\n *    0.98                   0.98      98  2.0.98\n *    0.99                   0.99      98  2.0.99\n *    0.99a-m                0.99      99  2.0.99\n *    1.00                   1.00     100  2.1.0 [100 should be 10000]\n *    1.0.0      (from here on, the   100  2.1.0 [100 should be 10000]\n *    1.0.1       png.h string is   10001  2.1.0\n *    1.0.1a-e    identical to the  10002  from here on, the shared library\n *    1.0.2       source version)   10002  is 2.V where V is the source code\n *    1.0.2a-b                      10003  version, except as noted.\n *    1.0.3                         10003\n *    1.0.3a-d                      10004\n *    1.0.4                         10004\n *    1.0.4a-f                      10005\n *    1.0.5 (+ 2 patches)           10005\n *    1.0.5a-d                      10006\n *    1.0.5e-r                      10100 (not source compatible)\n *    1.0.5s-v                      10006 (not binary compatible)\n *    1.0.6 (+ 3 patches)           10006 (still binary incompatible)\n *    1.0.6d-f                      10007 (still binary incompatible)\n *    1.0.6g                        10007\n *    1.0.6h                        10007  10.6h (testing xy.z so-numbering)\n *    1.0.6i                        10007  10.6i\n *    1.0.6j                        10007  2.1.0.6j (incompatible with 1.0.0)\n *    1.0.7beta11-14        DLLNUM  10007  2.1.0.7beta11-14 (binary compatible)\n *    1.0.7beta15-18           1    10007  2.1.0.7beta15-18 (binary compatible)\n *    1.0.7rc1-2               1    10007  2.1.0.7rc1-2 (binary compatible)\n *    1.0.7                    1    10007  (still compatible)\n *    ...\n *    1.0.19                  10    10019  10.so.0.19[.0]\n *    ...\n *    1.2.59                  13    10257  12.so.0.59[.0]\n *    ...\n *    1.5.30                  15    10527  15.so.15.30[.0]\n *    ...\n *    1.6.34                  16    10633  16.so.16.34[.0]\n *\n *    Henceforth the source version will match the shared-library major\n *    and minor numbers; the shared-library major version number will be\n *    used for changes in backward compatibility, as it is intended.  The\n *    PNG_LIBPNG_VER macro, which is not used within libpng but is available\n *    for applications, is an unsigned integer of the form xyyzz corresponding\n *    to the source version x.y.z (leading zeros in y and z).  Beta versions\n *    were given the previous public release number plus a letter, until\n *    version 1.0.6j; from then on they were given the upcoming public\n *    release number plus \"betaNN\" or \"rcNN\".\n *\n *    Binary incompatibility exists only when applications make direct access\n *    to the info_ptr or png_ptr members through png.h, and the compiled\n *    application is loaded with a different version of the library.\n *\n *    DLLNUM will change each time there are forward or backward changes\n *    in binary compatibility (e.g., when a new feature is added).\n *\n * See libpng.txt or libpng.3 for more information.  The PNG specification\n * is available as a W3C Recommendation and as an ISO Specification,\n * <https://www.w3.org/TR/2003/REC-PNG-20031110/\n "
2018/06/19 13:40:04 "\n * Y2K compliance in libpng:\n * =========================\n *\n *    September 29, 2017\n *\n *    Since the PNG Development group is an ad-hoc body, we can't make\n *    an official declaration.\n *\n *    This is your unofficial assurance that libpng from version 0.71 and\n *    upward through 1.6.34 are Y2K compliant.  It is my belief that\n *    earlier versions were also Y2K compliant.\n *\n *    Libpng only has two year fields.  One is a 2-byte unsigned integer\n *    that will hold years up to 65535.  The other, which is deprecated,\n *    holds the date in text format, and will hold years up to 9999.\n *\n *    The integer is\n *        \"png_uint_16 year\" in png_time_struct.\n *\n *    The string is\n *        \"char time_buffer[29]\" in png_struct.  This is no longer used\n *    in libpng-1.6.x and will be removed from libpng-1.7.0.\n *\n *    There are seven time-related functions:\n *        png.c: png_convert_to_rfc_1123_buffer() in png.c\n *          (formerly png_convert_to_rfc_1123() prior to libpng-1.5.x and\n *          png_convert_to_rfc_1152() in error prior to libpng-0.98)\n *        png_convert_from_struct_tm() in pngwrite.c, called in pngwrite.c\n *        png_convert_from_time_t() in pngwrite.c\n *        png_get_tIME() in pngget.c\n *        png_handle_tIME() in pngrutil.c, called in pngread.c\n *        png_set_tIME() in pngset.c\n *        png_write_tIME() in pngwutil.c, called in pngwrite.c\n *\n *    All handle dates properly in a Y2K environment.  The\n *    png_convert_from_time_t() function calls gmtime() to convert from system\n *    clock time, which returns (year - 1900), which we properly convert to\n *    the full 4-digit year.  There is a possibility that libpng applications\n *    are not passing 4-digit years into the png_convert_to_rfc_1123_buffer()\n *    function, or that they are incorrectly passing only a 2-digit year\n *    instead of \"year - 1900\" into the png_convert_from_struct_tm() function,\n *    but this is not under our control.  The libpng documentation has always\n *    stated that it works with 4-digit years, and the APIs have been\n *    documented as such.\n *\n *    The tIME chunk itself is also Y2K compliant.  It uses a 2-byte unsigned\n *    integer to hold the year, and can hold years as large as 65535.\n *\n *    zlib, upon which libpng depends, is also Y2K compliant.  It contains\n *    no date-related code.\n *\n *       Glenn Randers-Pehrson\n *       libpng maintainer\n *       PNG Development Group\n "
2018/06/19 13:40:04 " This is not the place to learn how to use libpng. The file libpng-manual.txt\n * describes how to use libpng, and the file example.c summarizes it\n * with some code on which to build.  This file is useful for looking\n * at the actual function definitions and structure components.  If that\n * file has been stripped from your copy of libpng, you can find it at\n * <http://www.libpng.org/pub/png/libpng-manual.txt>\n *\n * If you just need to read a PNG file and don't want to read the documentation\n * skip to the end of this file and read the section entitled 'simplified API'.\n "
2018/06/19 13:40:04 " Version information for png.h - this should match the version in png.c "
2018/06/19 13:40:04 " These should match the first 3 components of PNG_LIBPNG_VER_STRING: "
2018/06/19 13:40:04 " This should match the numeric part of the final component of\n * PNG_LIBPNG_VER_STRING, omitting any leading zero:\n "
2018/06/19 13:40:04 " Release Status "
2018/06/19 13:40:04 " Release-Specific Flags \n Can be OR'ed with\n                                       PNG_LIBPNG_BUILD_STABLE only "
2018/06/19 13:40:04 " Cannot be OR'ed with\n                                       PNG_LIBPNG_BUILD_SPECIAL "
2018/06/19 13:40:04 " Cannot be OR'ed with\n                                       PNG_LIBPNG_BUILD_PRIVATE "
2018/06/19 13:40:04 " Careful here.  At one time, Guy wanted to use 082, but that would be octal.\n * We must not include leading zeros.\n * Versions 0.7 through 1.0.0 were in the range 0 to 100 here (only\n * version 1.0.0 was mis-numbered 100 instead of 10000).  From\n * version 1.0.1 it's    xxyyzz, where x=major, y=minor, z=release\n "
2018/06/19 13:40:04 " 1.6.34 "
2018/06/19 13:40:04 " Library configuration: these options cannot be changed after\n * the library has been built.\n "
2018/06/19 13:40:04 " If pnglibconf.h is missing, you can\n * copy scripts/pnglibconf.h.prebuilt to pnglibconf.h\n "
2018/06/19 13:40:04 " Machine specific configuration. "
2018/06/19 13:40:04 "\n * Added at libpng-1.2.8\n *\n * Ref MSDN: Private as priority over Special\n * VS_FF_PRIVATEBUILD File *was not* built using standard release\n * procedures. If this value is given, the StringFileInfo block must\n * contain a PrivateBuild string.\n *\n * VS_FF_SPECIALBUILD File *was* built by the original company using\n * standard release procedures but is a variation of the standard\n * file of the same version number. If this value is given, the\n * StringFileInfo block must contain a SpecialBuild string.\n "
2018/06/19 13:40:04 " From pnglibconf.h "
2018/06/19 13:40:04 " Inhibit C++ name-mangling for libpng functions but not for system calls. "
2018/06/19 13:40:04 " __cplusplus "
2018/06/19 13:40:04 " Version information for C files, stored in png.c.  This had better match\n * the version above.\n "
2018/06/19 13:40:04 " This file is arranged in several sections:\n *\n * 1. [omitted]\n * 2. Any configuration options that can be specified by for the application\n *    code when it is built.  (Build time configuration is in pnglibconf.h)\n * 3. Type definitions (base types are defined in pngconf.h), structure\n *    definitions.\n * 4. Exported library functions.\n * 5. Simplified API.\n * 6. Implementation options.\n *\n * The library source code has additional files (principally pngpriv.h) that\n * allow configuration of the library.\n "
2018/06/19 13:40:04 " Section 1: [omitted] "
2018/06/19 13:40:04 " Section 2: run time configuration\n * See pnglibconf.h for build time configuration\n *\n * Run time configuration allows the application to choose between\n * implementations of certain arithmetic APIs.  The default is set\n * at build time and recorded in pnglibconf.h, but it is safe to\n * override these (and only these) settings.  Note that this won't\n * change what the library does, only application code, and the\n * settings can (and probably should) be made on a per-file basis\n * by setting the #defines before including png.h\n *\n * Use macros to read integers from PNG data or use the exported\n * functions?\n *   PNG_USE_READ_MACROS: use the macros (see below)  Note that\n *     the macros evaluate their argument multiple times.\n *   PNG_NO_USE_READ_MACROS: call the relevant library function.\n *\n * Use the alternative algorithm for compositing alpha samples that\n * does not use division?\n *   PNG_READ_COMPOSITE_NODIV_SUPPORTED: use the 'no division'\n *      algorithm.\n *   PNG_NO_READ_COMPOSITE_NODIV: use the 'division' algorithm.\n *\n * How to handle benign errors if PNG_ALLOW_BENIGN_ERRORS is\n * false?\n *   PNG_ALLOW_BENIGN_ERRORS: map calls to the benign error\n *      APIs to png_warning.\n * Otherwise the calls are mapped to png_error.\n "
2018/06/19 13:40:04 " Section 3: type definitions, including structures and compile time\n * constants.\n * See pngconf.h for base types that vary by machine/system\n "
2018/06/19 13:40:04 " This triggers a compiler error in png.c, if png.c and png.h\n * do not agree upon the version number.\n "
2018/06/19 13:40:04 " Basic control structions.  Read libpng-manual.txt or libpng.3 for more info.\n *\n * png_struct is the cache of information used while reading or writing a single\n * PNG file.  One of these is always required, although the simplified API\n * (below) hides the creation and destruction of it.\n "
2018/06/19 13:40:04 " png_info contains information read from or to be written to a PNG file.  One\n * or more of these must exist while reading or creating a PNG file.  The\n * information is not used by libpng during read but is used to control what\n * gets written when a PNG file is created.  \"png_get_\" function calls read\n * information during read and \"png_set_\" functions calls write information\n * when creating a PNG.\n * been moved into a separate header file that is not accessible to\n * applications.  Read libpng-manual.txt or libpng.3 for more info.\n "
2018/06/19 13:40:04 " Types with names ending 'p' are pointer types.  The corresponding types with\n * names ending 'rp' are identical pointer types except that the pointer is\n * marked 'restrict', which means that it is the only pointer to the object\n * passed to the function.  Applications should not use the 'restrict' types;\n * it is always valid to pass 'p' to a pointer with a function argument of the\n * corresponding 'rp' type.  Different compilers have different rules with\n * regard to type matching in the presence of 'restrict'.  For backward\n * compatibility libpng callbacks never have 'restrict' in their parameters and,\n * consequentially, writing portable application code is extremely difficult if\n * an attempt is made to use 'restrict'.\n "
2018/06/19 13:40:04 " Three color definitions.  The order of the red, green, and blue, (and the\n * exact size) is not important, although the size of the fields need to\n * be png_byte or png_uint_16 (as defined below).\n "
2018/06/19 13:40:04 " used for palette files \n for use in red green blue files "
2018/06/19 13:40:04 " for use in grayscale files "
2018/06/19 13:40:04 " for use in red green blue files "
2018/06/19 13:40:04 " for use in grayscale files \n for alpha channel files "
2018/06/19 13:40:04 "\n * The following two structures are used for the in-core representation\n * of sPLT chunks.\n "
2018/06/19 13:40:04 "  When the depth of the sPLT palette is 8 bits, the color and alpha samples\n *  occupy the LSB of their respective members, and the MSB of each member\n *  is zero-filled.  The frequency member always occupies the full 16 bits.\n "
2018/06/19 13:40:04 " palette name \n depth of palette samples \n palette entries \n number of palette entries "
2018/06/19 13:40:04 " png_text holds the contents of a text/ztxt/itxt chunk in a PNG file,\n * and whether that contents is compressed or not.  The \"key\" field\n * points to a regular zero-terminated C string.  The \"text\" fields can be a\n * regular C string, an empty string, or a NULL pointer.\n * However, the structure returned by png_get_text() will always contain\n * the \"text\" field as a regular zero-terminated C string (possibly\n * empty), never a NULL pointer, so it can be safely used in printf() and\n * other string-handling functions.  Note that the \"itxt_length\", \"lang\", and\n * \"lang_key\" members of the structure only exist when the library is built\n * with iTXt chunk support.  Prior to libpng-1.4.0 the library was built by\n * default without iTXt support. Also note that when iTXt *is* supported,\n * the \"lang\" and \"lang_key\" fields contain NULL pointers when the\n * \"compression\" field contains * PNG_TEXT_COMPRESSION_NONE or\n * PNG_TEXT_COMPRESSION_zTXt. Note that the \"compression value\" is not the\n * same as what appears in the PNG tEXt/zTXt/iTXt chunk's \"compression flag\"\n * which is always 0 or 1, or its \"compression method\" which is always 0.\n "
2018/06/19 13:40:04 " compression value:\n                             -1: tEXt, none\n                              0: zTXt, deflate\n                              1: iTXt, none\n                              2: iTXt, deflate  "
2018/06/19 13:40:04 " keyword, 1-79 character description of \"text\" \n comment, may be an empty string (ie \"\")\n                              or a NULL pointer "
2018/06/19 13:40:04 " length of the text string \n length of the itxt string \n language code, 0-79 characters\n                              or a NULL pointer "
2018/06/19 13:40:04 " keyword translated UTF-8 string, 0 or more\n                              chars or a NULL pointer "
2018/06/19 13:40:04 " Supported compression types for text in PNG files (tEXt, and zTXt).\n * The values of the PNG_TEXT_COMPRESSION_ defines should NOT be changed. "
2018/06/19 13:40:04 " Not a valid value "
2018/06/19 13:40:04 " png_time is a way to hold the time in an machine independent way.\n * Two conversions are provided, both from time_t and struct tm.  There\n * is no portable way to convert to either of these structures, as far\n * as I know.  If you know of a portable way, send it to me.  As a side\n * note - PNG has always been Year 2000 compliant!\n "
2018/06/19 13:40:04 " full year, as in, 1995 \n month of year, 1 - 12 \n day of month, 1 - 31 \n hour of day, 0 - 23 \n minute of hour, 0 - 59 \n second of minute, 0 - 60 (for leap seconds) "
2018/06/19 13:40:04 " png_unknown_chunk is a structure to hold queued chunks for which there is\n * no specific support.  The idea is that we can use this to queue\n * up private chunks for output even though the library doesn't actually\n * know about their semantics.\n *\n * The data in the structure is set by libpng on read and used on write.\n "
2018/06/19 13:40:04 " Textual chunk name with '\\0' terminator \n Data, should not be modified on read! "
2018/06/19 13:40:04 " On write 'location' must be set using the flag values listed below.\n    * Notice that on read it is set by libpng however the values stored have\n    * more bits set than are listed below.  Always treat the value as a\n    * bitmask.  On write set only one bit - setting multiple bits may cause the\n    * chunk to be written in multiple places.\n    "
2018/06/19 13:40:04 " mode of operation at read time "
2018/06/19 13:40:04 " Flag values for the unknown chunk location byte. "
2018/06/19 13:40:04 " Maximum positive integer used in PNG is (2^31)-1 "
2018/06/19 13:40:04 " These are constants for fixed point values encoded in the\n * PNG specification manner (x100000)\n "
2018/06/19 13:40:04 " These describe the color_type field in png_info. \n color type masks "
2018/06/19 13:40:04 " color types.  Note that not all combinations are legal "
2018/06/19 13:40:04 " aliases "
2018/06/19 13:40:04 " This is for compression type. PNG 1.0-1.2 only define the single type. \n Deflate method 8, 32K window "
2018/06/19 13:40:04 " This is for filter type. PNG 1.0-1.2 only define the single type. \n Single row per-byte filtering \n Used only in MNG datastreams "
2018/06/19 13:40:04 " These are for the interlacing type.  These values should NOT be changed. \n Non-interlaced image \n Adam7 interlacing \n Not a valid value "
2018/06/19 13:40:04 " These are for the oFFs chunk.  These values should NOT be changed. \n Offset in pixels \n Offset in micrometers (1/10^6 meter) \n Not a valid value "
2018/06/19 13:40:04 " These are for the pCAL chunk.  These values should NOT be changed. \n Linear transformation \n Exponential base e transform \n Arbitrary base exponential transform \n Hyperbolic sine transformation \n Not a valid value "
2018/06/19 13:40:04 " These are for the sCAL chunk.  These values should NOT be changed. \n unknown unit (image scale) \n meters per pixel \n radians per pixel \n Not a valid value "
2018/06/19 13:40:04 " These are for the pHYs chunk.  These values should NOT be changed. \n pixels/unknown unit (aspect ratio) \n pixels/meter \n Not a valid value "
2018/06/19 13:40:04 " These are for the sRGB chunk.  These values should NOT be changed. "
2018/06/19 13:40:04 " Not a valid value "
2018/06/19 13:40:04 " This is for text chunks "
2018/06/19 13:40:04 " Maximum number of entries in PLTE/sPLT/tRNS arrays "
2018/06/19 13:40:04 " These determine if an ancillary chunk's data has been successfully read\n * from the PNG header, or if the application has filled in the corresponding\n * data in the info_struct to be written into the output file.  The values\n * of the PNG_INFO_<chunk> defines should NOT be changed.\n "
2018/06/19 13:40:04 " GR-P, 0.96a \n ESR, 1.0.6 \n ESR, 1.0.6 \n ESR, 1.0.6 \n ESR, 1.0.6 \n GR-P, 1.6.31 "
2018/06/19 13:40:04 " This is used for the transformation routines, as some of them\n * change these values for the row.  It also should enable using\n * the routines for other purposes.\n "
2018/06/19 13:40:04 " width of row \n number of bytes in row \n color type of row \n bit depth of row \n number of channels (1, 2, 3, or 4) \n bits per pixel (depth * channels) "
2018/06/19 13:40:04 " These are the function types for the I/O functions and for the functions\n * that allow the user to override the default I/O functions with his or her\n * own.  The png_error_ptr type should match that of user-supplied warning\n * and error functions, while the png_rw_ptr type should match that of the\n * user read/write data functions.  Note that the 'write' function must not\n * modify the buffer it is passed. The 'read' function, on the other hand, is\n * expected to return the read data in the buffer.\n "
2018/06/19 13:40:04 " The following callback receives png_uint_32 row_number, int pass for the\n * png_bytep data of the row.  When transforming an interlaced image the\n * row number is the row number within the sub-image of the interlace pass, so\n * the value will increase to the height of the sub-image (not the full image)\n * then reset to 0 for the next pass.\n *\n * Use PNG_ROW_FROM_PASS_ROW(row, pass) and PNG_COL_FROM_PASS_COL(col, pass) to\n * find the output pixel (x,y) given an interlaced sub-image pixel\n * (row,col,pass).  (See below for these macros.)\n "
2018/06/19 13:40:04 " not used anywhere \n typedef PNG_CALLBACK(void, *png_unknown_chunk_ptr, (png_structp)); "
2018/06/19 13:40:04 " This must match the function definition in <setjmp.h>, and the application\n * must include this before png.h to obtain the definition of jmp_buf.  The\n * function is required to be PNG_NORETURN, but this is not checked.  If the\n * function does return the application will crash via an abort() or similar\n * system level call.\n *\n * If you get a warning here while building the library you may need to make\n * changes to ensure that pnglibconf.h records the calling convention used by\n * your compiler.  This may be very difficult - try using a different compiler\n * to build the library!\n "
2018/06/19 13:40:04 " Transform masks for the high-level interface \n read and write \n read only \n read only \n read and write \n read and write \n read only \n read and write \n read and write \n read and write \n read and write \n read and write \n read and write \n write only \n Added to libpng-1.2.34 "
2018/06/19 13:40:04 " write only \n Added to libpng-1.4.0 \n read only \n Added to libpng-1.5.4 \n read only \n else this might break \n read only "
2018/06/19 13:40:04 " Flags for MNG supported features "
2018/06/19 13:40:04 " NOTE: prior to 1.5 these functions had no 'API' style declaration,\n * this allowed the zlib default functions to be used on Windows\n * platforms.  In 1.5 the zlib default malloc (which just calls malloc and\n * ignores the first argument) should be completely compatible with the\n * following.\n "
2018/06/19 13:40:04 " Section 4: exported functions\n * Here are the function definitions most commonly used.  This is not\n * the place to find out how to use libpng.  See libpng-manual.txt for the\n * full explanation, see example.c for the summary.  This just provides\n * a simple one line description of the use of each function.\n *\n * The PNG_EXPORT() and PNG_EXPORTA() macros used below are defined in\n * pngconf.h and in the *.dfn files in the scripts directory.\n *\n *   PNG_EXPORT(ordinal, type, name, (args));\n *\n *       ordinal:    ordinal that is used while building\n *                   *.def files. The ordinal value is only\n *                   relevant when preprocessing png.h with\n *                   the *.dfn files for building symbol table\n *                   entries, and are removed by pngconf.h.\n *       type:       return type of the function\n *       name:       function name\n *       args:       function arguments, with types\n *\n * When we wish to append attributes to a function prototype we use\n * the PNG_EXPORTA() macro instead.\n *\n *   PNG_EXPORTA(ordinal, type, name, (args), attributes);\n *\n *       ordinal, type, name, and args: same as in PNG_EXPORT().\n *       attributes: function attributes\n "
2018/06/19 13:40:04 " Returns the version number of the library "
2018/06/19 13:40:04 " Tell lib we have already handled the first <num_bytes> magic bytes.\n * Handling more than 8 bytes from the beginning of the file is an error.\n "
2018/06/19 13:40:04 " Check sig[start] through sig[start + num_to_check - 1] to see if it's a\n * PNG file.  Returns zero if the supplied bytes match the 8-byte PNG\n * signature, and non-zero otherwise.  Having num_to_check == 0 or\n * start > 7 will always fail (ie return non-zero).\n "
2018/06/19 13:40:04 " Simple signature checking function.  This is the same as calling\n * png_check_sig(sig, n) := !png_sig_cmp(sig, 0, n).\n "
2018/06/19 13:40:04 " Allocate and initialize png_ptr struct for reading, and any other memory. "
2018/06/19 13:40:04 " Allocate and initialize png_ptr struct for writing, and any other memory "
2018/06/19 13:40:04 " Moved from pngconf.h in 1.4.0 and modified to ensure setjmp/longjmp\n * match up.\n "
2018/06/19 13:40:04 " This function returns the jmp_buf built in to *png_ptr.  It must be\n * supplied with an appropriate 'longjmp' function to use on that jmp_buf\n * unless the default error function is overridden in which case NULL is\n * acceptable.  The size of the jmp_buf is checked against the actual size\n * allocated by the library - the call will return NULL on a mismatch\n * indicating an ABI mismatch.\n "
2018/06/19 13:40:04 " This function should be used by libpng applications in place of\n * longjmp(png_ptr->jmpbuf, val).  If longjmp_fn() has been set, it\n * will use it; otherwise it will call PNG_ABORT().  This function was\n * added in libpng-1.5.0.\n "
2018/06/19 13:40:04 " Reset the compression stream "
2018/06/19 13:40:04 " New functions added in libpng-1.0.2 (not enabled by default until 1.2.0) "
2018/06/19 13:40:04 " Write the PNG file signature. "
2018/06/19 13:40:04 " Write a PNG chunk - size, type, (optional) data, CRC. "
2018/06/19 13:40:04 " Write the start of a PNG chunk - length and chunk name. "
2018/06/19 13:40:04 " Write the data of a PNG chunk started with png_write_chunk_start(). "
2018/06/19 13:40:04 " Finish a chunk started with png_write_chunk_start() (includes CRC). "
2018/06/19 13:40:04 " Allocate and initialize the info structure "
2018/06/19 13:40:04 " DEPRECATED: this function allowed init structures to be created using the\n * default allocation method (typically malloc).  Use is deprecated in 1.6.0 and\n * the API will be removed in the future.\n "
2018/06/19 13:40:04 " Writes all the PNG information before the image. "
2018/06/19 13:40:04 " Read the information before the actual image data. "
2018/06/19 13:40:04 " Convert to a US string format: there is no localization support in this\n    * routine.  The original implementation used a 29 character buffer in\n    * png_struct, this will be removed in future versions.\n    "
2018/06/19 13:40:04 " To do: remove this from libpng17 (and from libpng17/png.c and pngstruct.h) "
2018/06/19 13:40:04 " Convert from a struct tm to png_time "
2018/06/19 13:40:04 " Convert from time_t to png_time.  Uses gmtime() "
2018/06/19 13:40:04 " CONVERT_tIME "
2018/06/19 13:40:04 " Expand data to 24-bit RGB, or 8-bit grayscale, with alpha if available. "
2018/06/19 13:40:04 " Expand to 16-bit channels, forces conversion of palette to RGB and expansion\n * of a tRNS chunk if present.\n "
2018/06/19 13:40:04 " Use blue, green, red order for pixels. "
2018/06/19 13:40:04 " Expand the grayscale to 24-bit RGB if necessary. "
2018/06/19 13:40:04 " Reduce RGB to grayscale. "
2018/06/19 13:40:04 "for red/green coefficients"
2018/06/19 13:40:04 " How the alpha channel is interpreted - this affects how the color channels\n * of a PNG file are returned to the calling application when an alpha channel,\n * or a tRNS chunk in a palette file, is present.\n *\n * This has no effect on the way pixels are written into a PNG output\n * datastream. The color samples in a PNG datastream are never premultiplied\n * with the alpha samples.\n *\n * The default is to return data according to the PNG specification: the alpha\n * channel is a linear measure of the contribution of the pixel to the\n * corresponding composited pixel, and the color channels are unassociated\n * (not premultiplied).  The gamma encoded color channels must be scaled\n * according to the contribution and to do this it is necessary to undo\n * the encoding, scale the color values, perform the composition and reencode\n * the values.  This is the 'PNG' mode.\n *\n * The alternative is to 'associate' the alpha with the color information by\n * storing color channel values that have been scaled by the alpha.\n * image.  These are the 'STANDARD', 'ASSOCIATED' or 'PREMULTIPLIED' modes\n * (the latter being the two common names for associated alpha color channels).\n *\n * For the 'OPTIMIZED' mode, a pixel is treated as opaque only if the alpha\n * value is equal to the maximum value.\n *\n * The final choice is to gamma encode the alpha channel as well.  This is\n * broken because, in practice, no implementation that uses this choice\n * correctly undoes the encoding before handling alpha composition.  Use this\n * choice only if other serious errors in the software or hardware you use\n * mandate it; the typical serious error is for dark halos to appear around\n * opaque areas of the composited PNG image because of arithmetic overflow.\n *\n * The API function png_set_alpha_mode specifies which of these choices to use\n * with an enumerated 'mode' value and the gamma of the required output:\n "
2018/06/19 13:40:04 " according to the PNG standard \n according to Porter/Duff \n as above; this is the normal practice \n as above \n 'PNG' for opaque pixels, else 'STANDARD' \n the alpha channel is gamma encoded "
2018/06/19 13:40:04 " The output_gamma value is a screen gamma in libpng terminology: it expresses\n * how to decode the output values, not how they are encoded.\n "
2018/06/19 13:40:04 " sRGB gamma and color space \n Old Mac '1.8' gamma and color space \n Television standards--matches sRGB gamma \n Linear "
2018/06/19 13:40:04 " The following are examples of calls to png_set_alpha_mode to achieve the\n * required overall gamma correction and, where necessary, alpha\n * premultiplication.\n *\n * png_set_alpha_mode(pp, PNG_ALPHA_PNG, PNG_DEFAULT_sRGB);\n *    This is the default libpng handling of the alpha channel - it is not\n *    pre-multiplied into the color components.  In addition the call states\n *    that the output is for a sRGB system and causes all PNG files without gAMA\n *    chunks to be assumed to be encoded using sRGB.\n *\n * png_set_alpha_mode(pp, PNG_ALPHA_PNG, PNG_GAMMA_MAC);\n *    In this case the output is assumed to be something like an sRGB conformant\n *    display preceeded by a power-law lookup table of power 1.45.  This is how\n *    early Mac systems behaved.\n *\n * png_set_alpha_mode(pp, PNG_ALPHA_STANDARD, PNG_GAMMA_LINEAR);\n *    This is the classic Jim Blinn approach and will work in academic\n *    environments where everything is done by the book.  It has the shortcoming\n *    of assuming that input PNG data with no gamma information is linear - this\n *    is unlikely to be correct unless the PNG files where generated locally.\n *    Most of the time the output precision will be so low as to show\n *    significant banding in dark areas of the image.\n *\n * png_set_expand_16(pp);\n * png_set_alpha_mode(pp, PNG_ALPHA_STANDARD, PNG_DEFAULT_sRGB);\n *    This is a somewhat more realistic Jim Blinn inspired approach.  PNG files\n *    are assumed to have the sRGB encoding if not marked with a gamma value and\n *    the output is always 16 bits per component.  This permits accurate scaling\n *    and processing of the data.  If you know that your input PNG files were\n *    generated locally you might need to replace PNG_DEFAULT_sRGB with the\n *    correct value for your system.\n *\n * png_set_alpha_mode(pp, PNG_ALPHA_OPTIMIZED, PNG_DEFAULT_sRGB);\n *    If you just need to composite the PNG image onto an existing background\n *    and if you control the code that does this you can use the optimization\n *    setting.  In this case you just copy completely opaque pixels to the\n *    output.  For pixels that are not completely transparent (you just skip\n *    those) you do the composition math using png_composite or png_composite_16\n *    below then encode the resultant 8-bit or 16-bit values to match the output\n *    encoding.\n *\n * Other cases\n *    If neither the PNG nor the standard linear encoding work for you because\n *    of the software or hardware you use then you have a big problem.  The PNG\n *    case will probably result in halos around the image.  The linear encoding\n *    will probably result in a washed out, too bright, image (it's actually too\n *    contrasty.)  Try the ALPHA_OPTIMIZED mode above - this will probably\n *    substantially reduce the halos.  Alternatively try:\n *\n * png_set_alpha_mode(pp, PNG_ALPHA_BROKEN, PNG_DEFAULT_sRGB);\n *    This option will also reduce the halos, but there will be slight dark\n *    halos round the opaque parts of the image where the background is light.\n *    In the OPTIMIZED mode the halos will be light halos where the background\n *    is dark.  Take your pick - the halos are unavoidable unless you can get\n *    your hardware/software fixed!  (The OPTIMIZED approach is slightly\n *    faster.)\n *\n * When the default gamma of PNG files doesn't match the output gamma.\n *    If you have PNG files with no gamma information png_set_alpha_mode allows\n *    you to provide a default gamma, but it also sets the ouput gamma to the\n *    matching value.  If you know your PNG files have a gamma that doesn't\n *    match the output you can take advantage of the fact that\n *    png_set_alpha_mode always sets the output gamma but only sets the PNG\n *    default if it is not already set:\n *\n * png_set_alpha_mode(pp, PNG_ALPHA_PNG, PNG_DEFAULT_sRGB);\n * png_set_alpha_mode(pp, PNG_ALPHA_PNG, PNG_GAMMA_MAC);\n *    The first call sets both the default and the output gamma values, the\n *    second call overrides the output gamma without changing the default.  This\n *    is easier than achieving the same effect with png_set_gamma.  You must use\n *    PNG_ALPHA_PNG for the first call - internal checking in png_set_alpha will\n *    fire if more than one call to png_set_alpha_mode and png_set_background is\n *    made in the same read operation, however multiple calls with PNG_ALPHA_PNG\n *    are ignored.\n "
2018/06/19 13:40:04 " Add a filler byte to 8-bit or 16-bit Gray or 24-bit or 48-bit RGB images. "
2018/06/19 13:40:04 " The values of the PNG_FILLER_ defines should NOT be changed "
2018/06/19 13:40:04 " Add an alpha byte to 8-bit or 16-bit Gray or 24-bit or 48-bit RGB images. "
2018/06/19 13:40:04 " READ_FILLER || WRITE_FILLER "
2018/06/19 13:40:04 " Swap bytes in 16-bit depth files. "
2018/06/19 13:40:04 " Use 1 byte per pixel in 1, 2, or 4-bit depth files. "
2018/06/19 13:40:04 " Swap packing order of pixels in bytes. "
2018/06/19 13:40:04 " Converts files to legal bit depths. "
2018/06/19 13:40:04 " Have the code handle the interlacing.  Returns the number of passes.\n * MUST be called before png_read_update_info or png_start_read_image,\n * otherwise it will not have the desired effect.  Note that it is still\n * necessary to call png_read_row or png_read_rows png_get_image_height\n * times for each pass.\n"
2018/06/19 13:40:04 " Invert monochrome files "
2018/06/19 13:40:04 " Handle alpha and tRNS by replacing with a background color.  Prior to\n * libpng-1.5.4 this API must not be called before the PNG file header has been\n * read.  Doing so will result in unexpected behavior and possible warnings or\n * errors if the PNG file contains a bKGD chunk.\n "
2018/06/19 13:40:04 " Scale a 16-bit depth file down to 8-bit, accurately. "
2018/06/19 13:40:04 " Name prior to 1.5.4 \n Strip the second byte of information from a 16-bit depth file. "
2018/06/19 13:40:04 " Turn on quantizing, and reduce the palette to the number of colors\n * available.\n "
2018/06/19 13:40:04 " The threshold on gamma processing is configurable but hard-wired into the\n * library.  The following is the floating point variant.\n "
2018/06/19 13:40:04 " Handle gamma correction. Screen_gamma=(display_exponent).\n * NOTE: this API simply sets the screen and file gamma values. It will\n * therefore override the value for gamma in a PNG file if it is called after\n * the file header has been read - use with care  - call before reading the PNG\n * file for best results!\n *\n * These routines accept the same gamma values as png_set_alpha_mode (described\n * above).  The PNG_GAMMA_ defines and PNG_DEFAULT_sRGB can be passed to either\n * API (floating point or fixed.)  Notice, however, that the 'file_gamma' value\n * is the inverse of a 'screen gamma' value.\n "
2018/06/19 13:40:04 " Set how many lines between output flushes - 0 for no flushing "
2018/06/19 13:40:04 " Flush the current PNG output buffer "
2018/06/19 13:40:04 " Optional update palette with requested transformations "
2018/06/19 13:40:04 " Optional call to update the users info structure "
2018/06/19 13:40:04 " Read one or more rows of image data. "
2018/06/19 13:40:04 " Read a row of data. "
2018/06/19 13:40:04 " Read the whole image into memory at once. "
2018/06/19 13:40:04 " Write a row of image data "
2018/06/19 13:40:04 " Write a few rows of image data: (*row) is not written; however, the type\n * is declared as writeable to maintain compatibility with previous versions\n * of libpng and to allow the 'display_row' array from read_rows to be passed\n * unchanged to write_rows.\n "
2018/06/19 13:40:04 " Write the image data "
2018/06/19 13:40:04 " Write the end of the PNG file. "
2018/06/19 13:40:04 " Read the end of the PNG file. "
2018/06/19 13:40:04 " Free any memory associated with the png_info_struct "
2018/06/19 13:40:04 " Free any memory associated with the png_struct and the png_info_structs "
2018/06/19 13:40:04 " Free any memory associated with the png_struct and the png_info_structs "
2018/06/19 13:40:04 " Set the libpng method of handling chunk CRC errors "
2018/06/19 13:40:04 " Values for png_set_crc_action() say how to handle CRC errors in\n * ancillary and critical chunks, and whether to use the data contained\n * therein.  Note that it is impossible to \"discard\" data in a critical\n * chunk.  For versions prior to 0.90, the action was always error/quit,\n * whereas in version 0.90 and later, the action for CRC errors in ancillary\n * chunks is warn/discard.  These values should NOT be changed.\n *\n *      value                       action:critical     action:ancillary\n "
2018/06/19 13:40:04 " error/quit          warn/discard data \n error/quit          error/quit        \n (INVALID)           warn/discard data \n warn/use data       warn/use data     \n quiet/use data      quiet/use data    \n use current value   use current value "
2018/06/19 13:40:04 " These functions give the user control over the scan-line filtering in\n * libpng and the compression methods used by zlib.  These functions are\n * mainly useful for testing, as the defaults should work with most users.\n * Those users who are tight on memory or want faster performance at the\n * expense of compression can modify them.  See the compression library\n * header file (zlib.h) for an explination of the compression functions.\n "
2018/06/19 13:40:04 " Set the filtering method(s) used by libpng.  Currently, the only valid\n * value for \"method\" is 0.\n "
2018/06/19 13:40:04 " WRITE "
2018/06/19 13:40:04 " Flags for png_set_filter() to say which filters to use.  The flags\n * are chosen so that they don't conflict with real filter types\n * below, in case they are supplied instead of the #defined constants.\n * These values should NOT be changed.\n "
2018/06/19 13:40:04 " Filter values (not flags) - used in pngwrite.c, pngwutil.c for now.\n * These defines should NOT be changed.\n "
2018/06/19 13:40:04 " DEPRECATED "
2018/06/19 13:40:04 " WRITE_WEIGHTED_FILTER "
2018/06/19 13:40:04 " The following are no longer used and will be removed from libpng-1.7: \n Currently \"UNWEIGHTED\" \n Used by libpng < 0.95 \n Experimental feature \n Not a valid value "
2018/06/19 13:40:04 " Set the library compression level.  Currently, valid values range from\n * 0 - 9, corresponding directly to the zlib compression levels 0 - 9\n * (0 - no compression, 9 - \"maximal\" compression).  Note that tests have\n * shown that zlib compression levels 3-6 usually perform as well as level 9\n * for PNG images, and do considerably fewer caclulations.  In the future,\n * these values may not correspond directly to the zlib compression levels.\n "
2018/06/19 13:40:04 " If PNG_WRITE_OPTIMIZE_CMF_SUPPORTED is defined, libpng will use a\n * smaller value of window_bits if it can do so safely.\n "
2018/06/19 13:40:04 " WRITE_CUSTOMIZE_COMPRESSION "
2018/06/19 13:40:04 " Also set zlib parameters for compressing non-IDAT chunks "
2018/06/19 13:40:04 " If PNG_WRITE_OPTIMIZE_CMF_SUPPORTED is defined, libpng will use a\n * smaller value of window_bits if it can do so safely.\n "
2018/06/19 13:40:04 " WRITE_CUSTOMIZE_ZTXT_COMPRESSION \n WRITE "
2018/06/19 13:40:04 " These next functions are called for input/output, memory, and error\n * handling.  They are in the file pngrio.c, pngwio.c, and pngerror.c,\n * and call standard C I/O routines such as fread(), fwrite(), and\n * fprintf().  These functions can be made to use other I/O routines\n * at run time for those applications that need to handle I/O in a\n * different manner by calling png_set_???_fn().  See libpng-manual.txt for\n * more information.\n "
2018/06/19 13:40:04 " Initialize the input/output for the PNG file to the default functions. "
2018/06/19 13:40:04 " Replace the (error and abort), and warning functions with user\n * supplied functions.  If no messages are to be printed you must still\n * write and use replacement functions. The replacement error_fn should\n * still do a longjmp to the last setjmp location if you are using this\n * method of error handling.  If error_fn or warning_fn is NULL, the\n * default function will be used.\n "
2018/06/19 13:40:04 " Return the user pointer associated with the error functions "
2018/06/19 13:40:04 " Replace the default data output functions with a user supplied one(s).\n * If buffered output is not used, then output_flush_fn can be set to NULL.\n * If PNG_WRITE_FLUSH_SUPPORTED is not defined at libpng compile time\n * output_flush_fn will be ignored (and thus can be NULL).\n * It is probably a mistake to use NULL for output_flush_fn if\n * write_data_fn is not also NULL unless you have built libpng with\n * PNG_WRITE_FLUSH_SUPPORTED undefined, because in this case libpng's\n * default flush function, which uses the standard *FILE structure, will\n * be used.\n "
2018/06/19 13:40:04 " Replace the default data input function with a user supplied one. "
2018/06/19 13:40:04 " Return the user pointer associated with the I/O functions "
2018/06/19 13:40:04 " Replace the default memory allocation functions with user supplied one(s). "
2018/06/19 13:40:04 " Return the user pointer associated with the memory functions "
2018/06/19 13:40:04 " Return the user pointer associated with the user transform functions "
2018/06/19 13:40:04 " Return information about the row currently being processed.  Note that these\n * APIs do not fail but will return unexpected results if called outside a user\n * transform callback.  Also note that when transforming an interlaced image the\n * row number is the row number within the sub-image of the interlace pass, so\n * the value will increase to the height of the sub-image (not the full image)\n * then reset to 0 for the next pass.\n *\n * Use PNG_ROW_FROM_PASS_ROW(row, pass) and PNG_COL_FROM_PASS_COL(col, pass) to\n * find the output pixel (x,y) given an interlaced sub-image pixel\n * (row,col,pass).  (See below for these macros.)\n "
2018/06/19 13:40:04 " This callback is called only for *unknown* chunks.  If\n * PNG_HANDLE_AS_UNKNOWN_SUPPORTED is set then it is possible to set known\n * chunks to be treated as unknown, however in this case the callback must do\n * any processing required by the chunk (e.g. by calling the appropriate\n * png_set_ APIs.)\n *\n * There is no write support - on write, by default, all the chunks in the\n * 'unknown' list are written in the specified position.\n *\n * The integer return from the callback function is interpreted thus:\n *\n * negative: An error occurred; png_chunk_error will be called.\n *     zero: The chunk was not handled, the chunk will be saved. A critical\n *           chunk will cause an error at this point unless it is to be saved.\n * positive: The chunk was handled, libpng will ignore/discard it.\n *\n * See \"INTERACTION WTIH USER CHUNK CALLBACKS\" below for important notes about\n * how this behavior will change in libpng 1.7\n "
2018/06/19 13:40:04 " Sets the function callbacks for the push reader, and a pointer to a\n * user-defined structure available to the callback functions.\n "
2018/06/19 13:40:04 " Returns the user pointer associated with the push read functions "
2018/06/19 13:40:04 " Function to be called when data becomes available "
2018/06/19 13:40:04 " A function which may be called *only* within png_process_data to stop the\n * processing of any more data.  The function returns the number of bytes\n * remaining, excluding any that libpng has cached internally.  A subsequent\n * call to png_process_data must supply these bytes again.  If the argument\n * 'save' is set to true the routine will first save all the pending data and\n * will always return 0.\n "
2018/06/19 13:40:04 " A function which may be called *only* outside (after) a call to\n * png_process_data.  It returns the number of bytes of data to skip in the\n * input.  Normally it will return 0, but if it returns a non-zero value the\n * application must skip than number of bytes of input data and pass the\n * following data to the next call to png_process_data.\n "
2018/06/19 13:40:04 " Function that combines rows.  'new_row' is a flag that should come from\n * the callback and be non-NULL if anything needs to be done; the library\n * stores its own version of the new data internally and ignores the passed\n * in value.\n "
2018/06/19 13:40:04 " PROGRESSIVE_READ "
2018/06/19 13:40:04 " Added at libpng version 1.4.0 "
2018/06/19 13:40:04 " Added at libpng version 1.2.4 "
2018/06/19 13:40:04 " Frees a pointer allocated by png_malloc() "
2018/06/19 13:40:04 " Free data that was allocated internally "
2018/06/19 13:40:04 " Reassign responsibility for freeing existing data, whether allocated\n * by libpng or by the application; this works on the png_info structure passed\n * in, it does not change the state for other png_info structures.\n *\n * It is unlikely that this function works correctly as of 1.6.0 and using it\n * may result either in memory leaks or double free of allocated data.\n "
2018/06/19 13:40:04 " Assignments for png_data_freer "
2018/06/19 13:40:04 " Flags for png_ptr->free_me and info_ptr->free_me "
2018/06/19 13:40:04 "      PNG_FREE_LIST 0x0400U   removed in 1.6.0 because it is ignored "
2018/06/19 13:40:04 " Added at libpng-1.6.31 "
2018/06/19 13:40:04 " PNG_FREE_SPLT|PNG_FREE_TEXT|PNG_FREE_UNKN "
2018/06/19 13:40:04 " Fatal error in PNG image of libpng - can't continue "
2018/06/19 13:40:04 " The same, but the chunk name is prepended to the error string. "
2018/06/19 13:40:04 " Fatal error in PNG image of libpng - can't continue "
2018/06/19 13:40:04 " Non-fatal error in libpng.  Can continue, but may have a problem. "
2018/06/19 13:40:04 " Non-fatal error in libpng, chunk name is prepended to message. "
2018/06/19 13:40:04 " Benign error in libpng.  Can continue, but may have a problem.\n * User can choose whether to handle as a fatal error or as a warning. "
2018/06/19 13:40:04 " Same, chunk name is prepended to message (only during read) "
2018/06/19 13:40:04 " The png_set_<chunk> functions are for storing values in the png_info_struct.\n * Similarly, the png_get_<chunk> calls are used to read values from the\n * png_info_struct, either storing the parameters in the passed variables, or\n * setting pointers into the png_info_struct where the data is stored.  The\n * png_get_<chunk> functions return a non-zero value if the data was available\n * in info_ptr, or return zero and do not change any of the parameters if the\n * data was not available.\n *\n * These functions should be used instead of directly accessing png_info\n * to avoid problems with future changes in the size and internal layout of\n * png_info_struct.\n "
2018/06/19 13:40:04 " Returns \"flag\" if chunk data is valid in info_ptr. "
2018/06/19 13:40:04 " Returns number of bytes needed to hold a transformed row. "
2018/06/19 13:40:04 " Returns row_pointers, which is an array of pointers to scanlines that was\n * returned from png_read_png().\n "
2018/06/19 13:40:04 " Set row_pointers, which is an array of pointers to scanlines for use\n * by png_write_png().\n "
2018/06/19 13:40:04 " Returns number of color channels in image. "
2018/06/19 13:40:04 " Returns image width in pixels. "
2018/06/19 13:40:04 " Returns image height in pixels. "
2018/06/19 13:40:04 " Returns image bit_depth. "
2018/06/19 13:40:04 " Returns image color_type. "
2018/06/19 13:40:04 " Returns image filter_type. "
2018/06/19 13:40:04 " Returns image interlace_type. "
2018/06/19 13:40:04 " Returns image compression_type. "
2018/06/19 13:40:04 " Returns image resolution in pixels per meter, from pHYs chunk data. "
2018/06/19 13:40:04 " Returns pixel aspect ratio, computed from pHYs chunk data.  "
2018/06/19 13:40:04 " Returns image x, y offset in pixels or microns, from oFFs chunk data. "
2018/06/19 13:40:04 " EASY_ACCESS "
2018/06/19 13:40:04 " Returns pointer to signature string read from PNG header "
2018/06/19 13:40:04 " png_get_text also returns the number of text chunks in *num_text "
2018/06/19 13:40:04 " Note while png_set_text() will accept a structure whose text,\n * language, and  translated keywords are NULL pointers, the structure\n * returned by png_get_text will always contain regular\n * zero-terminated C strings.  They might be empty strings but\n * they will never be NULL pointers.\n "
2018/06/19 13:40:04 " NOTE: this API is currently implemented using floating point arithmetic,\n * consequently it can only be used on systems with floating point support.\n * In any case the range of values supported by png_fixed_point is small and it\n * is highly recommended that png_get_sCAL_s be used instead.\n "
2018/06/19 13:40:04 " sCAL "
2018/06/19 13:40:04 " Provide the default handling for all unknown chunks or, optionally, for\n * specific unknown chunks.\n *\n * NOTE: prior to 1.6.0 the handling specified for particular chunks on read was\n * ignored and the default was used, the per-chunk setting only had an effect on\n * write.  If you wish to have chunk-specific handling on read in code that must\n * work on earlier versions you must use a user chunk callback to specify the\n * desired handling (keep or discard.)\n *\n * The 'keep' parameter is a PNG_HANDLE_CHUNK_ value as listed below.  The\n * parameter is interpreted as follows:\n *\n * READ:\n *    PNG_HANDLE_CHUNK_AS_DEFAULT:\n *       Known chunks: do normal libpng processing, do not keep the chunk (but\n *          see the comments below about PNG_HANDLE_AS_UNKNOWN_SUPPORTED)\n *       Unknown chunks: for a specific chunk use the global default, when used\n *          as the default discard the chunk data.\n *    PNG_HANDLE_CHUNK_NEVER:\n *       Discard the chunk data.\n *    PNG_HANDLE_CHUNK_IF_SAFE:\n *       Keep the chunk data if the chunk is not critical else raise a chunk\n *       error.\n *    PNG_HANDLE_CHUNK_ALWAYS:\n *       Keep the chunk data.\n *\n * If the chunk data is saved it can be retrieved using png_get_unknown_chunks,\n * below.  Notice that specifying \"AS_DEFAULT\" as a global default is equivalent\n * to specifying \"NEVER\", however when \"AS_DEFAULT\" is used for specific chunks\n * it simply resets the behavior to the libpng default.\n *\n * INTERACTION WTIH USER CHUNK CALLBACKS:\n * The per-chunk handling is always used when there is a png_user_chunk_ptr\n * callback and the callback returns 0; the chunk is then always stored *unless*\n * it is critical and the per-chunk setting is other than ALWAYS.  Notice that\n * the global default is *not* used in this case.  (In effect the per-chunk\n * value is incremented to at least IF_SAFE.)\n *\n * IMPORTANT NOTE: this behavior will change in libpng 1.7 - the global and\n * per-chunk defaults will be honored.  If you want to preserve the current\n * behavior when your callback returns 0 you must set PNG_HANDLE_CHUNK_IF_SAFE\n * as the default - if you don't do this libpng 1.6 will issue a warning.\n *\n * If you want unhandled unknown chunks to be discarded in libpng 1.6 and\n * earlier simply return '1' (handled).\n *\n * PNG_HANDLE_AS_UNKNOWN_SUPPORTED:\n *    If this is *not* set known chunks will always be handled by libpng and\n *    will never be stored in the unknown chunk list.  Known chunks listed to\n *    png_set_keep_unknown_chunks will have no effect.  If it is set then known\n *    chunks listed with a keep other than AS_DEFAULT will *never* be processed\n *    by libpng, in addition critical chunks must either be processed by the\n *    callback or saved.\n *\n *    The IHDR and IEND chunks must not be listed.  Because this turns off the\n *    default handling for chunks that would otherwise be recognized the\n *    behavior of libpng transformations may well become incorrect!\n *\n * WRITE:\n *    When writing chunks the options only apply to the chunks specified by\n *    png_set_unknown_chunks (below), libpng will *always* write known chunks\n *    required by png_set_ calls and will always write the core critical chunks\n *    (as required for PLTE).\n *\n *    Each chunk in the png_set_unknown_chunks list is looked up in the\n *    png_set_keep_unknown_chunks list to find the keep setting, this is then\n *    interpreted as follows:\n *\n *    PNG_HANDLE_CHUNK_AS_DEFAULT:\n *       Write safe-to-copy chunks and write other chunks if the global\n *       default is set to _ALWAYS, otherwise don't write this chunk.\n *    PNG_HANDLE_CHUNK_NEVER:\n *       Do not write the chunk.\n *    PNG_HANDLE_CHUNK_IF_SAFE:\n *       Write the chunk if it is safe-to-copy, otherwise do not write it.\n *    PNG_HANDLE_CHUNK_ALWAYS:\n *       Write the chunk.\n *\n * Note that the default behavior is effectively the opposite of the read case -\n * in read unknown chunks are not stored by default, in write they are written\n * by default.  Also the behavior of PNG_HANDLE_CHUNK_IF_SAFE is very different\n * - on write the safe-to-copy bit is checked, on read the critical bit is\n * checked and on read if the chunk is critical an error will be raised.\n *\n * num_chunks:\n * ===========\n *    If num_chunks is positive, then the \"keep\" parameter specifies the manner\n *    for handling only those chunks appearing in the chunk_list array,\n *    otherwise the chunk list array is ignored.\n *\n *    If num_chunks is 0 the \"keep\" parameter specifies the default behavior for\n *    unknown chunks, as described above.\n *\n *    If num_chunks is negative, then the \"keep\" parameter specifies the manner\n *    for handling all unknown chunks plus all chunks recognized by libpng\n *    except for the IHDR, PLTE, tRNS, IDAT, and IEND chunks (which continue to\n *    be processed by libpng.\n "
2018/06/19 13:40:04 " HANDLE_AS_UNKNOWN "
2018/06/19 13:40:04 " The \"keep\" PNG_HANDLE_CHUNK_ parameter for the specified chunk is returned;\n * the result is therefore true (non-zero) if special handling is required,\n * false for the default handling.\n "
2018/06/19 13:40:04 " SET_UNKNOWN_CHUNKS "
2018/06/19 13:40:04 " NOTE: prior to 1.6.0 this routine set the 'location' field of the added\n    * unknowns to the location currently stored in the png_struct.  This is\n    * invariably the wrong value on write.  To fix this call the following API\n    * for each chunk in the list with the correct location.  If you know your\n    * code won't be compiled on earlier versions you can rely on\n    * png_set_unknown_chunks(write-ptr, png_get_unknown_chunks(read-ptr)) doing\n    * the correct thing.\n    "
2018/06/19 13:40:04 " Png_free_data() will turn off the \"valid\" flag for anything it frees.\n * If you need to turn it off for a chunk that your application has freed,\n * you can use png_set_invalid(png_ptr, info_ptr, PNG_INFO_CHNK);\n "
2018/06/19 13:40:04 " The \"params\" pointer is currently not used and is for future expansion. "
2018/06/19 13:40:04 " For use in png_set_keep_unknown, added to version 1.2.6 "
2018/06/19 13:40:04 " Strip the prepended error numbers (\"#nnn \") from error and warning\n * messages before passing them to the error or warning handler.\n "
2018/06/19 13:40:04 " Added in libpng-1.2.6 "
2018/06/19 13:40:04 " Added in libpng-1.4.0 "
2018/06/19 13:40:04 " Added in libpng-1.4.1 "
2018/06/19 13:40:04 " otherwise not implemented. "
2018/06/19 13:40:04 " otherwise not implemented. "
2018/06/19 13:40:04 " pHYs \n INCH_CONVERSIONS "
2018/06/19 13:40:04 " Added in libpng-1.4.0 "
2018/06/19 13:40:04 " Removed from libpng 1.6; use png_get_io_chunk_type. "
2018/06/19 13:40:04 " The flags returned by png_get_io_state() are the following: \n no I/O at this moment \n currently reading \n currently writing \n currently at the file signature \n currently at the chunk header \n currently at the chunk data \n currently at the chunk crc \n current operation: reading/writing \n current location: sig/hdr/data/crc \n IO_STATE "
2018/06/19 13:40:04 " Interlace support.  The following macros are always defined so that if\n * libpng interlace handling is turned off the macros may be used to handle\n * interlaced images within the application.\n "
2018/06/19 13:40:04 " Two macros to return the first row and first column of the original,\n * full, image which appears in a given pass.  'pass' is in the range 0\n * to 6 and the result is in the range 0 to 7.\n "
2018/06/19 13:40:04 " A macro to return the offset between pixels in the output row for a pair of\n * pixels in the input - effectively the inverse of the 'COL_SHIFT' macro that\n * follows.  Note that ROW_OFFSET is the offset from one row to the next whereas\n * COL_OFFSET is from one column to the next, within a row.\n "
2018/06/19 13:40:04 " Two macros to help evaluate the number of rows or columns in each\n * pass.  This is expressed as a shift - effectively log2 of the number or\n * rows or columns in each 8x8 tile of the original image.\n "
2018/06/19 13:40:04 " Hence two macros to determine the number of rows or columns in a given\n * pass of an image given its height or width.  In fact these macros may\n * return non-zero even though the sub-image is empty, because the other\n * dimension may be empty for a small image.\n "
2018/06/19 13:40:04 " For the reader row callbacks (both progressive and sequential) it is\n * necessary to find the row in the output image given a row in an interlaced\n * image, so two more macros:\n "
2018/06/19 13:40:04 " Two macros which return a boolean (0 or 1) saying whether the given row\n * or column is in a particular pass.  These use a common utility macro that\n * returns a mask for a given pass - the offset 'off' selects the row or\n * column version.  The mask has the appropriate bit set for each column in\n * the tile.\n "
2018/06/19 13:40:04 " With these routines we avoid an integer divide, which will be slower on\n * most machines.  However, it does take more operations than the corresponding\n * divide method, so it may be slower on a few RISC systems.  There are two\n * shifts (by 8 or 16 bits) and an addition, versus a single integer divide.\n *\n * Note that the rounding factors are NOT supposed to be the same!  128 and\n * 32768 are correct for the NODIV code; 127 and 32767 are correct for the\n * standard method.\n *\n * [Optimized code by Greg Roelofs and Mark Adler...blame us for bugs. :-) ]\n "
2018/06/19 13:40:04 " fg and bg should be in `gamma 1.0' space; alpha is the opacity "
2018/06/19 13:40:04 " Standard method using integer division "
2018/06/19 13:40:04 " READ_COMPOSITE_NODIV "
2018/06/19 13:40:04 " No png_get_int_16 -- may be added if there's a real need for it. "
2018/06/19 13:40:04 " Place a 32-bit number into a buffer in PNG byte order (big-endian). "
2018/06/19 13:40:04 " Place a 16-bit number into a buffer in PNG byte order.\n * The parameter is declared unsigned int, not png_uint_16,\n * just to avoid potential problems on pre-ANSI C compilers.\n "
2018/06/19 13:40:04 " No png_save_int_16 -- may be added if there's a real need for it. "
2018/06/19 13:40:04 " Inline macros to do direct reads of bytes from the input buffer.\n * The png_get_int_32() routine assumes we are using two's complement\n * format for negative values, which is almost certainly true.\n "
2018/06/19 13:40:04 " From libpng-1.4.0 until 1.4.4, the png_get_uint_16 macro (but not the\n    * function) incorrectly returned a value of type png_uint_32.\n    "
2018/06/19 13:40:04 " If PNG_PREFIX is defined the same thing as below happens in pnglibconf.h,\n * but defining a macro name prefixed with PNG_PREFIX.\n "
2018/06/19 13:40:04 " No macros; revert to the (redefined) function "
2018/06/19 13:40:04 " CHECK_FOR_INVALID_INDEX "
2018/06/19 13:40:04 "******************************************************************************\n * Section 5: SIMPLIFIED API\n *******************************************************************************\n *\n * Please read the documentation in libpng-manual.txt (TODO: write said\n * documentation) if you don't understand what follows.\n *\n * The simplified API hides the details of both libpng and the PNG file format\n * itself.  It allows PNG files to be read into a very limited number of\n * in-memory bitmap formats or to be written from the same formats.  If these\n * formats do not accomodate your needs then you can, and should, use the more\n * sophisticated APIs above - these support a wide variety of in-memory formats\n * and a wide variety of sophisticated transformations to those formats as well\n * as a wide variety of APIs to manipulate ancillary information.\n *\n * To read a PNG file using the simplified API:\n *\n * 1) Declare a 'png_image' structure (see below) on the stack, set the\n *    version field to PNG_IMAGE_VERSION and the 'opaque' pointer to NULL\n *    (this is REQUIRED, your program may crash if you don't do it.)\n * 2) Call the appropriate png_image_begin_read... function.\n * 3) Set the png_image 'format' member to the required sample format.\n * 4) Allocate a buffer for the image and, if required, the color-map.\n * 5) Call png_image_finish_read to read the image and, if required, the\n *    color-map into your buffers.\n *\n * There are no restrictions on the format of the PNG input itself; all valid\n * color types, bit depths, and interlace methods are acceptable, and the\n * input image is transformed as necessary to the requested in-memory format\n * during the png_image_finish_read() step.  The only caveat is that if you\n * request a color-mapped image from a PNG that is full-color or makes\n * complex use of an alpha channel the transformation is extremely lossy and the\n * result may look terrible.\n *\n * To write a PNG file using the simplified API:\n *\n * 1) Declare a 'png_image' structure on the stack and memset() it to all zero.\n * 2) Initialize the members of the structure that describe the image, setting\n *    the 'format' member to the format of the image samples.\n * 3) Call the appropriate png_image_write... function with a pointer to the\n *    image and, if necessary, the color-map to write the PNG data.\n *\n * png_image is a structure that describes the in-memory format of an image\n * when it is being read or defines the in-memory format of an image that you\n * need to write:\n "
2018/06/19 13:40:04 " Initialize to NULL, free with png_image_free \n Set to PNG_IMAGE_VERSION \n Image width in pixels (columns) \n Image height in pixels (rows) \n Image format as defined below \n A bit mask containing informational flags "
2018/06/19 13:40:04 " Number of entries in the color-map "
2018/06/19 13:40:04 " In the event of an error or warning the following field will be set to a\n    * non-zero value and the 'message' field will contain a '\\0' terminated\n    * string with the libpng error or warning message.  If both warnings and\n    * an error were encountered, only the error is recorded.  If there\n    * are multiple warnings, only the first one is recorded.\n    *\n    * The upper 30 bits of this value are reserved, the low two bits contain\n    * a value as follows:\n    "
2018/06/19 13:40:04 "\n    * The result is a two-bit code such that a value more than 1 indicates\n    * a failure in the API just called:\n    *\n    *    0 - no warning or error\n    *    1 - warning\n    *    2 - error\n    *    3 - error preceded by warning\n    "
2018/06/19 13:40:04 " The samples of the image have one to four channels whose components have\n * original values in the range 0 to 1.0:\n *\n * 1: A single gray or luminance channel (G).\n * 2: A gray/luminance channel and an alpha channel (GA).\n * 3: Three red, green, blue color channels (RGB).\n * 4: Three color channels and an alpha channel (RGBA).\n *\n * The components are encoded in one of two ways:\n *\n * a) As a small integer, value 0..255, contained in a single byte.  For the\n * alpha channel the original value is simply value/255.  For the color or\n * luminance channels the value is encoded according to the sRGB specification\n * and matches the 8-bit format expected by typical display devices.\n *\n * The color/gray channels are not scaled (pre-multiplied) by the alpha\n * channel and are suitable for passing to color management software.\n *\n * b) As a value in the range 0..65535, contained in a 2-byte integer.  All\n * channels can be converted to the original value by dividing by 65535; all\n * channels are linear.  Color channels use the RGB encoding (RGB end-points) of\n * the sRGB specification.  This encoding is identified by the\n * PNG_FORMAT_FLAG_LINEAR flag below.\n *\n * When the simplified API needs to convert between sRGB and linear colorspaces,\n * the actual sRGB transfer curve defined in the sRGB specification (see the\n * article at https://en.wikipedia.org/wiki/SRGB) is used, not the gamma=1/2.2\n * approximation used elsewhere in libpng.\n *\n * When an alpha channel is present it is expected to denote pixel coverage\n * of the color or luminance channels and is returned as an associated alpha\n * channel: the color/gray channels are scaled (pre-multiplied) by the alpha\n * value.\n *\n * The samples are either contained directly in the image data, between 1 and 8\n * bytes per pixel according to the encoding, or are held in a color-map indexed\n * by bytes in the image data.  In the case of a color-map the color-map entries\n * are individual samples, encoded as above, and the image data has one byte per\n * pixel to select the relevant sample from the color-map.\n "
2018/06/19 13:40:04 " PNG_FORMAT_*\n *\n * #defines to be used in png_image::format.  Each #define identifies a\n * particular layout of sample data and, if present, alpha values.  There are\n * separate defines for each of the two component encodings.\n *\n * A format is built up using single bit flag values.  All combinations are\n * valid.  Formats can be built up from the flag values or you can use one of\n * the predefined values below.  When testing formats always use the FORMAT_FLAG\n * macros to test for individual features - future versions of the library may\n * add new flags.\n *\n * When reading or writing color-mapped images the format should be set to the\n * format of the entries in the color-map then png_image_{read,write}_colormap\n * called to read or write the color-map and set the format correctly for the\n * image data.  Do not set the PNG_FORMAT_FLAG_COLORMAP bit directly!\n *\n * NOTE: libpng can be built with particular features disabled. If you see\n * compiler errors because the definition of one of the following flags has been\n * compiled out it is because libpng does not have the required support.  It is\n * possible, however, for the libpng configuration to enable the format on just\n * read or just write; in that case you may see an error at run time.  You can\n * guard against this by checking for the definition of the appropriate\n * \"_SUPPORTED\" macro, one of:\n *\n *    PNG_SIMPLIFIED_{READ,WRITE}_{BGR,AFIRST}_SUPPORTED\n "
2018/06/19 13:40:04 " format with an alpha channel \n color format: otherwise grayscale \n 2-byte channels else 1-byte \n image data is color-mapped "
2018/06/19 13:40:04 " BGR colors, else order is RGB "
2018/06/19 13:40:04 " alpha channel comes first "
2018/06/19 13:40:04 " alpha channel is associated "
2018/06/19 13:40:04 " Commonly used formats have predefined macros.\n *\n * First the single byte (sRGB) formats:\n "
2018/06/19 13:40:04 " Then the linear 2-byte formats.  When naming these \"Y\" is used to\n * indicate a luminance (gray) channel.\n "
2018/06/19 13:40:04 " With color-mapped formats the image data is one byte for each pixel, the byte\n * is an index into the color-map which is formatted as above.  To obtain a\n * color-mapped format it is sufficient just to add the PNG_FOMAT_FLAG_COLORMAP\n * to one of the above definitions, or you can use one of the definitions below.\n "
2018/06/19 13:40:04 " PNG_IMAGE macros\n *\n * These are convenience macros to derive information from a png_image\n * structure.  The PNG_IMAGE_SAMPLE_ macros return values appropriate to the\n * actual image sample values - either the entries in the color-map or the\n * pixels in the image.  The PNG_IMAGE_PIXEL_ macros return corresponding values\n * for the pixels and will always return 1 for color-mapped formats.  The\n * remaining macros return information about the rows in the image and the\n * complete image.\n *\n * NOTE: All the macros that take a png_image::format parameter are compile time\n * constants if the format parameter is, itself, a constant.  Therefore these\n * macros can be used in array declarations and case labels where required.\n * Similarly the macros are also pre-processor constants (sizeof is not used) so\n * they can be used in #if tests.\n *\n * First the information about the samples.\n "
2018/06/19 13:40:04 " Return the total number of channels in a given format: 1..4 "
2018/06/19 13:40:04 " Return the size in bytes of a single component of a pixel or color-map\n    * entry (as appropriate) in the image: 1 or 2.\n    "
2018/06/19 13:40:04 " This is the size of the sample data for one sample.  If the image is\n    * color-mapped it is the size of one color-map entry (and image pixels are\n    * one byte in size), otherwise it is the size of one image pixel.\n    "
2018/06/19 13:40:04 " The maximum size of the color-map required by the format expressed in a\n    * count of components.  This can be used to compile-time allocate a\n    * color-map:\n    *\n    * png_uint_16 colormap[PNG_IMAGE_MAXIMUM_COLORMAP_COMPONENTS(linear_fmt)];\n    *\n    * png_byte colormap[PNG_IMAGE_MAXIMUM_COLORMAP_COMPONENTS(sRGB_fmt)];\n    *\n    * Alternatively use the PNG_IMAGE_COLORMAP_SIZE macro below to use the\n    * information from one of the png_image_begin_read_ APIs and dynamically\n    * allocate the required memory.\n    "
2018/06/19 13:40:04 " Corresponding information about the pixels "
2018/06/19 13:40:04 " The number of separate channels (components) in a pixel; 1 for a\n    * color-mapped image.\n    "
2018/06/19 13:40:04 " The size, in bytes, of each component in a pixel; 1 for a color-mapped\n    * image.\n    "
2018/06/19 13:40:04 " The size, in bytes, of a complete pixel; 1 for a color-mapped image. "
2018/06/19 13:40:04 " Information about the whole row, or whole image "
2018/06/19 13:40:04 " Return the total number of components in a single row of the image; this\n    * is the minimum 'row stride', the minimum count of components between each\n    * row.  For a color-mapped image this is the minimum number of bytes in a\n    * row.\n    *\n    * WARNING: this macro overflows for some images with more than one component\n    * and very large image widths.  libpng will refuse to process an image where\n    * this macro would overflow.\n    "
2018/06/19 13:40:04 " Return the size, in bytes, of an image buffer given a png_image and a row\n    * stride - the number of components to leave space for in each row.\n    *\n    * WARNING: this macro overflows a 32-bit integer for some large PNG images,\n    * libpng will refuse to process an image where such an overflow would occur.\n    "
2018/06/19 13:40:04 " Return the size, in bytes, of the image in memory given just a png_image;\n    * the row stride is the minimum stride required for the image.\n    "
2018/06/19 13:40:04 " Return the size, in bytes, of the color-map of this image.  If the image\n    * format is not a color-map format this will return a size sufficient for\n    * 256 entries in the given format; check PNG_FORMAT_FLAG_COLORMAP if\n    * you don't want to allocate a color-map in this case.\n    "
2018/06/19 13:40:04 " PNG_IMAGE_FLAG_*\n *\n * Flags containing additional information about the image are held in the\n * 'flags' field of png_image.\n "
2018/06/19 13:40:04 " This indicates the the RGB values of the in-memory bitmap do not\n    * correspond to the red, green and blue end-points defined by sRGB.\n    "
2018/06/19 13:40:04 " On write emphasise speed over compression; the resultant PNG file will be\n    * larger but will be produced significantly faster, particular for large\n    * images.  Do not use this option for images which will be distributed, only\n    * used it when producing intermediate files that will be read back in\n    * repeatedly.  For a typical 24-bit image the option will double the read\n    * speed at the cost of increasing the image size by 25%, however for many\n    * more compressible images the PNG file can be 10 times larger with only a\n    * slight speed gain.\n    "
2018/06/19 13:40:04 " On read if the image is a 16-bit per component image and there is no gAMA\n    * or sRGB chunk assume that the components are sRGB encoded.  Notice that\n    * images output by the simplified API always have gamma information; setting\n    * this flag only affects the interpretation of 16-bit images from an\n    * external source.  It is recommended that the application expose this flag\n    * to the user; the user can normally easily recognize the difference between\n    * linear and sRGB encoding.  This flag has no effect on write - the data\n    * passed to the write APIs must have the correct encoding (as defined\n    * above.)\n    *\n    * If the flag is not set (the default) input 16-bit per component data is\n    * assumed to be linear.\n    *\n    * NOTE: the flag can only be set after the png_image_begin_read_ call,\n    * because that call initializes the 'flags' field.\n    "
2018/06/19 13:40:04 " READ APIs\n * ---------\n *\n * The png_image passed to the read APIs must have been initialized by setting\n * the png_controlp field 'opaque' to NULL (or, safer, memset the whole thing.)\n "
2018/06/19 13:40:04 " The named file is opened for read and the image header is filled in\n    * from the PNG header in the file.\n    "
2018/06/19 13:40:04 " The PNG header is read from the stdio FILE object. \n STDIO "
2018/06/19 13:40:04 " The PNG header is read from the given memory buffer. "
2018/06/19 13:40:04 " Finish reading the image into the supplied buffer and clean up the\n    * png_image structure.\n    *\n    * row_stride is the step, in byte or 2-byte units as appropriate,\n    * between adjacent rows.  A positive stride indicates that the top-most row\n    * is first in the buffer - the normal top-down arrangement.  A negative\n    * stride indicates that the bottom-most row is first in the buffer.\n    *\n    * background need only be supplied if an alpha channel must be removed from\n    * a png_byte format and the removal is to be done by compositing on a solid\n    * color; otherwise it may be NULL and any composition will be done directly\n    * onto the buffer.  The value is an sRGB color to use for the background,\n    * for grayscale output the green channel is used.\n    *\n    * background must be supplied when an alpha channel must be removed from a\n    * single byte color-mapped output format, in other words if:\n    *\n    * 1) The original format from png_image_begin_read_from_* had\n    *    PNG_FORMAT_FLAG_ALPHA set.\n    * 2) The format set by the application does not.\n    * 3) The format set by the application has PNG_FORMAT_FLAG_COLORMAP set and\n    *    PNG_FORMAT_FLAG_LINEAR *not* set.\n    *\n    * For linear output removing the alpha channel is always done by compositing\n    * on black and background is ignored.\n    *\n    * colormap must be supplied when PNG_FORMAT_FLAG_COLORMAP is set.  It must\n    * be at least the size (in bytes) returned by PNG_IMAGE_COLORMAP_SIZE.\n    * image->colormap_entries will be updated to the actual number of entries\n    * written to the colormap; this may be less than the original value.\n    "
2018/06/19 13:40:04 " Free any data allocated by libpng in image->opaque, setting the pointer to\n    * NULL.  May be called at any time after the structure is initialized.\n    "
2018/06/19 13:40:04 " SIMPLIFIED_READ "
2018/06/19 13:40:04 " WRITE APIS\n * ----------\n * For write you must initialize a png_image structure to describe the image to\n * be written.  To do this use memset to set the whole structure to 0 then\n * initialize fields describing your image.\n *\n * version: must be set to PNG_IMAGE_VERSION\n * opaque: must be initialized to NULL\n * width: image width in pixels\n * height: image height in rows\n * format: the format of the data (image and color-map) you wish to write\n * flags: set to 0 unless one of the defined flags applies; set\n *    PNG_IMAGE_FLAG_COLORSPACE_NOT_sRGB for color format images where the RGB\n *    values do not correspond to the colors in sRGB.\n * colormap_entries: set to the number of entries in the color-map (0 to 256)\n "
2018/06/19 13:40:04 " Write the image to the named file. "
2018/06/19 13:40:04 " Write the image to the given (FILE*). \n SIMPLIFIED_WRITE_STDIO "
2018/06/19 13:40:04 " With all write APIs if image is in one of the linear formats with 16-bit\n * data then setting convert_to_8_bit will cause the output to be an 8-bit PNG\n * gamma encoded according to the sRGB specification, otherwise a 16-bit linear\n * encoded PNG file is written.\n *\n * With color-mapped data formats the colormap parameter point to a color-map\n * with at least image->colormap_entries encoded in the specified format.  If\n * the format is linear the written PNG color-map will be converted to sRGB\n * regardless of the convert_to_8_bit flag.\n *\n * With all APIs row_stride is handled as in the read APIs - it is the spacing\n * from one row to the next in component sized units (1 or 2 bytes) and if\n * negative indicates a bottom-up row layout in the buffer.  If row_stride is\n * zero, libpng will calculate it for you from the image width and number of\n * channels.\n *\n * Note that the write API does not support interlacing, sub-8-bit pixels or\n * most ancillary chunks.  If you need to write text chunks (e.g. for copyright\n * notices) you need to use one of the other APIs.\n "
2018/06/19 13:40:04 " Write the image to the given memory buffer.  The function both writes the\n    * whole PNG data stream to *memory and updates *memory_bytes with the count\n    * of bytes written.\n    *\n    * 'memory' may be NULL.  In this case *memory_bytes is not read however on\n    * success the number of bytes which would have been written will still be\n    * stored in *memory_bytes.  On failure *memory_bytes will contain 0.\n    *\n    * If 'memory' is not NULL it must point to memory[*memory_bytes] of\n    * writeable memory.\n    *\n    * If the function returns success memory[*memory_bytes] (if 'memory' is not\n    * NULL) contains the written PNG data.  *memory_bytes will always be less\n    * than or equal to the original value.\n    *\n    * If the function returns false and *memory_bytes was not changed an error\n    * occured during write.  If *memory_bytes was changed, or is not 0 if\n    * 'memory' was NULL, the write would have succeeded but for the memory\n    * buffer being too small.  *memory_bytes contains the required number of\n    * bytes and will be bigger that the original value.\n    "
2018/06/19 13:40:04 " Return the amount of memory in 'size' required to compress this image.\n    * The png_image structure 'image' must be filled in as in the above\n    * function and must not be changed before the actual write call, the buffer\n    * and all other parameters must also be identical to that in the final\n    * write call.  The 'size' variable need not be initialized.\n    *\n    * NOTE: the macro returns true/false, if false is returned 'size' will be\n    * set to zero and the write failed and probably will fail if tried again.\n    "
2018/06/19 13:40:04 " You can pre-allocate the buffer by making sure it is of sufficient size\n * regardless of the amount of compression achieved.  The buffer size will\n * always be bigger than the original image and it will never be filled.  The\n * following macros are provided to assist in allocating the buffer.\n "
2018/06/19 13:40:04 " The number of uncompressed bytes in the PNG byte encoding of the image;\n    * uncompressing the PNG IDAT data will give this number of bytes.\n    *\n    * NOTE: while PNG_IMAGE_SIZE cannot overflow for an image in memory this\n    * macro can because of the extra bytes used in the PNG byte encoding.  You\n    * need to avoid this macro if your image size approaches 2^30 in width or\n    * height.  The same goes for the remainder of these macros; they all produce\n    * bigger numbers than the actual in-memory image size.\n    "
2018/06/19 13:40:04 " An upper bound on the number of compressed bytes given 'b' uncompressed\n    * bytes.  This is based on deflateBounds() in zlib; different\n    * implementations of zlib compression may conceivably produce more data so\n    * if your zlib implementation is not zlib itself redefine this macro\n    * appropriately.\n    "
2018/06/19 13:40:04 " An upper bound on the size of the data in the PNG IDAT chunks. "
2018/06/19 13:40:04 "sig\nIHDR\ngAMA\ncHRM\nIEND\ncolormap: PLTE, tRNS\nPLTE data"
2018/06/19 13:40:04 "tRNS\nIDAT\n A helper for the following macro; if your compiler cannot handle the\n    * following macro use this one with the result of\n    * PNG_IMAGE_COMPRESSED_SIZE_MAX(image) as the second argument (most\n    * compilers should handle this just fine.)\n    "
2018/06/19 13:40:04 " An upper bound on the total length of the PNG data stream for 'image'.\n    * The result is of type png_alloc_size_t, on 32-bit systems this may\n    * overflow even though PNG_IMAGE_DATA_SIZE does not overflow; the write will\n    * run out of buffer space but return a corrected size which should work.\n    "
2018/06/19 13:40:04 " SIMPLIFIED_WRITE \n******************************************************************************\n *  END OF SIMPLIFIED API\n *****************************************************************************"
2018/06/19 13:40:04 " SIMPLIFIED_{READ|WRITE} "
2018/06/19 13:40:04 "******************************************************************************\n * Section 6: IMPLEMENTATION OPTIONS\n *******************************************************************************\n *\n * Support for arbitrary implementation-specific optimizations.  The API allows\n * particular options to be turned on or off.  'Option' is the number of the\n * option and 'onoff' is 0 (off) or non-0 (on).  The value returned is given\n * by the PNG_OPTION_ defines below.\n *\n * HARDWARE: normally hardware capabilites, such as the Intel SSE instructions,\n *           are detected at run time, however sometimes it may be impossible\n *           to do this in user mode, in which case it is necessary to discover\n *           the capabilities in an OS specific way.  Such capabilities are\n *           listed here when libpng has support for them and must be turned\n *           ON by the application if present.\n *\n * SOFTWARE: sometimes software optimizations actually result in performance\n *           decrease on some architectures or systems, or with some sets of\n *           PNG images.  'Software' options allow such optimizations to be\n *           selected at run time.\n "
2018/06/19 13:40:04 " HARDWARE: ARM Neon SIMD instructions supported "
2018/06/19 13:40:04 " SOFTWARE: force maximum window \n SOFTWARE: Check ICC profile for sRGB "
2018/06/19 13:40:04 " HARDWARE: MIPS Msa SIMD instructions supported "
2018/06/19 13:40:04 " HARDWARE: PowerPC VSX SIMD instructions supported "
2018/06/19 13:40:04 " Next option - numbers must be even "
2018/06/19 13:40:04 " Return values: NOTE: there are four values and 'off' is *not* zero \n Unset - defaults to off \n Option number out of range "
2018/06/19 13:40:04 " SET_OPTION "
2018/06/19 13:40:04 "******************************************************************************\n *  END OF HARDWARE AND SOFTWARE OPTIONS\n *****************************************************************************"
2018/06/19 13:40:04 " Maintainer: Put new public prototypes here ^, in libpng.3, in project\n * defs, and in scripts/symbols.def.\n "
2018/06/19 13:40:04 " The last ordinal number (this is the *last* one already used; the next\n * one to use is one more than this.)\n "
2018/06/19 13:40:04 " PNG_VERSION_INFO_ONLY \n Do not put anything past this line \n PNG_H "
2018/06/19 13:40:04 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/png.h": 466.756221ms
2018/06/19 13:40:04 Couldn't classify license(s)
2018/06/19 13:40:06 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/configure.ac
2018/06/19 13:40:06 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/configure.ac": 73.117473ms
2018/06/19 13:40:06 Couldn't classify license(s)
2018/06/19 13:40:07 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngwio.c
2018/06/19 13:40:07 detected language: 4
2018/06/19 13:40:07 " pngwio.c - functions for data output\n *\n * Last changed in libpng 1.6.24 [August 4, 2016]\n * Copyright (c) 1998-2002,2004,2006-2014,2016 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * This file provides a location for all output.  Users who need\n * special handling are expected to write functions that have the same\n * arguments as these and perform similar functions, but that possibly\n * use different output methods.  Note that you shouldn't change these\n * functions, but rather write replacement functions and then change\n * them at run time with png_set_write_fn(...).\n "
2018/06/19 13:40:07 " Write the data to whatever output you are using.  The default routine\n * writes to a file pointer.  Note that this routine sometimes gets called\n * with very small lengths, so you should implement some kind of simple\n * buffering if you are using unbuffered writes.  This should never be asked\n * to write more than 64K on a 16-bit machine.\n "
2018/06/19 13:40:07 " PRIVATE "
2018/06/19 13:40:07 " NOTE: write_data_fn must not change the buffer! "
2018/06/19 13:40:07 " This is the function that does the actual writing of data.  If you are\n * not writing to a standard C stream, you should create a replacement\n * write_data function and use it at run time with png_set_write_fn(), rather\n * than changing the library.\n "
2018/06/19 13:40:07 " This function is called to output any data pending writing (normally\n * to disk).  After png_flush is called, there should be no data pending\n * writing in any buffers.\n "
2018/06/19 13:40:07 " PRIVATE "
2018/06/19 13:40:07 " This function allows the application to supply new output functions for\n * libpng if standard C streams aren't being used.\n *\n * This function takes as its arguments:\n * png_ptr       - pointer to a png output data structure\n * io_ptr        - pointer to user supplied structure containing info about\n *                 the output functions.  May be NULL.\n * write_data_fn - pointer to a new output function that takes as its\n *                 arguments a pointer to a png_struct, a pointer to\n *                 data to be written, and a 32-bit unsigned int that is\n *                 the number of bytes to be written.  The new write\n *                 function should call png_error(png_ptr, \"Error msg\")\n *                 to exit and output any fatal error messages.  May be\n *                 NULL, in which case libpng's default function will\n *                 be used.\n * flush_data_fn - pointer to a new flush function that takes as its\n *                 arguments a pointer to a png_struct.  After a call to\n *                 the flush function, there should be no data in any buffers\n *                 or pending transmission.  If the output method doesn't do\n *                 any buffering of output, a function prototype must still be\n *                 supplied although it doesn't have to do anything.  If\n *                 PNG_WRITE_FLUSH_SUPPORTED is not defined at libpng compile\n *                 time, output_flush_fn will be ignored, although it must be\n *                 supplied for compatibility.  May be NULL, in which case\n *                 libpng's default function will be used, if\n *                 PNG_WRITE_FLUSH_SUPPORTED is defined.  This is not\n *                 a good idea if io_ptr does not point to a standard\n *                 *FILE structure.\n "
2018/06/19 13:40:07 " WRITE_FLUSH "
2018/06/19 13:40:07 " It is an error to read while writing a png file "
2018/06/19 13:40:07 " WRITE "
2018/06/19 13:40:07 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngwio.c": 13.85452ms
2018/06/19 13:40:07 Couldn't classify license(s)
2018/06/19 13:40:08 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngbar.jpg
2018/06/19 13:40:08 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngbar.jpg": 6.337537ms
2018/06/19 13:40:08 Couldn't classify license(s)
2018/06/19 13:40:08 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/libpng-config.in
2018/06/19 13:40:08 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/libpng-config.in": 12.197879ms
2018/06/19 13:40:08 Couldn't classify license(s)
2018/06/19 13:40:09 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/compile
2018/06/19 13:40:09 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/compile": 28.782284ms
2018/06/19 13:40:10 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngset.c
2018/06/19 13:40:10 detected language: 4
2018/06/19 13:40:10 " pngset.c - storage of image information into info struct\n *\n * Last changed in libpng 1.6.32 [August 24, 2017]\n * Copyright (c) 1998-2017 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * The functions here are used during reads to store data from the file\n * into the info struct, and during writes to store application data\n * into the info struct for writing into the file.  This abstracts the\n * info struct and allows us to change the structure in the future.\n "
2018/06/19 13:40:10 " override with app values"
2018/06/19 13:40:10 " FLOATING_POINT "
2018/06/19 13:40:10 " cHRM "
2018/06/19 13:40:10 " eXIf "
2018/06/19 13:40:10 " Changed from info->num_palette to PNG_MAX_PALETTE_LENGTH in\n    * version 1.2.1\n    "
2018/06/19 13:40:10 " TODO: validate format of calibration name and unit name "
2018/06/19 13:40:10 " Check that the type matches the specification. "
2018/06/19 13:40:10 " Validate params[nparams] "
2018/06/19 13:40:10 " Double check the unit (should never get here with an invalid\n    * unit unless this is an API call.)\n    "
2018/06/19 13:40:10 " '-' "
2018/06/19 13:40:10 " '-' "
2018/06/19 13:40:10 " Check the arguments. "
2018/06/19 13:40:10 " Convert 'width' and 'height' to ASCII. "
2018/06/19 13:40:10 " Check the arguments. "
2018/06/19 13:40:10 " Convert 'width' and 'height' to ASCII. "
2018/06/19 13:40:10 " It may not actually be necessary to set png_ptr->palette here;\n    * we do it for backward compatibility with the way the png_handle_tRNS\n    * function used to do the allocation.\n    *\n    * 1.6.0: the above statement appears to be incorrect; something has to set\n    * the palette inside png_struct on read.\n    "
2018/06/19 13:40:10 " Changed in libpng-1.2.1 to allocate PNG_MAX_PALETTE_LENGTH instead\n    * of num_palette entries, in case of an invalid PNG file or incorrect\n    * call to png_set_PLTE() with too-large sample values.\n    "
2018/06/19 13:40:10 " This causes the gAMA and cHRM to be written too "
2018/06/19 13:40:10 " sRGB "
2018/06/19 13:40:10 " Set the colorspace first because this validates the profile; do not\n    * override previously set app cHRM or gAMA here (because likely as not the\n    * application knows better than libpng what the correct values are.)  Pass\n    * the info_ptr color_type field to png_colorspace_set_ICC because in the\n    * write case it has not yet been stored in png_ptr.\n    "
2018/06/19 13:40:10 " Don't do any of the copying if the profile was bad, or inconsistent. "
2018/06/19 13:40:10 " But do write the gAMA and cHRM chunks from the profile. "
2018/06/19 13:40:10 " PRIVATE "
2018/06/19 13:40:10 " Make sure we have enough space in the \"text\" array in info_struct\n    * to hold all of the incoming text_ptr objects.  This compare can't overflow\n    * because max_text >= num_text (anyway, subtract of two positive integers\n    * can't overflow in any case.)\n    "
2018/06/19 13:40:10 " Calculate an appropriate max_text, checking for overflow. "
2018/06/19 13:40:10 " Round up to a multiple of 8 "
2018/06/19 13:40:10 " Now allocate a new array and copy the old members in; this does all\n          * the overflow checks.\n          "
2018/06/19 13:40:10 " num_text is adjusted below as the entries are copied in "
2018/06/19 13:40:10 " Set iTXt data "
2018/06/19 13:40:10 " iTXt "
2018/06/19 13:40:10 " It may not actually be necessary to set png_ptr->trans_alpha here;\n        * we do it for backward compatibility with the way the png_handle_tRNS\n        * function used to do the allocation.\n        *\n        * 1.6.0: The above statement is incorrect; png_handle_tRNS effectively\n        * relies on png_set_tRNS storing the information in png_struct\n        * (otherwise it won't be there for the code in pngrtran.c).\n        "
2018/06/19 13:40:10 " Changed from num_trans to PNG_MAX_PALETTE_LENGTH in version 1.2.1 "
2018/06/19 13:40:10 "\n *  entries        - array of png_sPLT_t structures\n *                   to be added to the list of palettes\n *                   in the info structure.\n *\n *  nentries       - number of palette structures to be\n *                   added.\n "
2018/06/19 13:40:10 " Use the internal realloc function, which checks for all the possible\n    * overflows.  Notice that the parameters are (int) and (size_t)\n    "
2018/06/19 13:40:10 " Out of memory or too many chunks "
2018/06/19 13:40:10 " Skip invalid input entries "
2018/06/19 13:40:10 " png_handle_sPLT doesn't do this, so this is an app error "
2018/06/19 13:40:10 " Just skip the invalid entry "
2018/06/19 13:40:10 " In the event of out-of-memory just return - there's no point keeping\n       * on trying to add sPLT chunks.\n       "
2018/06/19 13:40:10 " IMPORTANT: we have memory now that won't get freed if something else\n       * goes wrong; this code must free it.  png_malloc_array produces no\n       * warnings; use a png_chunk_report (below) if there is an error.\n       "
2018/06/19 13:40:10 " This multiply can't overflow because png_malloc_array has already\n       * checked it when doing the allocation.\n       "
2018/06/19 13:40:10 " Note that 'continue' skips the advance of the out pointer and out\n       * count, so an invalid entry is not added.\n       "
2018/06/19 13:40:10 " sPLT "
2018/06/19 13:40:10 " New in 1.6.0; copy the location and check it.  This is an API\n    * change; previously the app had to use the\n    * png_set_unknown_chunk_location API below for each chunk.\n    "
2018/06/19 13:40:10 " Write struct, so unknown chunks come from the app "
2018/06/19 13:40:10 " Use the old behavior "
2018/06/19 13:40:10 " This need not be an internal error - if the app calls\n    * png_set_unknown_chunks on a read pointer it must get the location right.\n    "
2018/06/19 13:40:10 " Now reduce the location to the top-most set bit by removing each least\n    * significant bit in turn.\n    "
2018/06/19 13:40:10 " The cast is safe because 'location' is a bit mask and only the low four\n    * bits are significant.\n    "
2018/06/19 13:40:10 " Check for the failure cases where support has been disabled at compile\n    * time.  This code is hardly ever compiled - it's here because\n    * STORE_UNKNOWN_CHUNKS is set by both read and write code (compiling in this\n    * code) but may be meaningless if the read or write handling of unknown\n    * chunks is not compiled in.\n    "
2018/06/19 13:40:10 " Prior to 1.6.0 this code used png_malloc_warn; however, this meant that\n    * unknown critical chunks could be lost with just a warning resulting in\n    * undefined behavior.  Now png_chunk_report is used to provide behavior\n    * appropriate to read or write.\n    "
2018/06/19 13:40:10 " safe because it is initialized "
2018/06/19 13:40:10 " Increment unknown_chunks_num each time round the loop to protect the\n    * just-allocated chunk data.\n    "
2018/06/19 13:40:10 " But just skip storing the unknown chunk "
2018/06/19 13:40:10 " These increments are skipped on out-of-memory for the data - the\n       * unknown chunk entry gets overwritten if the png_chunk_report returns.\n       * This is correct in the read case (the chunk is just dropped.)\n       "
2018/06/19 13:40:10 " This API is pretty pointless in 1.6.0 because the location can be set\n    * before the call to png_set_unknown_chunks.\n    *\n    * TODO: add a png_app_warning in 1.7\n    "
2018/06/19 13:40:10 " Fake out the pre 1.6.0 behavior: \n undocumented! "
2018/06/19 13:40:10 " also undocumented "
2018/06/19 13:40:10 " STORE_UNKNOWN_CHUNKS "
2018/06/19 13:40:10 " Utility function: update the 'keep' state of a chunk if it is already in\n    * the list, otherwise add it to the list.\n    "
2018/06/19 13:40:10 " '0' means just set the flags, so stop here "
2018/06/19 13:40:10 " Ignore all unknown chunks and all chunks recognized by\n       * libpng except for IHDR, PLTE, tRNS, IDAT, and IEND\n       "
2018/06/19 13:40:10 " bKGD \n cHRM \n eXIf \n gAMA \n hIST \n iCCP \n iTXt \n oFFs \n pCAL \n pHYs \n sBIT \n sCAL \n sPLT \n sTER \n sRGB \n tEXt \n tIME \n zTXt "
2018/06/19 13:40:10 "SAFE"
2018/06/19 13:40:10 " num_chunks_in > 0 "
2018/06/19 13:40:10 " Prior to 1.6.0 this was silently ignored, now it is an app_error\n          * which can be switched off.\n          "
2018/06/19 13:40:10 " Since num_chunks is always restricted to UINT_MAX/5 this can't overflow.\n    "
2018/06/19 13:40:10 " If these chunks are being reset to the default then no more memory is\n    * required because add_one_chunk above doesn't extend the list if the 'keep'\n    * parameter is the default.\n    "
2018/06/19 13:40:10 " Add the new chunks together with each one's handling code.  If the chunk\n    * already exists the code is updated, otherwise the chunk is added to the\n    * end.  (In libpng 1.6.0 order no longer matters because this code enforces\n    * the earlier convention that the last setting is the one that is used.)\n    "
2018/06/19 13:40:10 " Now remove any spurious 'default' entries. "
2018/06/19 13:40:10 " This means the application has removed all the specialized handling. "
2018/06/19 13:40:10 " checked above "
2018/06/19 13:40:10 " Some compilers complain that this is always false.  However, it\n       * can be true when integer overflow happens.\n       "
2018/06/19 13:40:10 " must fit "
2018/06/19 13:40:10 " Deflate will potentially go into an infinite loop on a SYNC_FLUSH\n          * if this is permitted.\n          "
2018/06/19 13:40:10 " This function was added to libpng 1.2.6 "
2018/06/19 13:40:10 " Images with dimensions larger than these limits will be\n    * rejected by png_set_IHDR().  To accept any PNG datastream\n    * regardless of dimensions, set both limits to 0x7fffffff.\n    "
2018/06/19 13:40:10 " This function was added to libpng 1.4.0 "
2018/06/19 13:40:10 " This function was added to libpng 1.4.1 "
2018/06/19 13:40:10 " ?SET_USER_LIMITS "
2018/06/19 13:40:10 " If allowed is 1, png_benign_error() is treated as a warning.\n    *\n    * If allowed is 0, png_benign_error() is treated as an error (which\n    * is the default behavior if png_set_benign_errors() is not called).\n    "
2018/06/19 13:40:10 " BENIGN_ERRORS "
2018/06/19 13:40:10 " Whether to report invalid palette index; added at libng-1.5.10.\n    * It is possible for an indexed (color-type==3) PNG file to contain\n    * pixels with invalid (out-of-range) indexes if the PLTE chunk has\n    * fewer entries than the image's bit-depth would allow. We recover\n    * from this gracefully by filling any incomplete palette with zeros\n    * (opaque black).  By default, when this occurs libpng will issue\n    * a benign error.  This API can be used to override that behavior.\n    "
2018/06/19 13:40:10 " Check that the tEXt or zTXt keyword is valid per PNG 1.0 specification,\n * and if invalid, correct the keyword rather than discarding the entire\n * chunk.  The PNG 1.0 specification requires keywords 1-79 characters in\n * length, forbids leading or trailing whitespace, multiple internal spaces,\n * and the non-break space (0x80) from ISO 8859-1.  Returns keyword length.\n *\n * The 'new_key' buffer must be 80 characters in size (for the keyword plus a\n * trailing '\\0').  If this routine returns 0 then there was no keyword, or a\n * valid one could not be generated, and the caller must png_error.\n "
2018/06/19 13:40:10 " PRIVATE "
2018/06/19 13:40:10 "&& ch <= 255"
2018/06/19 13:40:10 " A space or an invalid character when one wasn't seen immediately\n          * before; output just a space.\n          "
2018/06/19 13:40:10 " If the character was not a space then it is invalid. "
2018/06/19 13:40:10 " just skip it, record the first error "
2018/06/19 13:40:10 " trailing space "
2018/06/19 13:40:10 " Terminate the keyword "
2018/06/19 13:40:10 " Try to only output one warning per keyword: \n keyword too long "
2018/06/19 13:40:10 " !WARNINGS "
2018/06/19 13:40:10 " !WARNINGS "
2018/06/19 13:40:10 " TEXT || pCAL || iCCP || sPLT \n READ || WRITE "
2018/06/19 13:40:10 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngset.c": 54.222965ms
2018/06/19 13:40:10 Couldn't classify license(s)
2018/06/19 13:40:11 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/intel/filter_sse2_intrinsics.c
2018/06/19 13:40:11 detected language: 4
2018/06/19 13:40:11 " filter_sse2_intrinsics.c - SSE2 optimized filter functions\n *\n * Copyright (c) 2016-2017 Glenn Randers-Pehrson\n * Written by Mike Klein and Matt Sarett\n * Derived from arm/filter_neon_intrinsics.c\n *\n * Last changed in libpng 1.6.31 [July 27, 2017]\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:40:11 " Functions in this file look at most 3 pixels (a,b,c) to predict the 4th (d).\n * They're positioned like this:\n *    prev:  c b\n *    row:   a d\n * The Sub filter predicts d=a, Avg d=(a+b)/2, and Paeth predicts d to be\n * whichever of a, b, or c is closest to p=a+b-c.\n "
2018/06/19 13:40:11 " We'll load 2 bytes, then 1 byte,\n    * then mask them together, and finally load into SSE.\n    "
2018/06/19 13:40:11 " We'll pull from SSE as a 32-bit int, then write\n    * its bottom two bytes, then its third byte.\n    "
2018/06/19 13:40:11 " The Sub filter predicts each pixel as the previous pixel, a.\n    * There is no pixel to the left of the first pixel.  It's encoded directly.\n    * That works with our main loop if we just say that left pixel was zero.\n    "
2018/06/19 13:40:11 " The Sub filter predicts each pixel as the previous pixel, a.\n    * There is no pixel to the left of the first pixel.  It's encoded directly.\n    * That works with our main loop if we just say that left pixel was zero.\n    "
2018/06/19 13:40:11 " The Avg filter predicts each pixel as the (truncated) average of a and b.\n    * There's no pixel to the left of the first pixel.  Luckily, it's\n    * predicted to be half of the pixel above it.  So again, this works\n    * perfectly with our loop if we make sure a starts at zero.\n    "
2018/06/19 13:40:11 " PNG requires a truncating average, so we can't just use _mm_avg_epu8 "
2018/06/19 13:40:11 " ...but we can fix it up by subtracting off 1 if it rounded up. "
2018/06/19 13:40:11 " PNG requires a truncating average, so we can't just use _mm_avg_epu8 "
2018/06/19 13:40:11 " ...but we can fix it up by subtracting off 1 if it rounded up. "
2018/06/19 13:40:11 " The Avg filter predicts each pixel as the (truncated) average of a and b.\n    * There's no pixel to the left of the first pixel.  Luckily, it's\n    * predicted to be half of the pixel above it.  So again, this works\n    * perfectly with our loop if we make sure a starts at zero.\n    "
2018/06/19 13:40:11 " PNG requires a truncating average, so we can't just use _mm_avg_epu8 "
2018/06/19 13:40:11 " ...but we can fix it up by subtracting off 1 if it rounded up. "
2018/06/19 13:40:11 " Returns |x| for 16-bit lanes. "
2018/06/19 13:40:11 " Read this all as, return x<0 ? -x : x.\n   * To negate two's complement, you flip all the bits then add 1.\n    "
2018/06/19 13:40:11 " Flip negative lanes. "
2018/06/19 13:40:11 " +1 to negative lanes, else +0. "
2018/06/19 13:40:11 " Bytewise c ? t : e. "
2018/06/19 13:40:11 " Paeth tries to predict pixel d using the pixel to the left of it, a,\n    * and two pixels from the previous row, b and c:\n    *   prev: c b\n    *   row:  a d\n    * The Paeth function predicts d to be whichever of a, b, or c is nearest to\n    * p=a+b-c.\n    *\n    * The first pixel has no left context, and so uses an Up filter, p = b.\n    * This works naturally with our main loop's p = a+b-c if we force a and c\n    * to zero.\n    * Here we zero b and d, which become c and a respectively at the start of\n    * the loop.\n    "
2018/06/19 13:40:11 " It's easiest to do this math (particularly, deal with pc) with 16-bit\n       * intermediates.\n       "
2018/06/19 13:40:11 " (p-a) == (a+b-c - a) == (b-c) "
2018/06/19 13:40:11 " (p-b) == (a+b-c - b) == (a-c) "
2018/06/19 13:40:11 " (p-c) == (a+b-c - c) == (a+b-c-c) == (b-c)+(a-c) "
2018/06/19 13:40:11 " |p-a| \n |p-b| \n |p-c| "
2018/06/19 13:40:11 " Paeth breaks ties favoring a over b over c. "
2018/06/19 13:40:11 " Note `_epi8`: we need addition to wrap modulo 255. "
2018/06/19 13:40:11 " It's easiest to do this math (particularly, deal with pc) with 16-bit\n       * intermediates.\n       "
2018/06/19 13:40:11 " (p-a) == (a+b-c - a) == (b-c) "
2018/06/19 13:40:11 " (p-b) == (a+b-c - b) == (a-c) "
2018/06/19 13:40:11 " (p-c) == (a+b-c - c) == (a+b-c-c) == (b-c)+(a-c) "
2018/06/19 13:40:11 " |p-a| \n |p-b| \n |p-c| "
2018/06/19 13:40:11 " Paeth breaks ties favoring a over b over c. "
2018/06/19 13:40:11 " Note `_epi8`: we need addition to wrap modulo 255. "
2018/06/19 13:40:11 " Paeth tries to predict pixel d using the pixel to the left of it, a,\n    * and two pixels from the previous row, b and c:\n    *   prev: c b\n    *   row:  a d\n    * The Paeth function predicts d to be whichever of a, b, or c is nearest to\n    * p=a+b-c.\n    *\n    * The first pixel has no left context, and so uses an Up filter, p = b.\n    * This works naturally with our main loop's p = a+b-c if we force a and c\n    * to zero.\n    * Here we zero b and d, which become c and a respectively at the start of\n    * the loop.\n    "
2018/06/19 13:40:11 " It's easiest to do this math (particularly, deal with pc) with 16-bit\n       * intermediates.\n       "
2018/06/19 13:40:11 " (p-a) == (a+b-c - a) == (b-c) "
2018/06/19 13:40:11 " (p-b) == (a+b-c - b) == (a-c) "
2018/06/19 13:40:11 " (p-c) == (a+b-c - c) == (a+b-c-c) == (b-c)+(a-c) "
2018/06/19 13:40:11 " |p-a| \n |p-b| \n |p-c| "
2018/06/19 13:40:11 " Paeth breaks ties favoring a over b over c. "
2018/06/19 13:40:11 " Note `_epi8`: we need addition to wrap modulo 255. "
2018/06/19 13:40:11 " PNG_INTEL_SSE_IMPLEMENTATION > 0 \n READ "
2018/06/19 13:40:11 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/intel/filter_sse2_intrinsics.c": 16.821479ms
2018/06/19 13:40:11 Couldn't classify license(s)
2018/06/19 13:40:12 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/intel/intel_init.c
2018/06/19 13:40:12 detected language: 4
2018/06/19 13:40:12 " intel_init.c - SSE2 optimized filter functions\n *\n * Copyright (c) 2016-2017 Glenn Randers-Pehrson\n * Written by Mike Klein and Matt Sarett, Google, Inc.\n * Derived from arm/arm_init.c\n *\n * Last changed in libpng 1.6.29 [March 16, 2017]\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:40:12 " The techniques used to implement each of these filters in SSE operate on\n    * one pixel at a time.\n    * So they generally speed up 3bpp images about 3x, 4bpp images about 4x.\n    * They can scale up to 6 and 8 bpp images and down to 2 bpp images,\n    * but they'd not likely have any benefit for 1bpp images.\n    * Most of these can be implemented using only MMX and 64-bit registers,\n    * but they end up a bit slower than using the equally-ubiquitous SSE2.\n   "
2018/06/19 13:40:12 " No need optimize PNG_FILTER_VALUE_UP.  The compiler should\n    * autovectorize.\n    "
2018/06/19 13:40:12 " PNG_INTEL_SSE_IMPLEMENTATION > 0 \n PNG_READ_SUPPORTED "
2018/06/19 13:40:12 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/intel/intel_init.c": 7.716385ms
2018/06/19 13:40:12 Couldn't classify license(s)
2018/06/19 13:40:13 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/Makefile.in
2018/06/19 13:40:14 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/Makefile.in": 372.86049ms
2018/06/19 13:40:14 Couldn't classify license(s)
2018/06/19 13:40:15 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngerror.c
2018/06/19 13:40:15 detected language: 4
2018/06/19 13:40:15 " pngerror.c - stub functions for i/o and memory allocation\n *\n * Last changed in libpng 1.6.31 [July 27, 2017]\n * Copyright (c) 1998-2002,2004,2006-2017 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * This file provides a location for all error handling.  Users who\n * need special error handling are expected to write replacement functions\n * and use png_set_error_fn() to use those functions.  See the instructions\n * at each function.\n "
2018/06/19 13:40:15 " PRIVATE "
2018/06/19 13:40:15 " WARNINGS "
2018/06/19 13:40:15 " This function is called whenever there is a fatal error.  This function\n * should not be changed.  If there is a need to handle errors differently,\n * you should supply a replacement error function and use png_set_error_fn()\n * to replace the error function at run-time.\n "
2018/06/19 13:40:15 " Strip \"#nnnn \" from beginning of error message. "
2018/06/19 13:40:15 " If the custom handler doesn't exist, or if it returns,\n      use the default handler, which will not return. "
2018/06/19 13:40:15 " Prior to 1.5.2 the error_fn received a NULL pointer, expressed\n    * erroneously as '\\0', instead of the empty string \"\".  This was\n    * apparently an error, introduced in libpng-1.2.20, and png_default_error\n    * will crash in this case.\n    "
2018/06/19 13:40:15 " If the custom handler doesn't exist, or if it returns,\n      use the default handler, which will not return. "
2018/06/19 13:40:15 " ERROR_TEXT "
2018/06/19 13:40:15 " Utility to safely appends strings to a buffer.  This never errors out so\n * error checking is not required in the caller.\n "
2018/06/19 13:40:15 " Utility to dump an unsigned value into a buffer, given a start pointer and\n * and end pointer (which should point just *beyond* the end of the buffer!)\n * Returns the pointer to the start of the formatted string.\n "
2018/06/19 13:40:15 " number of digits output \n minimum number required \n digit output (for the fixed point format) "
2018/06/19 13:40:15 " This is written so that the loop always runs at least once, even with\n    * number zero.\n    "
2018/06/19 13:40:15 " Needs five digits (the fraction) "
2018/06/19 13:40:15 " Expects at least 2 digits. "
2018/06/19 13:40:15 " FALLTHROUGH "
2018/06/19 13:40:15 " This format expects at least two digits "
2018/06/19 13:40:15 " FALLTHROUGH "
2018/06/19 13:40:15 " an error "
2018/06/19 13:40:15 " Keep track of the number of digits added "
2018/06/19 13:40:15 " Float a fixed number here: "
2018/06/19 13:40:15 " End of the fraction, but maybe nothing was output?  In that case\n          * drop the decimal point.  If the number is a true zero handle that\n          * here.\n          "
2018/06/19 13:40:15 " and !output "
2018/06/19 13:40:15 " This function is called whenever there is a non-fatal error.  This function\n * should not be changed.  If there is a need to handle warnings differently,\n * you should supply a replacement warning function and use\n * png_set_error_fn() to replace the warning function at run-time.\n "
2018/06/19 13:40:15 " These functions support 'formatted' warning messages with up to\n * PNG_WARNING_PARAMETER_COUNT parameters.  In the format string the parameter\n * is introduced by @<number>, where 'number' starts at 1.  This follows the\n * standard established by X/Open for internationalizable error messages.\n "
2018/06/19 13:40:15 " Avoid overflow by doing the negate in a png_alloc_size_t: "
2018/06/19 13:40:15 " The internal buffer is just 192 bytes - enough for all our messages,\n    * overflow doesn't happen because this code checks!  If someone figures\n    * out how to send us a message longer than 192 bytes, all that will\n    * happen is that the message will be truncated appropriately.\n    "
2018/06/19 13:40:15 " Index in the msg[] buffer: "
2018/06/19 13:40:15 " Each iteration through the following loop writes at most one character\n    * to msg[i++] then returns here to validate that there is still space for\n    * the trailing '\\0'.  It may (in the case of a parameter) read more than\n    * one character from message[]; it must check for '\\0' and continue to the\n    * test if it finds the end of string.\n    "
2018/06/19 13:40:15 " '@' at end of string is now just printed (previously it was skipped);\n       * it is an error in the calling code to terminate the string with @.\n       "
2018/06/19 13:40:15 " Consume the '@' "
2018/06/19 13:40:15 " Search for the parameter digit, the index in the string is the\n          * parameter to use.\n          "
2018/06/19 13:40:15 " If the parameter digit is out of range it will just get printed. "
2018/06/19 13:40:15 " Append this parameter "
2018/06/19 13:40:15 " No need to copy the trailing '\\0' here, but there is no guarantee\n             * that parm[] has been initialized, so there is no guarantee of a\n             * trailing '\\0':\n             "
2018/06/19 13:40:15 " Consume the parameter digit too: "
2018/06/19 13:40:15 " else not a parameter and there is a character after the @ sign; just\n          * copy that.  This is known not to be '\\0' because of the test above.\n          "
2018/06/19 13:40:15 " At this point *message can't be '\\0', even in the bad parameter case\n       * above where there is a lone '@' at the end of the message string.\n       "
2018/06/19 13:40:15 " i is always less than (sizeof msg), so: "
2018/06/19 13:40:15 " And this is the formatted message. It may be larger than\n    * PNG_MAX_ERROR_TEXT, but that is only used for 'chunk' errors and these\n    * are not (currently) formatted.\n    "
2018/06/19 13:40:15 " WARNINGS "
2018/06/19 13:40:15 " PRIVATE "
2018/06/19 13:40:15 " PRIVATE "
2018/06/19 13:40:15 " BENIGN_ERRORS "
2018/06/19 13:40:15 " Currently limited by profile_error in png.c "
2018/06/19 13:40:15 " These utilities are used internally to build an error message that relates\n * to the current chunk.  The chunk name comes from png_ptr->chunk_name,\n * which is used to prefix the message.  The message is limited in length\n * to 63 bytes. The name characters are output as hex digits wrapped in []\n * if the character is invalid.\n "
2018/06/19 13:40:15 " PRIVATE "
2018/06/19 13:40:15 " iin < PNG_MAX_ERROR_TEXT, so the following is safe: "
2018/06/19 13:40:15 " WARNINGS || ERROR_TEXT "
2018/06/19 13:40:15 " READ && ERROR_TEXT "
2018/06/19 13:40:15 " WARNINGS "
2018/06/19 13:40:15 " READ "
2018/06/19 13:40:15 " PRIVATE "
2018/06/19 13:40:15 " This is always supported, but for just read or just write it\n    * unconditionally does the right thing.\n    "
2018/06/19 13:40:15 " This API only exists if ANSI-C style error handling is used,\n * otherwise it is necessary for png_default_error to be overridden.\n "
2018/06/19 13:40:15 " From libpng 1.6.0 the app gets one chance to set a 'jmpbuf_size' value\n    * and it must not change after that.  Libpng doesn't care how big the\n    * buffer is, just that it doesn't change.\n    *\n    * If the buffer size is no *larger* than the size of jmp_buf when libpng is\n    * compiled a built in jmp_buf is returned; this preserves the pre-1.6.0\n    * semantics that this call will not fail.  If the size is larger, however,\n    * the buffer is allocated and this may fail, causing the function to return\n    * NULL.\n    "
2018/06/19 13:40:15 " not allocated "
2018/06/19 13:40:15 " new NULL return on OOM "
2018/06/19 13:40:15 " Already allocated: check the size "
2018/06/19 13:40:15 " This is an internal error in libpng: somehow we have been left\n             * with a stack allocated jmp_buf when the application regained\n             * control.  It's always possible to fix this up, but for the moment\n             * this is a png_error because that makes it easy to detect.\n             "
2018/06/19 13:40:15 " png_ptr->jmp_buf_ptr = &png_ptr->jmp_buf_local; "
2018/06/19 13:40:15 " caller will probably crash: no choice here "
2018/06/19 13:40:15 " Finally fill in the function, now we have a satisfactory buffer. It is\n    * valid to change the function on every call.\n    "
2018/06/19 13:40:15 " PRIVATE "
2018/06/19 13:40:15 " A size of 0 is used to indicate a local, stack, allocation of the\n       * pointer; used here and in png.c\n       "
2018/06/19 13:40:15 " This stuff is so that a failure to free the error control structure\n          * does not leave libpng in a state with no valid error handling: the\n          * free always succeeds, if there is an error it gets ignored.\n          "
2018/06/19 13:40:15 " Make an internal, libpng, jmp_buf to return here "
2018/06/19 13:40:15 " come back here \n stack allocation "
2018/06/19 13:40:15 " Return to setjmp on error "
2018/06/19 13:40:15 " *Always* cancel everything out: "
2018/06/19 13:40:15 " This is the default error handling function.  Note that replacements for\n * this function MUST NOT RETURN, or the program will likely crash.  This\n * function is used by default, or if the program supplies NULL for the\n * error function pointer in png_set_error_fn().\n "
2018/06/19 13:40:15 " PRIVATE "
2018/06/19 13:40:15 " Check on NULL only added in 1.5.4 "
2018/06/19 13:40:15 " Strip \"#nnnn \" from beginning of error message. "
2018/06/19 13:40:15 " Make compiler happy "
2018/06/19 13:40:15 " If control reaches this point, png_longjmp() must not return. The only\n    * choice is to terminate the whole process (or maybe the thread); to do\n    * this the ANSI-C abort() function is used unless a different method is\n    * implemented by overriding the default configuration setting for\n    * PNG_ABORT().\n    "
2018/06/19 13:40:15 " This function is called when there is a warning, but the library thinks\n * it can continue anyway.  Replacement functions don't have to do anything\n * here if you don't want them to.  In the default configuration, png_ptr is\n * not used, but it is passed in case it may be useful.\n "
2018/06/19 13:40:15 " PRIVATE "
2018/06/19 13:40:15 " Make compiler happy "
2018/06/19 13:40:15 " Make compiler happy "
2018/06/19 13:40:15 " WARNINGS "
2018/06/19 13:40:15 " This function is called when the application wants to use another method\n * of handling errors and warnings.  Note that the error function MUST NOT\n * return to the calling routine or serious problems will occur.  The return\n * method used in the default routine calls longjmp(png_ptr->jmp_buf_ptr, 1)\n "
2018/06/19 13:40:15 " This function returns a pointer to the error_ptr associated with the user\n * functions.  The application should free any memory associated with this\n * pointer before png_write_destroy and png_read_destroy are called.\n "
2018/06/19 13:40:15 " Currently the above both depend on SETJMP_SUPPORTED, however it would be\n    * possible to implement without setjmp support just so long as there is some\n    * way to handle the error return here:\n    "
2018/06/19 13:40:15 " PRIVATE "
2018/06/19 13:40:15 " An error is always logged here, overwriting anything (typically a warning)\n    * that is already there:\n    "
2018/06/19 13:40:15 " Retrieve the jmp_buf from within the png_control, making this work for\n       * C++ compilation too is pretty tricky: C++ wants a pointer to the first\n       * element of a jmp_buf, but C doesn't tell us the type of that.\n       "
2018/06/19 13:40:15 " Missing longjmp buffer, the following is to help debugging: "
2018/06/19 13:40:15 " Here on an internal programming error. "
2018/06/19 13:40:15 " PRIVATE "
2018/06/19 13:40:15 " A warning is only logged if there is no prior warning or error. "
2018/06/19 13:40:15 " PRIVATE "
2018/06/19 13:40:15 " Safely execute function(arg) with png_error returning to this function. "
2018/06/19 13:40:15 " And do the cleanup prior to any failure return. "
2018/06/19 13:40:15 " SIMPLIFIED READ || SIMPLIFIED_WRITE \n READ || WRITE "
2018/06/19 13:40:15 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngerror.c": 38.141232ms
2018/06/19 13:40:15 Couldn't classify license(s)
2018/06/19 13:40:15 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/CHANGES
2018/06/19 13:40:17 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/CHANGES": 1.431384322s
2018/06/19 13:40:17 Couldn't classify license(s)
2018/06/19 13:40:18 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/mips/filter_msa_intrinsics.c
2018/06/19 13:40:18 detected language: 4
2018/06/19 13:40:18 " filter_msa_intrinsics.c - MSA optimised filter functions\n *\n * Copyright (c) 2016 Glenn Randers-Pehrson\n * Written by Mandar Sahastrabuddhe, August 2016.\n * Last changed in libpng 1.6.25 [September 1, 2016]\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:40:18 " This code requires -mfpu=msa on the command line: \n intrinsics code from pngpriv.h "
2018/06/19 13:40:18 " libpng row pointers are not necessarily aligned to any particular boundary,\n * however this code will only work with appropriate alignment. mips/mips_init.c\n * checks for this (and will not compile unless it is done). This code uses\n * variants of png_aligncast to avoid compiler warnings.\n "
2018/06/19 13:40:18 " The following relies on a variable 'temp_pointer' being declared with type\n * 'type'.  This is written this way just to hide the GCC strict aliasing\n * warning; note that the code is safe because there never is an alias between\n * the input and output pointers.\n "
2018/06/19 13:40:18 " !(__mips_isa_rev >= 6)"
2018/06/19 13:40:18 " (__mips_isa_rev >= 6)"
2018/06/19 13:40:18 " Remainder "
2018/06/19 13:40:18 " Remainder "
2018/06/19 13:40:18 " PNG_MIPS_MSA_OPT > 0 \n PNG_MIPS_MSA_IMPLEMENTATION == 1 (intrinsics) \n READ "
2018/06/19 13:40:18 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/mips/filter_msa_intrinsics.c": 18.41256ms
2018/06/19 13:40:18 Couldn't classify license(s)
2018/06/19 13:40:19 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/mips/mips_init.c
2018/06/19 13:40:19 detected language: 4
2018/06/19 13:40:19 " mips_init.c - MSA optimised filter functions\n *\n * Copyright (c) 2016 Glenn Randers-Pehrson\n * Written by Mandar Sahastrabuddhe, 2016.\n * Last changed in libpng 1.6.25 [September 1, 2016]\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:40:19 " Below, after checking __linux__, various non-C90 POSIX 1003.1 functions are\n * called.\n "
2018/06/19 13:40:19 " Do run-time checks \n WARNING: it is strongly recommended that you do not build libpng with\n * run-time checks for CPU features if at all possible.  In the case of the MIPS\n * MSA instructions there is no processor-specific way of detecting the\n * presence of the required support, therefore run-time detection is extremely\n * OS specific.\n *\n * You may set the macro PNG_MIPS_MSA_FILE to the file name of file containing\n * a fragment of C source code which defines the png_have_msa function.  There\n * are a number of implementations in contrib/mips-msa, but the only one that\n * has partial support is contrib/mips-msa/linux.c - a generic Linux\n * implementation which reads /proc/cpufino.\n "
2018/06/19 13:40:19 " for sig_atomic_t "
2018/06/19 13:40:19 " PNG_MIPS_MSA_FILE "
2018/06/19 13:40:19 " PNG_MIPS_MSA_FILE \n PNG_MIPS_MSA_CHECK_SUPPORTED "
2018/06/19 13:40:19 " The switch statement is compiled in for MIPS_MSA_API, the call to\n    * png_have_msa is compiled in for MIPS_MSA_CHECK. If both are defined\n    * the check is only performed if the API has not set the MSA option on\n    * or off explicitly. In this case the check controls what happens.\n    "
2018/06/19 13:40:19 " Allow the run-time check to execute if it has been enabled -\n          * thus both API and CHECK can be turned on.  If it isn't supported\n          * this case will fall through to the 'default' below, which just\n          * returns.\n          "
2018/06/19 13:40:19 " PNG_MIPS_MSA_API_SUPPORTED "
2018/06/19 13:40:19 " not checked "
2018/06/19 13:40:19 " PNG_MIPS_MSA_CHECK_SUPPORTED "
2018/06/19 13:40:19 " OFF or INVALID "
2018/06/19 13:40:19 " Option turned on "
2018/06/19 13:40:19 " IMPORTANT: any new external functions used here must be declared using\n    * PNG_INTERNAL_FUNCTION in ../pngpriv.h.  This is required so that the\n    * 'prefix' option to configure works:\n    *\n    *    ./configure --with-libpng-prefix=foobar_\n    *\n    * Verify you have got this right by running the above command, doing a build\n    * and examining pngprefix.h; it must contain a #define for every external\n    * function you add.  (Notice that this happens automatically for the\n    * initialization function.)\n    "
2018/06/19 13:40:19 " PNG_MIPS_MSA_OPT > 0 \n READ "
2018/06/19 13:40:19 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/mips/mips_init.c": 15.415108ms
2018/06/19 13:40:19 Couldn't classify license(s)
2018/06/19 13:40:20 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngwtran.c
2018/06/19 13:40:20 detected language: 4
2018/06/19 13:40:20 " pngwtran.c - transforms the data in a row for PNG writers\n *\n * Last changed in libpng 1.6.26 [October 20, 2016]\n * Copyright (c) 1998-2002,2004,2006-2016 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:40:20 " Pack pixels into bytes.  Pass the true bit depth in bit_depth.  The\n * row_info bit depth should be 8 (one pixel per byte).  The channels\n * should be 1 (this only happens on grayscale and paletted images).\n "
2018/06/19 13:40:20 " Shift pixel values to take advantage of whole range.  Pass the\n * true number of bits in bit_depth.  The row should be packed\n * according to row_info->bit_depth.  Thus, if you had a row of\n * bit depth 4, but the pixels only had values from 0 to 7, you\n * would pass 3 as bit_depth, and this routine would translate the\n * data to 0 to 15.\n "
2018/06/19 13:40:20 " With low row depths, could only be grayscale, so one channel "
2018/06/19 13:40:20 " This converts from ARGB to RGBA "
2018/06/19 13:40:20 " This converts from AARRGGBB to RRGGBBAA "
2018/06/19 13:40:20 " WRITE_16BIT "
2018/06/19 13:40:20 " This converts from AG to GA "
2018/06/19 13:40:20 " This converts from AAGG to GGAA "
2018/06/19 13:40:20 " WRITE_16BIT "
2018/06/19 13:40:20 " This inverts the alpha channel in RGBA "
2018/06/19 13:40:20 " Does nothing\n               *(dp++) = *(sp++);\n               *(dp++) = *(sp++);\n               *(dp++) = *(sp++);\n               "
2018/06/19 13:40:20 " This inverts the alpha channel in RRGGBBAA "
2018/06/19 13:40:20 " Does nothing\n               *(dp++) = *(sp++);\n               *(dp++) = *(sp++);\n               *(dp++) = *(sp++);\n               *(dp++) = *(sp++);\n               *(dp++) = *(sp++);\n               *(dp++) = *(sp++);\n               "
2018/06/19 13:40:20 " WRITE_16BIT "
2018/06/19 13:40:20 " This inverts the alpha channel in GA "
2018/06/19 13:40:20 " This inverts the alpha channel in GGAA "
2018/06/19 13:40:20 " Does nothing\n               *(dp++) = *(sp++);\n               *(dp++) = *(sp++);\n               "
2018/06/19 13:40:20 " WRITE_16BIT "
2018/06/19 13:40:20 " Transform the data according to the user's wishes.  The order of\n * transformations is significant.\n "
2018/06/19 13:40:20 " PRIVATE "
2018/06/19 13:40:20 " User write transform\n                                                 function "
2018/06/19 13:40:20 " png_ptr \n row_info: \n  png_uint_32 width;       width of row \n  png_size_t rowbytes;     number of bytes in row \n  png_byte color_type;     color type of pixels \n  png_byte bit_depth;      bit depth of samples \n  png_byte channels;       number of channels (1-4) \n  png_byte pixel_depth;    bits per pixel (depth*channels) \n start of pixel data for row "
2018/06/19 13:40:20 " WRITE_TRANSFORMS \n WRITE "
2018/06/19 13:40:20 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngwtran.c": 12.86697ms
2018/06/19 13:40:20 Couldn't classify license(s)
2018/06/19 13:40:20 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/png.5
2018/06/19 13:40:20 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/png.5": 12.631416ms
2018/06/19 13:40:20 Couldn't classify license(s)
2018/06/19 13:40:21 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/ltmain.sh
2018/06/19 13:40:21 detected language: 32
2018/06/19 13:40:21 "! /bin/sh\n# DO NOT EDIT - This file generated from ./build-aux/ltmain.in\n#               by inline-source v2014-01-03.01"
2018/06/19 13:40:21 " libtool (GNU libtool) 2.4.6\n Provide generalized library-building support services.\n Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996"
2018/06/19 13:40:21 " Copyright (C) 1996-2015 Free Software Foundation, Inc.\n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
2018/06/19 13:40:21 " GNU Libtool is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2 of the License, or\n (at your option) any later version.\n\n As a special exception to the GNU General Public License,\n if you distribute this file as part of a program or library that\n is built using GNU Libtool, you may include this file under the\n same distribution terms that you use for the rest of that program.\n\n GNU Libtool is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this program.  If not, see <http://www.gnu.org/licenses/>."
2018/06/19 13:40:21 "# ------ ##\n# Usage. ##\n# ------ ##"
2018/06/19 13:40:21 " Run './libtool --help' for help with using this script from the\n command line."
2018/06/19 13:40:21 "# ------------------------------- ##\n# User overridable command paths. ##\n# ------------------------------- ##"
2018/06/19 13:40:21 " After configure completes, it has a better idea of some of the\n shell tools we need than the defaults used by the functions shared\n with bootstrap, so set those here where they can still be over-\n ridden by the user, but otherwise take precedence."
2018/06/19 13:40:21 "# -------------------------- ##\n# Source external libraries. ##\n# -------------------------- ##"
2018/06/19 13:40:21 " Much of our low-level functionality needs to be sourced from external\n libraries, which are installed to $pkgauxdir."
2018/06/19 13:40:21 " Set a version string for this script.\n UTC"
2018/06/19 13:40:21 " General shell script boiler plate, and helper functions.\n Written by Gary V. Vaughan, 2004"
2018/06/19 13:40:21 " Copyright (C) 2004-2015 Free Software Foundation, Inc.\n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
2018/06/19 13:40:21 " This program is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 3 of the License, or\n (at your option) any later version."
2018/06/19 13:40:21 " As a special exception to the GNU General Public License, if you distribute\n this file as part of a program or library that is built using GNU Libtool,\n you may include this file under the same distribution terms that you use\n for the rest of that program."
2018/06/19 13:40:21 " This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNES FOR A PARTICULAR PURPOSE. See the GNU\n General Public License for more details."
2018/06/19 13:40:21 " You should have received a copy of the GNU General Public License\n along with this program. If not, see <http://www.gnu.org/licenses/>."
2018/06/19 13:40:21 " Please report bugs or propose patches to gary@gnu.org."
2018/06/19 13:40:21 "# ------ ##\n# Usage. ##\n# ------ ##"
2018/06/19 13:40:21 " Evaluate this file near the top of your script to gain access to\n the functions and variables defined here:\n\n   . `echo \"$0\" | ${SED-sed} 's|[^/]*$||'`/build-aux/funclib.sh\n\n If you need to override any of the default environment variable\n settings, do that before evaluating this file."
2018/06/19 13:40:21 "# -------------------- ##\n# Shell normalisation. ##\n# -------------------- ##"
2018/06/19 13:40:21 " Some shells need a little help to be as Bourne compatible as possible.\n Before doing anything else, make sure all that help has been provided!"
2018/06/19 13:40:21 " for MKS sh"
2018/06/19 13:40:21 " Pre-4.2 versions of Zsh do word splitting on ${1+\"$@\"}, which\n is contrary to our usage.  Disable this feature."
2018/06/19 13:40:21 " NLS nuisances: We save the old values in case they are required later."
2018/06/19 13:40:21 " CDPATH."
2018/06/19 13:40:21 " Make sure IFS has a sensible default"
2018/06/19 13:40:21 " There are apparently some retarded systems that use ';' as a PATH separator!"
2018/06/19 13:40:21 "# ------------------------- ##\n# Locate command utilities. ##\n# ------------------------- ##"
2018/06/19 13:40:21 " func_executable_p FILE\n ----------------------\n Check that FILE is an executable regular file."
2018/06/19 13:40:21 " func_path_progs PROGS_LIST CHECK_FUNC [PATH]\n --------------------------------------------\n Search for either a program that responds to --version with output\n containing \"GNU\", or else returned by CHECK_FUNC otherwise, by\n trying all the directories in PATH with each of the elements of\n PROGS_LIST.\n\n CHECK_FUNC should accept the path to a candidate program, and\n set $func_check_prog_result if it truncates its output less than\n $_G_path_prog_max characters."
2018/06/19 13:40:21 " We want to be able to use the functions in this file before configure\n has figured out where the best binaries are kept, which means we have\n to search for them ourselves - except when the results are already set\n where we skip the searches."
2018/06/19 13:40:21 " Unless the user overrides by setting SED, search the path for either GNU\n sed, or the sed that truncates its output the least."
2018/06/19 13:40:21 " Best one so far, save it but keep looking for a better one"
2018/06/19 13:40:21 " 10*(2^10) chars as input seems more than enough"
2018/06/19 13:40:21 " Unless the user overrides by setting GREP, search the path for either GNU\n grep, or the grep that truncates its output the least."
2018/06/19 13:40:21 " Best one so far, save it but keep looking for a better one"
2018/06/19 13:40:21 " 10*(2^10) chars as input seems more than enough"
2018/06/19 13:40:21 "# ------------------------------- ##\n# User overridable command paths. ##\n# ------------------------------- ##"
2018/06/19 13:40:21 " All uppercase variable names are used for environment variables.  These\n variables can be overridden by the user before calling a script that\n uses them if a suitable command of that name is not already available\n in the command search PATH."
2018/06/19 13:40:21 "# -------------------- ##\n# Useful sed snippets. ##\n# -------------------- ##"
2018/06/19 13:40:21 " Sed substitution that helps us do robust quoting.  It backslashifies\n metacharacters that are still active within double-quoted strings."
2018/06/19 13:40:21 " Same as above, but do not quote variable references."
2018/06/19 13:40:21 " Sed substitution that turns a string into a regex matching for the\n string literally."
2018/06/19 13:40:21 " Sed substitution that converts a w32 file name or path\n that contains forward slashes, into one that contains\n (escaped) backslashes.  A very naive implementation."
2018/06/19 13:40:21 " Re-'\\' parameter expansions in output of sed_double_quote_subst that\n were '\\'-ed in input to the same.  If an odd number of '\\' preceded a\n '$' in input to sed_double_quote_subst, that '$' was protected from\n expansion.  Since each input '\\' is now two '\\'s, look for any number\n of runs of four '\\'s followed by two '\\'s and then a '$'.  '\\' that '$'."
2018/06/19 13:40:21 "# ----------------- ##\n# Global variables. ##\n# ----------------- ##"
2018/06/19 13:40:21 " Except for the global variables explicitly listed below, the following\n functions in the '^func_' namespace, and the '^require_' namespace\n variables initialised in the 'Resource management' section, sourcing\n this file will not pollute your global namespace with anything\n else. There's no portable way to scope variables in Bourne shell\n though, so actually running these functions will sometimes place\n results into a variable named after the function, and often use\n temporary variables in the '^_G_' namespace. If you are careful to\n avoid using those namespaces casually in your sourcing script, things\n should continue to work as you expect. And, of course, you can freely\n overwrite any of the functions or variables defined here before\n calling anything to customize them."
2018/06/19 13:40:21 " $? = 63 is used to indicate version mismatch to missing.\n $? = 77 is used to indicate a skipped test to automake."
2018/06/19 13:40:21 " Allow overriding, eg assuming that you follow the convention of\n putting '$debug_cmd' at the start of all your functions, you can get\n bash to show function call trace with:\n\n    debug_cmd='eval echo \"${FUNCNAME[0]} $*\" >&2' bash your-script-name"
2018/06/19 13:40:21 " By convention, finish your script with:\n\n    exit $exit_status\n\n so that you can set exit_status to non-zero if you want to indicate\n something went wrong during execution without actually bailing out at\n the point of failure."
2018/06/19 13:40:21 " Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n is ksh but when the shell is invoked as \"sh\" and the current value of\n the _XPG environment variable is not equal to 1 (one), the special\n positional parameter $0, within a function call, is the name of the\n function."
2018/06/19 13:40:21 " The name of this program."
2018/06/19 13:40:21 " Make sure we have an absolute progpath for reexecution:"
2018/06/19 13:40:21 "# ----------------- ##\n# Standard options. ##\n# ----------------- ##"
2018/06/19 13:40:21 " The following options affect the operation of the functions defined\n below, and should be set appropriately depending on run-time para-\n meters passed on the command line."
2018/06/19 13:40:21 " Categories 'all' and 'none' are always available.  Append any others\n you will pass as the first argument to func_warning from your own\n code."
2018/06/19 13:40:21 " By default, display warnings according to 'opt_warning_types'.  Set\n 'warning_func'  to ':' to elide all warnings, or func_fatal_error to\n treat the next displayed warning as a fatal error."
2018/06/19 13:40:21 " Set to 'all' to display all warnings, 'none' to suppress all\n warnings, or a space delimited list of some subset of\n 'warning_categories' to display only the listed warnings."
2018/06/19 13:40:21 "# -------------------- ##\n# Resource management. ##\n# -------------------- ##"
2018/06/19 13:40:21 " This section contains definitions for functions that each ensure a\n particular resource (a file, or a non-empty configuration variable for\n example) is available, and if appropriate to extract default values\n from pertinent package files. Call them using their associated\n 'require_*' variable to ensure that they are executed, at most, once.\n\n It's entirely deliberate that calling these functions can set\n variables that don't obey the namespace limitations obeyed by the rest\n of this file, in order that that they be as useful as possible to\n callers."
2018/06/19 13:40:21 " require_term_colors\n -------------------\n Allow display of bold text on terminals that support it."
2018/06/19 13:40:21 " COLORTERM and USE_ANSI_COLORS environment variables take\n precedence, because most terminfo databases neglect to describe\n whether color sequences are supported."
2018/06/19 13:40:21 " Standard ANSI escape sequences"
2018/06/19 13:40:21 " Otherwise trust the terminfo database after all."
2018/06/19 13:40:21 "# ----------------- ##\n# Function library. ##\n# ----------------- ##"
2018/06/19 13:40:21 " This section contains a variety of useful functions to call in your\n scripts. Take note of the portable wrappers for features provided by\n some modern shells, which will fall back to slower equivalents on\n less featureful shells."
2018/06/19 13:40:21 " func_append VAR VALUE\n ---------------------\n Append VALUE onto the existing contents of VAR."
2018/06/19 13:40:21 " We should try to minimise forks, especially on Windows where they are\n unreasonably slow, so skip the feature probes when bash or zsh are\n being used:"
2018/06/19 13:40:21 " The += operator was introduced in bash 3.1"
2018/06/19 13:40:21 " _G_HAVE_PLUSEQ_OP\n Can be empty, in which case the shell is probed, \"yes\" if += is\n useable or anything else if it does not work."
2018/06/19 13:40:21 " This is an XSI compatible shell, allowing a faster implementation..."
2018/06/19 13:40:21 " ...otherwise fall back to using expr, which is often a shell builtin."
2018/06/19 13:40:21 " func_append_quoted VAR VALUE\n ----------------------------\n Quote VALUE and append to the end of shell variable VAR, separated\n by a space."
2018/06/19 13:40:21 " func_append_uniq VAR VALUE\n --------------------------\n Append unique VALUE onto the existing contents of VAR, assuming\n entries are delimited by the first character of VALUE.  For example:\n\n   func_append_uniq options \" --another-option option-argument\"\n\n will only append to $options if \" --another-option option-argument \"\n is not already present somewhere in $options already (note spaces at\n each end implied by leading space in second argument)."
2018/06/19 13:40:21 " func_arith TERM...\n ------------------\n Set func_arith_result to the result of evaluating TERMs."
2018/06/19 13:40:21 " func_basename FILE\n ------------------\n Set func_basename_result to FILE with everything up to and including\n the last / stripped."
2018/06/19 13:40:21 " If this shell supports suffix pattern removal, then use it to avoid\n forking. Hide the definitions single quotes in case the shell chokes\n on unsupported syntax..."
2018/06/19 13:40:21 " ...otherwise fall back to using sed."
2018/06/19 13:40:21 "x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\"
2018/06/19 13:40:21 " func_mkdir_p DIRECTORY-PATH\n ---------------------------\n Make sure the entire path to DIRECTORY-PATH is available."
2018/06/19 13:40:21 " Protect directory names starting with '-'"
2018/06/19 13:40:21 " While some portion of DIR does not yet exist..."
2018/06/19 13:40:21 " ...make a list in topmost first order.  Use a colon delimited\n list incase some portion of path contains whitespace."
2018/06/19 13:40:21 " If the last portion added has no slash in it, the list is done"
2018/06/19 13:40:21 " ...otherwise throw away the child directory and loop"
2018/06/19 13:40:21 " mkdir can fail with a 'File exist' error if two processes\n try to create one of the directories concurrently.  Don't\n stop in that case!"
2018/06/19 13:40:21 " Bail out if we (or some other process) failed to create a directory."
2018/06/19 13:40:21 " func_mktempdir [BASENAME]\n -------------------------\n Make a temporary directory that won't clash with other running\n libtool processes, and avoids race conditions if possible.  If\n given, BASENAME is the basename for that directory."
2018/06/19 13:40:21 " Return a directory name, but don't create it in dry-run mode"
2018/06/19 13:40:21 " If mktemp works, use that first and foremost"
2018/06/19 13:40:21 " Failing that, at least try and use $RANDOM to avoid a race"
2018/06/19 13:40:21 " If we're not in dry-run mode, bomb out on failure"
2018/06/19 13:40:21 " func_normal_abspath PATH\n ------------------------\n Remove doubled-up and trailing slashes, \".\" path components,\n and cancel out any \"..\" path components in PATH after making\n it an absolute path."
2018/06/19 13:40:21 " These SED scripts presuppose an absolute path with a trailing slash."
2018/06/19 13:40:21 " Start from root dir and reassemble the path."
2018/06/19 13:40:21 " Empty path, that just means $cwd."
2018/06/19 13:40:21 " The next three entries are used to spot a run of precisely\n two leading slashes without using negated character classes;\n we take advantage of case's first-match behaviour."
2018/06/19 13:40:21 " Unusual form of absolute path, do nothing."
2018/06/19 13:40:21 " Not necessarily an ordinary path; POSIX reserves leading '//'\n and for example Cygwin uses it to access remote file shares\n over CIFS/SMB, so we conserve a leading double slash if found."
2018/06/19 13:40:21 " Absolute path, do nothing."
2018/06/19 13:40:21 " Relative path, prepend $cwd."
2018/06/19 13:40:21 " Cancel out all the simple stuff to save iterations.  We also want\n the path to end with a slash for ease of parsing, so make sure\n there is one (and only one) here."
2018/06/19 13:40:21 " Processed it all yet?"
2018/06/19 13:40:21 " If we ascended to the root using \"..\" the result may be empty now."
2018/06/19 13:40:21 " Figure out what to do with it"
2018/06/19 13:40:21 " Trailing empty path component, ignore it."
2018/06/19 13:40:21 " Parent dir; strip last assembled component from result."
2018/06/19 13:40:21 " Actual path component, append it."
2018/06/19 13:40:21 " Restore leading double-slash if one was found on entry."
2018/06/19 13:40:21 " func_notquiet ARG...\n --------------------\n Echo program name prefixed message only when not in quiet mode."
2018/06/19 13:40:21 " A bug in bash halts the script if the last line of a function\n fails when set -e is in force, so we need another command to\n work around that:"
2018/06/19 13:40:21 " func_relative_path SRCDIR DSTDIR\n --------------------------------\n Set func_relative_path_result to the relative path from SRCDIR to DSTDIR."
2018/06/19 13:40:21 " Ascend the tree starting from libdir"
2018/06/19 13:40:21 " check if we have found a prefix of bindir"
2018/06/19 13:40:21 " found an exact match"
2018/06/19 13:40:21 " found a matching prefix"
2018/06/19 13:40:21 " Have to descend all the way to the root!"
2018/06/19 13:40:21 " Now calculate path; take care to avoid doubling-up slashes."
2018/06/19 13:40:21 " Normalisation. If bindir is libdir, return '.' else relative path."
2018/06/19 13:40:21 " func_quote_for_eval ARG...\n --------------------------\n Aesthetically quote ARGs to be evaled later.\n This function returns two values:\n   i) func_quote_for_eval_result\n      double-quoted, suitable for a subsequent eval\n  ii) func_quote_for_eval_unquoted_result\n      has all characters that are still active within double\n      quotes backslashified."
2018/06/19 13:40:21 "; do"
2018/06/19 13:40:21 " func_sort_ver VER1 VER2\n -----------------------\n 'sort -V' is not generally available.\n Note this deviates from the version comparison in automake\n in that it treats 1.5 < 1.5.0, and treats 1.4.4a < 1.4-p3a\n but this should suffice as we won't be specifying old\n version formats or redundant trailing .0 in bootstrap.conf.\n If we did want full compatibility then we should probably\n use m4_version_compare from autoconf."
2018/06/19 13:40:21 " func_lt_ver PREV CURR\n ---------------------\n Return true if PREV and CURR are in the correct order according to\n func_sort_ver, otherwise false.  Use it like this:\n\n  func_lt_ver \"$prev_ver\" \"$proposed_ver\" || func_fatal_error \"...\""
2018/06/19 13:40:21 " Local variables:\n mode: shell-script\n sh-indentation: 2\n eval: (add-hook 'before-save-hook 'time-stamp)\n time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n time-stamp-time-zone: \"UTC\"\n End:\n! /bin/sh"
2018/06/19 13:40:21 " Set a version string for this script.\n UTC"
2018/06/19 13:40:21 " A portable, pluggable option parser for Bourne shell.\n Written by Gary V. Vaughan, 2010"
2018/06/19 13:40:21 " Copyright (C) 2010-2015 Free Software Foundation, Inc.\n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
2018/06/19 13:40:21 " This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version."
2018/06/19 13:40:21 " This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details."
2018/06/19 13:40:21 " You should have received a copy of the GNU General Public License\n along with this program.  If not, see <http://www.gnu.org/licenses/>."
2018/06/19 13:40:21 " Please report bugs or propose patches to gary@gnu.org."
2018/06/19 13:40:21 "# ------ ##\n# Usage. ##\n# ------ ##"
2018/06/19 13:40:21 " This file is a library for parsing options in your shell scripts along\n with assorted other useful supporting features that you can make use\n of too.\n\n For the simplest scripts you might need only:\n\n   #!/bin/sh\n   . relative/path/to/funclib.sh\n   . relative/path/to/options-parser\n   scriptversion=1.0\n   func_options ${1+\"$@\"}\n   eval set dummy \"$func_options_result\"; shift\n   ...rest of your script...\n\n In order for the '--version' option to work, you will need to have a\n suitably formatted comment like the one at the top of this file\n starting with '# Written by ' and ending with '# warranty; '.\n\n For '-h' and '--help' to work, you will also need a one line\n description of your script's purpose in a comment directly above the\n '# Written by ' line, like the one at the top of this file.\n\n The default options also support '--debug', which will turn on shell\n execution tracing (see the comment above debug_cmd below for another\n use), and '--verbose' and the func_verbose function to allow your script\n to display verbose messages only when your user has specified\n '--verbose'.\n\n After sourcing this file, you can plug processing for additional\n options by amending the variables from the 'Configuration' section\n below, and following the instructions in the 'Option parsing'\n section further down."
2018/06/19 13:40:21 "# -------------- ##\n# Configuration. ##\n# -------------- ##"
2018/06/19 13:40:21 " You should override these variables in your script after sourcing this\n file so that they reflect the customisations you have added to the\n option parser."
2018/06/19 13:40:21 " The usage line for option parsing errors and the start of '-h' and\n '--help' output messages. You can embed shell variables for delayed\n expansion at the time the message is displayed, but you will need to\n quote other shell meta-characters carefully to prevent them being\n expanded when the contents are evaled."
2018/06/19 13:40:21 " Short help message in response to '-h' and '--help'.  Add to this or\n override it after sourcing this library to reflect the full set of\n options your script accepts."
2018/06/19 13:40:21 " Additional text appended to 'usage_message' in response to '--help'."
2018/06/19 13:40:21 " Help message printed before fatal option parsing errors."
2018/06/19 13:40:21 "# ------------------------- ##\n# Hook function management. ##\n# ------------------------- ##"
2018/06/19 13:40:21 " This section contains functions for adding, removing, and running hooks\n to the main code.  A hook is just a named list of of function, that can\n be run in order later on."
2018/06/19 13:40:21 " func_hookable FUNC_NAME\n -----------------------\n Declare that FUNC_NAME will run hooks added with\n 'func_add_hook FUNC_NAME ...'."
2018/06/19 13:40:21 " func_add_hook FUNC_NAME HOOK_FUNC\n ---------------------------------\n Request that FUNC_NAME call HOOK_FUNC before it returns.  FUNC_NAME must\n first have been declared \"hookable\" by a call to 'func_hookable'."
2018/06/19 13:40:21 " func_remove_hook FUNC_NAME HOOK_FUNC\n ------------------------------------\n Remove HOOK_FUNC from the list of functions called by FUNC_NAME."
2018/06/19 13:40:21 " func_run_hooks FUNC_NAME [ARG]...\n ---------------------------------\n Run all hook functions registered to FUNC_NAME.\n It is assumed that the list of hook functions contains nothing more\n than a whitespace-delimited list of legal shell function names, and\n no effort is wasted trying to catch shell meta-characters or preserve\n whitespace."
2018/06/19 13:40:21 " store returned options list back into positional\n parameters for next 'cmd' execution."
2018/06/19 13:40:21 "# --------------- ##\n# Option parsing. ##\n# --------------- ##"
2018/06/19 13:40:21 " In order to add your own option parsing hooks, you must accept the\n full positional parameter list in your hook function, remove any\n options that you action, and then pass back the remaining unprocessed\n options in '<hooked_function_name>_result', escaped suitably for\n 'eval'.  Like this:\n\n    my_options_prep ()\n    {\n        $debug_cmd\n\n        # Extend the existing usage message.\n        usage_message=$usage_message'\n      -s, --silent       don'\\''t print informational messages\n    '\n\n        func_quote_for_eval ${1+\"$@\"}\n        my_options_prep_result=$func_quote_for_eval_result\n    }\n    func_add_hook func_options_prep my_options_prep\n\n\n    my_silent_option ()\n    {\n        $debug_cmd\n\n        # Note that for efficiency, we parse as many options as we can\n        # recognise in a loop before passing the remainder back to the\n        # caller on the first unrecognised argument we encounter.\n        while test $# -gt 0; do\n          opt=$1; shift\n          case $opt in\n            --silent|-s) opt_silent=: ;;\n            # Separate non-argument short options:\n            -s*)         func_split_short_opt \"$_G_opt\"\n                         set dummy \"$func_split_short_opt_name\" \\\n                             \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n                         shift\n                         ;;\n            *)            set dummy \"$_G_opt\" \"$*\"; shift; break ;;\n          esac\n        done\n\n        func_quote_for_eval ${1+\"$@\"}\n        my_silent_option_result=$func_quote_for_eval_result\n    }\n    func_add_hook func_parse_options my_silent_option\n\n\n    my_option_validation ()\n    {\n        $debug_cmd\n\n        $opt_silent && $opt_verbose && func_fatal_help \"\\\n    '--silent' and '--verbose' options are mutually exclusive.\"\n\n        func_quote_for_eval ${1+\"$@\"}\n        my_option_validation_result=$func_quote_for_eval_result\n    }\n    func_add_hook func_validate_options my_option_validation\n\n You'll alse need to manually amend $usage_message to reflect the extra\n options you parse.  It's preferable to append if you can, so that\n multiple option parsing hooks can be added safely."
2018/06/19 13:40:21 " func_options [ARG]...\n ---------------------\n All the functions called inside func_options are hookable. See the\n individual implementations for details."
2018/06/19 13:40:21 " save modified positional parameters for caller"
2018/06/19 13:40:21 " func_options_prep [ARG]...\n --------------------------\n All initialisations required before starting the option parse loop.\n Note that when calling hook functions, we pass through the list of\n positional parameters.  If a hook function modifies that list, and\n needs to propogate that back to rest of this script, then the complete\n modified list must be put in 'func_run_hooks_result' before\n returning."
2018/06/19 13:40:21 " Option defaults:"
2018/06/19 13:40:21 " save modified positional parameters for caller"
2018/06/19 13:40:21 " func_parse_options [ARG]...\n ---------------------------\n The main option parsing loop."
2018/06/19 13:40:21 " this just eases exit handling\n -gt 0; do\n Defer to hook functions for initial option parsing, so they\n get priority in the event of reusing an option name."
2018/06/19 13:40:21 " Adjust func_parse_options positional parameters to match"
2018/06/19 13:40:21 " Break out of the loop if we already parsed every option.\n -gt 0 || break"
2018/06/19 13:40:21 " = 0 && func_missing_arg $_G_opt && break"
2018/06/19 13:40:21 " trailing space prevents matching last $1 above"
2018/06/19 13:40:21 " Separate optargs to long options (plugins may need this):"
2018/06/19 13:40:21 " Separate optargs to short options:"
2018/06/19 13:40:21 " Separate non-argument short options:"
2018/06/19 13:40:21 " save modified positional parameters for caller"
2018/06/19 13:40:21 " func_validate_options [ARG]...\n ------------------------------\n Perform any sanity checks on option settings and/or unconsumed\n arguments."
2018/06/19 13:40:21 " Display all warnings if -W was not given."
2018/06/19 13:40:21 " Bail if the options were screwed!"
2018/06/19 13:40:21 " save modified positional parameters for caller"
2018/06/19 13:40:21 "# ----------------- ##\n# Helper functions. ##\n# ----------------- ##"
2018/06/19 13:40:21 " This section contains the helper functions used by the rest of the\n hookable option parser framework in ascii-betical order."
2018/06/19 13:40:21 " func_fatal_help ARG...\n ----------------------\n Echo program name prefixed message to standard error, followed by\n a help hint, and exit."
2018/06/19 13:40:21 "x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\"
2018/06/19 13:40:21 " This is an XSI compatible shell, allowing a faster implementation..."
2018/06/19 13:40:21 " ...otherwise fall back to using expr, which is often a shell builtin."
2018/06/19 13:40:21 "func_split_equals"
2018/06/19 13:40:21 " func_split_short_opt SHORTOPT\n -----------------------------\n Set func_split_short_opt_name and func_split_short_opt_arg shell\n variables after splitting SHORTOPT after the 2nd character."
2018/06/19 13:40:21 " This is an XSI compatible shell, allowing a faster implementation..."
2018/06/19 13:40:21 " ...otherwise fall back to using expr, which is often a shell builtin."
2018/06/19 13:40:21 "func_split_short_opt"
2018/06/19 13:40:21 " func_usage\n ----------\n Echo short help message to standard output and exit."
2018/06/19 13:40:21 " func_usage_message\n ------------------\n Echo short help message to standard output."
2018/06/19 13:40:21 " UTC\"\n time-stamp-time-zone: \"UTC\"\n End:"
2018/06/19 13:40:21 " Set a version string."
2018/06/19 13:40:21 " func_echo ARG...\n ----------------\n Libtool also displays the current mode in messages, so override\n funclib.sh func_echo with this custom definition."
2018/06/19 13:40:21 " func_warning ARG...\n -------------------\n Libtool warnings are not categorized, so override funclib.sh\n func_warning with this simpler definition."
2018/06/19 13:40:21 "# ---------------- ##\n# Options parsing. ##\n# ---------------- ##"
2018/06/19 13:40:21 " Hook in the functions to make sure our own options are parsed during\n the option parsing loop."
2018/06/19 13:40:21 " Short help message in response to '-h'."
2018/06/19 13:40:21 " Additional text appended to 'usage_message' in response to '--help'."
2018/06/19 13:40:21 " func_lo2o OBJECT-NAME\n ---------------------\n Transform OBJECT-NAME from a '.lo' suffix to the platform specific\n object suffix."
2018/06/19 13:40:21 " func_xform LIBOBJ-OR-SOURCE\n ---------------------------\n Transform LIBOBJ-OR-SOURCE from a '.o' or '.c' (or otherwise)\n suffix to a '.lo' libtool-object suffix."
2018/06/19 13:40:21 " ...otherwise fall back to using sed."
2018/06/19 13:40:21 " func_fatal_configuration ARG...\n -------------------------------\n Echo program name prefixed message to standard error, followed by\n a configuration failure hint, and exit."
2018/06/19 13:40:21 " func_config\n -----------\n Display the configuration for all the tags in this script."
2018/06/19 13:40:21 " Default configuration."
2018/06/19 13:40:21 " Now print the configurations for the tags."
2018/06/19 13:40:21 " func_features\n -------------\n Display the features supported by this script."
2018/06/19 13:40:21 " func_enable_tag TAGNAME\n -----------------------\n Verify that TAGNAME is valid, and either flag an error and exit, or\n enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n variable here."
2018/06/19 13:40:21 " Global variable:"
2018/06/19 13:40:21 " Validate tagname."
2018/06/19 13:40:21 " Don't test for the \"default\" C tag, as we know it's\n there but not specially marked."
2018/06/19 13:40:21 " Evaluate the configuration.  Be careful to quote the path\n and the sed script, to avoid splitting on whitespace, but\n also don't use non-portable quotes within backquotes within\n quotes we have to do it in 2 steps:"
2018/06/19 13:40:21 " func_check_version_match\n ------------------------\n Ensure that we are using m4 macros, and libtool script from the same\n release of libtool."
2018/06/19 13:40:21 " libtool_options_prep [ARG]...\n -----------------------------\n Preparation for options parsed by libtool."
2018/06/19 13:40:21 " Option defaults:"
2018/06/19 13:40:21 " Shorthand for --mode=foo, only valid as the first argument"
2018/06/19 13:40:21 " Pass back the list of options."
2018/06/19 13:40:21 " libtool_parse_options [ARG]...\n ---------------------------------\n Provide handling for libtool specific options."
2018/06/19 13:40:21 " Perform our own loop to consume as many options as possible in\n each iteration.\n -gt 0; do"
2018/06/19 13:40:21 " = 0 && func_missing_arg $_G_opt && break"
2018/06/19 13:40:21 " Valid mode arguments:"
2018/06/19 13:40:21 " Catch anything else as an error"
2018/06/19 13:40:21 " = 0 && func_missing_arg $_G_opt && break"
2018/06/19 13:40:21 " An option not handled by this hook function:"
2018/06/19 13:40:21 " save modified positional parameters for caller"
2018/06/19 13:40:21 " libtool_validate_options [ARG]...\n ---------------------------------\n Perform any sanity checks on option settings and/or unconsumed\n arguments."
2018/06/19 13:40:21 " save first non-option argument\n; then"
2018/06/19 13:40:21 " preserve --debug"
2018/06/19 13:40:21 " Solaris2 added to fix http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16452\n see also: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=59788"
2018/06/19 13:40:21 " don't eliminate duplications in $postdeps and $predeps"
2018/06/19 13:40:21 " Sanity checks first:"
2018/06/19 13:40:21 " Darwin sucks"
2018/06/19 13:40:21 " Change the help message to a mode-specific one."
2018/06/19 13:40:21 " Pass back the unparsed argument list"
2018/06/19 13:40:21 " Process options as early as possible so that --help and --version\n can return quickly."
2018/06/19 13:40:21 "# ----------- ##\n#    Main.    ##\n# ----------- ##"
2018/06/19 13:40:21 " Global variables."
2018/06/19 13:40:21 " If this variable is set in any of the actions, the command in it\n will be execed at the end.  This prevents here-documents from being\n left over by shells."
2018/06/19 13:40:21 " A function that is used when there is no print builtin or printf."
2018/06/19 13:40:21 " func_generated_by_libtool\n True iff stdin has been generated by Libtool. This function is only\n a basic sanity check; it will hardly flush out determined imposters."
2018/06/19 13:40:21 " func_lalib_p file\n True iff FILE is a libtool '.la' library or '.lo' object file.\n This function is only a basic sanity check; it will hardly flush out\n determined imposters."
2018/06/19 13:40:21 " func_lalib_unsafe_p file\n True iff FILE is a libtool '.la' library or '.lo' object file.\n This function implements the same check as func_lalib_p without\n resorting to external programs.  To this end, it redirects stdin and\n closes it afterwards, without saving the original file descriptor.\n As a safety measure, use it only where a negative result would be\n fatal anyway.  Works if 'file' does not exist."
2018/06/19 13:40:21 "\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;"
2018/06/19 13:40:21 " func_ltwrapper_script_p file\n True iff FILE is a libtool wrapper script\n This function is only a basic sanity check; it will hardly flush out\n determined imposters."
2018/06/19 13:40:21 " func_ltwrapper_executable_p file\n True iff FILE is a libtool wrapper executable\n This function is only a basic sanity check; it will hardly flush out\n determined imposters."
2018/06/19 13:40:21 " func_ltwrapper_scriptname file\n Assumes file is an ltwrapper_executable\n uses $file to determine the appropriate filename for a\n temporary ltwrapper_script."
2018/06/19 13:40:21 " func_ltwrapper_p file\n True iff FILE is a libtool wrapper script or wrapper executable\n This function is only a basic sanity check; it will hardly flush out\n determined imposters."
2018/06/19 13:40:21 " func_execute_cmds commands fail_cmd\n Execute tilde-delimited COMMANDS.\n If FAIL_CMD is given, eval that upon failure.\n FAIL_CMD may read-access the current command in variable CMD!"
2018/06/19 13:40:21 " ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n Evaluate the configuration."
2018/06/19 13:40:21 " Double-quote args containing other shell metacharacters."
2018/06/19 13:40:21 " The compiler in the base compile command matches\n the one in the tagged configuration.\n Assume this is the tagged configuration we want."
2018/06/19 13:40:21 " If $tagname still isn't set, then no tagged configuration\n was found and let the user know that the \"--tag\" command\n line option must be used."
2018/06/19 13:40:21 "\telse\n\t  func_verbose \"using $tagname tagged configuration\""
2018/06/19 13:40:21 " func_write_libtool_object output_name pic_name nonpic_name\n Create a libtool object file (analogous to a \".la\" file),\n but don't create it if we're doing a dry run."
2018/06/19 13:40:21 "\n ARG is the $build file name to be converted to w32 format.\n Result is available in $func_convert_core_file_wine_to_w32_result, and will\n be empty on error (or when ARG is empty)"
2018/06/19 13:40:21 " Unfortunately, winepath does not exit with a non-zero error code, so we\n are forced to check the contents of stdout. On the other hand, if the\n command is not found, the shell will set an exit code of 127 and print\n *an error message* to stdout. So we must check for both error code of\n zero AND non-empty stdout, which explains the odd construction:"
2018/06/19 13:40:21 " end: func_convert_core_file_wine_to_w32"
2018/06/19 13:40:21 " func_convert_core_path_wine_to_w32 ARG\n Helper function used by path conversion functions when $build is *nix, and\n $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n configured wine environment available, with the winepath program in $build's\n $PATH. Assumes ARG has no leading or trailing path separator characters.\n\n ARG is path to be converted from $build format to win32.\n Result is available in $func_convert_core_path_wine_to_w32_result.\n Unconvertible file (directory) names in ARG are skipped; if no directory names\n are convertible, then the result may be empty."
2018/06/19 13:40:21 " unfortunately, winepath doesn't convert paths, only file names"
2018/06/19 13:40:21 " end: func_convert_core_path_wine_to_w32"
2018/06/19 13:40:21 " func_cygpath ARGS...\n Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n (2), returns the Cygwin file name or path in func_cygpath_result (input\n file name or path is assumed to be in w32 format, as previously converted\n from $build's *nix or MSYS format). In case (3), returns the w32 file name\n or path in func_cygpath_result (input file name or path is assumed to be in\n Cygwin format). Returns an empty string on error.\n\n ARGS are passed to cygpath, with the last one being the file name or path to\n be converted.\n\n Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n environment variable; do not put it in $PATH."
2018/06/19 13:40:21 " on failure, ensure result is empty"
2018/06/19 13:40:21 "end: func_cygpath"
2018/06/19 13:40:21 " func_convert_core_msys_to_w32 ARG\n Convert file name or path ARG from MSYS format to w32 format.  Return\n result in func_convert_core_msys_to_w32_result."
2018/06/19 13:40:21 " awkward: cmd appends spaces to result"
2018/06/19 13:40:21 "end: func_convert_core_msys_to_w32"
2018/06/19 13:40:21 " func_convert_file_check ARG1 ARG2\n Verify that ARG1 (a file name in $build format) was converted to $host\n format in ARG2. Otherwise, emit an error message, but continue (resetting\n func_to_host_file_result to ARG1)."
2018/06/19 13:40:21 " Fallback:"
2018/06/19 13:40:21 " end func_convert_file_check"
2018/06/19 13:40:21 " func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n Verify that FROM_PATH (a path in $build format) was converted to $host\n format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n func_to_host_file_result to a simplistic fallback value (see below)."
2018/06/19 13:40:21 " Fallback.  This is a deliberately simplistic \"conversion\" and\n should not be \"improved\".  See libtool.info."
2018/06/19 13:40:21 " end func_convert_path_check"
2018/06/19 13:40:21 " func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n and appending REPL if ORIG matches BACKPAT."
2018/06/19 13:40:21 " end func_convert_path_front_back_pathsep"
2018/06/19 13:40:21 "#################################################\n $build to $host FILE NAME CONVERSION FUNCTIONS #\n#################################################\n invoked via '$to_host_file_cmd ARG'\n\n In each case, ARG is the path to be converted from $build to $host format.\n Result will be available in $func_to_host_file_result."
2018/06/19 13:40:21 " func_to_host_file ARG\n Converts the file name ARG from $build format to $host format. Return result\n in func_to_host_file_result."
2018/06/19 13:40:21 " end func_to_host_file"
2018/06/19 13:40:21 " func_to_tool_file ARG LAZY\n converts the file name ARG from $build format to toolchain format. Return\n result in func_to_tool_file_result.  If the conversion in use is listed\n in (the comma separated) LAZY, no conversion takes place."
2018/06/19 13:40:21 " end func_to_tool_file"
2018/06/19 13:40:21 " func_convert_file_noop ARG\n Copy ARG to func_to_host_file_result."
2018/06/19 13:40:21 " end func_convert_file_noop"
2018/06/19 13:40:21 " func_convert_file_msys_to_w32 ARG\n Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n conversion to w32 is not available inside the cwrapper.  Returns result in\n func_to_host_file_result."
2018/06/19 13:40:21 " end func_convert_file_msys_to_w32"
2018/06/19 13:40:21 " func_convert_file_cygwin_to_w32 ARG\n Convert file name ARG from Cygwin to w32 format.  Returns result in\n func_to_host_file_result."
2018/06/19 13:40:21 " because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n LT_CYGPATH in this case."
2018/06/19 13:40:21 " end func_convert_file_cygwin_to_w32"
2018/06/19 13:40:21 " func_convert_file_nix_to_w32 ARG\n Convert file name ARG from *nix to w32 format.  Requires a wine environment\n and a working winepath. Returns result in func_to_host_file_result."
2018/06/19 13:40:21 " end func_convert_file_nix_to_w32"
2018/06/19 13:40:21 " func_convert_file_msys_to_cygwin ARG\n Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n Returns result in func_to_host_file_result."
2018/06/19 13:40:21 " end func_convert_file_msys_to_cygwin"
2018/06/19 13:40:21 " func_convert_file_nix_to_cygwin ARG\n Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n in func_to_host_file_result."
2018/06/19 13:40:21 " convert from *nix to w32, then use cygpath to convert from w32 to cygwin."
2018/06/19 13:40:21 " end func_convert_file_nix_to_cygwin"
2018/06/19 13:40:21 "############################################\n $build to $host PATH CONVERSION FUNCTIONS #\n############################################\n invoked via '$to_host_path_cmd ARG'\n\n In each case, ARG is the path to be converted from $build to $host format.\n The result will be available in $func_to_host_path_result.\n\n Path separators are also converted from $build format to $host format.  If\n ARG begins or ends with a path separator character, it is preserved (but\n converted to $host format) on output.\n\n All path conversion functions are named using the following convention:\n   file name conversion function    : func_convert_file_X_to_Y ()\n   path conversion function         : func_convert_path_X_to_Y ()\n where, for any given $build/$host combination the 'X_to_Y' value is the\n same.  If conversion functions are added for new $build/$host combinations,\n the two new functions must follow this pattern, or func_init_to_host_path_cmd\n will break."
2018/06/19 13:40:21 " func_init_to_host_path_cmd\n Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n appropriate value, based on the value of $to_host_file_cmd."
2018/06/19 13:40:21 " func_to_host_path ARG\n Converts the path ARG from $build format to $host format. Return result\n in func_to_host_path_result."
2018/06/19 13:40:21 " end func_to_host_path"
2018/06/19 13:40:21 " func_convert_path_noop ARG\n Copy ARG to func_to_host_path_result."
2018/06/19 13:40:21 " end func_convert_path_noop"
2018/06/19 13:40:21 " func_convert_path_msys_to_w32 ARG\n Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n conversion to w32 is not available inside the cwrapper.  Returns result in\n func_to_host_path_result."
2018/06/19 13:40:21 " Remove leading and trailing path separator characters from ARG.  MSYS\n behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n and winepath ignores them completely."
2018/06/19 13:40:21 " end func_convert_path_msys_to_w32"
2018/06/19 13:40:21 " func_convert_path_cygwin_to_w32 ARG\n Convert path ARG from Cygwin to w32 format.  Returns result in\n func_to_host_file_result."
2018/06/19 13:40:21 " See func_convert_path_msys_to_w32:"
2018/06/19 13:40:21 " end func_convert_path_cygwin_to_w32"
2018/06/19 13:40:21 " func_convert_path_nix_to_w32 ARG\n Convert path ARG from *nix to w32 format.  Requires a wine environment and\n a working winepath.  Returns result in func_to_host_file_result."
2018/06/19 13:40:21 " See func_convert_path_msys_to_w32:"
2018/06/19 13:40:21 " end func_convert_path_nix_to_w32"
2018/06/19 13:40:21 " func_convert_path_msys_to_cygwin ARG\n Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n Returns result in func_to_host_file_result."
2018/06/19 13:40:21 " See func_convert_path_msys_to_w32:"
2018/06/19 13:40:21 " end func_convert_path_msys_to_cygwin"
2018/06/19 13:40:21 " func_convert_path_nix_to_cygwin ARG\n Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n func_to_host_file_result."
2018/06/19 13:40:21 " Remove leading and trailing path separator characters from\n ARG. msys behavior is inconsistent here, cygpath turns them\n into '.;' and ';.', and winepath ignores them completely."
2018/06/19 13:40:21 " end func_convert_path_nix_to_cygwin"
2018/06/19 13:40:21 " func_dll_def_p FILE\n True iff FILE is a Windows DLL '.def' file.\n Keep in sync with _LT_DLL_DEF_P in libtool.m4"
2018/06/19 13:40:21 " func_mode_compile arg..."
2018/06/19 13:40:21 " Get the compilation command and the source file."
2018/06/19 13:40:21 "  always keep a non-empty value in \"srcfile\""
2018/06/19 13:40:21 " do not \"continue\".  Instead, add this to base_compile"
2018/06/19 13:40:21 " Accept any command-line options."
2018/06/19 13:40:21 "  the next one goes into the \"base_compile\" arg list\n  The current \"srcfile\" will either be retained or\n  replaced later.  I would guess that would be a bug."
2018/06/19 13:40:21 " Add the arguments to base_compile."
2018/06/19 13:40:21 " Accept the current argument as the source file.\n The previous \"srcfile\" becomes the current argument.\n"
2018/06/19 13:40:21 "  case $arg"
2018/06/19 13:40:21 "  case $arg_mode"
2018/06/19 13:40:21 " Aesthetically quote the previous argument."
2018/06/19 13:40:21 " for arg"
2018/06/19 13:40:21 " Get the name of the library object."
2018/06/19 13:40:21 " Recognize several different file suffixes.\n If the user specifies -o file.o, it is replaced with file.lo"
2018/06/19 13:40:21 " non-PIC code in shared libraries is not supported"
2018/06/19 13:40:21 " Calculate the filename of the output object if compiler does\n not support -o with -c"
2018/06/19 13:40:21 " Lock this critical section if it is needed\n We use this script file to make the link, it avoids creating a new file"
2018/06/19 13:40:21 " Only build a PIC object if we are building libtool libraries."
2018/06/19 13:40:21 " Without this assignment, base_compile gets emptied."
2018/06/19 13:40:21 " Don't build PIC code"
2018/06/19 13:40:21 " Place PIC objects in $objdir"
2018/06/19 13:40:21 " Just move the object if needed, then go on to compile the next one"
2018/06/19 13:40:21 " Allow error messages only from the first compilation."
2018/06/19 13:40:21 " Only build a position-dependent object if we build old libraries."
2018/06/19 13:40:21 " Don't build PIC code"
2018/06/19 13:40:21 " Suppress compiler output if we already did a PIC compilation."
2018/06/19 13:40:21 " Just move the object if needed"
2018/06/19 13:40:21 " Unlock the critical section if it was locked"
2018/06/19 13:40:21 " We need to display help for each of the modes."
2018/06/19 13:40:21 " Generic help is extracted from the usage comments\n at the start of this file."
2018/06/19 13:40:21 " Now that we've collected a possible --mode arg, show help if necessary"
2018/06/19 13:40:22 " func_mode_execute arg..."
2018/06/19 13:40:22 " The first argument is the command name."
2018/06/19 13:40:22 " Handle -dlopen flags immediately."
2018/06/19 13:40:22 " Check to see that this really is a libtool archive."
2018/06/19 13:40:22 " Read the libtool library."
2018/06/19 13:40:22 " Skip this library if it cannot be dlopened."
2018/06/19 13:40:22 " Warn if it was a shared library."
2018/06/19 13:40:22 " Just add the directory containing the .lo file."
2018/06/19 13:40:22 " Get the absolute pathname."
2018/06/19 13:40:22 " Now add the directory to shlibpath_var."
2018/06/19 13:40:22 " This variable tells wrapper scripts just to set shlibpath_var\n rather than running their programs."
2018/06/19 13:40:22 " Check if any of the arguments is a wrapper script."
2018/06/19 13:40:22 " Do a test to see if this is really a libtool program."
2018/06/19 13:40:22 " Transform arg to wrapped name."
2018/06/19 13:40:22 " Transform arg to wrapped name."
2018/06/19 13:40:22 " Quote arguments (to preserve shell metacharacters)."
2018/06/19 13:40:22 " Display what would be done."
2018/06/19 13:40:22 " Export the shlibpath_var."
2018/06/19 13:40:22 " Restore saved environment variables"
2018/06/19 13:40:22 " Now prepare to actually exec the command."
2018/06/19 13:40:22 " func_mode_finish arg..."
2018/06/19 13:40:22 " Remove sysroot references"
2018/06/19 13:40:22 " Do each command in the finish commands."
2018/06/19 13:40:22 " Do the single finish_eval."
2018/06/19 13:40:22 " func_mode_install arg..."
2018/06/19 13:40:22 " There may be an optional sh(1) argument at the beginning of\n install_prog (especially on Windows NT)."
2018/06/19 13:40:22 " Allow the use of GNU shtool's install command."
2018/06/19 13:40:22 " Aesthetically quote it."
2018/06/19 13:40:22 " The real first argument should be the name of the installation program.\n Aesthetically quote it."
2018/06/19 13:40:22 " We need to accept at least all the BSD install flags."
2018/06/19 13:40:22 " If the previous option needed an argument, then skip it."
2018/06/19 13:40:22 " Aesthetically quote the argument."
2018/06/19 13:40:22 " Strip any trailing slash from the destination."
2018/06/19 13:40:22 " Check to see that the destination is a directory."
2018/06/19 13:40:22 " Not a directory, so check to see that there is only one file specified."
2018/06/19 13:40:22 " This variable tells wrapper scripts just to set variables rather\n than running their programs."
2018/06/19 13:40:22 " Do each installation."
2018/06/19 13:40:22 " Do the static libraries later."
2018/06/19 13:40:22 " Check to see that this really is a libtool archive."
2018/06/19 13:40:22 " Add the libdir to current_libdirs if it is the destination."
2018/06/19 13:40:22 " Note the libdir as a future libdir."
2018/06/19 13:40:22 " Determine the prefix the user has applied to our future dir."
2018/06/19 13:40:22 " Don't allow the user to place us outside of our expected\n location b/c this prevents finding dependent libraries that\n are installed to the same prefix.\n At present, this check doesn't affect windows .dll's that\n are installed into $libdir/../bin (currently, that works fine)\n but it's something to keep an eye on."
2018/06/19 13:40:22 " Stick the inst_prefix_dir data into the link command."
2018/06/19 13:40:22 "\" -gt 0; then\n Delete the old symlinks, and create new ones.\n Try 'ln -sf' first, because the 'ln' binary might depend on\n the symlink we replace!  Solaris /bin/ln does not understand -f,\n so we also need to try rm && ln -s."
2018/06/19 13:40:22 " Do each command in the postinstall commands."
2018/06/19 13:40:22 " Install the pseudo-library for information purposes."
2018/06/19 13:40:22 " Maybe install the static library, too."
2018/06/19 13:40:22 " Install (i.e. copy) a libtool object."
2018/06/19 13:40:22 " Figure out destination file name, if it wasn't already specified."
2018/06/19 13:40:22 " Deduce the name of the destination old-style object file."
2018/06/19 13:40:22 " Install the libtool object if requested."
2018/06/19 13:40:22 " Install the old object if enabled."
2018/06/19 13:40:22 " Deduce the name of the old-style object file."
2018/06/19 13:40:22 " Figure out destination file name, if it wasn't already specified."
2018/06/19 13:40:22 " If the file is missing, and there is a .exe on the end, strip it\n because it is most likely a libtool script we actually want to\n install"
2018/06/19 13:40:22 " Do a test to see if this is really a libtool program."
2018/06/19 13:40:22 " Check the variables that should have been set."
2018/06/19 13:40:22 " Check to see that each library is installed."
2018/06/19 13:40:22 " Replace the output file specification."
2018/06/19 13:40:22 " Install the binary that we compiled earlier."
2018/06/19 13:40:22 " remove .exe since cygwin /usr/bin/install will append another\n one anyway"
2018/06/19 13:40:22 " this is ok"
2018/06/19 13:40:22 " Set up the ranlib parameters."
2018/06/19 13:40:22 " Do each command in the postinstall commands."
2018/06/19 13:40:22 " Maybe just do a dry run."
2018/06/19 13:40:22 " func_generate_dlsyms outputname originator pic_p\n Extract symbols from dlprefiles and create ${outputname}S.o with\n a dlpreopen symbol table."
2018/06/19 13:40:22 " Discover the nlist of each of the dlfiles."
2018/06/19 13:40:22 " Parse the name list into a source file."
2018/06/19 13:40:22 " Add our own program objects to the symbol list."
2018/06/19 13:40:22 " Prepare the list of exported symbols"
2018/06/19 13:40:22 " if an import library, we need to obtain dlname"
2018/06/19 13:40:22 " Use subshell, to avoid clobbering current variable values"
2018/06/19 13:40:22 " no lafile. user explicitly requested -dlpreopen <import library>."
2018/06/19 13:40:22 " not an import lib"
2018/06/19 13:40:22 " Make sure we have at least an empty file."
2018/06/19 13:40:22 " Try sorting and uniquifying the output."
2018/06/19 13:40:22 " !$opt_dry_run"
2018/06/19 13:40:22 " compiling the symbol table file with pic_flag works around\n a FreeBSD bug that causes programs to crash when -lm is\n linked before any other PIC object.  But we must not use\n pic_flag when linking with -static.  The problem exists in\n FreeBSD 2.2.6 and is fixed in FreeBSD 3.1."
2018/06/19 13:40:22 " Now compile the dynamic symbol file."
2018/06/19 13:40:22 " Clean up the generated files."
2018/06/19 13:40:22 " Transform the symbol file into the correct name."
2018/06/19 13:40:22 " We keep going just in case the user didn't refer to\n lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n really was required."
2018/06/19 13:40:22 " Nullify the symbol file."
2018/06/19 13:40:22 " func_cygming_gnu_implib_p ARG\n This predicate returns with zero status (TRUE) if\n ARG is a GNU/binutils-style import library. Returns\n with nonzero status (FALSE) otherwise."
2018/06/19 13:40:22 " func_cygming_ms_implib_p ARG\n This predicate returns with zero status (TRUE) if\n ARG is an MS-style import library. Returns\n with nonzero status (FALSE) otherwise."
2018/06/19 13:40:22 " func_win32_libid arg\n return the library type of file 'arg'\n\n Need a lot of goo to handle *both* DLLs and import libs\n Has to be a shell function in order to 'eat' the argument\n that is supplied when $file_magic_command is called.\n Despite the name, also deal with 64 bit binaries."
2018/06/19 13:40:22 " definitely import"
2018/06/19 13:40:22 " could be an import, or static\n Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD."
2018/06/19 13:40:22 " func_extract_archives gentop oldlib ..."
2018/06/19 13:40:22 " Extract the objects."
2018/06/19 13:40:22 " Do not bother doing anything if just a dry run"
2018/06/19 13:40:22 " $darwin_arches\n# Okay now we've a bunch of thin objects, gotta fatten them up :)"
2018/06/19 13:40:22 " $darwin_filelist"
2018/06/19 13:40:22 " $darwin_arches\n !$opt_dry_run"
2018/06/19 13:40:22 " func_emit_wrapper [arg=no]\n\n Emit a libtool wrapper script on stdout.\n Don't directly open a file because we may want to\n incorporate the script contents within a cygwin/mingw\n wrapper executable.  Must ONLY be called from within\n func_mode_link because it depends on a number of variables\n set therein.\n\n ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n variable will take.  If 'yes', then the emitted script\n will assume that the directory where it is stored is\n the $objdir directory.  This is a cygwin/mingw-specific\n behavior."
2018/06/19 13:40:22 " Backslashes separate directories on plain windows"
2018/06/19 13:40:22 " fixup the dll searchpath if we need to.\n\n Fix the DLL searchpath if we need to.  Do this before prepending\n to shlibpath, because on Windows, both are PATH and uninstalled\n libraries must come first."
2018/06/19 13:40:22 " Export our shlibpath_var if we have one."
2018/06/19 13:40:22 " func_emit_cwrapperexe_src\n emit the source code for a wrapper executable on stdout\n Must ONLY be called from within func_mode_link because\n it depends on a number of variable set therein."
2018/06/19 13:40:22 "ifdef _MSC_VER\n define _CRT_SECURE_NO_DEPRECATE 1\nendif\ninclude <stdio.h>\ninclude <stdlib.h>\nifdef _MSC_VER\n include <direct.h>\n include <process.h>\n include <io.h>\nelse\n include <unistd.h>\n include <stdint.h>\n ifdef __CYGWIN__\n  include <io.h>\n endif\nendif\ninclude <malloc.h>\ninclude <stdarg.h>\ninclude <assert.h>\ninclude <string.h>\ninclude <ctype.h>\ninclude <errno.h>\ninclude <fcntl.h>\ninclude <sys/stat.h>"
2018/06/19 13:40:22 "define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)"
2018/06/19 13:40:22 "if defined __MINGW32__\n ifdef __STRICT_ANSI__"
2018/06/19 13:40:22 " endif\nelif defined __CYGWIN__\n ifdef __STRICT_ANSI__"
2018/06/19 13:40:22 " endif\nelif defined other_platform || defined ... */\nendif"
2018/06/19 13:40:22 "if defined _MSC_VER\n define setmode _setmode\n define stat    _stat\n define chmod   _chmod\n define getcwd  _getcwd\n define putenv  _putenv\n define S_IXUSR _S_IEXEC\nelif defined __MINGW32__\n define setmode _setmode\n define stat    _stat\n define chmod   _chmod\n define getcwd  _getcwd\n define putenv  _putenv\nelif defined __CYGWIN__\n define HAVE_SETENV\n define FOPEN_WB \"wb\"\nelif defined other platforms ... */\nendif"
2018/06/19 13:40:22 "if defined PATH_MAX\n define LT_PATHMAX PATH_MAX\nelif defined MAXPATHLEN\n define LT_PATHMAX MAXPATHLEN\nelse\n define LT_PATHMAX 1024\nendif"
2018/06/19 13:40:22 "ifndef S_IXOTH\n define S_IXOTH 0\nendif\nifndef S_IXGRP\n define S_IXGRP 0\nendif"
2018/06/19 13:40:22 "ifndef DIR_SEPARATOR\n define DIR_SEPARATOR '/'\n define PATH_SEPARATOR ':'\nendif"
2018/06/19 13:40:22 "if defined _WIN32 || defined __MSDOS__ || defined __DJGPP__ || \\"
2018/06/19 13:40:22 " define HAVE_DOS_BASED_FILE_SYSTEM\n define FOPEN_WB \"wb\"\n ifndef DIR_SEPARATOR_2\n  define DIR_SEPARATOR_2 '\\\\'\n endif\n ifndef PATH_SEPARATOR_2\n  define PATH_SEPARATOR_2 ';'\n endif\nendif"
2018/06/19 13:40:22 "ifndef DIR_SEPARATOR_2\n define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\nelse /* DIR_SEPARATOR_2 */\n define IS_DIR_SEPARATOR(ch) \\"
2018/06/19 13:40:22 "endif /* DIR_SEPARATOR_2 */"
2018/06/19 13:40:22 "ifndef PATH_SEPARATOR_2\n define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\nelse /* PATH_SEPARATOR_2 */\n define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\nendif /* PATH_SEPARATOR_2 */"
2018/06/19 13:40:22 "ifndef FOPEN_WB\n define FOPEN_WB \"w\"\nendif\nifndef _O_BINARY\n define _O_BINARY 0\nendif"
2018/06/19 13:40:22 "define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\ndefine XFREE(stale) do { \\"
2018/06/19 13:40:22 "if defined LT_DEBUGWRAPPER"
2018/06/19 13:40:22 "else"
2018/06/19 13:40:22 "endif"
2018/06/19 13:40:22 "if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5)\n define externally_visible volatile\nelse\n define externally_visible __attribute__((externally_visible)) volatile\nendif"
2018/06/19 13:40:22 "define LTWRAPPER_OPTION_PREFIX         \"--lt-\""
2018/06/19 13:40:22 "if defined HAVE_DOS_BASED_FILE_SYSTEM"
2018/06/19 13:40:22 "endif"
2018/06/19 13:40:22 "if defined HAVE_DOS_BASED_FILE_SYSTEM"
2018/06/19 13:40:22 "endif"
2018/06/19 13:40:22 "if defined HAVE_DOS_BASED_FILE_SYSTEM"
2018/06/19 13:40:22 "endif"
2018/06/19 13:40:22 "ifndef S_ISLNK"
2018/06/19 13:40:22 "else"
2018/06/19 13:40:22 "endif"
2018/06/19 13:40:22 "ifdef HAVE_SETENV"
2018/06/19 13:40:22 "else"
2018/06/19 13:40:22 "endif"
2018/06/19 13:40:22 "define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\ndefine SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\""
2018/06/19 13:40:22 " end: func_emit_cwrapperexe_src"
2018/06/19 13:40:22 " func_win32_import_lib_p ARG\n True if ARG is an import lib, as indicated by $file_magic_cmd"
2018/06/19 13:40:22 "\" -gt 0; do"
2018/06/19 13:40:22 " If the previous option needs an argument, assign it."
2018/06/19 13:40:22 " Add the symbol object into the linking commands."
2018/06/19 13:40:22 " We handle these cases below."
2018/06/19 13:40:22 " this is fixed later"
2018/06/19 13:40:22 " Clang does not use LLVM to link, so we can simply discard any\n '-mllvm $arg' options when doing the link step."
2018/06/19 13:40:22 "\t      func_append moreargs \" $fil\""
2018/06/19 13:40:22 " A libtool-controlled object."
2018/06/19 13:40:22 " Check to see that this really is a libtool object."
2018/06/19 13:40:22 " Read the .lo file"
2018/06/19 13:40:22 " Extract subdirectory from the argument."
2018/06/19 13:40:22 " Prepend the subdirectory the object is found in."
2018/06/19 13:40:22 " If libtool objects are unsupported, then we need to preload."
2018/06/19 13:40:22 " CHECK ME:  I think I busted this.  -Ossama"
2018/06/19 13:40:22 " Preload the old-style object."
2018/06/19 13:40:22 " A PIC object."
2018/06/19 13:40:22 " Non-PIC object."
2018/06/19 13:40:22 " Prepend the subdirectory the object is found in."
2018/06/19 13:40:22 " A standard non-PIC object"
2018/06/19 13:40:22 " If the PIC object exists, use it instead.\n $xdir was prepended to $pic_object above."
2018/06/19 13:40:22 " Only an error if not doing a dry-run."
2018/06/19 13:40:22 " Extract subdirectory from the argument."
2018/06/19 13:40:22 " We need an absolute path."
2018/06/19 13:40:22 " test -n \"$prev\""
2018/06/19 13:40:22 " See comment for -static flag below, for more details."
2018/06/19 13:40:22 " FIXME: remove this flag sometime in the future."
2018/06/19 13:40:22 " The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n so, if we see these flags be careful not to treat them like -L"
2018/06/19 13:40:22 " We need an absolute path."
2018/06/19 13:40:22 " Will only happen for absolute or sysroot arguments"
2018/06/19 13:40:22 " Preserve sysroot, but never include relative directories"
2018/06/19 13:40:22 " These systems don't actually have a C or math library (as such)"
2018/06/19 13:40:22 " These systems don't actually have a C library (as such)"
2018/06/19 13:40:22 " Do not include libc due to us having libc/libc_r."
2018/06/19 13:40:22 " Rhapsody C and math libraries are in the System framework"
2018/06/19 13:40:22 " Causes problems with __ctype"
2018/06/19 13:40:22 " Compiler inserts libc in the correct place for threads to work"
2018/06/19 13:40:22 " Do not include libc_r directly, use -pthread flag."
2018/06/19 13:40:22 " Tru64 UNIX uses -model [arg] to determine the layout of C++\n classes, name mangling, and exception handling.\n Darwin uses the -arch flag to determine output architecture."
2018/06/19 13:40:22 " The PATH hackery in wrapper scripts is required on Windows\n and Darwin in order for the loader to find any dlls it needs."
2018/06/19 13:40:22 " We need an absolute path."
2018/06/19 13:40:22 " The effects of -shared are defined in a previous loop."
2018/06/19 13:40:22 " The effects of -static are defined in a previous loop.\n We used to do the same as -all-static on platforms that\n didn't have a PIC flag, but the assumption that the effects\n would be equivalent was wrong.  It would break on at least\n Digital Unix and AIX."
2018/06/19 13:40:22 " -msg_* for osf cc"
2018/06/19 13:40:22 " Flags to be passed through unchanged, with rationale:\n -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n -r[0-9][0-9]*        specify processor for the SGI compiler\n -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n +DA*, +DD*           enable 64-bit mode for the HP compiler\n -q*                  compiler args for the IBM compiler\n -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n -F/path              path to uninstalled frameworks, gcc on darwin\n -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n -fstack-protector*   stack protector flags for GCC\n @file                GCC response files\n -tp=*                Portland pgcc target processor selection\n --sysroot=*          for sysroot support\n -O*, -g*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n -stdlib=*            select c++ std lib with clang"
2018/06/19 13:40:22 " OS/2 uses -Zxxx to specify OS/2-specific options"
2018/06/19 13:40:22 " Otherwise treat like 'Some other compiler flag' below"
2018/06/19 13:40:22 " Some other compiler flag."
2018/06/19 13:40:22 " A standard object."
2018/06/19 13:40:22 " A libtool-controlled object."
2018/06/19 13:40:22 " Check to see that this really is a libtool object."
2018/06/19 13:40:22 " Read the .lo file"
2018/06/19 13:40:22 " Extract subdirectory from the argument."
2018/06/19 13:40:22 " Prepend the subdirectory the object is found in."
2018/06/19 13:40:22 " If libtool objects are unsupported, then we need to preload."
2018/06/19 13:40:22 " CHECK ME:  I think I busted this.  -Ossama"
2018/06/19 13:40:22 " Preload the old-style object."
2018/06/19 13:40:22 " A PIC object."
2018/06/19 13:40:22 " Non-PIC object."
2018/06/19 13:40:22 " Prepend the subdirectory the object is found in."
2018/06/19 13:40:22 " A standard non-PIC object"
2018/06/19 13:40:22 " If the PIC object exists, use it instead.\n $xdir was prepended to $pic_object above."
2018/06/19 13:40:22 " Only an error if not doing a dry-run."
2018/06/19 13:40:22 " Extract subdirectory from the argument."
2018/06/19 13:40:22 " An archive."
2018/06/19 13:40:22 " A libtool-controlled library."
2018/06/19 13:40:22 " This library was specified with -dlopen."
2018/06/19 13:40:22 " The library was specified with -dlpreopen."
2018/06/19 13:40:22 " Some other compiler argument."
2018/06/19 13:40:22 " Unknown arguments in both finalize_command and compile_command need\n to be aesthetically quoted because they are evaled later."
2018/06/19 13:40:22 " arg"
2018/06/19 13:40:22 " Now actually substitute the argument into the commands."
2018/06/19 13:40:22 " argument parsing loop"
2018/06/19 13:40:22 " Create the object directory."
2018/06/19 13:40:22 " Determine the type of output"
2018/06/19 13:40:22 " Anything else should be a program."
2018/06/19 13:40:22 " Find all interdependent deplibs by searching for libraries\n that are linked more than once (e.g. -la -lb -la)"
2018/06/19 13:40:22 " Compute libraries that are listed more than once in $predeps\n $postdeps and mark them as special (i.e., whose duplicates are\n not to be eliminated)."
2018/06/19 13:40:22 " whether we're linking any uninstalled libtool libraries\n not-installed libtool libraries\n paths that contain not-installed libtool libraries"
2018/06/19 13:40:22 " The preopen pass in lib mode reverses $deplibs; put it back here\n so that -L comes before libs that need it for instance..."
2018/06/19 13:40:22 "# FIXME: Find the place where the list is rebuilt in the wrong\n#        order, and fix it there properly"
2018/06/19 13:40:22 " Collect and forward deplibs of preopened libtool libs"
2018/06/19 13:40:22 " Ignore non-libtool-libs"
2018/06/19 13:40:22 " Collect preopened libtool deplibs, except any this library\n has declared as weak libs"
2018/06/19 13:40:22 " Collect dlpreopened libraries"
2018/06/19 13:40:22 " Search the libtool library"
2018/06/19 13:40:22 " deplib is a libtool library\n If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n We need to do some special things here, and not later."
2018/06/19 13:40:22 " only static version available"
2018/06/19 13:40:22 " deplib doesn't seem to be a libtool library"
2018/06/19 13:40:22 " -l"
2018/06/19 13:40:22 " linkmode"
2018/06/19 13:40:22 " -L"
2018/06/19 13:40:22 " Make sure the xrpath contains only unique directories."
2018/06/19 13:40:22 " Linking convenience modules into shared libraries is allowed,\n but linking other static libraries is non-portable."
2018/06/19 13:40:22 " linkmode\n *.$libext"
2018/06/19 13:40:22 " If there is no dlopen support or we're linking statically,\n we need to preload."
2018/06/19 13:40:22 " case $deplib"
2018/06/19 13:40:22 " Check to see that this really is a libtool archive."
2018/06/19 13:40:22 " If the library was installed with an old release of libtool,\n it will not redefine variables installed, or shouldnotlink"
2018/06/19 13:40:22 " Read the .la file"
2018/06/19 13:40:22 " Convert \"-framework foo\" to \"foo.ltframework\""
2018/06/19 13:40:22 " Only check for convenience libraries"
2018/06/19 13:40:22 " It is a libtool convenience library, so add in its objects."
2018/06/19 13:40:22 " $pass = conv"
2018/06/19 13:40:22 " Get the name of the library we link against."
2018/06/19 13:40:22 " This library was specified with -dlopen."
2018/06/19 13:40:22 " If there is no dlname, no dlopen support or we're linking\n statically, we need to preload.  We also need to preload any\n dependent libraries so libltdl's deplib preloader doesn't\n bomb out in the load deplibs phase."
2018/06/19 13:40:22 " $pass = dlopen"
2018/06/19 13:40:22 " We need an absolute path."
2018/06/19 13:40:22 " Find the relevant object directory and library name."
2018/06/19 13:40:22 " Remove this search path later"
2018/06/19 13:40:22 " Remove this search path later"
2018/06/19 13:40:22 " $installed = yes"
2018/06/19 13:40:22 " This library was specified with -dlpreopen."
2018/06/19 13:40:22 " special handling for platforms with PE-DLLs."
2018/06/19 13:40:22 " Linker will automatically link against shared library if both\n static and shared are present.  Therefore, ensure we extract\n symbols from the import library if a shared library is present\n (otherwise, the dlopen module name will be incorrect).  We do\n this by putting the import library name into $newdlprefiles.\n We recover the dlopen module name by 'saving' the la file\n name in a special purpose variable, and (later) extracting the\n dlname from the la file."
2018/06/19 13:40:22 " Keep a list of preopened convenience libraries to check\n that they are being used correctly in the link pass."
2018/06/19 13:40:22 " Prefer using a static library (so that no silly _DYNAMIC symbols\n are required to link)."
2018/06/19 13:40:22 " Keep a list of preopened convenience libraries to check\n that they are being used correctly in the link pass."
2018/06/19 13:40:22 " Otherwise, use the dlname, so that lt_dlopen finds it."
2018/06/19 13:40:22 " $pass = dlpreopen"
2018/06/19 13:40:22 " Link the convenience library"
2018/06/19 13:40:22 " used for prog,scan pass"
2018/06/19 13:40:22 " Need to link against all dependency_libs?"
2018/06/19 13:40:22 " Need to hardcode shared library paths\n or/and link against static libraries"
2018/06/19 13:40:22 " for deplib"
2018/06/19 13:40:22 " $linkmode = prog..."
2018/06/19 13:40:22 " We need to hardcode the library path"
2018/06/19 13:40:22 " Make sure the rpath contains only unique directories."
2018/06/19 13:40:22 " Hardcode the library path.\n Skip directories that are in the system default run-time\n search path."
2018/06/19 13:40:22 " $linkmode,$pass = prog,link..."
2018/06/19 13:40:22 " We only need to search for static libraries"
2018/06/19 13:40:22 " Whether the deplib will be linked statically"
2018/06/19 13:40:22 " No point in relinking DLLs because paths are not encoded"
2018/06/19 13:40:22 " This is a shared library"
2018/06/19 13:40:22 " Warn about portability, can't link against -module's on some\n systems (darwin).  Don't bleat about dlopened modules though!"
2018/06/19 13:40:22 " Hardcode the library path.\n Skip directories that are in the system default run-time\n search path."
2018/06/19 13:40:22 " figure out the soname"
2018/06/19 13:40:22 " use dlname if we got it. it's perfectly good, no?"
2018/06/19 13:40:22 " bleh windows"
2018/06/19 13:40:22 " Create $newlib"
2018/06/19 13:40:22 " make sure the library variables are pointing to the new library"
2018/06/19 13:40:22 " test -n \"$old_archive_from_expsyms_cmds\""
2018/06/19 13:40:22 " if the lib is a (non-dlopened) module then we cannot\n link against it, someone is ignoring the earlier warnings"
2018/06/19 13:40:22 " Try looking first in the location we're being installed to."
2018/06/19 13:40:22 " Finalize command for both is simple: just hardcode it."
2018/06/19 13:40:22 " We cannot seem to hardcode it, guess we'll fake it."
2018/06/19 13:40:22 " Try looking first in the location we're being installed to."
2018/06/19 13:40:22 " Here we assume that one of hardcode_direct or hardcode_minus_L\n is not unsupported.  This is valid on all known static and\n shared platforms."
2018/06/19 13:40:22 " Not a shared library"
2018/06/19 13:40:22 " We're trying link a shared library against a static one\n but the system doesn't support it."
2018/06/19 13:40:22 " Just print a warning and add the library to dependency_libs so\n that the program can be linked against the static library."
2018/06/19 13:40:22 " link shared/static library?"
2018/06/19 13:40:22 " Extract -R from dependency_libs"
2018/06/19 13:40:22 " Link against this library"
2018/06/19 13:40:22 " ... and its dependency_libs"
2018/06/19 13:40:22 " Add the search paths of all dependency libraries"
2018/06/19 13:40:22 " We need an absolute path."
2018/06/19 13:40:22 " link_all_deplibs != no\n linkmode = lib\n for deplib in $libs"
2018/06/19 13:40:22 " Link the dlpreopened libraries before other libraries"
2018/06/19 13:40:22 " Make sure lib_search_path contains only unique directories."
2018/06/19 13:40:22 " Add libraries to $var in reverse order"
2018/06/19 13:40:22 " On Darwin other compilers"
2018/06/19 13:40:22 " Add in all the interfaces that we are compatible with."
2018/06/19 13:40:22 " Before this point, $major must not contain '.'."
2018/06/19 13:40:22 " correct to gnu/linux during the next big refactor"
2018/06/19 13:40:22 " Add in all the interfaces that we are compatible with."
2018/06/19 13:40:22 " Make executables depend on our current version."
2018/06/19 13:40:22 " Use '-' rather than '.', since we only want one\n extension on DOS 8.3 file systems."
2018/06/19 13:40:22 " Clear the version info if we defaulted, and they specified a release."
2018/06/19 13:40:22 " we can't check for \"0.0\" in archive_cmds due to quoting\n problems, so we reset it completely"
2018/06/19 13:40:22 " Remove version info from name if versioning should be avoided"
2018/06/19 13:40:22 " Check to see if the archive will have undefined symbols."
2018/06/19 13:40:22 " Don't allow undefined symbols."
2018/06/19 13:40:22 " Remove our outputs, but don't remove object files since they\n may have been created when compiling PIC objects."
2018/06/19 13:40:22 " Now set the variables for building old libraries."
2018/06/19 13:40:22 " Transform .lo files to .o files."
2018/06/19 13:40:22 " Eliminate all temporary directories.\nfor path in $notinst_path; do\n\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\ndone"
2018/06/19 13:40:22 " If the user specified any rpath flags, then add them."
2018/06/19 13:40:22 " Make sure dlfiles contains only unique files that won't be dlpreopened"
2018/06/19 13:40:22 " Make sure dlprefiles contains only unique files"
2018/06/19 13:40:22 " these systems don't actually have a c library (as such)!"
2018/06/19 13:40:22 " Rhapsody C library is in the System framework"
2018/06/19 13:40:22 " Don't link with libc until the a.out ld.so is fixed."
2018/06/19 13:40:22 " Do not include libc due to us having libc/libc_r."
2018/06/19 13:40:22 " Causes problems with __ctype"
2018/06/19 13:40:22 " Compiler inserts libc in the correct place for threads to work"
2018/06/19 13:40:22 " Add libc to deplibs on all other systems if necessary."
2018/06/19 13:40:22 " Transform deplibs into only deplibs that can be linked in shared."
2018/06/19 13:40:22 " I'm not sure if I'm treating the release correctly.  I think\n release should show up in the -l (ie -lgmp5) so we don't want to\n add it in twice.  Is that correct?"
2018/06/19 13:40:22 " Don't check for shared/static.  Everything works.\n This might be a little naive.  We might want to check\n whether the library exists or not.  But this is on\n osf3 & osf4 and I'm not really sure... Just\n implementing what was already the behavior."
2018/06/19 13:40:22 " This code stresses the \"libraries are programs\" paradigm to its\n limits. Maybe even breaks it.  We compile a program, linking it\n against the deplibs as a proxy for the library.  Then we can check\n whether they linked in statically or dynamically with ldd."
2018/06/19 13:40:22 " Error occurred in the first compile.  Let's try to salvage\n the situation: Compile a separate program for each library."
2018/06/19 13:40:22 " Follow soft links."
2018/06/19 13:40:22 " The statement above tries to avoid entering an\n endless loop below, in case of cyclic links.\n We might still enter an endless loop, since a link\n loop can be closed while we follow links,\n but so what?"
2018/06/19 13:40:22 " see symlink-check above in file_magic test"
2018/06/19 13:40:22 " Add a -L argument."
2018/06/19 13:40:22 " Gone through all deplibs."
2018/06/19 13:40:22 " can't use Xsed below, because $i might contain '/'"
2018/06/19 13:40:22 " On Rhapsody replace the C library with the System framework"
2018/06/19 13:40:22 " Done checking deplibs!"
2018/06/19 13:40:22 " Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\""
2018/06/19 13:40:22 " move library search paths that coincide with paths to not yet\n installed libraries to the beginning of the library search list"
2018/06/19 13:40:22 " All the library-specific variables (install_libdir is set above)."
2018/06/19 13:40:22 " Test again, we may have decided not to build it any more"
2018/06/19 13:40:22 " Remove $wl instances when linking with ld.\n FIXME: should test the right _cmds variable."
2018/06/19 13:40:22 " Hardcode the library paths"
2018/06/19 13:40:22 " Just accumulate the unique libdirs."
2018/06/19 13:40:22 " We should set the runpath_var."
2018/06/19 13:40:22 " Get the real and link names of the library."
2018/06/19 13:40:22 " the list of exported symbols\" if statement, so the\n include_expsyms logic still works."
2018/06/19 13:40:22 " Prepare the list of exported symbols"
2018/06/19 13:40:22 " Take the normal branch if the nm_file_list_spec branch\n doesn't work or if tool conversion is not needed."
2018/06/19 13:40:22 " Append the command to create the export file."
2018/06/19 13:40:22 " the extraction."
2018/06/19 13:40:22 " if reload_cmds runs $LD directly, get rid of -Wl from\n whole_archive_flag_spec and hope we can get by with turning comma\n into space."
2018/06/19 13:40:22 " But is supposedly fixed on 10.4 or later (yay!)."
2018/06/19 13:40:22 " Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\""
2018/06/19 13:40:22 " move library search paths that coincide with paths to not yet\n installed libraries to the beginning of the library search list"
2018/06/19 13:40:22 " If the user specified any rpath flags, then add them."
2018/06/19 13:40:22 " This is the magic to use -rpath."
2018/06/19 13:40:22 " Now hardcode the library paths"
2018/06/19 13:40:22 " Just accumulate the unique libdirs."
2018/06/19 13:40:22 " We should set the runpath_var."
2018/06/19 13:40:22 " We should set the runpath_var."
2018/06/19 13:40:22 " We don't need to create a wrapper script."
2018/06/19 13:40:22 " Replace the output file specification."
2018/06/19 13:40:22 " test for cygwin because mv fails w/o .exe extensions"
2018/06/19 13:40:22 " The wrapper executable is built using the $host compiler,\n because it contains $host paths and files. If cross-\n compiling, it, like the target executable, must be\n executed on the $host or under an emulation environment."
2018/06/19 13:40:22 " Now, create the wrapper script for func_source use:"
2018/06/19 13:40:22 " note: this script will not be executed, so do not chmod."
2018/06/19 13:40:22 " See if we need to build an old-fashioned archive."
2018/06/19 13:40:22 " Do each command in the archive commands."
2018/06/19 13:40:22 " Add any objects from preloaded convenience libraries"
2018/06/19 13:40:22 " POSIX demands no paths to be encoded in archives.  We have\n to avoid creating archives with duplicate basenames if we\n might have to extract them afterwards, e.g., when creating a\n static archive out of a convenience library, or when linking\n the entirety of a libtool archive into another (currently\n not supported by libtool)."
2018/06/19 13:40:22 " Make sure we don't pick an alternate name that also\n overlaps."
2018/06/19 13:40:22 " Quote the link command for shipping."
2018/06/19 13:40:22 " Only create the output if not a dry run."
2018/06/19 13:40:22 " Replace all uninstalled libtool libraries with the installed ones"
2018/06/19 13:40:22 " Only pass preopened files to the pseudo-archive (for\n eventual linking with the app. that links it) if we\n didn't already link the preopened objects directly into\n the library:"
2018/06/19 13:40:22 " place dlname in correct position for cygwin\n In fact, it would be nice if we could use this code for all target\n systems that can't hard-code library paths into their executables\n and that have no shared library path variable independent of PATH,\n but it turns out we can't easily determine that from inspecting\n libtool variables, so we have to hard-code the OSs to which it\n applies here; at the moment, that means platforms that use the PE\n object format with DLL files.  See the long comment at the top of\n tests/bindir.at for full details."
2018/06/19 13:40:22 " If a -bindir argument was supplied, place the dll there."
2018/06/19 13:40:22 " Otherwise fall back on heuristic."
2018/06/19 13:40:22 " Do a symbolic link so that the libtool archive can be found in\n LD_LIBRARY_PATH before the program is installed."
2018/06/19 13:40:22 " func_mode_uninstall arg..."
2018/06/19 13:40:22 " This variable tells wrapper scripts just to set variables rather\n than running their programs."
2018/06/19 13:40:22 " Remember odir for removal later, being careful to avoid duplicates"
2018/06/19 13:40:22 " Don't error if the file doesn't exist and rm -f was used."
2018/06/19 13:40:22 " Possibly a libtool archive, so verify it."
2018/06/19 13:40:22 " Delete the libtool libraries and symlinks."
2018/06/19 13:40:22 " Do each command in the postuninstall commands."
2018/06/19 13:40:22 " Do each command in the old_postuninstall commands."
2018/06/19 13:40:22 " FIXME: should reinstall the best remaining shared library."
2018/06/19 13:40:22 " Possibly a libtool object, so verify it."
2018/06/19 13:40:22 " Read the .lo file"
2018/06/19 13:40:22 " Add PIC object to the list of files to remove."
2018/06/19 13:40:22 " Add non-PIC object to the list of files to remove."
2018/06/19 13:40:22 " $file with .exe has already been added to rmfiles,\n add $file without .exe"
2018/06/19 13:40:22 " Do a test to see if this is a libtool program."
2018/06/19 13:40:22 " note $name still contains .exe if it was in $file originally\n as does the version of $file that was added into $rmfiles"
2018/06/19 13:40:22 " Try to remove the $objdir's in the directories where we deleted files"
2018/06/19 13:40:22 " The TAGs below are defined such that we never get into a situation\n where we disable both kinds of libraries.  Given conflicting\n choices, we go for a static library, that is the most portable,\n since we can't tell whether shared libraries were disabled because\n the user asked for that or because the platform doesn't support\n them.  This is particularly important on AIX, because we don't\n support having both static and shared libraries enabled at the same\n time on that platform, so we default to a shared-only configuration.\n If a disable-shared tag is given, we'll fallback to a static-only\n configuration.  But we'll never go from static-only to shared-only."
2018/06/19 13:40:22 " ### BEGIN LIBTOOL TAG CONFIG: disable-shared"
2018/06/19 13:40:22 " ### END LIBTOOL TAG CONFIG: disable-shared"
2018/06/19 13:40:22 " ### BEGIN LIBTOOL TAG CONFIG: disable-static"
2018/06/19 13:40:22 " ### END LIBTOOL TAG CONFIG: disable-static"
2018/06/19 13:40:22 " Local Variables:\n mode:shell-script\n sh-indentation:2\n End:"
2018/06/19 13:40:22 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/ltmain.sh": 300.516698ms
2018/06/19 13:40:22 Couldn't classify license(s)
2018/06/19 13:40:22 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/png.c
2018/06/19 13:40:22 detected language: 4
2018/06/19 13:40:22 " png.c - location for general purpose libpng functions\n *\n * Last changed in libpng 1.6.33 [September 28, 2017]\n * Copyright (c) 1998-2002,2004,2006-2017 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:40:23 " Generate a compiler error if there is an old png.h in the search path. "
2018/06/19 13:40:23 " The version tests may need to be added to, but the problem warning has\n * consistently been fixed in GCC versions which obtain wide-spread release.\n * The problem is that many versions of GCC rearrange comparison expressions in\n * the optimizer in such a way that the results of the comparison will change\n * if signed integer overflow occurs.  Such comparisons are not permitted in\n * ANSI C90, however GCC isn't clever enough to work out that that do not occur\n * below in png_ascii_from_fp and png_muldiv, so it produces a warning with\n * -Wextra.  Unfortunately this is highly dependent on the optimizer and the\n * machine architecture so the warning comes and goes unpredictably and is\n * impossible to \"fix\", even were that a good idea.\n "
2018/06/19 13:40:23 " GNU 7.1.x \n GNU "
2018/06/19 13:40:23 " Tells libpng that we have already handled the first \"num_bytes\" bytes\n * of the PNG file signature.  If the PNG data is embedded into another\n * stream we can set num_bytes = 8 so that libpng will not attempt to read\n * or write any of the magic bytes before it starts on the IHDR.\n "
2018/06/19 13:40:23 " Checks whether the supplied bytes match the PNG signature.  We allow\n * checking less than the full 8-byte signature so that those apps that\n * already read the first few bytes of a file to determine the file type\n * can simply check the remaining bytes for extra assurance.  Returns\n * an integer less than, equal to, or greater than zero if sig is found,\n * respectively, to be less than, to match, or be greater than the correct\n * PNG signature (this is the same behavior as strcmp, memcmp, etc).\n "
2018/06/19 13:40:23 " READ "
2018/06/19 13:40:23 " Function to allocate memory for zlib \n PRIVATE "
2018/06/19 13:40:23 " Function to free memory for zlib \n PRIVATE "
2018/06/19 13:40:23 " Reset the CRC variable to 32 bits of 1's.  Care must be taken\n * in case CRC is > 32 bits to leave the top bits 0.\n "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " The cast is safe because the crc is a 32-bit value. "
2018/06/19 13:40:23 " Calculate the CRC over a section of data.  We can only pass as\n * much data to this routine as the largest single buffer size.  We\n * also check that this data will actually be used before going to the\n * trouble of calculating it.\n "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " critical "
2018/06/19 13:40:23 " 'uLong' is defined in zlib.h as unsigned long; this means that on some\n    * systems it is a 64-bit value.  crc32, however, returns 32 bits so the\n    * following cast is safe.  'uInt' may be no more than 16 bits, so it is\n    * necessary to perform a loop here.\n    "
2018/06/19 13:40:23 " Should never issue a warning "
2018/06/19 13:40:23 " evil, but safe "
2018/06/19 13:40:23 " The following should never issue compiler warnings; if they do the\n          * target system has characteristics that will probably violate other\n          * assumptions within the libpng code.\n          "
2018/06/19 13:40:23 " And the following is always safe because the crc is only 32 bits. "
2018/06/19 13:40:23 " Check a user supplied version number, called from both read and write\n * functions that create a png_struct.\n "
2018/06/19 13:40:23 " Libpng versions 1.0.0 and later are binary compatible if the version\n    * string matches through the second '.'; we must recompile any\n    * applications that use any older library version.\n    "
2018/06/19 13:40:23 " Success return. "
2018/06/19 13:40:23 " Generic function to create a png_struct for either read or write - this\n * contains the common initialization.\n "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " This temporary stack-allocated structure is used to provide a place to\n    * build enough context to allow the user provided memory allocator (if any)\n    * to be called.\n    "
2018/06/19 13:40:23 " Added at libpng-1.2.6 "
2018/06/19 13:40:23 " Added at libpng-1.2.43 and 1.4.0 "
2018/06/19 13:40:23 " Added at libpng-1.2.43 and 1.4.1, required only for read but exists\n       * in png_struct regardless.\n       "
2018/06/19 13:40:23 " The following two API calls simply set fields in png_struct, so it is safe\n    * to do them now even though error handling is not yet set up.\n    "
2018/06/19 13:40:23 " (*error_fn) can return control to the caller after the error_ptr is set,\n    * this will result in a memory leak unless the error_fn does something\n    * extremely sophisticated.  The design lacks merit but is implicit in the\n    * API.\n    "
2018/06/19 13:40:23 " Temporarily fake out the longjmp information until we have\n          * successfully completed this function.  This only works if we have\n          * setjmp() support compiled in, but it is safe - this stuff should\n          * never happen.\n          "
2018/06/19 13:40:23 "stack allocation"
2018/06/19 13:40:23 " Call the general version checker (shared with read and write code):\n          "
2018/06/19 13:40:23 " png_ptr->zstream holds a back-pointer to the png_struct, so\n                * this can only be done now:\n                "
2018/06/19 13:40:23 " Eliminate the local error handling: "
2018/06/19 13:40:23 " This is the successful return point "
2018/06/19 13:40:23 " A longjmp because of a bug in the application storage allocator or a\n    * simple failure to allocate the png_struct.\n    "
2018/06/19 13:40:23 " Allocate the memory for an info_struct for the application. "
2018/06/19 13:40:23 " Use the internal API that does not (or at least should not) error out, so\n    * that this call always returns ok.  The application typically sets up the\n    * error handling *after* creating the info_struct because this is the way it\n    * has always been done in 'example.c'.\n    "
2018/06/19 13:40:23 " This function frees the memory associated with a single info struct.\n * Normally, one would use either png_destroy_read_struct() or\n * png_destroy_write_struct() to free an info struct, but this may be\n * useful for some applications.  From libpng 1.6.0 this function is also used\n * internally to implement the png_info release part of the 'struct' destroy\n * APIs.  This ensures that all possible approaches free the same data (all of\n * it).\n "
2018/06/19 13:40:23 " Do this first in case of an error below; if the app implements its own\n       * memory management this can lead to png_free calling png_error, which\n       * will abort this routine and return control to the app error handler.\n       * An infinite loop may result if it then tries to free the same info\n       * ptr.\n       "
2018/06/19 13:40:23 " Initialize the info structure.  This is now an internal function (0.89)\n * and applications using it are urged to use png_create_info_struct()\n * instead.  Use deprecated in 1.6.0, internal use removed (used internally it\n * is just a memset).\n *\n * NOTE: it is almost inconceivable that this API is used because it bypasses\n * the user-memory mechanism and the user error handling/warning mechanisms in\n * those cases where it does anything other than a memset.\n "
2018/06/19 13:40:23 " The following line is why this API should not be used: "
2018/06/19 13:40:23 " Set everything to 0 "
2018/06/19 13:40:23 " The following API is not called internally "
2018/06/19 13:40:23 " Free text item num or (if num == -1) all text items "
2018/06/19 13:40:23 " Free any tRNS entry "
2018/06/19 13:40:23 " Free any sCAL entry "
2018/06/19 13:40:23 " Free any pCAL entry "
2018/06/19 13:40:23 " Free any profile entry "
2018/06/19 13:40:23 " Free a given sPLT entry, or (if num == -1) all sPLT entries "
2018/06/19 13:40:23 " Free any eXIf entry "
2018/06/19 13:40:23 " Free any hIST entry "
2018/06/19 13:40:23 " Free any PLTE entry that was internally allocated "
2018/06/19 13:40:23 " Free any image bits attached to the info structure "
2018/06/19 13:40:23 " READ || WRITE "
2018/06/19 13:40:23 " This function returns a pointer to the io_ptr associated with the user\n * functions.  The application should free any memory associated with this\n * pointer before png_write_destroy() or png_read_destroy() are called.\n "
2018/06/19 13:40:23 " Initialize the default input/output functions for the PNG file.  If you\n * use your own read or write routines, you can call either png_set_read_fn()\n * or png_set_write_fn() instead of png_init_io().  If you have defined\n * PNG_NO_STDIO or otherwise disabled PNG_STDIO_SUPPORTED, you must use a\n * function of your own because \"FILE *\" isn't necessarily available.\n "
2018/06/19 13:40:23 " PNG signed integers are saved in 32-bit 2's complement format.  ANSI C-90\n * defines a cast of a signed integer to an unsigned integer either to preserve\n * the value, if it is positive, or to calculate:\n *\n *     (UNSIGNED_MAX+1) + integer\n *\n * Where UNSIGNED_MAX is the appropriate maximum unsigned value, so when the\n * negative integral value is added the result will be an unsigned value\n * correspnding to the 2's complement representation.\n "
2018/06/19 13:40:23 " Convert the supplied time into an RFC 1123 string suitable for use in\n * a \"Creation Time\" or other text-based time string.\n "
2018/06/19 13:40:23 " RFC1123 limitation "
2018/06/19 13:40:23 " enough for a four-digit year "
2018/06/19 13:40:23 " This reliably terminates the buffer "
2018/06/19 13:40:23 " To do: remove the following from libpng-1.7 \n Original API that uses a private buffer in png_struct.\n * Deprecated because it causes png_struct to carry a spurious temporary\n * buffer (png_struct::time_buffer), better to have the caller pass this in.\n "
2018/06/19 13:40:23 " The only failure above if png_ptr != NULL is from an invalid ptime "
2018/06/19 13:40:23 " LIBPNG_VER < 10700 \n TIME_RFC1123 "
2018/06/19 13:40:23 " READ || WRITE "
2018/06/19 13:40:23 " Silence compiler warning about unused png_ptr "
2018/06/19 13:40:23 " The following return the library version as a short string in the\n * format 1.0.0 through 99.99.99zz.  To get the version of *.h files\n * used with your application, print out PNG_LIBPNG_VER_STRING, which\n * is defined in png.h.\n * Note: now there is no difference between png_get_libpng_ver() and\n * png_get_header_ver().  Due to the version_nn_nn_nn typedef guard,\n * it is guaranteed that png.c uses the correct version of png.h.\n "
2018/06/19 13:40:23 " Version of *.c files used when building libpng "
2018/06/19 13:40:23 " Version of *.h files used when building libpng \n Silence compiler warning about unused png_ptr "
2018/06/19 13:40:23 " Returns longer string containing both version and date \n Silence compiler warning about unused png_ptr "
2018/06/19 13:40:23 " NOTE: this routine is not used internally! \n Build a grayscale palette.  Palette is assumed to be 1 << bit_depth\n * large of png_color.  This lets grayscale images be treated as\n * paletted.  Most useful for gamma correction and simplification\n * of code.  This API is not used internally.\n "
2018/06/19 13:40:23 " Check chunk_name and return \"keep\" value if it's on the list, else 0 "
2018/06/19 13:40:23 " beyond end "
2018/06/19 13:40:23 " The code is the fifth byte after each four byte string.  Historically this\n    * code was always searched from the end of the list, this is no longer\n    * necessary because the 'set' routine handles duplicate entries correcty.\n    "
2018/06/19 13:40:23 " num_chunk_list > 0, so at least one "
2018/06/19 13:40:23 " This means that known chunks should be processed and unknown chunks should\n    * be handled according to the value of png_ptr->unknown_default; this can be\n    * confusing because, as a result, there are two levels of defaulting for\n    * unknown chunks.\n    "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " READ_UNKNOWN_CHUNKS || HANDLE_AS_UNKNOWN \n SET_UNKNOWN_CHUNKS "
2018/06/19 13:40:23 " This function, added to libpng-1.0.6g, is untested. "
2018/06/19 13:40:23 " WARNING: this resets the window bits to the maximum! "
2018/06/19 13:40:23 " READ "
2018/06/19 13:40:23 " This function was added to libpng-1.0.7 "
2018/06/19 13:40:23 " Version of *.c files used when building libpng "
2018/06/19 13:40:23 " Ensure that png_ptr->zstream.msg holds some appropriate error message string.\n * If it doesn't 'ret' is used to set it to something appropriate, even in cases\n * like Z_OK or Z_STREAM_END where the error code is apparently a success code.\n "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " Translate 'ret' into an appropriate error string, priority is given to the\n    * one in zstream if set.  This always returns a string, even in cases like\n    * Z_OK or Z_STREAM_END where the error code is a success code.\n    "
2018/06/19 13:40:23 " Normal exit "
2018/06/19 13:40:23 " This means the deflate stream did not have a dictionary; this\n          * indicates a bogus PNG.\n          "
2018/06/19 13:40:23 " gz APIs only: should not happen "
2018/06/19 13:40:23 " internal libpng error "
2018/06/19 13:40:23 " End of input or output; not a problem if the caller is doing\n          * incremental read or write.\n          "
2018/06/19 13:40:23 " Compile errors here mean that zlib now uses the value co-opted in\n          * pngpriv.h for PNG_UNEXPECTED_ZLIB_RETURN; update the switch above\n          * and change pngpriv.h.  Note that this message is \"... return\",\n          * whereas the default/Z_OK one is \"... return code\".\n          "
2018/06/19 13:40:23 " png_convert_size: a PNGAPI but no longer in png.h, so deleted\n * at libpng 1.5.5!\n "
2018/06/19 13:40:23 " Added at libpng version 1.2.34 and 1.4.0 (moved from pngset.c) \n always set if COLORSPACE "
2018/06/19 13:40:23 " This is called to check a new gamma value against an existing one.  The\n    * routine returns false if the new gamma value should not be written.\n    *\n    * 'from' says where the new gamma value comes from:\n    *\n    *    0: the new gamma value is the libpng estimate for an ICC profile\n    *    1: the new gamma value comes from a gAMA chunk\n    *    2: the new gamma value comes from an sRGB chunk\n    "
2018/06/19 13:40:23 " Either this is an sRGB image, in which case the calculated gamma\n       * approximation should match, or this is an image with a profile and the\n       * value libpng calculates for the gamma of the profile does not match the\n       * value recorded in the file.  The former, sRGB, case is an error, the\n       * latter is just a warning.\n       "
2018/06/19 13:40:23 " Do not overwrite an sRGB value "
2018/06/19 13:40:23 " sRGB tag not involved "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " Changed in libpng-1.5.4 to limit the values to ensure overflow can't\n    * occur.  Since the fixed point representation is asymetrical it is\n    * possible for 1/gamma to overflow the limit of 21474 and this means the\n    * gamma value must be at least 5/100000 and hence at most 20000.0.  For\n    * safety the limits here are a little narrower.  The values are 0.00016 to\n    * 6250.0, which are truly ridiculous gamma values (and will produce\n    * displays that are all black or all white.)\n    *\n    * In 1.6.0 this test replaces the ones in pngrutil.c, in the gAMA chunk\n    * handling code, which only required the value to be >0.\n    "
2018/06/19 13:40:23 " Allow the application to set the gamma value more than once "
2018/06/19 13:40:23 " Do nothing if the colorspace is already invalid "
2018/06/19 13:40:23 "from gAMA"
2018/06/19 13:40:23 " Store this gamma value. "
2018/06/19 13:40:23 " At present if the check_gamma test fails the gamma of the colorspace is\n       * not updated however the colorspace is not invalidated.  This\n       * corresponds to the case where the existing gamma comes from an sRGB\n       * chunk or profile.  An error message has already been output.\n       "
2018/06/19 13:40:23 " Error exit - errmsg has been set. "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " Everything is invalid "
2018/06/19 13:40:23 " Clean up the iCCP profile now if it won't be used. \nnot used"
2018/06/19 13:40:23 " Leave the INFO_iCCP flag set if the pngset.c code has already set\n       * it; this allows a PNG to contain a profile which matches sRGB and\n       * yet still have that profile retrievable by the application.\n       "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " reduce code size; check here not in the caller "
2018/06/19 13:40:23 " GAMMA "
2018/06/19 13:40:23 " Added at libpng-1.5.5 to support read and write of true CIEXYZ values for\n * cHRM, as opposed to using chromaticities.  These internal APIs return\n * non-zero on a parameter error.  The X, Y and Z values are required to be\n * positive and less than 1.0.\n "
2018/06/19 13:40:23 " The reference white is simply the sum of the end-point (X,Y,Z) vectors,\n    * thus:\n    "
2018/06/19 13:40:23 " Check xy and, implicitly, z.  Note that wide gamut color spaces typically\n    * have end points with 0 tristimulus values (these are impossible end\n    * points, but they are used to cover the possible colors).  We check\n    * xy->whitey against 5, not 0, to avoid a possible integer overflow.\n    "
2018/06/19 13:40:23 " The reverse calculation is more difficult because the original tristimulus\n    * value had 9 independent values (red,green,blue)x(X,Y,Z) however only 8\n    * derived values were recorded in the cHRM chunk;\n    * (red,green,blue,white)x(x,y).  This loses one degree of freedom and\n    * therefore an arbitrary ninth value has to be introduced to undo the\n    * original transformations.\n    *\n    * Think of the original end-points as points in (X,Y,Z) space.  The\n    * chromaticity values (c) have the property:\n    *\n    *           C\n    *   c = ---------\n    *       X + Y + Z\n    *\n    * For each c (x,y,z) from the corresponding original C (X,Y,Z).  Thus the\n    * three chromaticity values (x,y,z) for each end-point obey the\n    * relationship:\n    *\n    *   x + y + z = 1\n    *\n    * This describes the plane in (X,Y,Z) space that intersects each axis at the\n    * value 1.0; call this the chromaticity plane.  Thus the chromaticity\n    * calculation has scaled each end-point so that it is on the x+y+z=1 plane\n    * and chromaticity is the intersection of the vector from the origin to the\n    * (X,Y,Z) value with the chromaticity plane.\n    *\n    * To fully invert the chromaticity calculation we would need the three\n    * end-point scale factors, (red-scale, green-scale, blue-scale), but these\n    * were not recorded.  Instead we calculated the reference white (X,Y,Z) and\n    * recorded the chromaticity of this.  The reference white (X,Y,Z) would have\n    * given all three of the scale factors since:\n    *\n    *    color-C = color-c * color-scale\n    *    white-C = red-C + green-C + blue-C\n    *            = red-c*red-scale + green-c*green-scale + blue-c*blue-scale\n    *\n    * But cHRM records only white-x and white-y, so we have lost the white scale\n    * factor:\n    *\n    *    white-C = white-c*white-scale\n    *\n    * To handle this the inverse transformation makes an arbitrary assumption\n    * about white-scale:\n    *\n    *    Assume: white-Y = 1.0\n    *    Hence:  white-scale = 1/white-y\n    *    Or:     red-Y + green-Y + blue-Y = 1.0\n    *\n    * Notice the last statement of the assumption gives an equation in three of\n    * the nine values we want to calculate.  8 more equations come from the\n    * above routine as summarised at the top above (the chromaticity\n    * calculation):\n    *\n    *    Given: color-x = color-X / (color-X + color-Y + color-Z)\n    *    Hence: (color-x - 1)*color-X + color.x*color-Y + color.x*color-Z = 0\n    *\n    * This is 9 simultaneous equations in the 9 variables \"color-C\" and can be\n    * solved by Cramer's rule.  Cramer's rule requires calculating 10 9x9 matrix\n    * determinants, however this is not as bad as it seems because only 28 of\n    * the total of 90 terms in the various matrices are non-zero.  Nevertheless\n    * Cramer's rule is notoriously numerically unstable because the determinant\n    * calculation involves the difference of large, but similar, numbers.  It is\n    * difficult to be sure that the calculation is stable for real world values\n    * and it is certain that it becomes unstable where the end points are close\n    * together.\n    *\n    * So this code uses the perhaps slightly less optimal but more\n    * understandable and totally obvious approach of calculating color-scale.\n    *\n    * This algorithm depends on the precision in white-scale and that is\n    * (1/white-y), so we can immediately see that as white-y approaches 0 the\n    * accuracy inherent in the cHRM chunk drops off substantially.\n    *\n    * libpng arithmetic: a simple inversion of the above equations\n    * ------------------------------------------------------------\n    *\n    *    white_scale = 1/white-y\n    *    white-X = white-x * white-scale\n    *    white-Y = 1.0\n    *    white-Z = (1 - white-x - white-y) * white_scale\n    *\n    *    white-C = red-C + green-C + blue-C\n    *            = red-c*red-scale + green-c*green-scale + blue-c*blue-scale\n    *\n    * This gives us three equations in (red-scale,green-scale,blue-scale) where\n    * all the coefficients are now known:\n    *\n    *    red-x*red-scale + green-x*green-scale + blue-x*blue-scale\n    *       = white-x/white-y\n    *    red-y*red-scale + green-y*green-scale + blue-y*blue-scale = 1\n    *    red-z*red-scale + green-z*green-scale + blue-z*blue-scale\n    *       = (1 - white-x - white-y)/white-y\n    *\n    * In the last equation color-z is (1 - color-x - color-y) so we can add all\n    * three equations together to get an alternative third:\n    *\n    *    red-scale + green-scale + blue-scale = 1/white-y = white-scale\n    *\n    * So now we have a Cramer's rule solution where the determinants are just\n    * 3x3 - far more tractible.  Unfortunately 3x3 determinants still involve\n    * multiplication of three coefficients so we can't guarantee to avoid\n    * overflow in the libpng fixed point representation.  Using Cramer's rule in\n    * floating point is probably a good choice here, but it's not an option for\n    * fixed point.  Instead proceed to simplify the first two equations by\n    * eliminating what is likely to be the largest value, blue-scale:\n    *\n    *    blue-scale = white-scale - red-scale - green-scale\n    *\n    * Hence:\n    *\n    *    (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =\n    *                (white-x - blue-x)*white-scale\n    *\n    *    (red-y - blue-y)*red-scale + (green-y - blue-y)*green-scale =\n    *                1 - blue-y*white-scale\n    *\n    * And now we can trivially solve for (red-scale,green-scale):\n    *\n    *    green-scale =\n    *                (white-x - blue-x)*white-scale - (red-x - blue-x)*red-scale\n    *                -----------------------------------------------------------\n    *                                  green-x - blue-x\n    *\n    *    red-scale =\n    *                1 - blue-y*white-scale - (green-y - blue-y) * green-scale\n    *                ---------------------------------------------------------\n    *                                  red-y - blue-y\n    *\n    * Hence:\n    *\n    *    red-scale =\n    *          ( (green-x - blue-x) * (white-y - blue-y) -\n    *            (green-y - blue-y) * (white-x - blue-x) ) / white-y\n    * -------------------------------------------------------------------------\n    *  (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x)\n    *\n    *    green-scale =\n    *          ( (red-y - blue-y) * (white-x - blue-x) -\n    *            (red-x - blue-x) * (white-y - blue-y) ) / white-y\n    * -------------------------------------------------------------------------\n    *  (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x)\n    *\n    * Accuracy:\n    * The input values have 5 decimal digits of accuracy.  The values are all in\n    * the range 0 < value < 1, so simple products are in the same range but may\n    * need up to 10 decimal digits to preserve the original precision and avoid\n    * underflow.  Because we are using a 32-bit signed representation we cannot\n    * match this; the best is a little over 9 decimal digits, less than 10.\n    *\n    * The approach used here is to preserve the maximum precision within the\n    * signed representation.  Because the red-scale calculation above uses the\n    * difference between two products of values that must be in the range -1..+1\n    * it is sufficient to divide the product by 7; ceil(100,000/32767*2).  The\n    * factor is irrelevant in the calculation because it is applied to both\n    * numerator and denominator.\n    *\n    * Note that the values of the differences of the products of the\n    * chromaticities in the above equations tend to be small, for example for\n    * the sRGB chromaticities they are:\n    *\n    * red numerator:    -0.04751\n    * green numerator:  -0.08788\n    * denominator:      -0.2241 (without white-y multiplication)\n    *\n    *  The resultant Y coefficients from the chromaticities of some widely used\n    *  color space definitions are (to 15 decimal places):\n    *\n    *  sRGB\n    *    0.212639005871510 0.715168678767756 0.072192315360734\n    *  Kodak ProPhoto\n    *    0.288071128229293 0.711843217810102 0.000085653960605\n    *  Adobe RGB\n    *    0.297344975250536 0.627363566255466 0.075291458493998\n    *  Adobe Wide Gamut RGB\n    *    0.258728243040113 0.724682314948566 0.016589442011321\n    "
2018/06/19 13:40:23 " By the argument, above overflow should be impossible here. The return\n    * value of 2 indicates an internal error to the caller.\n    "
2018/06/19 13:40:23 " Now find the red numerator. "
2018/06/19 13:40:23 " Overflow is possible here and it indicates an extreme set of PNG cHRM\n    * chunk values.  This calculation actually returns the reciprocal of the\n    * scale value because this allows us to delay the multiplication of white-y\n    * into the denominator, which tends to produce a small number.\n    "
2018/06/19 13:40:23 " r+g+b scales = white scale "
2018/06/19 13:40:23 " Similarly for green_inverse: "
2018/06/19 13:40:23 " And the blue scale, the checks above guarantee this can't overflow but it\n    * can still produce 0 for extreme cHRM values.\n    "
2018/06/19 13:40:23 " And fill in the png_XYZ: "
2018/06/19 13:40:23 "success"
2018/06/19 13:40:23 " Normalize by scaling so the sum of the end-point Y values is PNG_FP_1.\n    * IMPLEMENTATION NOTE: ANSI requires signed overflow not to occur, therefore\n    * relying on addition of two positive values producing a negative one is not\n    * safe.\n    "
2018/06/19 13:40:23 " Allow an error of +/-0.01 (absolute value) on each chromaticity "
2018/06/19 13:40:23 " Added in libpng-1.6.0, a different check for the validity of a set of cHRM\n * chunk chromaticities.  Earlier checks used to simply look for the overflow\n * condition (where the determinant of the matrix to solve for XYZ ends up zero\n * because the chromaticity values are not all distinct.)  Despite this it is\n * theoretically possible to produce chromaticities that are apparently valid\n * but that rapidly degrade to invalid, potentially crashing, sets because of\n * arithmetic inaccuracies when calculations are performed on them.  The new\n * check is to round-trip xy -> XYZ -> xy and then check that the result is\n * within a small percentage of the original.\n "
2018/06/19 13:40:23 " As a side-effect this routine also returns the XYZ endpoints. "
2018/06/19 13:40:23 "actually, the math is pretty accurate"
2018/06/19 13:40:23 " Too much slip "
2018/06/19 13:40:23 " This is the check going the other way.  The XYZ is modified to normalize it\n * (another side-effect) and the xy chromaticities are returned.\n "
2018/06/19 13:40:23 " Used to check for an endpoint match against sRGB \n From ITU-R BT.709-3 "
2018/06/19 13:40:23 " color      x       y \n red   \n green \n blue  \n white "
2018/06/19 13:40:23 " The consistency check is performed on the chromaticities; this factors out\n    * variations because of the normalization (or not) of the end point Y\n    * values.\n    "
2018/06/19 13:40:23 " The end points must be reasonably close to any we already have.  The\n       * following allows an error of up to +/-.001\n       "
2018/06/19 13:40:23 " failed "
2018/06/19 13:40:23 " Only overwrite with preferred values "
2018/06/19 13:40:23 " ok, but no change "
2018/06/19 13:40:23 " The end points are normally quoted to two decimal digits, so allow +/-0.01\n    * on this test.\n    "
2018/06/19 13:40:23 " ok and changed "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " We must check the end points to ensure they are reasonable - in the past\n    * color management systems have crashed as a result of getting bogus\n    * colorant values, while this isn't the fault of libpng it is the\n    * responsibility of libpng because PNG carries the bomb and libpng is in a\n    * position to protect against it.\n    "
2018/06/19 13:40:23 " success "
2018/06/19 13:40:23 " We can't invert the chromaticities so we can't produce value XYZ\n          * values.  Likely as not a color management system will fail too.\n          "
2018/06/19 13:40:23 " libpng is broken; this should be a warning but if it happens we\n          * want error reports so for the moment it is an error.\n          "
2018/06/19 13:40:23 " failed "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " End points are invalid. "
2018/06/19 13:40:23 " failed "
2018/06/19 13:40:23 " Error message generation "
2018/06/19 13:40:23 " checks all the top bits "
2018/06/19 13:40:23 " see below for calculation "
2018/06/19 13:40:23 " 9 chars \n Truncate to 79 chars \n +2 = 90 "
2018/06/19 13:40:23 " So 'value' is at most 4 bytes and the following cast is safe "
2018/06/19 13:40:23 " total +8; less than the else clause "
2018/06/19 13:40:23 " +24 = 114"
2018/06/19 13:40:23 "+2 = 116"
2018/06/19 13:40:23 " The 'reason' is an arbitrary message, allow +79 maximum 195 "
2018/06/19 13:40:23 " This is recoverable, but make it unconditionally an app_error on write to\n    * avoid writing invalid ICC profiles into PNG files (i.e., we handle them\n    * on read, with a warning, but on write unless the app turns off\n    * application errors the PNG won't be written.)\n    "
2018/06/19 13:40:23 " sRGB || iCCP "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " sRGB sets known gamma, end points and (from the chunk) intent. \n IMPORTANT: these are not necessarily the values found in an ICC profile\n    * because ICC profiles store values adapted to a D50 environment; it is\n    * expected that the ICC profile mediaWhitePointTag will be D50; see the\n    * checks and code elsewhere to understand this better.\n    *\n    * These XYZ values, which are accurate to 5dp, produce rgb to gray\n    * coefficients of (6968,23435,2366), which are reduced (because they add up\n    * to 32769 not 32768) to (6968,23434,2366).  These are the values that\n    * libpng has traditionally used (and are the best values given the 15bit\n    * algorithm used by the rgb to gray code.)\n    "
2018/06/19 13:40:23 " D65 XYZ (*not* the D50 adapted values!) "
2018/06/19 13:40:23 " color      X      Y      Z \n red   \n green \n blue  "
2018/06/19 13:40:23 " Do nothing if the colorspace is already invalidated. "
2018/06/19 13:40:23 " Check the intent, then check for existing settings.  It is valid for the\n    * PNG file to have cHRM or gAMA chunks along with sRGB, but the values must\n    * be consistent with the correct values.  If, however, this function is\n    * called below because an iCCP chunk matches sRGB then it is quite\n    * conceivable that an older app recorded incorrect gAMA and cHRM because of\n    * an incorrect calculation based on the values in the profile - this does\n    * *not* invalidate the profile (though it still produces an error, which can\n    * be ignored.)\n    "
2018/06/19 13:40:23 " If the standard sRGB cHRM chunk does not match the one from the PNG file\n    * warn but overwrite the value with the correct one.\n    "
2018/06/19 13:40:23 " This check is just done for the error reporting - the routine always\n    * returns true when the 'from' argument corresponds to sRGB (2).\n    "
2018/06/19 13:40:23 "from sRGB"
2018/06/19 13:40:23 " intent: bugs in GCC force 'int' to be used as the parameter type. "
2018/06/19 13:40:23 " endpoints "
2018/06/19 13:40:23 " gamma "
2018/06/19 13:40:23 " Finally record that we have an sRGB profile "
2018/06/19 13:40:23 " set "
2018/06/19 13:40:23 " sRGB "
2018/06/19 13:40:23 " Encoded value of D50 as an ICC XYZNumber.  From the ICC 2010 spec the value\n * is XYZ(0.9642,1.0,0.8249), which scales to:\n *\n *    (63189.8112, 65536, 54060.6464)\n "
2018/06/19 13:40:23 " bool "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " This needs to be here because the 'normal' check is in\n    * png_decompress_chunk, yet this happens after the attempt to\n    * png_malloc_base the required data.  We only need this on read; on write\n    * the caller supplies the profile buffer so libpng doesn't allocate it.  See\n    * the call to icc_check_length below (the write case).\n    "
2018/06/19 13:40:23 " !SET_USER_LIMITS \n This will get compiled out on all 32-bit and better systems. "
2018/06/19 13:40:23 " !SET_USER_LIMITS "
2018/06/19 13:40:23 " READ_iCCP "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " first 132 bytes only "
2018/06/19 13:40:23 " Length check; this cannot be ignored in this code because profile_length\n    * is used later to check the tag table, so even if the profile seems over\n    * long profile_length from the caller must be correct.  The caller can fix\n    * this up on read or write by just passing in the profile header length.\n    "
2018/06/19 13:40:23 " tag count: 12 bytes/tag \n (2^32-4-132)/12: maximum possible tag count \n truncated tag table "
2018/06/19 13:40:23 " The 'intent' must be valid or we can't store it, ICC limits the intent to\n    * 16 bits.\n    "
2018/06/19 13:40:23 " The ICC limit "
2018/06/19 13:40:23 " This is just a warning because the profile may be valid in future\n    * versions.\n    "
2018/06/19 13:40:23 " At this point the tag table can't be checked because it hasn't necessarily\n    * been loaded; however, various header fields can be checked.  These checks\n    * are for values permitted by the PNG spec in an ICC profile; the PNG spec\n    * restricts the profiles that can be passed in an iCCP chunk (they must be\n    * appropriate to processing PNG data!)\n    "
2018/06/19 13:40:23 " Data checks (could be skipped).  These checks must be independent of the\n    * version number; however, the version number doesn't accomodate changes in\n    * the header fields (just the known tags and the interpretation of the\n    * data.)\n    "
2018/06/19 13:40:23 " signature 'ascp' "
2018/06/19 13:40:23 " Currently the PCS illuminant/adopted white point (the computational\n    * white point) are required to be D50,\n    * however the profile contains a record of the illuminant so perhaps ICC\n    * expects to be able to change this in the future (despite the rationale in\n    * the introduction for using a fixed PCS adopted white.)  Consequently the\n    * following is just a warning.\n    "
2018/06/19 13:40:23 "no tag value"
2018/06/19 13:40:23 " The PNG spec requires this:\n    * \"If the iCCP chunk is present, the image samples conform to the colour\n    * space represented by the embedded ICC profile as defined by the\n    * International Color Consortium [ICC]. The colour space of the ICC profile\n    * shall be an RGB colour space for colour images (PNG colour types 2, 3, and\n    * 6), or a greyscale colour space for greyscale images (PNG colour types 0\n    * and 4).\"\n    *\n    * This checking code ensures the embedded profile (on either read or write)\n    * conforms to the specification requirements.  Notice that an ICC 'gray'\n    * color-space profile contains the information to transform the monochrome\n    * data to XYZ or L*a*b (according to which PCS the profile uses) and this\n    * should be used in preference to the standard libpng K channel replication\n    * into R, G and B channels.\n    *\n    * Previously it was suggested that an RGB profile on grayscale data could be\n    * handled.  However it it is clear that using an RGB profile in this context\n    * must be an error - there is no specification of what it means.  Thus it is\n    * almost certainly more correct to ignore the profile.\n    "
2018/06/19 13:40:23 " data colour space field "
2018/06/19 13:40:23 " 'RGB ' "
2018/06/19 13:40:23 " 'GRAY' "
2018/06/19 13:40:23 " It is up to the application to check that the profile class matches the\n    * application requirements; the spec provides no guidance, but it's pretty\n    * weird if the profile is not scanner ('scnr'), monitor ('mntr'), printer\n    * ('prtr') or 'spac' (for generic color spaces).  Issue a warning in these\n    * cases.  Issue an error for device link or abstract profiles - these don't\n    * contain the records necessary to transform the color-space to anything\n    * other than the target device (and not even that for an abstract profile).\n    * Profiles of these classes may not be embedded in images.\n    "
2018/06/19 13:40:23 " profile/device class "
2018/06/19 13:40:23 " 'scnr' \n 'mntr' \n 'prtr' \n 'spac' \n All supported "
2018/06/19 13:40:23 " 'abst' \n May not be embedded in an image "
2018/06/19 13:40:23 " 'link' \n DeviceLink profiles cannot be interpreted in a non-device specific\n          * fashion, if an app uses the AToB0Tag in the profile the results are\n          * undefined unless the result is sent to the intended device,\n          * therefore a DeviceLink profile should not be found embedded in a\n          * PNG.\n          "
2018/06/19 13:40:23 " 'nmcl' \n A NamedColor profile is also device specific, however it doesn't\n          * contain an AToB0 tag that is open to misinterpretation.  Almost\n          * certainly it will fail the tests below.\n          "
2018/06/19 13:40:23 " To allow for future enhancements to the profile accept unrecognized\n          * profile classes with a warning, these then hit the test below on the\n          * tag content to ensure they are backward compatible with one of the\n          * understood profiles.\n          "
2018/06/19 13:40:23 " For any profile other than a device link one the PCS must be encoded\n    * either in XYZ or Lab.\n    "
2018/06/19 13:40:23 " 'XYZ ' \n 'Lab ' "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " header plus whole tag table "
2018/06/19 13:40:23 " The first tag "
2018/06/19 13:40:23 " First scan all the tags in the table and add bits to the icc_info value\n    * (temporarily in 'tags').\n    "
2018/06/19 13:40:23 " must be aligned \n not padded "
2018/06/19 13:40:23 " The ICC specification does not exclude zero length tags, therefore the\n       * start might actually be anywhere if there is no data, but this would be\n       * a clear abuse of the intent of the standard so the start is checked for\n       * being in range.  All defined tag types have an 8 byte header - a 4 byte\n       * type signature then 0.\n       "
2018/06/19 13:40:23 " This is a hard error; potentially it can cause read outside the\n       * profile.\n       "
2018/06/19 13:40:23 " CNHP730S.icc shipped with Microsoft Windows 64 violates this; it is\n          * only a warning here because libpng does not care about the\n          * alignment.\n          "
2018/06/19 13:40:23 " success, maybe with warnings "
2018/06/19 13:40:23 " Information about the known ICC sRGB profiles "
2018/06/19 13:40:23 " This data comes from contrib/tools/checksum-icc run on downloads of\n    * all four ICC sRGB profiles from www.color.org.\n    "
2018/06/19 13:40:23 " adler32, crc32, MD5[4], intent, date, length, file-name "
2018/06/19 13:40:23 " ICC sRGB v2 perceptual no black-compensation: "
2018/06/19 13:40:23 " ICC sRGB v4 perceptual "
2018/06/19 13:40:23 " The following profiles have no known MD5 checksum. If there is a match\n    * on the (empty) MD5 the other fields are used to attempt a match and\n    * a warning is produced.  The first two of these profiles have a 'cprt' tag\n    * which suggests that they were also made by Hewlett Packard.\n    "
2018/06/19 13:40:23 " This is a 'mntr' (display) profile with a mediaWhitePointTag that does not\n    * match the D50 PCS illuminant in the header (it is in fact the D65 values,\n    * so the white point is recorded as the un-adapted value.)  The profiles\n    * below only differ in one byte - the intent - and are basically the same as\n    * the previous profile except for the mediaWhitePointTag error and a missing\n    * chromaticAdaptationTag.\n    "
2018/06/19 13:40:23 "broken"
2018/06/19 13:40:23 "broken"
2018/06/19 13:40:23 " The quick check is to verify just the MD5 signature and trust the\n    * rest of the data.  Because the profile has already been verified for\n    * correctness this is safe.  png_colorspace_set_sRGB will check the 'intent'\n    * field too, so if the profile has been edited with an intent not defined\n    * by sRGB (but maybe defined by a later ICC specification) the read of\n    * the profile will fail at that point.\n    "
2018/06/19 13:40:23 " invalid "
2018/06/19 13:40:23 " the value for 0 length data "
2018/06/19 13:40:23 " First see if PNG_SKIP_sRGB_CHECK_PROFILE has been set to \"on\" "
2018/06/19 13:40:23 " This may be one of the old HP profiles without an MD5, in that\n          * case we can only use the length and Adler32 (note that these\n          * are not used by default if there is an MD5!)\n          "
2018/06/19 13:40:23 " Profile is unsigned or more checks have been configured in. "
2018/06/19 13:40:23 " Length *and* intent must match "
2018/06/19 13:40:23 " Now calculate the adler32 if not done already. "
2018/06/19 13:40:23 " These basic checks suggest that the data has not been\n                * modified, but if the check level is more than 1 perform\n                * our own crc32 checksum on the data.\n                "
2018/06/19 13:40:23 " So this check must pass for the 'return' below to happen.\n                   "
2018/06/19 13:40:23 " These profiles are known to have bad data that may cause\n                      * problems if they are used, therefore attempt to\n                      * discourage their use, skip the 'have_md5' warning below,\n                      * which is made irrelevant by this error.\n                      "
2018/06/19 13:40:23 " Warn that this being done; this isn't even an error since\n                   * the profile is perfectly valid, but it would be nice if\n                   * people used the up-to-date ones.\n                   "
2018/06/19 13:40:23 " The signature matched, but the profile had been changed in some\n          * way.  This probably indicates a data error or uninformed hacking.\n          * Fall through to \"no match\".\n          "
2018/06/19 13:40:23 " no match "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " Is this profile one of the known ICC sRGB profiles?  If it is, just set\n    * the sRGB information.\n    "
2018/06/19 13:40:23 "already checked"
2018/06/19 13:40:23 " PNG_sRGB_PROFILE_CHECKS >= 0 \n sRGB "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " If no sRGB support, don't try storing sRGB information "
2018/06/19 13:40:23 " Failure case "
2018/06/19 13:40:23 " iCCP "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " Set the rgb_to_gray coefficients from the colorspace. "
2018/06/19 13:40:23 " png_set_background has not been called, get the coefficients from the Y\n       * values of the colorspace colorants.\n       "
2018/06/19 13:40:23 " We allow 0 coefficients here.  r+g+b may be 32769 if two or\n          * all of the coefficients were rounded up.  Handle this by\n          * reducing the *largest* coefficient by 1; this matches the\n          * approach used for the default coefficients in pngrtran.c\n          "
2018/06/19 13:40:23 " Check for an internal error. "
2018/06/19 13:40:23 " This is a png_error at present even though it could be ignored -\n       * it should never happen, but it is important that if it does, the\n       * bug is fixed.\n       "
2018/06/19 13:40:23 " READ_RGB_TO_GRAY "
2018/06/19 13:40:23 " COLORSPACE "
2018/06/19 13:40:23 " This exists solely to work round a warning from GNU C. \n PRIVATE "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " Check for width and height valid values "
2018/06/19 13:40:23 " big_row_buf hack \n filter byte \n 8-byte RGBA pixels \n extra max_pixel_depth pad "
2018/06/19 13:40:23 " The size of the row must be within the limits of this architecture.\n       * Because the read code can perform arbitrary transformations the\n       * maximum size is checked here.  Because the code in png_read_start_row\n       * adds extra space \"for safety's sake\" in several places a conservative\n       * limit is used here.\n       *\n       * NOTE: it would be far better to check the size that is actually used,\n       * but the effect in the real world is minor and the changes are more\n       * extensive, therefore much more dangerous and much more difficult to\n       * write in a way that avoids compiler warnings.\n       "
2018/06/19 13:40:23 " Check other values "
2018/06/19 13:40:23 " Accept filter_method 64 (intrapixel differencing) only if\n    * 1. Libpng was compiled with PNG_MNG_FEATURES_SUPPORTED and\n    * 2. Libpng did not read a PNG signature (this filter_method is only\n    *    used in PNG datastreams that are embedded in MNG datastreams) and\n    * 3. The application called png_permit_mng_features with a mask that\n    *    included PNG_FLAG_MNG_FILTER_64 and\n    * 4. The filter_method is 64 and\n    * 5. The color_type is RGB or RGBA\n    "
2018/06/19 13:40:23 " ASCII to fp functions \n Check an ASCII formated floating point value, see the more detailed\n * comments in pngpriv.h\n "
2018/06/19 13:40:23 " The following is used internally to preserve the sticky flags "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " First find the type of the next character "
2018/06/19 13:40:23 " Now deal with this type according to the current\n       * state, the type is arranged to not overlap the\n       * bits of the PNG_FP_STATE.\n       "
2018/06/19 13:40:23 " not a part of the number "
2018/06/19 13:40:23 " Ok as trailer, ok as lead of fraction. \n two dots "
2018/06/19 13:40:23 " trailing dot? "
2018/06/19 13:40:23 " delayed fraction "
2018/06/19 13:40:23 " case PNG_FP_FRACTION + PNG_FP_SAW_SIGN:\n         goto PNG_FP_End; ** no sign in fraction "
2018/06/19 13:40:23 " case PNG_FP_FRACTION + PNG_FP_SAW_DOT:\n         goto PNG_FP_End; ** Because SAW_DOT is always set "
2018/06/19 13:40:23 " This is correct because the trailing '.' on an\n          * integer is handled above - so we can only get here\n          * with the sequence \".E\" (with no preceding digits).\n          "
2018/06/19 13:40:23 " not a part of the number "
2018/06/19 13:40:23 " case PNG_FP_EXPONENT + PNG_FP_SAW_DOT:\n         goto PNG_FP_End; "
2018/06/19 13:40:23 " case PNG_FP_EXPONEXT + PNG_FP_SAW_E:\n         goto PNG_FP_End; "
2018/06/19 13:40:23 " I.e. break 2 "
2018/06/19 13:40:23 " The character seems ok, continue. "
2018/06/19 13:40:23 " Here at the end, update the state and return the correct\n    * return code.\n    "
2018/06/19 13:40:23 " The same but for a complete string. "
2018/06/19 13:40:23 " must be non-zero - see above "
2018/06/19 13:40:23 " i.e. fail "
2018/06/19 13:40:23 " pCAL || sCAL "
2018/06/19 13:40:23 " Utility used below - a simple accurate power of ten from an integral\n * exponent.\n "
2018/06/19 13:40:23 " Handle negative exponent with a reciprocal at the end because\n    * 10 is exact whereas .1 is inexact in base 2\n    "
2018/06/19 13:40:23 " Decompose power bitwise. "
2018/06/19 13:40:23 " else power is 0 and d is 1 "
2018/06/19 13:40:23 " Function to format a floating point value in ASCII with a given\n * precision.\n "
2018/06/19 13:40:23 " The problem arises below with exp_b10, which can never overflow because it\n * comes, originally, from frexp and is therefore limited to a range which is\n * typically +/-710 (log2(DBL_MAX)/log2(DBL_MIN)).\n "
2018/06/19 13:40:23 " GCC_STRICT_OVERFLOW \n PRIVATE "
2018/06/19 13:40:23 " We use standard functions from math.h, but not printf because\n    * that would require stdio.  The caller must supply a buffer of\n    * sufficient size or we will png_error.  The tests on size and\n    * the space in ascii[] consumed are indicated below.\n    "
2018/06/19 13:40:23 " Enforce the limit of the implementation precision too. "
2018/06/19 13:40:23 " Basic sanity checks \n See the requirements below. "
2018/06/19 13:40:23 " '-'  PLUS 1 TOTAL 1 "
2018/06/19 13:40:23 " A base 10 exponent \n 10^exp_b10 "
2018/06/19 13:40:23 " First extract a base 10 exponent of the number,\n          * the calculation below rounds down when converting\n          * from base 2 to base 10 (multiply by log10(2) -\n          * 0.3010, but 77/256 is 0.3008, so exp_b10 needs to\n          * be increased.  Note that the arithmetic shift\n          * performs a floor() unlike C arithmetic - using a\n          * C multiply would break the following for negative\n          * exponents.\n          "
2018/06/19 13:40:23 " exponent to base 2 "
2018/06/19 13:40:23 " <= exponent to base 10 "
2018/06/19 13:40:23 " Avoid underflow here. \n May underflow "
2018/06/19 13:40:23 " And this may overflow. "
2018/06/19 13:40:23 " Normalize fp and correct exp_b10, after this fp is in the\n          * range [.1,1) and exp_b10 is both the exponent and the digit\n          * *before* which the decimal point should be inserted\n          * (starting with 0 for the first digit).  Note that this\n          * works even if 10^exp_b10 is out of range because of the\n          * test on DBL_MAX above.\n          "
2018/06/19 13:40:23 " Because of the code above fp may, at this point, be\n          * less than .1, this is ok because the code below can\n          * handle the leading zeros this generates, so no attempt\n          * is made to correct that here.\n          "
2018/06/19 13:40:23 " Allow up to two leading zeros - this will not lengthen\n             * the number compared to using E-n.\n             "
2018/06/19 13:40:23 " PLUS 3 TOTAL 4 "
2018/06/19 13:40:23 " PLUS 2 digits: TOTAL 3 \n Dot added below before first output. "
2018/06/19 13:40:23 " No zeros to add "
2018/06/19 13:40:23 " Generate the digit list, stripping trailing zeros and\n             * inserting a '.' before a digit if the exponent is 0.\n             "
2018/06/19 13:40:23 " Count of leading zeros \n Count of digits in list. "
2018/06/19 13:40:23 " Use modf here, not floor and subtract, so that\n                * the separation is done in one step.  At the end\n                * of the loop don't break the number into parts so\n                * that the final digit is rounded.\n                "
2018/06/19 13:40:23 " Rounding up to 10, handle that here. "
2018/06/19 13:40:23 " Advance exp_b10 to '1', so that the\n                               * decimal point happens after the\n                               * previous digit.\n                               "
2018/06/19 13:40:23 " I.e. 1+(ch-48) "
2018/06/19 13:40:23 " Did we reach the beginning? If so adjust the\n                         * exponent but take into account the leading\n                         * decimal point.\n                         "
2018/06/19 13:40:23 " cdigits == 0 "
2018/06/19 13:40:23 " Leading decimal point (plus zeros?), if\n                               * we lose the decimal point here it must\n                               * be reentered below.\n                               "
2018/06/19 13:40:23 " Else lost a leading zero, so 'exp_b10' is\n                               * still ok at (-1)\n                               "
2018/06/19 13:40:23 " In all cases we output a '1' "
2018/06/19 13:40:23 " Guarantees termination below. "
2018/06/19 13:40:23 " Included embedded zeros in the digit count. "
2018/06/19 13:40:23 " exp_b10 == (-1) means we just output the decimal\n                      * place - after the DP don't adjust 'exp_b10' any\n                      * more!\n                      "
2018/06/19 13:40:23 " PLUS 1: TOTAL 4 "
2018/06/19 13:40:23 " counted above "
2018/06/19 13:40:23 " The total output count (max) is now 4+precision "
2018/06/19 13:40:23 " Check for an exponent, if we don't need one we are\n             * done and just need to terminate the string.  At\n             * this point exp_b10==(-1) is effectively a flag - it got\n             * to '-1' because of the decrement after outputting\n             * the decimal point above (the exponent required is\n             * *not* -1!)\n             "
2018/06/19 13:40:23 " The following only happens if we didn't output the\n                * leading zeros above for negative exponent, so this\n                * doesn't add to the digit requirement.  Note that the\n                * two zeros here can only be output if the two leading\n                * zeros were *not* output, so this doesn't increase\n                * the output count.\n                "
2018/06/19 13:40:23 " Total buffer requirement (including the '\\0') is\n                * 5+precision - see check at the start.\n                "
2018/06/19 13:40:23 " Here if an exponent is required, adjust size for\n             * the digits we output but did not count.  The total\n             * digit output here so far is at most 1+precision - no\n             * decimal point and no leading or trailing zeros have\n             * been output.\n             "
2018/06/19 13:40:23 " 'E': PLUS 1 TOTAL 2+precision "
2018/06/19 13:40:23 " The following use of an unsigned temporary avoids ambiguities in\n             * the signed arithmetic on exp_b10 and permits GCC at least to do\n             * better optimization.\n             "
2018/06/19 13:40:23 " '-': PLUS 1 TOTAL 3+precision "
2018/06/19 13:40:23 " Need another size check here for the exponent digits, so\n             * this need not be considered above.\n             "
2018/06/19 13:40:23 " '0' "
2018/06/19 13:40:23 " 'i' \n 'n' \n 'f' "
2018/06/19 13:40:23 " Here on buffer too small. "
2018/06/19 13:40:23 " GCC_STRICT_OVERFLOW "
2018/06/19 13:40:23 " FLOATING_POINT "
2018/06/19 13:40:23 " Function to format a fixed point value in ASCII.\n "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " Require space for 10 decimal digits, a decimal point, a minus sign and a\n    * trailing \\0, 13 characters:\n    "
2018/06/19 13:40:23 " Avoid overflow here on the minimum integer. "
2018/06/19 13:40:23 " else overflowed "
2018/06/19 13:40:23 " flag value "
2018/06/19 13:40:23 " Split the low digit off num: "
2018/06/19 13:40:23 " Record the first non-zero digit, note that this is a number\n             * starting at 1, it's not actually the array index.\n             "
2018/06/19 13:40:23 " The remaining digits are fractional digits, ndigits is '5' or\n             * smaller at this point.  It is certainly not zero.  Check for a\n             * non-zero fractional digit:\n             "
2018/06/19 13:40:23 " decimal point \n ndigits may be <5 for small numbers, output leading zeros\n                * then ndigits digits to first:\n                "
2018/06/19 13:40:23 " Don't output the trailing zeros! "
2018/06/19 13:40:23 " And null terminate the string: "
2018/06/19 13:40:23 " Here on buffer too small. "
2018/06/19 13:40:23 " FIXED_POINT \n SCAL "
2018/06/19 13:40:23 " muldiv functions \n This API takes signed arguments and rounds the result to the nearest\n * integer (or, for a fixed point number - the standard argument - to\n * the nearest .00001).  Overflow and divide by zero are signalled in\n * the result, a boolean - true on success, false on overflow.\n "
2018/06/19 13:40:23 " from above \n It is not obvious which comparison below gets optimized in such a way that\n * signed overflow would change the result; looking through the code does not\n * reveal any tests which have the form GCC complains about, so presumably the\n * optimizer is moving an add or subtract into the 'if' somewhere.\n "
2018/06/19 13:40:23 " GCC_STRICT_OVERFLOW "
2018/06/19 13:40:23 " Return a * times / divisor, rounded. "
2018/06/19 13:40:23 " A png_fixed_point is a 32-bit integer. "
2018/06/19 13:40:23 " Following can't overflow because the arguments only\n          * have 31 bits each, however the result may be 32 bits.\n          "
2018/06/19 13:40:23 " Can't overflow because the a*times bit is only 30\n          * bits at most.\n          "
2018/06/19 13:40:23 " carry "
2018/06/19 13:40:23 " else overflow "
2018/06/19 13:40:23 " s32.s00 is now the 64-bit product, do a standard\n             * division, we know that s32 < D, so the maximum\n             * required shift is 31.\n             "
2018/06/19 13:40:23 " NOTE: signed "
2018/06/19 13:40:23 " carry "
2018/06/19 13:40:23 " Handle the rounding. "
2018/06/19 13:40:23 " Check for overflow. "
2018/06/19 13:40:23 " GCC_STRICT_OVERFLOW \n READ_GAMMA || INCH_CONVERSIONS "
2018/06/19 13:40:23 " The following is for when the caller doesn't much care about the\n * result.\n "
2018/06/19 13:40:23 " more fixed point functions for gamma \n Calculate a reciprocal, return 0 on div-by-zero or overflow. "
2018/06/19 13:40:23 " error/overflow "
2018/06/19 13:40:23 " This is the shared test on whether a gamma value is 'significant' - whether\n * it is worth doing gamma correction.\n "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " A local convenience routine. "
2018/06/19 13:40:23 " The required result is 1/a * 1/b; the following preserves accuracy. "
2018/06/19 13:40:23 " overflow "
2018/06/19 13:40:23 " 16BIT "
2018/06/19 13:40:23 " The inverse of the above. "
2018/06/19 13:40:23 " The required result is 1/a * 1/b; the following preserves accuracy. "
2018/06/19 13:40:23 " This may overflow because the range of png_fixed_point isn't symmetric,\n    * but this API is only used for the product of file and screen gamma so it\n    * doesn't matter that the smallest number it can produce is 1/21474, not\n    * 1/100000\n    "
2018/06/19 13:40:23 " overflow "
2018/06/19 13:40:23 " READ_GAMMA "
2018/06/19 13:40:23 " gamma table code "
2018/06/19 13:40:23 " Fixed point gamma.\n *\n * The code to calculate the tables used below can be found in the shell script\n * contrib/tools/intgamma.sh\n *\n * To calculate gamma this code implements fast log() and exp() calls using only\n * fixed point arithmetic.  This code has sufficient precision for either 8-bit\n * or 16-bit sample values.\n *\n * The tables used here were calculated using simple 'bc' programs, but C double\n * precision floating point arithmetic would work fine.\n *\n * 8-bit log table\n *   This is a table of -log(value/255)/log(2) for 'value' in the range 128 to\n *   255, so it's the base 2 logarithm of a normalized 8-bit floating point\n *   mantissa.  The numbers are 32-bit fractions.\n "
2018/06/19 13:40:23 " The following are the values for 16-bit tables - these work fine for the\n    * 8-bit conversions but produce very slightly larger errors in the 16-bit\n    * log (about 1.2 as opposed to 0.7 absolute error in the final value).  To\n    * use these all the shifts below must be adjusted appropriately.\n    "
2018/06/19 13:40:23 " Each time 'x' is multiplied by 2, 1 must be subtracted off the final log,\n    * because the log is actually negate that means adding 1.  The final\n    * returned value thus has the range 0 (for 255 input) to 7.994 (for 1\n    * input), return -1 for the overflow (log 0) case, - so the result is\n    * always at most 19 bits.\n    "
2018/06/19 13:40:23 " result is at most 19 bits, so this cast is safe: "
2018/06/19 13:40:23 " The above gives exact (to 16 binary places) log2 values for 8-bit images,\n * for 16-bit images we use the most significant 8 bits of the 16-bit value to\n * get an approximation then multiply the approximation by a correction factor\n * determined by the remaining up to 8 bits.  This requires an additional step\n * in the 16-bit case.\n *\n * We want log2(value/65535), we have log2(v'/255), where:\n *\n *    value = v' * 256 + v''\n *          = v' * f\n *\n * So f is value/v', which is equal to (256+v''/v') since v' is in the range 128\n * to 255 and v'' is in the range 0 to 255 f will be in the range 256 to less\n * than 258.  The final factor also needs to correct for the fact that our 8-bit\n * value is scaled by 255, whereas the 16-bit values must be scaled by 65535.\n *\n * This gives a final formula using a calculated value 'x' which is value/v' and\n * scaling by 65536 to match the above table:\n *\n *   log2(x/257) * 65536\n *\n * Since these numbers are so close to '1' we can use simple linear\n * interpolation between the two end values 256/257 (result -368.61) and 258/257\n * (result 367.179).  The values used below are scaled by a further 64 to give\n * 16-bit precision in the interpolation:\n *\n * Start (256): -23591\n * Zero  (257):      0\n * End   (258):  23499\n "
2018/06/19 13:40:23 " As above, but now the input has 16 bits. "
2018/06/19 13:40:23 " Calculate the base logarithm from the top 8 bits as a 28-bit fractional\n    * value.\n    "
2018/06/19 13:40:23 " Now we need to interpolate the factor, this requires a division by the top\n    * 8 bits.  Do this with maximum precision.\n    "
2018/06/19 13:40:23 " Since we divided by the top 8 bits of 'x' there will be a '1' at 1<<24,\n    * the value at 1<<16 (ignoring this) will be 0 or 1; this gives us exactly\n    * 16 bits to interpolate to get the low bits of the result.  Round the\n    * answer.  Note that the end point values are scaled by 64 to retain overall\n    * precision and that 'lg2' is current scaled by an extra 12 bits, so adjust\n    * the overall scaling by 6-12.  Round at every step.\n    "
2018/06/19 13:40:23 " <= '257' "
2018/06/19 13:40:23 " Safe, because the result can't have more than 20 bits: "
2018/06/19 13:40:23 " 16BIT "
2018/06/19 13:40:23 " The 'exp()' case must invert the above, taking a 20-bit fixed point\n * logarithmic value and returning a 16 or 8-bit number as appropriate.  In\n * each case only the low 16 bits are relevant - the fraction - since the\n * integer bits (the top 4) simply determine a shift.\n *\n * The worst case is the 16-bit distinction between 65535 and 65534. This\n * requires perhaps spurious accuracy in the decoding of the logarithm to\n * distinguish log2(65535/65534.5) - 10^-5 or 17 bits.  There is little chance\n * of getting this accuracy in practice.\n *\n * To deal with this the following exp() function works out the exponent of the\n * fractional part of the logarithm by using an accurate 32-bit value from the\n * top four fractional bits then multiplying in the remaining bits.\n "
2018/06/19 13:40:23 " NOTE: the first entry is deliberately set to the maximum 32-bit value. "
2018/06/19 13:40:23 " Adjustment table; provided to explain the numbers in the code below. "
2018/06/19 13:40:23 " Else overflow or zero (underflow) "
2018/06/19 13:40:23 " Obtain a 4-bit approximation "
2018/06/19 13:40:23 " Incorporate the low 12 bits - these decrease the returned value by\n       * multiplying by a number less than 1 if the bit is set.  The multiplier\n       * is determined by the above table and the shift. Notice that the values\n       * converge on 45426 and this is used to allow linear interpolation of the\n       * low bits.\n       "
2018/06/19 13:40:23 " And handle the low 6 bits in a single block. "
2018/06/19 13:40:23 " Handle the upper bits of x. "
2018/06/19 13:40:23 " Check for overflow "
2018/06/19 13:40:23 " Else underflow "
2018/06/19 13:40:23 " Get a 32-bit value: "
2018/06/19 13:40:23 " Convert the 32-bit value to 0..255 by multiplying by 256-1. Note that the\n    * second, rounding, step can't overflow because of the first, subtraction,\n    * step.\n    "
2018/06/19 13:40:23 " Get a 32-bit value: "
2018/06/19 13:40:23 " Convert the 32-bit value to 0..65535 by multiplying by 65536-1: "
2018/06/19 13:40:23 " 16BIT \n FLOATING_ARITHMETIC "
2018/06/19 13:40:23 " 'value' is unsigned, ANSI-C90 requires the compiler to correctly\n          * convert this to a floating point value.  This includes values that\n          * would overflow if 'value' were to be converted to 'int'.\n          *\n          * Apparently GCC, however, does an intermediate conversion to (int)\n          * on some (ARM) but not all (x86) platforms, possibly because of\n          * hardware FP limitations.  (E.g. if the hardware conversion always\n          * assumes the integer register contains a signed value.)  This results\n          * in ANSI-C undefined behavior for large values.\n          *\n          * Other implementations on the same machine might actually be ANSI-C90\n          * conformant and therefore compile spurious extra code for the large\n          * values.\n          *\n          * We can be reasonably sure that an unsigned to float conversion\n          * won't be faster than an int to float one.  Therefore this code\n          * assumes responsibility for the undefined behavior, which it knows\n          * can't happen because of the check above.\n          *\n          * Note the argument to this routine is an (unsigned int) because, on\n          * 16-bit platforms, it is assigned a value which might be out of\n          * range for an (int); that would result in undefined behavior in the\n          * caller if the *argument* ('value') were to be declared (int).\n          "
2018/06/19 13:40:23 "SAFE"
2018/06/19 13:40:23 " Overflow. "
2018/06/19 13:40:23 " The same (unsigned int)->(double) constraints apply here as above,\n       * however in this case the (unsigned int) to (int) conversion can\n       * overflow on an ANSI-C90 compliant system so the cast needs to ensure\n       * that this is not possible.\n       "
2018/06/19 13:40:23 " Overflow. "
2018/06/19 13:40:23 " 16BIT "
2018/06/19 13:40:23 " This does the right thing based on the bit_depth field of the\n * png_struct, interpreting values as 8-bit or 16-bit.  While the result\n * is nominally a 16-bit value if bit depth is 8 then the result is\n * 8-bit (as are the arguments.)\n "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " should not reach this "
2018/06/19 13:40:23 " 16BIT "
2018/06/19 13:40:23 " Internal function to build a single 16-bit table - the table consists of\n * 'num' 256 entry subtables, where 'num' is determined by 'shift' - the amount\n * to shift the input values right (or 16-number_of_signifiant_bits).\n *\n * The caller is responsible for ensuring that the table gets cleaned up on\n * png_error (i.e. if one of the mallocs below fails) - i.e. the *table argument\n * should be somewhere that will be cleaned.\n "
2018/06/19 13:40:23 " Various values derived from 'shift': "
2018/06/19 13:40:23 " CSE the division and work round wacky GCC warnings (see the comments\n    * in png_gamma_8bit_correct for where these come from.)\n    "
2018/06/19 13:40:23 " The 'threshold' test is repeated here because it can arise for one of\n       * the 16-bit tables even if the others don't hit it.\n       "
2018/06/19 13:40:23 " The old code would overflow at the end and this would cause the\n          * 'pow' function to return a result >1, resulting in an\n          * arithmetic error.  This code follows the spec exactly; ig is\n          * the recovered input sample, it always has 8-16 bits.\n          *\n          * We want input * 65535/max, rounded, the arithmetic fits in 32\n          * bits (unsigned) so long as max <= 32767.\n          "
2018/06/19 13:40:23 " Inline the 'max' scaling operation: \n See png_gamma_8bit_correct for why the cast to (int) is\n                * required here.\n                "
2018/06/19 13:40:23 " We must still build a table, but do it the fast way. "
2018/06/19 13:40:23 " NOTE: this function expects the *inverse* of the overall gamma transformation\n * required.\n "
2018/06/19 13:40:23 " 'num' is the number of tables and also the number of low bits of low\n    * bits of the input 16-bit value used to select a table.  Each table is\n    * itself indexed by the high 8 bits of the value.\n    "
2018/06/19 13:40:23 " 'gamma_val' is set to the reciprocal of the value calculated above, so\n    * pow(out,g) is an *input* value.  'last' is the last input value set.\n    *\n    * In the loop 'i' is used to find output values.  Since the output is\n    * 8-bit there are only 256 possible values.  The tables are set up to\n    * select the closest possible output value for each input by finding\n    * the input value at the boundary between each pair of output values\n    * and filling the table up to that boundary with the lower output\n    * value.\n    *\n    * The boundary values are 0.5,1.5..253.5,254.5.  Since these are 9-bit\n    * values the code below uses a 16-bit value in i; the values start at\n    * 128.5 (for 0.5) and step by 257, for a total of 254 values (the last\n    * entries are filled with 255).  Start i at 128 and fill all 'last'\n    * table entries <= 'max'\n    "
2018/06/19 13:40:23 " 8-bit output value "
2018/06/19 13:40:23 " Find the corresponding maximum input value \n 16-bit output value "
2018/06/19 13:40:23 " Find the boundary value in 16 bits: "
2018/06/19 13:40:23 " Adjust (round) to (16-shift) bits: "
2018/06/19 13:40:23 " And fill in the final entries. "
2018/06/19 13:40:23 " 16BIT "
2018/06/19 13:40:23 " Build a single 8-bit table: same as the 16-bit case but much simpler (and\n * typically much faster).  Note that libpng currently does no sBIT processing\n * (apparently contrary to the spec) so a 256-entry table is always generated.\n "
2018/06/19 13:40:23 " Used from png_read_destroy and below to release the memory used by the gamma\n * tables.\n "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " 16BIT "
2018/06/19 13:40:23 " 16BIT \n READ_BACKGROUND || READ_ALPHA_MODE || RGB_TO_GRAY "
2018/06/19 13:40:23 " We build the 8- or 16-bit gamma tables here.  Note that for 16-bit\n * tables, we don't make a full table if we are reducing to 8-bit in\n * the future.  Note also how the gamma_16 tables are segmented so that\n * we don't need to allocate > 64K chunks for a full 16-bit table.\n "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " Remove any existing table; this copes with multiple calls to\n    * png_read_update_info. The warning is because building the gamma tables\n    * multiple times is a performance hit - it's harmless but the ability to\n    * call png_read_update_info() multiple times is new in 1.5.6 so it seems\n    * sensible to warn if the app introduces such a hit.\n    "
2018/06/19 13:40:23 " Probably doing rgb_to_gray "
2018/06/19 13:40:23 " READ_BACKGROUND || READ_ALPHA_MODE || RGB_TO_GRAY "
2018/06/19 13:40:23 " 16-bit gamma code uses this equation:\n       *\n       *   ov = table[(iv & 0xff) >> gamma_shift][iv >> 8]\n       *\n       * Where 'iv' is the input color value and 'ov' is the output value -\n       * pow(iv, gamma).\n       *\n       * Thus the gamma table consists of up to 256 256-entry tables.  The table\n       * is selected by the (8-gamma_shift) most significant of the low 8 bits\n       * of the color value then indexed by the upper 8 bits:\n       *\n       *   table[low bits][high 8 bits]\n       *\n       * So the table 'n' corresponds to all those 'iv' of:\n       *\n       *   <all high 8-bit values><n << gamma_shift>..<(n+1 << gamma_shift)-1>\n       *\n       "
2018/06/19 13:40:23 " shift == insignificant bits "
2018/06/19 13:40:23 " keep all 16 bits "
2018/06/19 13:40:23 " PNG_MAX_GAMMA_8 is the number of bits to keep - effectively\n          * the significant bits in the *input* when the output will\n          * eventually be 8 bits.  By default it is 11.\n          "
2018/06/19 13:40:23 " Guarantees at least one table! "
2018/06/19 13:40:23 " NOTE: prior to 1.5.4 this test used to include PNG_BACKGROUND (now\n       * PNG_COMPOSE).  This effectively smashed the background calculation for\n       * 16-bit output because the 8-bit table assumes the result will be\n       * reduced to 8 bits.\n       "
2018/06/19 13:40:23 " Notice that the '16 from 1' table should be full precision, however\n          * the lookup on this table still uses gamma_shift, so it can't be.\n          * TODO: fix this.\n          "
2018/06/19 13:40:23 " Probably doing rgb_to_gray "
2018/06/19 13:40:23 " READ_BACKGROUND || READ_ALPHA_MODE || RGB_TO_GRAY "
2018/06/19 13:40:23 " 16BIT "
2018/06/19 13:40:23 " READ_GAMMA "
2018/06/19 13:40:23 " HARDWARE OR SOFTWARE OPTION SUPPORT "
2018/06/19 13:40:23 " sRGB support "
2018/06/19 13:40:23 " sRGB conversion tables; these are machine generated with the code in\n * contrib/tools/makesRGB.c.  The actual sRGB transfer curve defined in the\n * specification (see the article at https://en.wikipedia.org/wiki/SRGB)\n * is used, not the gamma=1/2.2 approximation use elsewhere in libpng.\n * The sRGB to linear table is exact (to the nearest 16-bit linear fraction).\n * The inverse (linear to sRGB) table has accuracies as follows:\n *\n * For all possible (255*65535+1) input values:\n *\n *    error: -0.515566 - 0.625971, 79441 (0.475369%) of readings inexact\n *\n * For the input values corresponding to the 65536 16-bit values:\n *\n *    error: -0.513727 - 0.607759, 308 (0.469978%) of readings inexact\n *\n * In all cases the inexact readings are only off by one.\n "
2018/06/19 13:40:23 " The convert-to-sRGB table is only currently required for read. "
2018/06/19 13:40:23 " SIMPLIFIED_READ "
2018/06/19 13:40:23 " The base/delta tables are required for both read and write (but currently\n * only the simplified versions.)\n "
2018/06/19 13:40:23 " SIMPLIFIED READ/WRITE sRGB support "
2018/06/19 13:40:23 " SIMPLIFIED READ/WRITE SUPPORT "
2018/06/19 13:40:23 " Double check that we have a png_ptr - it should be impossible to get here\n    * without one.\n    "
2018/06/19 13:40:23 " First free any data held in the control structure. "
2018/06/19 13:40:23 " Ignore errors here. "
2018/06/19 13:40:23 " Copy the control structure so that the original, allocated, version can be\n    * safely freed.  Notice that a png_error here stops the remainder of the\n    * cleanup, but this is probably fine because that would indicate bad memory\n    * problems anyway.\n    "
2018/06/19 13:40:23 " Then the structures, calling the correct API. "
2018/06/19 13:40:23 " Success. "
2018/06/19 13:40:23 " Safely call the real function, but only if doing so is safe at this point\n    * (if not inside an error handling context).  Otherwise assume\n    * png_safe_execute will call this API after the return.\n    "
2018/06/19 13:40:23 " Ignore errors here: "
2018/06/19 13:40:23 " PRIVATE "
2018/06/19 13:40:23 " Utility to log an error. "
2018/06/19 13:40:23 " SIMPLIFIED READ/WRITE \n READ || WRITE "
2018/06/19 13:40:23 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/png.c": 278.486182ms
2018/06/19 13:40:23 Couldn't classify license(s)
2018/06/19 13:40:24 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngrio.c
2018/06/19 13:40:24 detected language: 4
2018/06/19 13:40:24 " pngrio.c - functions for data input\n *\n * Last changed in libpng 1.6.24 [August 4, 2016]\n * Copyright (c) 1998-2002,2004,2006-2016 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * This file provides a location for all input.  Users who need\n * special handling are expected to write a function that has the same\n * arguments as this and performs a similar function, but that possibly\n * has a different input method.  Note that you shouldn't change this\n * function, but rather write a replacement function and then make\n * libpng use it at run time with png_set_read_fn(...).\n "
2018/06/19 13:40:24 " Read the data from whatever input you are using.  The default routine\n * reads from a file pointer.  Note that this routine sometimes gets called\n * with very small lengths, so you should implement some kind of simple\n * buffering if you are using unbuffered reads.  This should never be asked\n * to read more than 64K on a 16-bit machine.\n "
2018/06/19 13:40:24 " PRIVATE "
2018/06/19 13:40:24 " This is the function that does the actual reading of data.  If you are\n * not reading from a standard C stream, you should create a replacement\n * read_data function and use it at run time with png_set_read_fn(), rather\n * than changing the library.\n "
2018/06/19 13:40:24 " fread() returns 0 on error, so it is OK to store this in a png_size_t\n    * instead of an int, which is what fread() actually returns.\n    "
2018/06/19 13:40:24 " This function allows the application to supply a new input function\n * for libpng if standard C streams aren't being used.\n *\n * This function takes as its arguments:\n *\n * png_ptr      - pointer to a png input data structure\n *\n * io_ptr       - pointer to user supplied structure containing info about\n *                the input functions.  May be NULL.\n *\n * read_data_fn - pointer to a new input function that takes as its\n *                arguments a pointer to a png_struct, a pointer to\n *                a location where input data can be stored, and a 32-bit\n *                unsigned int that is the number of bytes to be read.\n *                To exit and output any fatal error messages the new write\n *                function should call png_error(png_ptr, \"Error msg\").\n *                May be NULL, in which case libpng's default function will\n *                be used.\n "
2018/06/19 13:40:24 " It is an error to write to a read device "
2018/06/19 13:40:24 " READ "
2018/06/19 13:40:24 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngrio.c": 12.673845ms
2018/06/19 13:40:24 Couldn't classify license(s)
2018/06/19 13:40:25 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/example.c
2018/06/19 13:40:25 detected language: 4
2018/06/19 13:40:25 " in case someone actually tries to compile this "
2018/06/19 13:40:25 " example.c - an example of using libpng\n * Last changed in libpng 1.6.24 [August 4, 2016]\n * Maintained 1998-2016 Glenn Randers-Pehrson\n * Maintained 1996, 1997 Andreas Dilger)\n * Written 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n * To the extent possible under law, the authors have waived\n * all copyright and related or neighboring rights to this file.\n * This work is published from: United States.\n "
2018/06/19 13:40:25 " This is an example of how to use libpng to read and write PNG files.\n * The file libpng-manual.txt is much more verbose then this.  If you have not\n * read it, do so first.  This was designed to be a starting point of an\n * implementation.  This is not officially part of libpng, is hereby placed\n * in the public domain, and therefore does not require a copyright notice.\n *\n * This file does not currently compile, because it is missing certain\n * parts, like allocating memory to hold an image.  You will have to\n * supply these parts to get it to compile.  For an example of a minimal\n * working PNG reader/writer, see pngtest.c, included in this distribution;\n * see also the programs in the contrib directory.\n "
2018/06/19 13:40:25 " The simple, but restricted, approach to reading a PNG file or data stream\n * just requires two function calls, as in the following complete program.\n * Writing a file just needs one function call, so long as the data has an\n * appropriate layout.\n *\n * The following code reads PNG image data from a file and writes it, in a\n * potentially new format, to a new file.  While this code will compile there is\n * minimal (insufficient) error checking; for a more realistic version look at\n * contrib/examples/pngtopng.c\n "
2018/06/19 13:40:25 " The control structure used by libpng "
2018/06/19 13:40:25 " Initialize the 'png_image' structure. "
2018/06/19 13:40:25 " The first argument is the file to read: "
2018/06/19 13:40:25 " Set the format in which to read the PNG file; this code chooses a\n          * simple sRGB format with a non-associated alpha channel, adequate to\n          * store most images.\n          "
2018/06/19 13:40:25 " Now allocate enough memory to hold the image in this format; the\n          * PNG_IMAGE_SIZE macro uses the information about the image (width,\n          * height and format) stored in 'image'.\n          "
2018/06/19 13:40:25 " If enough memory was available read the image in the desired format\n          * then write the result out to the new file.  'background' is not\n          * necessary when reading the image because the alpha channel is\n          * preserved; if it were to be removed, for example if we requested\n          * PNG_FORMAT_RGB, then either a solid background color would have to\n          * be supplied or the output buffer would have to be initialized to the\n          * actual background of the image.\n          *\n          * The fourth argument to png_image_finish_read is the 'row_stride' -\n          * this is the number of components allocated for the image in each\n          * row.  It has to be at least as big as the value returned by\n          * PNG_IMAGE_ROW_STRIDE, but if you just allocate space for the\n          * default, minimum, size using PNG_IMAGE_SIZE as above you can pass\n          * zero.\n          *\n          * The final argument is a pointer to a buffer for the colormap;\n          * colormaps have exactly the same format as a row of image pixels (so\n          * you choose what format to make the colormap by setting\n          * image.format).  A colormap is only returned if\n          * PNG_FORMAT_FLAG_COLORMAP is also set in image.format, so in this\n          * case NULL is passed as the final argument.  If you do want to force\n          * all images into an index/color-mapped format then you can use:\n          *\n          *    PNG_IMAGE_COLORMAP_SIZE(image)\n          *\n          * to find the maximum size of the colormap in bytes.\n          "
2018/06/19 13:40:25 "background\nrow_stride\ncolormap"
2018/06/19 13:40:25 " Now write the image out to the second argument.  In the write\n             * call 'convert_to_8bit' allows 16-bit data to be squashed down to\n             * 8 bits; this isn't necessary here because the original read was\n             * to the 8-bit format.\n             "
2018/06/19 13:40:25 "convert_to_8bit\nrow_stride\ncolormap"
2018/06/19 13:40:25 " The image has been written successfully. "
2018/06/19 13:40:25 " Calling png_image_free is optional unless the simplified API was\n             * not run to completion.  In this case if there wasn't enough\n             * memory for 'buffer' we didn't complete the read, so we must free\n             * the image:\n             "
2018/06/19 13:40:25 " Something went wrong reading or writing the image.  libpng stores a\n       * textual message in the 'png_image' structure:\n       "
2018/06/19 13:40:25 " That's it ;-)  Of course you probably want to do more with PNG files than\n * just converting them all to 32-bit RGBA PNG files; you can do that between\n * the call to png_image_finish_read and png_image_write_to_file.  You can also\n * ask for the image data to be presented in a number of different formats.  You\n * do this by simply changing the 'format' parameter set before allocating the\n * buffer.\n *\n * The format parameter consists of five flags that define various aspects of\n * the image, you can simply add these together to get the format or you can use\n * one of the predefined macros from png.h (as above):\n *\n * PNG_FORMAT_FLAG_COLOR: if set the image will have three color components per\n *    pixel (red, green and blue), if not set the image will just have one\n *    luminance (grayscale) component.\n *\n * PNG_FORMAT_FLAG_ALPHA: if set each pixel in the image will have an additional\n *    alpha value; a linear value that describes the degree the image pixel\n *    covers (overwrites) the contents of the existing pixel on the display.\n *\n * PNG_FORMAT_FLAG_LINEAR: if set the components of each pixel will be returned\n *    as a series of 16-bit linear values, if not set the components will be\n *    returned as a series of 8-bit values encoded according to the 'sRGB'\n *    standard.  The 8-bit format is the normal format for images intended for\n *    direct display, because almost all display devices do the inverse of the\n *    sRGB transformation to the data they receive.  The 16-bit format is more\n *    common for scientific data and image data that must be further processed;\n *    because it is linear simple math can be done on the component values.\n *    Regardless of the setting of this flag the alpha channel is always linear,\n *    although it will be 8 bits or 16 bits wide as specified by the flag.\n *\n * PNG_FORMAT_FLAG_BGR: if set the components of a color pixel will be returned\n *    in the order blue, then green, then red.  If not set the pixel components\n *    are in the order red, then green, then blue.\n *\n * PNG_FORMAT_FLAG_AFIRST: if set the alpha channel (if present) precedes the\n *    color or grayscale components.  If not set the alpha channel follows the\n *    components.\n *\n * You do not have to read directly from a file.  You can read from memory or,\n * on systems that support it, from a <stdio.h> FILE*.  This is controlled by\n * the particular png_image_read_from_ function you call at the start.  Likewise\n * on write you can write to a FILE* if your system supports it.  Check the\n * macro PNG_STDIO_SUPPORTED to see if stdio support has been included in your\n * libpng build.\n *\n * If you read 16-bit (PNG_FORMAT_FLAG_LINEAR) data you may need to write it in\n * the 8-bit format for display.  You do this by setting the convert_to_8bit\n * flag to 'true'.\n *\n * Don't repeatedly convert between the 8-bit and 16-bit forms.  There is\n * significant data loss when 16-bit data is converted to the 8-bit encoding and\n * the current libpng implementation of conversion to 16-bit is also\n * significantly lossy.  The latter will be fixed in the future, but the former\n * is unavoidable - the 8-bit format just doesn't have enough resolution.\n "
2018/06/19 13:40:25 " If your program needs more information from the PNG data it reads, or if you\n * need to do more complex transformations, or minimize transformations, on the\n * data you read, then you must use one of the several lower level libpng\n * interfaces.\n *\n * All these interfaces require that you do your own error handling - your\n * program must be able to arrange for control to return to your own code any\n * time libpng encounters a problem.  There are several ways to do this, but the\n * standard way is to use the ANSI-C (C90) <setjmp.h> interface to establish a\n * return point within your own code.  You must do this if you do not use the\n * simplified interface (above).\n *\n * The first step is to include the header files you need, including the libpng\n * header file.  Include any standard headers and feature test macros your\n * program requires before including png.h:\n "
2018/06/19 13:40:25 " The png_jmpbuf() macro, used in error handling, became available in\n  * libpng version 1.0.6.  If you want to be able to run your code with older\n  * versions of libpng, you must define the macro yourself (but only if it\n  * is not already defined by libpng!).\n  "
2018/06/19 13:40:25 " Check to see if a file is a PNG file using png_sig_cmp().  png_sig_cmp()\n * returns zero if the image is a PNG and nonzero if it isn't a PNG.\n *\n * The function check_if_png() shown here, but not used, returns nonzero (true)\n * if the file can be opened and is a PNG, 0 (false) otherwise.\n *\n * If this call is successful, and you are going to keep the file open,\n * you should call png_set_sig_bytes(png_ptr, PNG_BYTES_TO_CHECK); once\n * you have created the png_ptr, so that libpng knows your application\n * has read that many bytes from the start of the file.  Make sure you\n * don't call png_set_sig_bytes() with more than 8 bytes read or give it\n * an incorrect number of bytes read, or you will either have read too\n * many bytes (your fault), or you are telling libpng to read the wrong\n * number of magic bytes (also your fault).\n *\n * Many applications already read the first 2 or 4 bytes from the start\n * of the image to determine the file type, so it would be easiest just\n * to pass the bytes to png_sig_cmp() or even skip that if you know\n * you have a PNG file, and call png_set_sig_bytes().\n "
2018/06/19 13:40:25 " Open the prospective PNG file. "
2018/06/19 13:40:25 " Read in some of the signature bytes "
2018/06/19 13:40:25 " Compare the first PNG_BYTES_TO_CHECK bytes of the signature.\n      Return nonzero (true) if they match "
2018/06/19 13:40:25 " Read a PNG file.  You may want to return an error code if the read\n * fails (depending upon the failure).  There are two \"prototypes\" given\n * here - one where we are given the filename, and we need to open the\n * file, and the other where we are given an open file (possibly with\n * some or all of the magic bytes read - see comments above).\n "
2018/06/19 13:40:25 " prototype 1 \n We need to open the file "
2018/06/19 13:40:25 " prototype 2 \n File is already open "
2018/06/19 13:40:25 " Only use one prototype! "
2018/06/19 13:40:25 " Create and initialize the png_struct with the desired error handler\n    * functions.  If you want to use the default stderr and longjump method,\n    * you can supply NULL for the last three parameters.  We also supply the\n    * the compiler header file version, so that we know if the application\n    * was compiled with a compatible version of the library.  REQUIRED\n    "
2018/06/19 13:40:25 " Allocate/initialize the memory for image information.  REQUIRED. "
2018/06/19 13:40:25 " Set error handling if you are using the setjmp/longjmp method (this is\n    * the normal method of doing things with libpng).  REQUIRED unless you\n    * set up your own error handlers in the png_create_read_struct() earlier.\n    "
2018/06/19 13:40:25 " Free all of the memory associated with the png_ptr and info_ptr "
2018/06/19 13:40:25 " If we get here, we had a problem reading the file "
2018/06/19 13:40:25 " One of the following I/O initialization methods is REQUIRED \n PNG file I/O method 1 \n Set up the input control if you are using standard C streams "
2018/06/19 13:40:25 " PNG file I/O method 2 \n If you are using replacement read functions, instead of calling\n    * png_init_io() here you would call:\n    "
2018/06/19 13:40:25 " where user_io_ptr is a structure you want available to the callbacks \n Use only one I/O method! "
2018/06/19 13:40:25 " If we have already read some of the signature "
2018/06/19 13:40:25 "\n    * If you have enough memory to read in the entire image at once,\n    * and you need to specify only transforms that can be controlled\n    * with one of the PNG_TRANSFORM_* bits (this presently excludes\n    * quantizing, filling, setting background, and doing gamma\n    * adjustment), then you can read the entire image (including\n    * pixels) into the info structure with this call:\n    "
2018/06/19 13:40:25 " OK, you're doing it the hard way, with the lower-level functions "
2018/06/19 13:40:25 " The call to png_read_info() gives us all of the information from the\n    * PNG file before the first IDAT (image data chunk).  REQUIRED\n    "
2018/06/19 13:40:25 " Set up the data transformations you want.  Note that these are all\n    * optional.  Only call them if you want/need them.  Many of the\n    * transformations only work on specific types of images, and many\n    * are mutually exclusive.\n    "
2018/06/19 13:40:25 " Tell libpng to strip 16 bits/color files down to 8 bits/color.\n    * Use accurate scaling if it's available, otherwise just chop off the\n    * low byte.\n    "
2018/06/19 13:40:25 " Strip alpha bytes from the input data without combining with the\n    * background (not recommended).\n    "
2018/06/19 13:40:25 " Extract multiple pixels with bit depths of 1, 2, and 4 from a single\n    * byte into separate bytes (useful for paletted and grayscale images).\n    "
2018/06/19 13:40:25 " Change the order of packed pixels to least significant bit first\n    * (not useful if you are using png_set_packing). "
2018/06/19 13:40:25 " Expand paletted colors into true RGB triplets "
2018/06/19 13:40:25 " Expand grayscale images to the full 8 bits from 1, 2, or 4 bits/pixel "
2018/06/19 13:40:25 " Expand paletted or RGB images with transparency to full alpha channels\n    * so the data will be available as RGBA quartets.\n    "
2018/06/19 13:40:25 " Set the background color to draw transparent and alpha images over.\n    * It is possible to set the red, green, and blue components directly\n    * for paletted images instead of supplying a palette index.  Note that\n    * even if the PNG file supplies a background, you are not required to\n    * use it - you should use the (solid) application background if it has one.\n    "
2018/06/19 13:40:25 " Some suggestions as to how to get a screen gamma value\n    *\n    * Note that screen gamma is the display_exponent, which includes\n    * the CRT_exponent and any correction for viewing conditions\n    "
2018/06/19 13:40:25 " We have a user-defined screen gamma value "
2018/06/19 13:40:25 " This is one way that applications share the same screen gamma value "
2018/06/19 13:40:25 " If we don't have another value "
2018/06/19 13:40:25 " A good guess for a PC monitor\n                                           in a dimly lit room "
2018/06/19 13:40:25 " Good guesses for Mac systems "
2018/06/19 13:40:25 " Tell libpng to handle the gamma conversion for you.  The final call\n    * is a good guess for PC generated images, but it should be configurable\n    * by the user at run time by the user.  It is strongly suggested that\n    * your application support gamma correction.\n    "
2018/06/19 13:40:25 " Quantize RGB files down to 8-bit palette or reduce palettes\n    * to the number of colors available on your screen.\n    "
2018/06/19 13:40:25 " This reduces the image to the application supplied palette \n We have our own palette "
2018/06/19 13:40:25 " An array of colors to which the image should be quantized "
2018/06/19 13:40:25 " This reduces the image to the palette supplied in the file "
2018/06/19 13:40:25 " READ_QUANTIZE "
2018/06/19 13:40:25 " Invert monochrome files to have 0 as white and 1 as black "
2018/06/19 13:40:25 " If you want to shift the pixel values from the range [0,255] or\n    * [0,65535] to the original [0,7] or [0,31], or whatever range the\n    * colors were originally in:\n    "
2018/06/19 13:40:25 " Flip the RGB pixels to BGR (or RGBA to BGRA) "
2018/06/19 13:40:25 " Swap the RGBA or GA data to ARGB or AG (or BGRA to ABGR) "
2018/06/19 13:40:25 " Swap bytes of 16-bit files to least significant byte first "
2018/06/19 13:40:25 " Add filler (or alpha) byte (before/after each RGB triplet) "
2018/06/19 13:40:25 " Turn on interlace handling.  REQUIRED if you are not using\n    * png_read_image().  To see how to handle interlacing passes,\n    * see the png_read_row() method below:\n    "
2018/06/19 13:40:25 " !READ_INTERLACING "
2018/06/19 13:40:25 " READ_INTERLACING "
2018/06/19 13:40:25 " Optional call to gamma correct and add the background to the palette\n    * and update info structure.  REQUIRED if you are expecting libpng to\n    * update the palette for you (ie you selected such a transform above).\n    "
2018/06/19 13:40:25 " Allocate the memory to hold the image using the fields of info_ptr. "
2018/06/19 13:40:25 " The easiest way to read the image: "
2018/06/19 13:40:25 " Clear the pointer array "
2018/06/19 13:40:25 " Now it's time to read the image.  One of these methods is REQUIRED \n Read the entire image in one go "
2018/06/19 13:40:25 " Read the image one or more scanlines at a time \n The other way to read images - deal with interlacing: "
2018/06/19 13:40:25 " Read the image a single row at a time "
2018/06/19 13:40:25 " Read the image several rows at a time "
2018/06/19 13:40:25 " Read the image using the \"sparkle\" effect. "
2018/06/19 13:40:25 " Read the image using the \"rectangle\" effect "
2018/06/19 13:40:25 " Use only one of these two methods "
2018/06/19 13:40:25 " If you want to display the image after every pass, do so here \n Use only one of these two methods "
2018/06/19 13:40:25 " Use only one of these two methods "
2018/06/19 13:40:25 " Read rest of file, and get additional chunks in info_ptr - REQUIRED "
2018/06/19 13:40:25 " At this point you have read the entire image "
2018/06/19 13:40:25 " Clean up after the read, and free any memory allocated - REQUIRED "
2018/06/19 13:40:25 " Close the file "
2018/06/19 13:40:25 " That's it "
2018/06/19 13:40:25 " Progressively read a file "
2018/06/19 13:40:25 " Create and initialize the png_struct with the desired error handler\n    * functions.  If you want to use the default stderr and longjump method,\n    * you can supply NULL for the last three parameters.  We also check that\n    * the library version is compatible in case we are using dynamically\n    * linked libraries.\n    "
2018/06/19 13:40:25 " This one's new.  You will need to provide all three\n    * function callbacks, even if you aren't using them all.\n    * If you aren't using all functions, you can specify NULL\n    * parameters.  Even when all three functions are NULL,\n    * you need to call png_set_progressive_read_fn().\n    * These functions shouldn't be dependent on global or\n    * static variables if you are decoding several images\n    * simultaneously.  You should store stream specific data\n    * in a separate struct, given as the second parameter,\n    * and retrieve the pointer from inside the callbacks using\n    * the function png_get_progressive_ptr(png_ptr).\n    "
2018/06/19 13:40:25 " Free the png_ptr and info_ptr memory on error "
2018/06/19 13:40:25 " This one's new also.  Simply give it chunks of data as\n    * they arrive from the data stream (in order, of course).\n    * On segmented machines, don't give it any more than 64K.\n    * The library seems to run fine with sizes of 4K, although\n    * you can give it much less if necessary (I assume you can\n    * give it chunks of 1 byte, but I haven't tried with less\n    * than 256 bytes yet).  When this function returns, you may\n    * want to display any rows that were generated in the row\n    * callback, if you aren't already displaying them there.\n    "
2018/06/19 13:40:25 " Do any setup here, including setting any of the transformations\n    * mentioned in the Reading PNG files section.  For now, you _must_\n    * call either png_start_read_image() or png_read_update_info()\n    * after all the transformations are set (even if you don't set\n    * any).  You may start getting rows before png_process_data()\n    * returns, so this is your last chance to prepare for that.\n    "
2018/06/19 13:40:25 "\n    * This function is called for every row in the image.  If the\n    * image is interlaced, and you turned on the interlace handler,\n    * this function will be called for every row in every pass.\n    *\n    * In this function you will receive a pointer to new row data from\n    * libpng called new_row that is to replace a corresponding row (of\n    * the same data format) in a buffer allocated by your application.\n    *\n    * The new row data pointer \"new_row\" may be NULL, indicating there is\n    * no new data to be replaced (in cases of interlace loading).\n    *\n    * If new_row is not NULL then you need to call\n    * png_progressive_combine_row() to replace the corresponding row as\n    * shown below:\n    "
2018/06/19 13:40:25 " Get pointer to corresponding row in our\n    * PNG read buffer.\n    "
2018/06/19 13:40:25 " If both rows are allocated then copy the new row\n    * data to the corresponding row data.\n    "
2018/06/19 13:40:25 "\n    * The rows and passes are called in order, so you don't really\n    * need the row_num and pass, but I'm supplying them because it\n    * may make your life easier.\n    *\n    * For the non-NULL rows of interlaced images, you must call\n    * png_progressive_combine_row() passing in the new row and the\n    * old row, as demonstrated above.  You can call this function for\n    * NULL rows (it will just return) and for non-interlaced images\n    * (it just does the memcpy for you) if it will make the code\n    * easier.  Thus, you can just do this for all cases:\n    "
2018/06/19 13:40:25 " where old_row is what was displayed for previous rows.  Note\n    * that the first pass (pass == 0 really) will completely cover\n    * the old row, so the rows do not have to be initialized.  After\n    * the first pass (and only for interlaced images), you will have\n    * to pass the current row as new_row, and the function will combine\n    * the old row and the new row.\n    "
2018/06/19 13:40:25 " READ_INTERLACING "
2018/06/19 13:40:25 " This function is called when the whole image has been read,\n    * including any chunks after the image (up to and including\n    * the IEND).  You will usually have the same info chunk as you\n    * had in the header, although some data may have been added\n    * to the comments and time fields.\n    *\n    * Most people won't do much here, perhaps setting a flag that\n    * marks the image as finished.\n    "
2018/06/19 13:40:25 " Write a png file \n , ... other image information ... "
2018/06/19 13:40:25 " Open the file "
2018/06/19 13:40:25 " Create and initialize the png_struct with the desired error handler\n    * functions.  If you want to use the default stderr and longjump method,\n    * you can supply NULL for the last three parameters.  We also check that\n    * the library version is compatible with the one used at compile time,\n    * in case we are using dynamically linked libraries.  REQUIRED.\n    "
2018/06/19 13:40:25 " Allocate/initialize the image information data.  REQUIRED "
2018/06/19 13:40:25 " Set error handling.  REQUIRED if you aren't supplying your own\n    * error handling functions in the png_create_write_struct() call.\n    "
2018/06/19 13:40:25 " If we get here, we had a problem writing the file "
2018/06/19 13:40:25 " One of the following I/O initialization functions is REQUIRED "
2018/06/19 13:40:25 " I/O initialization method 1 \n Set up the output control if you are using standard C streams "
2018/06/19 13:40:25 " I/O initialization method 2 \n If you are using replacement write functions, instead of calling\n    * png_init_io() here you would call\n    "
2018/06/19 13:40:25 " where user_io_ptr is a structure you want available to the callbacks \n Only use one initialization method "
2018/06/19 13:40:25 " This is the easy way.  Use it if you already have all the\n    * image info living in the structure.  You could \"|\" many\n    * PNG_TRANSFORM flags into the png_transforms integer here.\n    "
2018/06/19 13:40:25 " This is the hard way "
2018/06/19 13:40:25 " Set the image information here.  Width and height are up to 2^31,\n    * bit_depth is one of 1, 2, 4, 8, or 16, but valid values also depend on\n    * the color_type selected. color_type is one of PNG_COLOR_TYPE_GRAY,\n    * PNG_COLOR_TYPE_GRAY_ALPHA, PNG_COLOR_TYPE_PALETTE, PNG_COLOR_TYPE_RGB,\n    * or PNG_COLOR_TYPE_RGB_ALPHA.  interlace is either PNG_INTERLACE_NONE or\n    * PNG_INTERLACE_ADAM7, and the compression_type and filter_type MUST\n    * currently be PNG_COMPRESSION_TYPE_BASE and PNG_FILTER_TYPE_BASE. REQUIRED\n    "
2018/06/19 13:40:25 " Set the palette if there is one.  REQUIRED for indexed-color images "
2018/06/19 13:40:25 " ... Set palette colors ... "
2018/06/19 13:40:25 " You must not free palette here, because png_set_PLTE only makes a link to\n    * the palette that you malloced.  Wait until you are about to destroy\n    * the png structure.\n    "
2018/06/19 13:40:25 " Optional significant bit (sBIT) chunk "
2018/06/19 13:40:25 " If we are dealing with a grayscale image then "
2018/06/19 13:40:25 " Otherwise, if we are dealing with a color image then "
2018/06/19 13:40:25 " If the image has an alpha channel then "
2018/06/19 13:40:25 " Optional gamma chunk is strongly suggested if you have any guess\n    * as to the correct gamma of the image.\n    "
2018/06/19 13:40:25 " Optionally write comments into the image "
2018/06/19 13:40:25 " Other optional chunks like cHRM, bKGD, tRNS, tIME, oFFs, pHYs "
2018/06/19 13:40:25 " Note that if sRGB is present the gAMA and cHRM chunks must be ignored\n    * on read and, if your application chooses to write them, they must\n    * be written in accordance with the sRGB profile\n    "
2018/06/19 13:40:25 " Write the file header information.  REQUIRED "
2018/06/19 13:40:25 " If you want, you can write the info in two steps, in case you need to\n    * write your private chunk ahead of PLTE:\n    *\n    *   png_write_info_before_PLTE(write_ptr, write_info_ptr);\n    *   write_my_chunk();\n    *   png_write_info(png_ptr, info_ptr);\n    *\n    * However, given the level of known- and unknown-chunk support in 1.2.0\n    * and up, this should no longer be necessary.\n    "
2018/06/19 13:40:25 " Once we write out the header, the compression type on the text\n    * chunk gets changed to PNG_TEXT_COMPRESSION_NONE_WR or\n    * PNG_TEXT_COMPRESSION_zTXt_WR, so it doesn't get written out again\n    * at the end.\n    "
2018/06/19 13:40:25 " Set up the transformations you want.  Note that these are\n    * all optional.  Only call them if you want them.\n    "
2018/06/19 13:40:25 " Invert monochrome pixels "
2018/06/19 13:40:25 " Shift the pixels up to a legal bit depth and fill in\n    * as appropriate to correctly scale the image.\n    "
2018/06/19 13:40:25 " Pack pixels into bytes "
2018/06/19 13:40:25 " Swap location of alpha bytes from ARGB to RGBA "
2018/06/19 13:40:25 " Get rid of filler (OR ALPHA) bytes, pack XRGB/RGBX/ARGB/RGBA into\n    * RGB (4 channels -> 3 channels). The second parameter is not used.\n    "
2018/06/19 13:40:25 " Flip BGR pixels to RGB "
2018/06/19 13:40:25 " Swap bytes of 16-bit files to most significant byte first "
2018/06/19 13:40:25 " Swap bits of 1-bit, 2-bit, 4-bit packed pixel formats "
2018/06/19 13:40:25 " Turn on interlace handling if you are not using png_write_image() "
2018/06/19 13:40:25 " The easiest way to write the image (you may have a different memory\n    * layout, however, so choose what fits your needs best).  You need to\n    * use the first method if you aren't handling interlacing yourself.\n    "
2018/06/19 13:40:25 " In this example, \"image\" is a one-dimensional array of bytes "
2018/06/19 13:40:25 " Guard against integer overflow "
2018/06/19 13:40:25 " Set up pointers into your \"image\" byte array "
2018/06/19 13:40:25 " One of the following output methods is REQUIRED "
2018/06/19 13:40:25 " Write out the entire image data in one call "
2018/06/19 13:40:25 " The other way to write the image - deal with interlacing "
2018/06/19 13:40:25 " Write out the image data by one or more scanlines "
2018/06/19 13:40:25 " The number of passes is either 1 for non-interlaced images,\n    * or 7 for interlaced images.\n    "
2018/06/19 13:40:25 " Write a few rows at a time. "
2018/06/19 13:40:25 " If you are only writing one row at a time, this works "
2018/06/19 13:40:25 " Use only one output method "
2018/06/19 13:40:25 " You can write optional chunks like tEXt, zTXt, and tIME at the end\n    * as well.  Shouldn't be necessary in 1.2.0 and up as all the public\n    * chunks are supported and you can use png_set_unknown_chunks() to\n    * register unknown chunks into the info structure to be written out.\n    "
2018/06/19 13:40:25 " It is REQUIRED to call this to finish writing the rest of the file "
2018/06/19 13:40:25 " If you png_malloced a palette, free it here (don't free info_ptr->palette,\n    * as recommended in versions 1.0.5m and earlier of this example; if\n    * libpng mallocs info_ptr->palette, libpng will free it).  If you\n    * allocated it with malloc() instead of png_malloc(), use free() instead\n    * of png_free().\n    "
2018/06/19 13:40:25 " Similarly, if you png_malloced any data that you passed in with\n    * png_set_something(), such as a hist or trans array, free it here,\n    * when you can be sure that libpng is through with it.\n    "
2018/06/19 13:40:25 " Whenever you use png_free() it is a good idea to set the pointer to\n    * NULL in case your application inadvertently tries to png_free() it\n    * again.  When png_free() sees a NULL it returns without action, thus\n    * avoiding the double-free security problem.\n    "
2018/06/19 13:40:25 " Clean up after the write, and free any memory allocated "
2018/06/19 13:40:25 " Close the file "
2018/06/19 13:40:25 " That's it "
2018/06/19 13:40:25 " if 0 "
2018/06/19 13:40:25 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/example.c": 100.908693ms
2018/06/19 13:40:25 Couldn't classify license(s)
2018/06/19 13:40:26 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/libpng.3
2018/06/19 13:40:27 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/libpng.3": 1.227306402s
2018/06/19 13:40:27 Couldn't classify license(s)
2018/06/19 13:40:28 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/autogen.sh
2018/06/19 13:40:28 detected language: 32
2018/06/19 13:40:28 "! /bin/sh\n\n Run 'autoreconf' to build 'configure', 'Makefile.in' and other configure\n control files.\n\n The first time this is run on a GIT checkout the only files that exist are\n configure.ac and Makefile.am; all of the autotools support scripts are\n missing.  They are instantiated with autoreconf --force --install.\n\n For regular (\"tarball\") distributions all the files should exist.  We do not\n want them to be updated *under any circumstances*.  It should never be\n necessary to run autogen.sh because ./configure --enable-maintainer-mode says\n what to do if Makefile.am or configure.ac are changed.\n\n It is *probably* OK to update the files on a GIT checkout, because they have\n come from the local tools, but leave that to the user who is assumed to know\n whether it is ok or required.\n\n This script is intended to work without arguments, there are, however, hidden\n arguments (a) for use while testing the script and (b) to fix up systems that\n have been broken.  If (b) is required the script prompts for the correct\n options.  For this reason the options are *NOT* documented in the help; this\n is deliberate; UTSL.\n"
2018/06/19 13:40:28 " -gt 0"
2018/06/19 13:40:28 "\n First check for a set of the autotools files; if absent then this is assumed\n to be a GIT version and the local autotools must be used.  If present this\n is a tarball distribution and the script should not be used.  If partially\n present bad things are happening.\n\n The autotools generated files:"
2018/06/19 13:40:28 "\n Files generated by versions of configue >2.68 or automake >1.13 (i.e. later\n versions than those required by configure.ac):"
2018/06/19 13:40:28 "\n These are separate because 'maintainer-clean' does not remove them."
2018/06/19 13:40:28 " not required\n\n The configure generated files:"
2018/06/19 13:40:28 "\n We must remove the configure generated files as well as the autotools\n generated files if autotools are regenerated because otherwise if configure\n has been run without \"--enable-maintainer-mode\" make can do a partial update\n of Makefile.  These functions do the two bits of cleaning."
2018/06/19 13:40:28 "\n Clean: remove everything (this is to help with testing)"
2018/06/19 13:40:28 "\n Validate the distribution."
2018/06/19 13:40:28 "\n Presence of one of these does not *invalidate* missing, but absence\n invalidates found."
2018/06/19 13:40:28 "\n The cache directory doesn't matter - it will be regenerated and does not exist\n anyway in a tarball.\n\n Either everything is missing or everything is there, the --maintainer option\n just changes this so that the mode is set to generate all the files."
2018/06/19 13:40:28 "\n So:"
2018/06/19 13:40:28 " Clean in case configure files exist"
2018/06/19 13:40:28 " Everything must be initialized, so use --force"
2018/06/19 13:40:28 " ignore the cache directory"
2018/06/19 13:40:28 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/autogen.sh": 18.332105ms
2018/06/19 13:40:28 Couldn't classify license(s)
2018/06/19 13:40:28 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/depcomp
2018/06/19 13:40:29 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/depcomp": 76.033664ms
2018/06/19 13:40:29 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngbar.png
2018/06/19 13:40:29 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngbar.png": 6.213018ms
2018/06/19 13:40:29 Couldn't classify license(s)
2018/06/19 13:40:30 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/libpngpf.3
2018/06/19 13:40:30 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/libpngpf.3": 8.689089ms
2018/06/19 13:40:30 Couldn't classify license(s)
2018/06/19 13:40:31 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/test-driver
2018/06/19 13:40:31 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/test-driver": 22.589468ms
2018/06/19 13:40:32 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/TODO
2018/06/19 13:40:32 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/TODO": 8.861731ms
2018/06/19 13:40:32 Couldn't classify license(s)
2018/06/19 13:40:33 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngdebug.h
2018/06/19 13:40:33 detected language: 4
2018/06/19 13:40:33 " pngdebug.h - Debugging macros for libpng, also used in pngtest.c\n *\n * Last changed in libpng 1.6.8 [December 19, 2013]\n * Copyright (c) 1998-2002,2004,2006-2013 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:40:33 " Define PNG_DEBUG at compile time for debugging information.  Higher\n * numbers for PNG_DEBUG mean more debugging information.  This has\n * only been added since version 0.95 so it is not implemented throughout\n * libpng yet, but more support will be added as needed.\n *\n * png_debug[1-2]?(level, message ,arg{0-2})\n *   Expands to a statement (either a simple expression or a compound\n *   do..while(0) statement) that outputs a message with parameter\n *   substitution if PNG_DEBUG is defined to 2 or more.  If PNG_DEBUG\n *   is undefined, 0 or 1 every png_debug expands to a simple expression\n *   (actually ((void)0)).\n *\n *   level: level of detail of message, starting at 0.  A level 'n'\n *          message is preceded by 'n' 3-space indentations (not implemented\n *          on Microsoft compilers unless PNG_DEBUG_FILE is also\n *          defined, to allow debug DLL compilation with no standard IO).\n *   message: a printf(3) style text string.  A trailing '\\n' is added\n *            to the message.\n *   arg: 0 to 2 arguments for printf(3) style substitution in message.\n "
2018/06/19 13:40:33 " These settings control the formatting of messages in png.c and pngerror.c \n Moved to pngdebug.h at 1.5.0 "
2018/06/19 13:40:33 " PNG_DEBUG_FILE || !_MSC_VER "
2018/06/19 13:40:33 " not included yet "
2018/06/19 13:40:33 " PNG_DEBUG_FILE "
2018/06/19 13:40:33 " __STDC __ "
2018/06/19 13:40:33 " __STDC __ \n (PNG_DEBUG > 1) "
2018/06/19 13:40:33 " _MSC_VER \n (PNG_DEBUG > 0) \n PNG_DEBUG "
2018/06/19 13:40:33 " PNGDEBUG_H "
2018/06/19 13:40:33 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngdebug.h": 15.311235ms
2018/06/19 13:40:33 Couldn't classify license(s)
2018/06/19 13:40:34 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/libpng.pc.in
2018/06/19 13:40:34 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/libpng.pc.in": 7.324242ms
2018/06/19 13:40:34 Couldn't classify license(s)
2018/06/19 13:40:35 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/ltsugar.m4
2018/06/19 13:40:35 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/ltsugar.m4": 17.386095ms
2018/06/19 13:40:35 Couldn't classify license(s)
2018/06/19 13:40:36 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.darwin
2018/06/19 13:40:36 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.darwin": 31.521108ms
2018/06/19 13:40:36 Couldn't classify license(s)
2018/06/19 13:40:37 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/pnglibconf.dfa
2018/06/19 13:40:37 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/pnglibconf.dfa": 179.755232ms
2018/06/19 13:40:37 Couldn't classify license(s)
2018/06/19 13:40:38 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.std
2018/06/19 13:40:38 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.std": 20.518529ms
2018/06/19 13:40:38 Couldn't classify license(s)
2018/06/19 13:40:38 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.solaris-x86
2018/06/19 13:40:38 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.solaris-x86": 28.054079ms
2018/06/19 13:40:38 Couldn't classify license(s)
2018/06/19 13:40:39 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.ibmc
2018/06/19 13:40:39 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.ibmc": 14.247735ms
2018/06/19 13:40:39 Couldn't classify license(s)
2018/06/19 13:40:40 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.aix
2018/06/19 13:40:40 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.aix": 17.511419ms
2018/06/19 13:40:40 Couldn't classify license(s)
2018/06/19 13:40:41 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.acorn
2018/06/19 13:40:41 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.acorn": 4.123445ms
2018/06/19 13:40:41 Couldn't classify license(s)
2018/06/19 13:40:42 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/genchk.cmake.in
2018/06/19 13:40:42 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/genchk.cmake.in": 9.48789ms
2018/06/19 13:40:42 Couldn't classify license(s)
2018/06/19 13:40:43 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.amiga
2018/06/19 13:40:43 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.amiga": 9.561708ms
2018/06/19 13:40:43 Couldn't classify license(s)
2018/06/19 13:40:44 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/genout.cmake.in
2018/06/19 13:40:44 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/genout.cmake.in": 14.942677ms
2018/06/19 13:40:44 Couldn't classify license(s)
2018/06/19 13:40:45 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/libpng-config-head.in
2018/06/19 13:40:45 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/libpng-config-head.in": 6.357403ms
2018/06/19 13:40:45 Couldn't classify license(s)
2018/06/19 13:40:46 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/libtool.m4
2018/06/19 13:40:47 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/libtool.m4": 1.27712741s
2018/06/19 13:40:47 Couldn't classify license(s)
2018/06/19 13:40:48 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.gcc
2018/06/19 13:40:48 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.gcc": 15.485041ms
2018/06/19 13:40:48 Couldn't classify license(s)
2018/06/19 13:40:49 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/pnglibconf.mak
2018/06/19 13:40:49 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/pnglibconf.mak": 13.969437ms
2018/06/19 13:40:49 Couldn't classify license(s)
2018/06/19 13:40:49 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.cegcc
2018/06/19 13:40:49 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.cegcc": 14.393007ms
2018/06/19 13:40:49 Couldn't classify license(s)
2018/06/19 13:40:50 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.bor
2018/06/19 13:40:50 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.bor": 19.628725ms
2018/06/19 13:40:50 Couldn't classify license(s)
2018/06/19 13:40:51 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.bc32
2018/06/19 13:40:51 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.bc32": 18.203659ms
2018/06/19 13:40:51 Couldn't classify license(s)
2018/06/19 13:40:52 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.hp64
2018/06/19 13:40:52 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.hp64": 29.451025ms
2018/06/19 13:40:52 Couldn't classify license(s)
2018/06/19 13:40:53 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.so9
2018/06/19 13:40:53 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.so9": 30.254053ms
2018/06/19 13:40:53 Couldn't classify license(s)
2018/06/19 13:40:54 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/def.c
2018/06/19 13:40:54 detected language: 4
2018/06/19 13:40:54 " def.c - define format of libpng.def\n *\n * Last changed in libpng version 1.6.16 [December 22, 2014]\n * Copyright (c) 2011-2014 Glenn Randers-Pehrson\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:40:54 " Write the export file header: "
2018/06/19 13:40:54 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/def.c": 6.44814ms
2018/06/19 13:40:54 Couldn't classify license(s)
2018/06/19 13:40:55 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.sco
2018/06/19 13:40:55 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.sco": 27.998176ms
2018/06/19 13:40:55 Couldn't classify license(s)
2018/06/19 13:40:56 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/test.cmake.in
2018/06/19 13:40:56 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/test.cmake.in": 8.408506ms
2018/06/19 13:40:56 Couldn't classify license(s)
2018/06/19 13:40:57 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.knr
2018/06/19 13:40:57 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.knr": 17.547585ms
2018/06/19 13:40:57 Couldn't classify license(s)
2018/06/19 13:40:57 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.sgi
2018/06/19 13:40:58 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.sgi": 27.925649ms
2018/06/19 13:40:58 Couldn't classify license(s)
2018/06/19 13:40:58 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/libpng-config-body.in
2018/06/19 13:40:58 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/libpng-config-body.in": 11.27594ms
2018/06/19 13:40:58 Couldn't classify license(s)
2018/06/19 13:40:59 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/README.txt
2018/06/19 13:40:59 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/README.txt": 18.167295ms
2018/06/19 13:40:59 Couldn't classify license(s)
2018/06/19 13:41:00 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.tc3
2018/06/19 13:41:00 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.tc3": 6.481478ms
2018/06/19 13:41:00 Couldn't classify license(s)
2018/06/19 13:41:01 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/sym.c
2018/06/19 13:41:01 detected language: 4
2018/06/19 13:41:01 " sym.c - define format of libpng.sym\n *\n * Last changed in libpng version 1.6.16 [December 22, 2014]\n * Copyright (c) 2011-2014 Glenn Randers-Pehrson\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:41:01 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/sym.c": 6.392675ms
2018/06/19 13:41:01 Couldn't classify license(s)
2018/06/19 13:41:02 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.64sunu
2018/06/19 13:41:02 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.64sunu": 29.956799ms
2018/06/19 13:41:02 Couldn't classify license(s)
2018/06/19 13:41:03 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makevms.com
2018/06/19 13:41:03 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makevms.com": 9.368671ms
2018/06/19 13:41:03 Couldn't classify license(s)
2018/06/19 13:41:04 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.msys
2018/06/19 13:41:04 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.msys": 24.32276ms
2018/06/19 13:41:04 Couldn't classify license(s)
2018/06/19 13:41:05 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/pngwin.rc
2018/06/19 13:41:05 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/pngwin.rc": 18.898551ms
2018/06/19 13:41:05 Couldn't classify license(s)
2018/06/19 13:41:06 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/vers.c
2018/06/19 13:41:06 detected language: 4
2018/06/19 13:41:06 " vers.c - define format of libpng.vers\n *\n * Last changed in libpng version 1.6.16 [December 22, 2014]\n * Copyright (c) 2011-2014 Glenn Randers-Pehrson\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:41:06 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/vers.c": 8.569507ms
2018/06/19 13:41:06 Couldn't classify license(s)
2018/06/19 13:41:06 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/symbols.def
2018/06/19 13:41:06 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/symbols.def": 28.029538ms
2018/06/19 13:41:06 Couldn't classify license(s)
2018/06/19 13:41:07 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.hpgcc
2018/06/19 13:41:07 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.hpgcc": 27.437266ms
2018/06/19 13:41:07 Couldn't classify license(s)
2018/06/19 13:41:08 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.32sunu
2018/06/19 13:41:08 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.32sunu": 34.935007ms
2018/06/19 13:41:08 Couldn't classify license(s)
2018/06/19 13:41:09 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.vcwin32
2018/06/19 13:41:09 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.vcwin32": 19.026888ms
2018/06/19 13:41:09 Couldn't classify license(s)
2018/06/19 13:41:10 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.linux-opt
2018/06/19 13:41:10 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.linux-opt": 32.177996ms
2018/06/19 13:41:10 Couldn't classify license(s)
2018/06/19 13:41:11 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.solaris
2018/06/19 13:41:11 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.solaris": 29.256981ms
2018/06/19 13:41:11 Couldn't classify license(s)
2018/06/19 13:41:12 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/ltversion.m4
2018/06/19 13:41:12 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/ltversion.m4": 7.160197ms
2018/06/19 13:41:12 Couldn't classify license(s)
2018/06/19 13:41:13 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.sunos
2018/06/19 13:41:13 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.sunos": 21.860437ms
2018/06/19 13:41:13 Couldn't classify license(s)
2018/06/19 13:41:14 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.hpux
2018/06/19 13:41:14 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.hpux": 29.9965ms
2018/06/19 13:41:14 Couldn't classify license(s)
2018/06/19 13:41:15 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.ne12bsd
2018/06/19 13:41:15 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.ne12bsd": 9.887243ms
2018/06/19 13:41:15 Couldn't classify license(s)
2018/06/19 13:41:15 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/SCOPTIONS.ppc
2018/06/19 13:41:15 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/SCOPTIONS.ppc": 651.343µs
2018/06/19 13:41:15 Couldn't classify license(s)
2018/06/19 13:41:16 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.intel
2018/06/19 13:41:16 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.intel": 16.623682ms
2018/06/19 13:41:16 Couldn't classify license(s)
2018/06/19 13:41:17 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.mips
2018/06/19 13:41:17 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.mips": 17.337561ms
2018/06/19 13:41:17 Couldn't classify license(s)
2018/06/19 13:41:18 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.beos
2018/06/19 13:41:18 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.beos": 27.002641ms
2018/06/19 13:41:18 Couldn't classify license(s)
2018/06/19 13:41:19 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.msc
2018/06/19 13:41:19 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.msc": 17.35511ms
2018/06/19 13:41:19 Couldn't classify license(s)
2018/06/19 13:41:20 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/symbols.c
2018/06/19 13:41:20 detected language: 4
2018/06/19 13:41:20 " symbols.c - find all exported symbols\n *\n * Last changed in libpng version 1.6.16 [December 22, 2014]\n * Copyright (c) 2011-2014 Glenn Randers-Pehrson\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:41:20 " NOTE: making 'symbols.chk' checks both that the exported\n * symbols in the library don't change and (implicitly) that\n * scripts/pnglibconf.h.prebuilt is as expected.\n * If scripts/pnglibconf.h.prebuilt is remade using\n * scripts/pnglibconf.dfa then this checks the .dfa file too.\n "
2018/06/19 13:41:20 " Read the defaults, but use scripts/pnglibconf.h.prebuilt; the 'standard'\n * header file.\n "
2018/06/19 13:41:20 " Some things are turned off by default.  Turn these things\n * on here (by hand) to get the APIs they expose and validate\n * that no harm is done.  This list is the set of options\n * defaulted to 'off' in scripts/pnglibconf.dfa\n *\n * Maintenance: if scripts/pnglibconf.dfa options are changed\n * from, or to, 'disabled' this needs updating!\n "
2018/06/19 13:41:20 " should do nothing! "
2018/06/19 13:41:20 " Finally there are a couple of places where option support\n * actually changes the APIs revealed using a #if/#else/#endif\n * test in png.h, test these here.\n "
2018/06/19 13:41:20 " Exposes 'fixed' APIs \n Exposes unsupported APIs "
2018/06/19 13:41:20 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/symbols.c": 8.409233ms
2018/06/19 13:41:20 Couldn't classify license(s)
2018/06/19 13:41:21 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/options.awk
2018/06/19 13:41:21 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/options.awk": 105.376158ms
2018/06/19 13:41:21 Couldn't classify license(s)
2018/06/19 13:41:22 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/dfn.awk
2018/06/19 13:41:22 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/dfn.awk": 19.807665ms
2018/06/19 13:41:22 Couldn't classify license(s)
2018/06/19 13:41:23 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.sggcc
2018/06/19 13:41:23 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.sggcc": 27.248689ms
2018/06/19 13:41:23 Couldn't classify license(s)
2018/06/19 13:41:23 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.openbsd
2018/06/19 13:41:23 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.openbsd": 12.854919ms
2018/06/19 13:41:23 Couldn't classify license(s)
2018/06/19 13:41:24 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/ltoptions.m4
2018/06/19 13:41:24 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/ltoptions.m4": 49.32977ms
2018/06/19 13:41:24 Couldn't classify license(s)
2018/06/19 13:41:25 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/checksym.awk
2018/06/19 13:41:25 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/checksym.awk": 20.068816ms
2018/06/19 13:41:25 Couldn't classify license(s)
2018/06/19 13:41:26 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.atari
2018/06/19 13:41:26 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.atari": 11.656537ms
2018/06/19 13:41:26 Couldn't classify license(s)
2018/06/19 13:41:27 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.linux
2018/06/19 13:41:27 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.linux": 29.06158ms
2018/06/19 13:41:27 Couldn't classify license(s)
2018/06/19 13:41:28 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/libpng.pc.in
2018/06/19 13:41:28 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/libpng.pc.in": 6.355346ms
2018/06/19 13:41:28 Couldn't classify license(s)
2018/06/19 13:41:29 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.freebsd
2018/06/19 13:41:29 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.freebsd": 12.671589ms
2018/06/19 13:41:29 Couldn't classify license(s)
2018/06/19 13:41:30 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.dec
2018/06/19 13:41:30 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.dec": 25.062508ms
2018/06/19 13:41:30 Couldn't classify license(s)
2018/06/19 13:41:30 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/descrip.mms
2018/06/19 13:41:30 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/descrip.mms": 4.457307ms
2018/06/19 13:41:30 Couldn't classify license(s)
2018/06/19 13:41:31 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.netbsd
2018/06/19 13:41:31 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.netbsd": 9.83256ms
2018/06/19 13:41:31 Couldn't classify license(s)
2018/06/19 13:41:32 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/gensrc.cmake.in
2018/06/19 13:41:32 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/gensrc.cmake.in": 20.495705ms
2018/06/19 13:41:32 Couldn't classify license(s)
2018/06/19 13:41:33 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/makefile.dj2
2018/06/19 13:41:33 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/makefile.dj2": 13.041076ms
2018/06/19 13:41:33 Couldn't classify license(s)
2018/06/19 13:41:34 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/macro.lst
2018/06/19 13:41:34 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/macro.lst": 628.332µs
2018/06/19 13:41:34 Couldn't classify license(s)
2018/06/19 13:41:35 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/intprefix.c
2018/06/19 13:41:35 detected language: 4
2018/06/19 13:41:35 " intprefix.c - generate an unprefixed internal symbol list\n *\n * Last changed in libpng version 1.6.16 [December 22, 2014]\n * Copyright (c) 2013-2014 Glenn Randers-Pehrson\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:41:35 " self generation "
2018/06/19 13:41:35 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/intprefix.c": 6.944134ms
2018/06/19 13:41:35 Couldn't classify license(s)
2018/06/19 13:41:36 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/pnglibconf.h.prebuilt
2018/06/19 13:41:36 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/pnglibconf.h.prebuilt": 28.793206ms
2018/06/19 13:41:36 Couldn't classify license(s)
2018/06/19 13:41:36 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/lt~obsolete.m4
2018/06/19 13:41:36 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/lt~obsolete.m4": 23.278546ms
2018/06/19 13:41:36 Couldn't classify license(s)
2018/06/19 13:41:37 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/prefix.c
2018/06/19 13:41:37 detected language: 4
2018/06/19 13:41:37 " prefix.c - generate an unprefixed symbol list\n *\n * Last changed in libpng version 1.6.16 [December 22, 2014]\n * Copyright (c) 2013-2014 Glenn Randers-Pehrson\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:41:37 " The configuration information *before* the additional of symbol renames,\n * the list is the C name list; no symbol prefix.\n "
2018/06/19 13:41:37 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/prefix.c": 6.443792ms
2018/06/19 13:41:37 Couldn't classify license(s)
2018/06/19 13:41:38 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/scripts/smakefile.ppc
2018/06/19 13:41:38 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/scripts/smakefile.ppc": 8.157118ms
2018/06/19 13:41:38 Couldn't classify license(s)
2018/06/19 13:41:39 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngwutil.c
2018/06/19 13:41:39 detected language: 4
2018/06/19 13:41:39 " pngwutil.c - utilities to write a PNG file\n *\n * Last changed in libpng 1.6.32 [August 24, 2017]\n * Copyright (c) 1998-2002,2004,2006-2017 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:41:39 " Place a 32-bit number into a buffer in PNG byte order.  We work\n * with unsigned numbers for convenience, although one supported\n * ancillary chunk uses signed (two's complement) numbers.\n "
2018/06/19 13:41:39 " Place a 16-bit number into a buffer in PNG byte order.\n * The parameter is declared unsigned int, not png_uint_16,\n * just to avoid potential problems on pre-ANSI C compilers.\n "
2018/06/19 13:41:39 " Simple function to write the signature.  If we have already written\n * the magic bytes of the signature, or more likely, the PNG stream is\n * being embedded into another stream and doesn't need its own signature,\n * we should call png_set_sig_bytes() to tell libpng how many of the\n * bytes have already been written.\n "
2018/06/19 13:41:39 " Inform the I/O callback that the signature is being written "
2018/06/19 13:41:39 " Write the rest of the 8 byte signature "
2018/06/19 13:41:39 " Write the start of a PNG chunk.  The type is the chunk type.\n * The total_length is the sum of the lengths of all the data you will be\n * passing in png_write_chunk_data().\n "
2018/06/19 13:41:39 " Inform the I/O callback that the chunk header is being written.\n    * PNG_IO_CHUNK_HDR requires a single I/O call.\n    "
2018/06/19 13:41:39 " Write the length and the chunk name "
2018/06/19 13:41:39 " Put the chunk name into png_ptr->chunk_name "
2018/06/19 13:41:39 " Reset the crc and run it over the chunk name "
2018/06/19 13:41:39 " Inform the I/O callback that chunk data will (possibly) be written.\n    * PNG_IO_CHUNK_DATA does NOT require a specific number of I/O calls.\n    "
2018/06/19 13:41:39 " Write the data of a PNG chunk started with png_write_chunk_header().\n * Note that multiple calls to this function are allowed, and that the\n * sum of the lengths from these calls *must* add up to the total_length\n * given to png_write_chunk_header().\n "
2018/06/19 13:41:39 " Write the data, and run the CRC over it "
2018/06/19 13:41:39 " Update the CRC after writing the data,\n       * in case the user I/O routine alters it.\n       "
2018/06/19 13:41:39 " Finish a chunk started with png_write_chunk_header(). "
2018/06/19 13:41:39 " Inform the I/O callback that the chunk CRC is being written.\n    * PNG_IO_CHUNK_CRC requires a single I/O function call.\n    "
2018/06/19 13:41:39 " Write the crc in a single operation "
2018/06/19 13:41:39 " Write a PNG chunk all at once.  The type is an array of ASCII characters\n * representing the chunk name.  The array must be at least 4 bytes in\n * length, and does not need to be null terminated.  To be safe, pass the\n * pre-defined chunk names here, and if you need a new one, define it\n * where the others are defined.  The length is the length of the data.\n * All the data must be present.  If that is not possible, use the\n * png_write_chunk_start(), png_write_chunk_data(), and png_write_chunk_end()\n * functions instead.\n "
2018/06/19 13:41:39 " On 64-bit architectures 'length' may not fit in a png_uint_32. "
2018/06/19 13:41:39 " This is the API that calls the internal function above. "
2018/06/19 13:41:39 " This is used below to find the size of an image to pass to png_deflate_claim,\n * so it only needs to be accurate if the size is less than 16384 bytes (the\n * point at which a lower LZ window size can be used.)\n "
2018/06/19 13:41:39 " Only return sizes up to the maximum of a png_uint_32; do this by limiting\n    * the width and height used to 15 bits.\n    "
2018/06/19 13:41:39 " Interlacing makes the image larger because of the replication of\n          * both the filter byte and the padding to a byte boundary.\n          "
2018/06/19 13:41:39 " This is the code to hack the first two bytes of the deflate stream (the\n    * deflate header) to correct the windowBits value to match the actual data\n    * size.  Note that the second argument is the *uncompressed* size but the\n    * first argument is the *compressed* data (and it must be deflate\n    * compressed.)\n    "
2018/06/19 13:41:39 " Optimize the CMF field in the zlib stream.  The resultant zlib stream is\n    * still compliant to the stream specification.\n    "
2018/06/19 13:41:39 " else windowBits must be 15 "
2018/06/19 13:41:39 " zlib compression method and flags "
2018/06/19 13:41:39 " else no change "
2018/06/19 13:41:39 " WRITE_OPTIMIZE_CMF "
2018/06/19 13:41:39 " Initialize the compressor for the appropriate type of compression. "
2018/06/19 13:41:39 " So the message that results is \"<chunk> using zstream\"; this is an\n       * internal error, but is very useful for debugging.  i18n requirements\n       * are minimal.\n       "
2018/06/19 13:41:39 " Attempt sane error recovery \n don't steal from IDAT "
2018/06/19 13:41:39 " set below \n zlib return code "
2018/06/19 13:41:39 " If customization is not supported the values all come from the\n             * IDAT values except for the strategy, which is fixed to the\n             * default.  (This is the pre-1.6.0 behavior too, although it was\n             * implemented in a very different way.)\n             "
2018/06/19 13:41:39 " Adjust 'windowBits' down if larger than 'data_size'; to stop this\n       * happening just pass 32768 as the data_size parameter.  Notice that zlib\n       * requires an extra 262 bytes in the window in addition to the data to be\n       * able to see the whole of the data, so if data_size+262 takes us to the\n       * next windowBits size we need to fix up the value later.  (Because even\n       * though deflate needs the extra window, inflate does not!)\n       "
2018/06/19 13:41:39 " IMPLEMENTATION NOTE: this 'half_window_size' stuff is only here to\n          * work round a Microsoft Visual C misbehavior which, contrary to C-90,\n          * widens the result of the following shift to 64-bits if (and,\n          * apparently, only if) it is used in a test.\n          "
2018/06/19 13:41:39 " Check against the previous initialized values, if any. "
2018/06/19 13:41:39 " For safety clear out the input and output pointers (currently zlib\n       * doesn't use them on Init, but it might in the future).\n       "
2018/06/19 13:41:39 " Now initialize if required, setting the new parameters, otherwise just\n       * do a simple reset to the previous parameters.\n       "
2018/06/19 13:41:39 " The return code is from either deflateReset or deflateInit2; they have\n       * pretty much the same set of error codes.\n       "
2018/06/19 13:41:39 " Clean up (or trim) a linked list of compression buffers. \n PRIVATE "
2018/06/19 13:41:39 " This pair of functions encapsulates the operation of (a) compressing a\n * text string, and (b) issuing it later as a series of chunk data writes.\n * The compression_state structure is shared context for these functions\n * set up by the caller to allow access to the relevant local variables.\n *\n * compression_buffer (new in 1.6.0) is just a linked list of zbuffer_size\n * temporary buffers.  From 1.6.0 it is retained in png_struct so that it will\n * be correctly freed in the event of a write error (previous implementations\n * just leaked memory.)\n "
2018/06/19 13:41:39 " The uncompressed input data \n Its length \n Final compressed length \n First block of output "
2018/06/19 13:41:39 " Compress the data in the compression state input "
2018/06/19 13:41:39 " To find the length of the output it is necessary to first compress the\n    * input. The result is buffered rather than using the two-pass algorithm\n    * that is used on the inflate side; deflate is assumed to be slower and a\n    * PNG writer is assumed to have more memory available than a PNG reader.\n    *\n    * IMPLEMENTATION NOTE: the zlib API deflateBound() can be used to find an\n    * upper limit on the output size, but it is always bigger than the input\n    * size so it is likely to be more efficient to use this linked-list\n    * approach.\n    "
2018/06/19 13:41:39 " Set up the compression buffers, we need a loop here to avoid overflowing a\n    * uInt.  Use ZLIB_IO_MAX to limit the input.  The output is always limited\n    * by the output buffer size, so there is no need to check that.  Since this\n    * is ANSI-C we know that an 'int', hence a uInt, is always at least 16 bits\n    * in size.\n    "
2018/06/19 13:41:39 " may be zero! "
2018/06/19 13:41:39 " zlib updates these for us: "
2018/06/19 13:41:39 " Set below "
2018/06/19 13:41:39 " Chunk data is limited to 2^31 bytes in length, so the prefix\n             * length must be counted here.\n             "
2018/06/19 13:41:39 " Need a new (malloc'ed) buffer, but there may be one present\n             * already.\n             "
2018/06/19 13:41:39 " Link in this buffer (so that it will be freed later) "
2018/06/19 13:41:39 " Move 'end' to the next buffer pointer. "
2018/06/19 13:41:39 " Compress the data "
2018/06/19 13:41:39 " Claw back input data that was not consumed (because avail_in is\n          * reset above every time round the loop).\n          "
2018/06/19 13:41:39 " safety "
2018/06/19 13:41:39 " There may be some space left in the last output buffer. This needs to\n       * be subtracted from output_len.\n       "
2018/06/19 13:41:39 " safety "
2018/06/19 13:41:39 " Now double check the output length, put in a custom message if it is\n       * too long.  Otherwise ensure the z_stream::msg pointer is set to\n       * something.\n       "
2018/06/19 13:41:39 " Reset zlib for another zTXt/iTXt or image data "
2018/06/19 13:41:39 " The only success case is Z_STREAM_END, input_len must be 0; if not this\n       * is an internal error.\n       "
2018/06/19 13:41:39 " Fix up the deflate header, if required "
2018/06/19 13:41:39 " But Z_OK is returned, not Z_STREAM_END; this allows the claim\n          * function above to return Z_STREAM_END on an error (though it never\n          * does in the current versions of zlib.)\n          "
2018/06/19 13:41:39 " Ship the compressed text out via chunk writes "
2018/06/19 13:41:39 " This is an internal error; 'next' must have been NULL! "
2018/06/19 13:41:39 " WRITE_COMPRESSED_TEXT "
2018/06/19 13:41:39 " Write the IHDR chunk, and update the png_struct with the necessary\n * information.  Note that the rest of this code depends upon this\n * information being correct.\n "
2018/06/19 13:41:39 " PRIVATE "
2018/06/19 13:41:39 " Buffer to store the IHDR info "
2018/06/19 13:41:39 " Check that we have valid input data from the application info "
2018/06/19 13:41:39 " Write filter_method 64 (intrapixel differencing) only if\n    * 1. Libpng was compiled with PNG_MNG_FEATURES_SUPPORTED and\n    * 2. Libpng did not write a PNG signature (this filter_method is only\n    *    used in PNG datastreams that are embedded in MNG datastreams) and\n    * 3. The application called png_permit_mng_features with a mask that\n    *    included PNG_FLAG_MNG_FILTER_64 and\n    * 4. The filter_method is 64 and\n    * 5. The color_type is RGB or RGBA\n    "
2018/06/19 13:41:39 " Save the relevant information "
2018/06/19 13:41:39 " Set the usr info, so any transformations can modify it "
2018/06/19 13:41:39 " Pack the header information into the buffer "
2018/06/19 13:41:39 " Write the chunk "
2018/06/19 13:41:39 " not READY_FOR_ZTXT "
2018/06/19 13:41:39 " Write the palette.  We are careful not to trust png_color to be in the\n * correct order for PNG, so people can redefine it to any convenient\n * structure.\n "
2018/06/19 13:41:39 " PRIVATE "
2018/06/19 13:41:39 " This is a little slower but some buggy compilers need to do this\n    * instead\n    "
2018/06/19 13:41:39 " This is similar to png_text_compress, above, except that it does not require\n * all of the data at once and, instead of buffering the compressed result,\n * writes it as IDAT chunks.  Unlike png_text_compress it *can* png_error out\n * because it calls the write interface.  As a result it does its own error\n * reporting and does not return an error code.  In the event of error it will\n * just call png_error.  The input data length may exceed 32-bits.  The 'flush'\n * parameter is exactly the same as that to deflate, with the following\n * meanings:\n *\n * Z_NO_FLUSH: normal incremental output of compressed data\n * Z_SYNC_FLUSH: do a SYNC_FLUSH, used by png_write_flush\n * Z_FINISH: this is the end of the input, do a Z_FINISH and clean up\n *\n * The routine manages the acquire and release of the png_ptr->zstream by\n * checking and (at the end) clearing png_ptr->zowner; it does some sanity\n * checks on the 'mode' flags while doing this.\n "
2018/06/19 13:41:39 " PRIVATE "
2018/06/19 13:41:39 " First time.   Ensure we have a temporary buffer for compression and\n       * trim the buffer list if it has more than one entry to free memory.\n       * If 'WRITE_COMPRESSED_TEXT' is not set the list will never have been\n       * created at this point, but the check here is quick and safe.\n       "
2018/06/19 13:41:39 " It is a terminal error if we can't claim the zstream. "
2018/06/19 13:41:39 " The output state is maintained in png_ptr->zstream, so it must be\n       * initialized here after the claim.\n       "
2018/06/19 13:41:39 " Now loop reading and writing until all the input is consumed or an error\n    * terminates the operation.  The _out values are maintained across calls to\n    * this function, but the input must be reset each time.\n    "
2018/06/19 13:41:39 " set below "
2018/06/19 13:41:39 " INPUT: from the row data "
2018/06/19 13:41:39 " safe because of the check "
2018/06/19 13:41:39 " Include as-yet unconsumed input "
2018/06/19 13:41:39 " OUTPUT: write complete IDAT chunks when avail_out drops to zero. Note\n       * that these two zstream fields are preserved across the calls, therefore\n       * there is no need to set these up on entry to the loop.\n       "
2018/06/19 13:41:39 " Write an IDAT containing the data then reset the buffer.  The\n          * first IDAT may need deflate header optimization.\n          "
2018/06/19 13:41:39 " For SYNC_FLUSH or FINISH it is essential to keep calling zlib with\n          * the same flush parameter until it has finished output, for NO_FLUSH\n          * it doesn't matter.\n          "
2018/06/19 13:41:39 " The order of these checks doesn't matter much; it just affects which\n       * possible error might be detected if multiple things go wrong at once.\n       "
2018/06/19 13:41:39 " most likely return code! "
2018/06/19 13:41:39 " If all the input has been consumed then just return.  If Z_FINISH\n          * was used as the flush parameter something has gone wrong if we get\n          * here.\n          "
2018/06/19 13:41:39 " This is the end of the IDAT data; any pending output must be\n          * flushed.  For small PNG files we may still be at the beginning.\n          "
2018/06/19 13:41:39 " Release the stream "
2018/06/19 13:41:39 " This is an error condition. "
2018/06/19 13:41:39 " Write an IEND chunk \n PRIVATE "
2018/06/19 13:41:39 " Write a gAMA chunk \n PRIVATE "
2018/06/19 13:41:39 " file_gamma is saved in 1/100,000ths "
2018/06/19 13:41:39 " Write a sRGB chunk \n PRIVATE "
2018/06/19 13:41:39 " Write an iCCP chunk \n PRIVATE "
2018/06/19 13:41:39 " 1 byte for the compression byte "
2018/06/19 13:41:39 " These are all internal problems: the profile should have been checked\n    * before when it was stored.\n    "
2018/06/19 13:41:39 " internal error "
2018/06/19 13:41:39 " Make sure we include the NULL after the name and the compression type "
2018/06/19 13:41:39 " Allow for keyword terminator and compression byte "
2018/06/19 13:41:39 " Write a sPLT chunk \n PRIVATE "
2018/06/19 13:41:39 " Make sure we include the NULL after the name "
2018/06/19 13:41:39 " Loop through each palette entry, writing appropriately "
2018/06/19 13:41:39 " Write the sBIT chunk \n PRIVATE "
2018/06/19 13:41:39 " Make sure we don't depend upon the order of PNG_COLOR_8 "
2018/06/19 13:41:39 " Write the cHRM chunk \n PRIVATE "
2018/06/19 13:41:39 " Each value is saved in 1/100,000ths "
2018/06/19 13:41:39 " Write the tRNS chunk \n PRIVATE "
2018/06/19 13:41:39 " Write the chunk out as it is "
2018/06/19 13:41:39 " One 16-bit value "
2018/06/19 13:41:39 " Three 16-bit values "
2018/06/19 13:41:39 " Write the background chunk \n PRIVATE "
2018/06/19 13:41:39 " Write the Exif data \n PRIVATE "
2018/06/19 13:41:39 " Write the histogram \n PRIVATE "
2018/06/19 13:41:39 " Write a tEXt chunk \n PRIVATE "
2018/06/19 13:41:39 " Make sure we include the 0 after the key "
2018/06/19 13:41:39 "checked above\n\n    * We leave it to the application to meet PNG-1.0 requirements on the\n    * contents of the text.  PNG-1.0 through PNG-1.2 discourage the use of\n    * any non-Latin-1 characters except for NEWLINE.  ISO PNG will forbid them.\n    * The NUL character is forbidden by PNG-1.0 through PNG-1.2 and ISO PNG.\n    "
2018/06/19 13:41:39 " Write a compressed text chunk \n PRIVATE "
2018/06/19 13:41:39 " Add the compression method and 1 for the keyword separator. "
2018/06/19 13:41:39 " Compute the compressed data; do it now for the length "
2018/06/19 13:41:39 " Write start of chunk "
2018/06/19 13:41:39 " Write key "
2018/06/19 13:41:39 " Write the compressed data "
2018/06/19 13:41:39 " Close the chunk "
2018/06/19 13:41:39 " Write an iTXt chunk \n PRIVATE "
2018/06/19 13:41:39 " Set the compression flag "
2018/06/19 13:41:39 " no compression "
2018/06/19 13:41:39 " compressed "
2018/06/19 13:41:39 " for the keywod separator "
2018/06/19 13:41:39 " We leave it to the application to meet PNG-1.0 requirements on the\n    * contents of the text.  PNG-1.0 through PNG-1.2 discourage the use of\n    * any non-Latin-1 characters except for NEWLINE.  ISO PNG, however,\n    * specifies that the text is UTF-8 and this really doesn't require any\n    * checking.\n    *\n    * The NUL character is forbidden by PNG-1.0 through PNG-1.2 and ISO PNG.\n    *\n    * TODO: validate the language tag correctly (see the spec.)\n    "
2018/06/19 13:41:39 " empty language is valid "
2018/06/19 13:41:39 " may be empty "
2018/06/19 13:41:39 " may be empty "
2018/06/19 13:41:39 " So the string will fit in a chunk: \nSAFE"
2018/06/19 13:41:39 " Write the oFFs chunk \n PRIVATE "
2018/06/19 13:41:39 " Write the pCAL chunk (described in the PNG extensions document) \n PRIVATE "
2018/06/19 13:41:39 " terminator "
2018/06/19 13:41:39 " Find the length of each parameter, making sure we don't count the\n    * null terminator for the last parameter.\n    "
2018/06/19 13:41:39 " Write the sCAL chunk \n PRIVATE "
2018/06/19 13:41:39 " Append the '\\0' here \n Do NOT append the '\\0' here "
2018/06/19 13:41:39 " Write the pHYs chunk \n PRIVATE "
2018/06/19 13:41:39 " Write the tIME chunk.  Use either png_convert_from_struct_tm()\n * or png_convert_from_time_t(), or fill in the structure yourself.\n "
2018/06/19 13:41:39 " PRIVATE "
2018/06/19 13:41:39 " Initializes the row writing capability of libpng \n PRIVATE "
2018/06/19 13:41:39 " Arrays to facilitate easy interlacing - use pass (0 - 6) as index "
2018/06/19 13:41:39 " Start of interlace block "
2018/06/19 13:41:39 " Offset to next interlace block "
2018/06/19 13:41:39 " Start of interlace block in the y direction "
2018/06/19 13:41:39 " Offset to next interlace block in the y direction "
2018/06/19 13:41:39 " 1.5.6: added to allow checking in the row write code. "
2018/06/19 13:41:39 " Set up row buffer "
2018/06/19 13:41:39 " We only need to keep the previous row if we are using one of the following\n    * filters.\n    "
2018/06/19 13:41:39 " WRITE_FILTER "
2018/06/19 13:41:39 " If interlaced, we need to set up width and height of pass "
2018/06/19 13:41:39 " Internal use only.  Called when finished processing a row of data. \n PRIVATE "
2018/06/19 13:41:39 " Arrays to facilitate easy interlacing - use pass (0 - 6) as index "
2018/06/19 13:41:39 " Start of interlace block "
2018/06/19 13:41:39 " Offset to next interlace block "
2018/06/19 13:41:39 " Start of interlace block in the y direction "
2018/06/19 13:41:39 " Offset to next interlace block in the y direction "
2018/06/19 13:41:39 " Next row "
2018/06/19 13:41:39 " See if we are done "
2018/06/19 13:41:39 " If interlaced, go to next pass "
2018/06/19 13:41:39 " Loop until we find a non-zero width or height pass "
2018/06/19 13:41:39 " Reset the row above the image for the next pass "
2018/06/19 13:41:39 " If we get here, we've just written the last row, so we need\n      to flush the compressor "
2018/06/19 13:41:39 " Pick out the correct pixels for the interlace pass.\n * The basic idea here is to go through the row with a source\n * pointer and a destination pointer (sp and dp), and copy the\n * correct pixels for the pass.  As the row gets compacted,\n * sp will always be >= dp, so we should never overwrite anything.\n * See the default: case for the easiest code to understand.\n "
2018/06/19 13:41:39 " PRIVATE "
2018/06/19 13:41:39 " Arrays to facilitate easy interlacing - use pass (0 - 6) as index "
2018/06/19 13:41:39 " Start of interlace block "
2018/06/19 13:41:39 " Offset to next interlace block "
2018/06/19 13:41:39 " We don't have to do anything on the last pass (6) "
2018/06/19 13:41:39 " Each pixel depth is handled separately "
2018/06/19 13:41:39 " Start at the beginning "
2018/06/19 13:41:39 " Find out how many bytes each pixel takes up "
2018/06/19 13:41:39 " Loop through the row, only looking at the pixels that matter "
2018/06/19 13:41:39 " Find out where the original pixel is "
2018/06/19 13:41:39 " Move the pixel "
2018/06/19 13:41:39 " Next pixel "
2018/06/19 13:41:39 " Set new row width "
2018/06/19 13:41:39 " This filters the row, chooses which filter to use, if it has not already\n * been specified by the application, and then writes the row out with the\n * chosen filter.\n "
2018/06/19 13:41:39 " PRIVATE "
2018/06/19 13:41:39 " PRIVATE "
2018/06/19 13:41:39 " We are already worse, don't continue. "
2018/06/19 13:41:39 " PRIVATE "
2018/06/19 13:41:39 " PRIVATE "
2018/06/19 13:41:39 " We are already worse, don't continue. "
2018/06/19 13:41:39 " PRIVATE "
2018/06/19 13:41:39 " PRIVATE "
2018/06/19 13:41:39 " We are already worse, don't continue. "
2018/06/19 13:41:39 " PRIVATE "
2018/06/19 13:41:39 " PRIVATE "
2018/06/19 13:41:39 " We are already worse, don't continue. "
2018/06/19 13:41:39 " PRIVATE "
2018/06/19 13:41:39 " WRITE_FILTER "
2018/06/19 13:41:39 " PRIVATE "
2018/06/19 13:41:39 " Find out how many bytes offset each pixel is "
2018/06/19 13:41:39 " so we can detect potential overflow of the\n                               running sum "
2018/06/19 13:41:39 " The prediction method we use is to find which method provides the\n    * smallest value when summing the absolute values of the distances\n    * from zero, using anything >= 128 as negative numbers.  This is known\n    * as the \"minimum sum of absolute differences\" heuristic.  Other\n    * heuristics are the \"weighted minimum sum of absolute differences\"\n    * (experimental and can in theory improve compression), and the \"zlib\n    * predictive\" method (not implemented yet), which does test compressions\n    * of lines using different filter methods, and then chooses the\n    * (series of) filter(s) that give minimum compressed data size (VERY\n    * computationally expensive).\n    *\n    * GRR 980525:  consider also\n    *\n    *   (1) minimum sum of absolute differences from running average (i.e.,\n    *       keep running sum of non-absolute differences & count of bytes)\n    *       [track dispersion, too?  restart average if dispersion too large?]\n    *\n    *  (1b) minimum sum of absolute differences from sliding average, probably\n    *       with window size <= deflate window (usually 32K)\n    *\n    *   (2) minimum sum of squared differences from zero or running average\n    *       (i.e., ~ root-mean-square approach)\n    "
2018/06/19 13:41:39 " We don't need to test the 'no filter' case if this is the only filter\n    * that has been chosen, as it doesn't actually do anything to the data.\n    "
2018/06/19 13:41:39 " Overflow can occur in the calculation, just select the lowest set\n       * filter.\n       "
2018/06/19 13:41:39 " Overflow not possible and multiple filters in the list, including the\n       * 'none' filter.\n       "
2018/06/19 13:41:39 " Sub filter "
2018/06/19 13:41:39 " It's the only filter so no testing is needed "
2018/06/19 13:41:39 " Up filter "
2018/06/19 13:41:39 " Avg filter "
2018/06/19 13:41:39 " Paeth filter "
2018/06/19 13:41:39 " Do the actual writing of the filtered row data from the chosen filter. "
2018/06/19 13:41:39 " WRITE_FILTER "
2018/06/19 13:41:39 " Do the actual writing of a previously filtered row. "
2018/06/19 13:41:39 "includes filter byte"
2018/06/19 13:41:39 " Swap the current and previous rows "
2018/06/19 13:41:39 " WRITE_FILTER "
2018/06/19 13:41:39 " Finish row - updates counters and flushes zlib if last row "
2018/06/19 13:41:39 " WRITE_FLUSH "
2018/06/19 13:41:39 " WRITE "
2018/06/19 13:41:39 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngwutil.c": 81.839189ms
2018/06/19 13:41:39 Couldn't classify license(s)
2018/06/19 13:41:40 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-alpha-16-1.8.png
2018/06/19 13:41:40 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-alpha-16-1.8.png": 2.259416ms
2018/06/19 13:41:40 Couldn't classify license(s)
2018/06/19 13:41:41 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-16-sRGB-tRNS.png
2018/06/19 13:41:41 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-16-sRGB-tRNS.png": 2.557039ms
2018/06/19 13:41:41 Couldn't classify license(s)
2018/06/19 13:41:41 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-8-1.8.png
2018/06/19 13:41:41 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-8-1.8.png": 2.498193ms
2018/06/19 13:41:41 Couldn't classify license(s)
2018/06/19 13:41:42 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-1-tRNS.png
2018/06/19 13:41:42 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-1-tRNS.png": 1.068289ms
2018/06/19 13:41:42 Couldn't classify license(s)
2018/06/19 13:41:43 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-16.png
2018/06/19 13:41:43 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-16.png": 2.684112ms
2018/06/19 13:41:43 Couldn't classify license(s)
2018/06/19 13:41:44 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-alpha-8-linear.png
2018/06/19 13:41:44 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-alpha-8-linear.png": 2.116079ms
2018/06/19 13:41:44 Couldn't classify license(s)
2018/06/19 13:41:45 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-1-tRNS.png
2018/06/19 13:41:45 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-1-tRNS.png": 1.160102ms
2018/06/19 13:41:45 Couldn't classify license(s)
2018/06/19 13:41:45 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-4-linear.png
2018/06/19 13:41:45 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-4-linear.png": 1.055157ms
2018/06/19 13:41:45 Couldn't classify license(s)
2018/06/19 13:41:46 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-2-linear-tRNS.png
2018/06/19 13:41:46 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-2-linear-tRNS.png": 1.130532ms
2018/06/19 13:41:46 Couldn't classify license(s)
2018/06/19 13:41:47 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-4-1.8-tRNS.png
2018/06/19 13:41:47 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-4-1.8-tRNS.png": 1.150451ms
2018/06/19 13:41:47 Couldn't classify license(s)
2018/06/19 13:41:48 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-4-1.8-tRNS.png
2018/06/19 13:41:48 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-4-1.8-tRNS.png": 1.011849ms
2018/06/19 13:41:48 Couldn't classify license(s)
2018/06/19 13:41:49 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-8-sRGB.png
2018/06/19 13:41:49 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-8-sRGB.png": 1.85704ms
2018/06/19 13:41:49 Couldn't classify license(s)
2018/06/19 13:41:50 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-8-1.8-tRNS.png
2018/06/19 13:41:50 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-8-1.8-tRNS.png": 3.380511ms
2018/06/19 13:41:50 Couldn't classify license(s)
2018/06/19 13:41:50 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-alpha-16-1.8.png
2018/06/19 13:41:50 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-alpha-16-1.8.png": 3.183761ms
2018/06/19 13:41:50 Couldn't classify license(s)
2018/06/19 13:41:51 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-alpha-8-1.8.png
2018/06/19 13:41:51 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-alpha-8-1.8.png": 1.780794ms
2018/06/19 13:41:51 Couldn't classify license(s)
2018/06/19 13:41:52 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-2-tRNS.png
2018/06/19 13:41:52 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-2-tRNS.png": 889.11µs
2018/06/19 13:41:52 Couldn't classify license(s)
2018/06/19 13:41:53 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-8-tRNS.png
2018/06/19 13:41:53 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-8-tRNS.png": 930.15µs
2018/06/19 13:41:53 Couldn't classify license(s)
2018/06/19 13:41:54 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-2-sRGB-tRNS.png
2018/06/19 13:41:54 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-2-sRGB-tRNS.png": 989.194µs
2018/06/19 13:41:54 Couldn't classify license(s)
2018/06/19 13:41:54 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-2-sRGB-tRNS.png
2018/06/19 13:41:54 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-2-sRGB-tRNS.png": 978.048µs
2018/06/19 13:41:54 Couldn't classify license(s)
2018/06/19 13:41:55 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-16-1.8-tRNS.png
2018/06/19 13:41:55 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-16-1.8-tRNS.png": 1.758732ms
2018/06/19 13:41:55 Couldn't classify license(s)
2018/06/19 13:41:56 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-8-sRGB-tRNS.png
2018/06/19 13:41:56 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-8-sRGB-tRNS.png": 1.851528ms
2018/06/19 13:41:56 Couldn't classify license(s)
2018/06/19 13:41:57 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-16-tRNS.png
2018/06/19 13:41:57 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-16-tRNS.png": 2.597226ms
2018/06/19 13:41:57 Couldn't classify license(s)
2018/06/19 13:41:58 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-4-tRNS.png
2018/06/19 13:41:58 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-4-tRNS.png": 1.407605ms
2018/06/19 13:41:58 Couldn't classify license(s)
2018/06/19 13:41:59 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-16-sRGB.png
2018/06/19 13:41:59 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-16-sRGB.png": 2.432465ms
2018/06/19 13:41:59 Couldn't classify license(s)
2018/06/19 13:42:00 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-1-sRGB.png
2018/06/19 13:42:00 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-1-sRGB.png": 1.356145ms
2018/06/19 13:42:00 Couldn't classify license(s)
2018/06/19 13:42:01 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-8-sRGB-tRNS.png
2018/06/19 13:42:01 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-8-sRGB-tRNS.png": 5.180502ms
2018/06/19 13:42:01 Couldn't classify license(s)
2018/06/19 13:42:01 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-2-1.8.png
2018/06/19 13:42:01 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-2-1.8.png": 1.62634ms
2018/06/19 13:42:01 Couldn't classify license(s)
2018/06/19 13:42:02 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-2-tRNS.png
2018/06/19 13:42:02 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-2-tRNS.png": 1.086303ms
2018/06/19 13:42:02 Couldn't classify license(s)
2018/06/19 13:42:03 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-2-linear.png
2018/06/19 13:42:03 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-2-linear.png": 1.550043ms
2018/06/19 13:42:03 Couldn't classify license(s)
2018/06/19 13:42:04 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-16-sRGB.png
2018/06/19 13:42:04 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-16-sRGB.png": 3.489318ms
2018/06/19 13:42:04 Couldn't classify license(s)
2018/06/19 13:42:05 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-1-linear.png
2018/06/19 13:42:05 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-1-linear.png": 1.026923ms
2018/06/19 13:42:05 Couldn't classify license(s)
2018/06/19 13:42:06 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_iCCP_chunk.png
2018/06/19 13:42:06 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_iCCP_chunk.png": 654.803µs
2018/06/19 13:42:06 Couldn't classify license(s)
2018/06/19 13:42:07 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_bKGD_chunk.png
2018/06/19 13:42:07 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_bKGD_chunk.png": 562.473µs
2018/06/19 13:42:07 Couldn't classify license(s)
2018/06/19 13:42:08 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_pCAL_chunk.png
2018/06/19 13:42:08 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_pCAL_chunk.png": 804.117µs
2018/06/19 13:42:08 Couldn't classify license(s)
2018/06/19 13:42:09 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_pHYs_chunk.png
2018/06/19 13:42:09 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_pHYs_chunk.png": 658.618µs
2018/06/19 13:42:09 Couldn't classify license(s)
2018/06/19 13:42:09 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_zTXt_chunk.png
2018/06/19 13:42:09 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_zTXt_chunk.png": 440.383µs
2018/06/19 13:42:09 Couldn't classify license(s)
2018/06/19 13:42:10 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_tIME_chunk.png
2018/06/19 13:42:10 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_tIME_chunk.png": 648.231µs
2018/06/19 13:42:10 Couldn't classify license(s)
2018/06/19 13:42:11 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_sTER_chunk.png
2018/06/19 13:42:11 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_sTER_chunk.png": 727.575µs
2018/06/19 13:42:11 Couldn't classify license(s)
2018/06/19 13:42:12 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_sPLT_chunk.png
2018/06/19 13:42:12 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_sPLT_chunk.png": 422.718µs
2018/06/19 13:42:12 Couldn't classify license(s)
2018/06/19 13:42:13 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_cHRM_chunk.png
2018/06/19 13:42:13 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_cHRM_chunk.png": 524.077µs
2018/06/19 13:42:13 Couldn't classify license(s)
2018/06/19 13:42:14 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/empty_ancillary_chunks.png
2018/06/19 13:42:14 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/empty_ancillary_chunks.png": 1.753735ms
2018/06/19 13:42:14 Couldn't classify license(s)
2018/06/19 13:42:15 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/badadler.png
2018/06/19 13:42:15 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/badadler.png": 542.804µs
2018/06/19 13:42:15 Couldn't classify license(s)
2018/06/19 13:42:16 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_tEXt_chunk.png
2018/06/19 13:42:16 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_tEXt_chunk.png": 869.322µs
2018/06/19 13:42:16 Couldn't classify license(s)
2018/06/19 13:42:17 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_sRGB_chunk.png
2018/06/19 13:42:17 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_sRGB_chunk.png": 585.473µs
2018/06/19 13:42:17 Couldn't classify license(s)
2018/06/19 13:42:17 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_juNk_safe_to_copy.png
2018/06/19 13:42:17 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_juNk_safe_to_copy.png": 531.968µs
2018/06/19 13:42:17 Couldn't classify license(s)
2018/06/19 13:42:18 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/badcrc.png
2018/06/19 13:42:18 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/badcrc.png": 484.643µs
2018/06/19 13:42:18 Couldn't classify license(s)
2018/06/19 13:42:19 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_iTXt_chunk.png
2018/06/19 13:42:19 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_iTXt_chunk.png": 586.465µs
2018/06/19 13:42:19 Couldn't classify license(s)
2018/06/19 13:42:20 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_eXIf_chunk.png
2018/06/19 13:42:20 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_eXIf_chunk.png": 450.999µs
2018/06/19 13:42:20 Couldn't classify license(s)
2018/06/19 13:42:21 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/bad_iCCP.png
2018/06/19 13:42:21 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/bad_iCCP.png": 919.975µs
2018/06/19 13:42:21 Couldn't classify license(s)
2018/06/19 13:42:22 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_juNK_unsafe_to_copy.png
2018/06/19 13:42:22 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_juNK_unsafe_to_copy.png": 472.375µs
2018/06/19 13:42:22 Couldn't classify license(s)
2018/06/19 13:42:23 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_sCAL_chunk.png
2018/06/19 13:42:23 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_sCAL_chunk.png": 622.674µs
2018/06/19 13:42:23 Couldn't classify license(s)
2018/06/19 13:42:24 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_hIST_chunk.png
2018/06/19 13:42:24 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_hIST_chunk.png": 534.033µs
2018/06/19 13:42:24 Couldn't classify license(s)
2018/06/19 13:42:25 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_IDAT.png
2018/06/19 13:42:25 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_IDAT.png": 566.66µs
2018/06/19 13:42:25 Couldn't classify license(s)
2018/06/19 13:42:25 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_gAMA_chunk.png
2018/06/19 13:42:25 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/crashers/huge_gAMA_chunk.png": 1.07953ms
2018/06/19 13:42:25 Couldn't classify license(s)
2018/06/19 13:42:26 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-16-linear.png
2018/06/19 13:42:26 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-16-linear.png": 1.967403ms
2018/06/19 13:42:26 Couldn't classify license(s)
2018/06/19 13:42:27 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-8-linear-tRNS.png
2018/06/19 13:42:27 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-8-linear-tRNS.png": 1.176761ms
2018/06/19 13:42:27 Couldn't classify license(s)
2018/06/19 13:42:28 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-1-linear.png
2018/06/19 13:42:28 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-1-linear.png": 1.631904ms
2018/06/19 13:42:28 Couldn't classify license(s)
2018/06/19 13:42:29 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-1.png
2018/06/19 13:42:29 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-1.png": 988.837µs
2018/06/19 13:42:29 Couldn't classify license(s)
2018/06/19 13:42:30 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-8-sRGB-tRNS.png
2018/06/19 13:42:30 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-8-sRGB-tRNS.png": 1.067771ms
2018/06/19 13:42:30 Couldn't classify license(s)
2018/06/19 13:42:31 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-16-linear-tRNS.png
2018/06/19 13:42:31 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-16-linear-tRNS.png": 3.004772ms
2018/06/19 13:42:31 Couldn't classify license(s)
2018/06/19 13:42:32 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-1-sRGB-tRNS.png
2018/06/19 13:42:32 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-1-sRGB-tRNS.png": 1.606626ms
2018/06/19 13:42:32 Couldn't classify license(s)
2018/06/19 13:42:33 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-4-linear-tRNS.png
2018/06/19 13:42:33 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-4-linear-tRNS.png": 1.455251ms
2018/06/19 13:42:33 Couldn't classify license(s)
2018/06/19 13:42:34 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/makepngs.sh
2018/06/19 13:42:34 detected language: 32
2018/06/19 13:42:34 "!/bin/sh\n\n Make a set of test PNG files, MAKEPNG is the name of the makepng executable\n built from contrib/libtests/makepng.c"
2018/06/19 13:42:34 " Copyright (c) 2015 John Cunningham Bowler"
2018/06/19 13:42:34 " Last changed in libpng 1.6.20 [December 3, 2015]"
2018/06/19 13:42:34 " This code is released under the libpng license.\n For conditions of distribution and use, see the disclaimer\n and license in png.h"
2018/06/19 13:42:34 " The arguments say whether to build all the files or whether just to build the\n ones that extend the code-coverage of libpng from the existing test files in\n contrib/pngsuite."
2018/06/19 13:42:34 " Comments below indicate cases known to be required and not duplicated\n in other (required) cases; the aim is to get a minimal set that gives\n the maxium code coverage.\n required: code coverage, sRGB opaque component\n required: basic palette read\n required: tests gamma threshold code\n required: code coverage\n required: code coverage\n error limits only\n error limits only\n error limits only\n required: code coverage\n required: code coverage: pngread.c:2422 untested"
2018/06/19 13:42:34 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/makepngs.sh": 13.3146ms
2018/06/19 13:42:34 Couldn't classify license(s)
2018/06/19 13:42:34 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-2.png
2018/06/19 13:42:34 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-2.png": 1.091631ms
2018/06/19 13:42:34 Couldn't classify license(s)
2018/06/19 13:42:35 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-4-1.8.png
2018/06/19 13:42:35 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-4-1.8.png": 1.17415ms
2018/06/19 13:42:35 Couldn't classify license(s)
2018/06/19 13:42:36 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-4-sRGB-tRNS.png
2018/06/19 13:42:36 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-4-sRGB-tRNS.png": 1.0895ms
2018/06/19 13:42:36 Couldn't classify license(s)
2018/06/19 13:42:37 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-8-linear-tRNS.png
2018/06/19 13:42:37 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-8-linear-tRNS.png": 3.187796ms
2018/06/19 13:42:37 Couldn't classify license(s)
2018/06/19 13:42:38 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-alpha-16.png
2018/06/19 13:42:38 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-alpha-16.png": 3.164742ms
2018/06/19 13:42:38 Couldn't classify license(s)
2018/06/19 13:42:39 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-8-linear-tRNS.png
2018/06/19 13:42:39 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-8-linear-tRNS.png": 1.974893ms
2018/06/19 13:42:39 Couldn't classify license(s)
2018/06/19 13:42:40 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-16-linear-tRNS.png
2018/06/19 13:42:40 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-16-linear-tRNS.png": 2.333403ms
2018/06/19 13:42:40 Couldn't classify license(s)
2018/06/19 13:42:41 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-8-sRGB.png
2018/06/19 13:42:41 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-8-sRGB.png": 1.254619ms
2018/06/19 13:42:41 Couldn't classify license(s)
2018/06/19 13:42:41 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-16-linear.png
2018/06/19 13:42:41 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-16-linear.png": 2.740337ms
2018/06/19 13:42:41 Couldn't classify license(s)
2018/06/19 13:42:42 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-2-1.8-tRNS.png
2018/06/19 13:42:42 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-2-1.8-tRNS.png": 1.661883ms
2018/06/19 13:42:42 Couldn't classify license(s)
2018/06/19 13:42:43 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-4-tRNS.png
2018/06/19 13:42:43 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-4-tRNS.png": 1.174636ms
2018/06/19 13:42:43 Couldn't classify license(s)
2018/06/19 13:42:44 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-2-linear-tRNS.png
2018/06/19 13:42:44 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-2-linear-tRNS.png": 1.161685ms
2018/06/19 13:42:44 Couldn't classify license(s)
2018/06/19 13:42:45 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-8-linear.png
2018/06/19 13:42:45 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-8-linear.png": 3.665816ms
2018/06/19 13:42:45 Couldn't classify license(s)
2018/06/19 13:42:46 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-alpha-8-sRGB.png
2018/06/19 13:42:46 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-alpha-8-sRGB.png": 1.639322ms
2018/06/19 13:42:46 Couldn't classify license(s)
2018/06/19 13:42:47 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-4-sRGB.png
2018/06/19 13:42:47 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-4-sRGB.png": 1.063438ms
2018/06/19 13:42:47 Couldn't classify license(s)
2018/06/19 13:42:48 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-8-linear.png
2018/06/19 13:42:48 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-8-linear.png": 3.076239ms
2018/06/19 13:42:48 Couldn't classify license(s)
2018/06/19 13:42:49 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-8-tRNS.png
2018/06/19 13:42:49 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-8-tRNS.png": 3.059457ms
2018/06/19 13:42:49 Couldn't classify license(s)
2018/06/19 13:42:49 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-2-1.8.png
2018/06/19 13:42:49 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-2-1.8.png": 1.02316ms
2018/06/19 13:42:49 Couldn't classify license(s)
2018/06/19 13:42:50 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-1-linear-tRNS.png
2018/06/19 13:42:50 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-1-linear-tRNS.png": 1.480899ms
2018/06/19 13:42:50 Couldn't classify license(s)
2018/06/19 13:42:51 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-16-1.8-tRNS.png
2018/06/19 13:42:51 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-16-1.8-tRNS.png": 2.622189ms
2018/06/19 13:42:51 Couldn't classify license(s)
2018/06/19 13:42:52 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-4-sRGB-tRNS.png
2018/06/19 13:42:52 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-4-sRGB-tRNS.png": 952.472µs
2018/06/19 13:42:52 Couldn't classify license(s)
2018/06/19 13:42:53 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-1-sRGB-tRNS.png
2018/06/19 13:42:53 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-1-sRGB-tRNS.png": 980.139µs
2018/06/19 13:42:53 Couldn't classify license(s)
2018/06/19 13:42:54 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-16-sRGB-tRNS.png
2018/06/19 13:42:54 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-16-sRGB-tRNS.png": 1.819076ms
2018/06/19 13:42:54 Couldn't classify license(s)
2018/06/19 13:42:55 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-4.png
2018/06/19 13:42:55 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-4.png": 904.043µs
2018/06/19 13:42:55 Couldn't classify license(s)
2018/06/19 13:42:56 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-1.png
2018/06/19 13:42:56 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-1.png": 1.195272ms
2018/06/19 13:42:56 Couldn't classify license(s)
2018/06/19 13:42:57 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-1-linear-tRNS.png
2018/06/19 13:42:57 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-1-linear-tRNS.png": 1.087019ms
2018/06/19 13:42:57 Couldn't classify license(s)
2018/06/19 13:42:57 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-2-linear.png
2018/06/19 13:42:57 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-2-linear.png": 1.117106ms
2018/06/19 13:42:57 Couldn't classify license(s)
2018/06/19 13:42:58 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-8-1.8-tRNS.png
2018/06/19 13:42:58 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-8-1.8-tRNS.png": 2.060229ms
2018/06/19 13:42:58 Couldn't classify license(s)
2018/06/19 13:42:59 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-2-1.8-tRNS.png
2018/06/19 13:42:59 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-2-1.8-tRNS.png": 1.000984ms
2018/06/19 13:42:59 Couldn't classify license(s)
2018/06/19 13:43:00 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-8-sRGB.png
2018/06/19 13:43:00 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-8-sRGB.png": 2.441084ms
2018/06/19 13:43:00 Couldn't classify license(s)
2018/06/19 13:43:01 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-alpha-16-sRGB.png
2018/06/19 13:43:01 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-alpha-16-sRGB.png": 3.469594ms
2018/06/19 13:43:01 Couldn't classify license(s)
2018/06/19 13:43:02 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-alpha-16-linear.png
2018/06/19 13:43:02 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-alpha-16-linear.png": 2.105025ms
2018/06/19 13:43:02 Couldn't classify license(s)
2018/06/19 13:43:03 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-8.png
2018/06/19 13:43:03 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-8.png": 2.683147ms
2018/06/19 13:43:03 Couldn't classify license(s)
2018/06/19 13:43:04 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-16-tRNS.png
2018/06/19 13:43:04 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-16-tRNS.png": 2.041079ms
2018/06/19 13:43:04 Couldn't classify license(s)
2018/06/19 13:43:05 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-alpha-8-1.8.png
2018/06/19 13:43:05 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-alpha-8-1.8.png": 2.11208ms
2018/06/19 13:43:05 Couldn't classify license(s)
2018/06/19 13:43:06 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-16-1.8.png
2018/06/19 13:43:06 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-16-1.8.png": 4.283685ms
2018/06/19 13:43:06 Couldn't classify license(s)
2018/06/19 13:43:06 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-alpha-8.png
2018/06/19 13:43:06 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-alpha-8.png": 2.262432ms
2018/06/19 13:43:06 Couldn't classify license(s)
2018/06/19 13:43:07 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-4-1.8.png
2018/06/19 13:43:07 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-4-1.8.png": 1.86477ms
2018/06/19 13:43:07 Couldn't classify license(s)
2018/06/19 13:43:08 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-8-1.8-tRNS.png
2018/06/19 13:43:08 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-8-1.8-tRNS.png": 1.056795ms
2018/06/19 13:43:08 Couldn't classify license(s)
2018/06/19 13:43:09 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-1-1.8-tRNS.png
2018/06/19 13:43:09 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-1-1.8-tRNS.png": 1.141702ms
2018/06/19 13:43:09 Couldn't classify license(s)
2018/06/19 13:43:10 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-4-linear.png
2018/06/19 13:43:10 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-4-linear.png": 1.109504ms
2018/06/19 13:43:10 Couldn't classify license(s)
2018/06/19 13:43:11 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-16-1.8.png
2018/06/19 13:43:11 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-16-1.8.png": 2.086807ms
2018/06/19 13:43:11 Couldn't classify license(s)
2018/06/19 13:43:12 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-alpha-8-linear.png
2018/06/19 13:43:12 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-alpha-8-linear.png": 1.970351ms
2018/06/19 13:43:12 Couldn't classify license(s)
2018/06/19 13:43:13 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-alpha-16-linear.png
2018/06/19 13:43:13 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-alpha-16-linear.png": 3.561675ms
2018/06/19 13:43:13 Couldn't classify license(s)
2018/06/19 13:43:14 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-alpha-8.png
2018/06/19 13:43:14 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-alpha-8.png": 1.791876ms
2018/06/19 13:43:14 Couldn't classify license(s)
2018/06/19 13:43:15 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-2-sRGB.png
2018/06/19 13:43:15 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-2-sRGB.png": 995.909µs
2018/06/19 13:43:15 Couldn't classify license(s)
2018/06/19 13:43:15 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-alpha-16.png
2018/06/19 13:43:15 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-alpha-16.png": 2.142503ms
2018/06/19 13:43:15 Couldn't classify license(s)
2018/06/19 13:43:16 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-alpha-16-sRGB.png
2018/06/19 13:43:16 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-alpha-16-sRGB.png": 2.048264ms
2018/06/19 13:43:16 Couldn't classify license(s)
2018/06/19 13:43:17 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-2-sRGB.png
2018/06/19 13:43:17 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-2-sRGB.png": 1.105727ms
2018/06/19 13:43:17 Couldn't classify license(s)
2018/06/19 13:43:18 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-8-linear.png
2018/06/19 13:43:18 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-8-linear.png": 1.003438ms
2018/06/19 13:43:18 Couldn't classify license(s)
2018/06/19 13:43:19 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-1-sRGB.png
2018/06/19 13:43:19 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-1-sRGB.png": 1.262363ms
2018/06/19 13:43:19 Couldn't classify license(s)
2018/06/19 13:43:20 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-8-tRNS.png
2018/06/19 13:43:20 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-8-tRNS.png": 2.344047ms
2018/06/19 13:43:20 Couldn't classify license(s)
2018/06/19 13:43:21 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-1-1.8.png
2018/06/19 13:43:21 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-1-1.8.png": 1.069631ms
2018/06/19 13:43:21 Couldn't classify license(s)
2018/06/19 13:43:22 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-1-1.8-tRNS.png
2018/06/19 13:43:22 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-1-1.8-tRNS.png": 1.126754ms
2018/06/19 13:43:22 Couldn't classify license(s)
2018/06/19 13:43:23 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-alpha-8-sRGB.png
2018/06/19 13:43:23 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-alpha-8-sRGB.png": 2.102298ms
2018/06/19 13:43:23 Couldn't classify license(s)
2018/06/19 13:43:23 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-4-linear-tRNS.png
2018/06/19 13:43:23 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-4-linear-tRNS.png": 1.152582ms
2018/06/19 13:43:23 Couldn't classify license(s)
2018/06/19 13:43:24 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-1-1.8.png
2018/06/19 13:43:24 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-1-1.8.png": 1.162462ms
2018/06/19 13:43:24 Couldn't classify license(s)
2018/06/19 13:43:25 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-8-1.8.png
2018/06/19 13:43:25 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-8-1.8.png": 1.3895ms
2018/06/19 13:43:25 Couldn't classify license(s)
2018/06/19 13:43:26 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-16.png
2018/06/19 13:43:26 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-16.png": 1.6875ms
2018/06/19 13:43:26 Couldn't classify license(s)
2018/06/19 13:43:27 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-4-sRGB.png
2018/06/19 13:43:27 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-4-sRGB.png": 838.775µs
2018/06/19 13:43:27 Couldn't classify license(s)
2018/06/19 13:43:28 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-8.png
2018/06/19 13:43:28 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-8.png": 1.737651ms
2018/06/19 13:43:28 Couldn't classify license(s)
2018/06/19 13:43:29 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-8.png
2018/06/19 13:43:29 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-8.png": 983.804µs
2018/06/19 13:43:29 Couldn't classify license(s)
2018/06/19 13:43:30 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-8-1.8.png
2018/06/19 13:43:30 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/rgb-8-1.8.png": 1.934702ms
2018/06/19 13:43:30 Couldn't classify license(s)
2018/06/19 13:43:31 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-2.png
2018/06/19 13:43:31 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/gray-2.png": 833.842µs
2018/06/19 13:43:31 Couldn't classify license(s)
2018/06/19 13:43:32 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-4.png
2018/06/19 13:43:32 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/testpngs/palette-4.png": 997.477µs
2018/06/19 13:43:32 Couldn't classify license(s)
2018/06/19 13:43:32 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/examples/pngtopng.c
2018/06/19 13:43:32 detected language: 4
2018/06/19 13:43:32 "- pngtopng\n *\n * COPYRIGHT: Written by John Cunningham Bowler, 2011, 2017.\n * To the extent possible under law, the author has waived all copyright and\n * related or neighboring rights to this work.  This work is published from:\n * United States.\n *\n * Last changed in libpng 1.6.29 [March 16, 2017]\n *\n * Read a PNG and write it out in a fixed format, using the 'simplified API'\n * that was introduced in libpng-1.6.0.\n *\n * This sample code is just the code from the top of 'example.c' with some error\n * handling added.  See example.c for more comments.\n "
2018/06/19 13:43:32 " Normally use <png.h> here to get the installed libpng, but this is done to\n * ensure the code picks up the local libpng implementation:\n "
2018/06/19 13:43:32 " Only the image structure version number needs to be set. "
2018/06/19 13:43:32 " Change this to try different formats!  If you set a colormap format\n          * then you must also supply a colormap below.\n          "
2018/06/19 13:43:32 "background\nrow_stride\ncolormap for PNG_FORMAT_FLAG_COLORMAP "
2018/06/19 13:43:32 "convert_to_8bit\nrow_stride\ncolormap"
2018/06/19 13:43:32 " This is the only place where a 'free' is required; libpng does\n             * the cleanup on error and success, but in this case we couldn't\n             * complete the read because of running out of memory and so libpng\n             * has not got to the point where it can do cleanup.\n             "
2018/06/19 13:43:32 " Failed to read the first argument: "
2018/06/19 13:43:32 " Wrong number of arguments "
2018/06/19 13:43:32 " READ && WRITE "
2018/06/19 13:43:32 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/examples/pngtopng.c": 17.27114ms
2018/06/19 13:43:32 Couldn't classify license(s)
2018/06/19 13:43:33 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/examples/simpleover.c
2018/06/19 13:43:33 detected language: 4
2018/06/19 13:43:33 "- simpleover\n *\n * COPYRIGHT: Written by John Cunningham Bowler, 2015.\n * To the extent possible under law, the author has waived all copyright and\n * related or neighboring rights to this work.  This work is published from:\n * United States.\n *\n * Read several PNG files, which should have an alpha channel or transparency\n * information, and composite them together to produce one or more 16-bit linear\n * RGBA intermediates.  This involves doing the correct 'over' composition to\n * combine the alpha channels and corresponding data.\n *\n * Finally read an output (background) PNG using the 24-bit RGB format (the\n * PNG will be composited on green (#00ff00) by default if it has an alpha\n * channel), and apply the intermediate image generated above to specified\n * locations in the image.\n *\n * The command line has the general format:\n *\n *    simpleover <background.png> [output.png]\n *        {--sprite=width,height,name {[--at=x,y] {sprite.png}}}\n *        {--add=name {x,y}}\n *\n * The --sprite and --add options may occur multiple times. They are executed\n * in order.  --add may refer to any sprite already read.\n *\n * This code is intended to show how to composite multiple images together\n * correctly.  Apart from the libpng Simplified API the only work done in here\n * is to combine multiple input PNG images into a single sprite; this involves\n * a Porter-Duff 'over' operation and the input PNG images may, as a result,\n * be regarded as being layered one on top of the other with the first (leftmost\n * on the command line) being at the bottom and the last on the top.\n "
2018/06/19 13:43:33 " Normally use <png.h> here to get the installed libpng, but this is done to\n * ensure the code picks up the local libpng implementation, so long as this\n * file is linked against a sufficiently recent libpng (1.6+) it is ok to\n * change this to <png.h>:\n "
2018/06/19 13:43:33 " div by 65535 test program "
2018/06/19 13:43:33 "+ (x >> 31)"
2018/06/19 13:43:33 " div by 65535 test program "
2018/06/19 13:43:33 " This is where the Porter-Duff 'Over' operator is evaluated; change this\n    * code to change the operator (this could be parameterized).  Any other\n    * image processing operation could be used here.\n    "
2018/06/19 13:43:33 " Check for an x or y offset that pushes any part of the image beyond the\n    * right or bottom of the sprite:\n    "
2018/06/19 13:43:33 "SAFE\nSAFE"
2018/06/19 13:43:33 " Skip to first visible row "
2018/06/19 13:43:33 " In and out are RGBA values, so: "
2018/06/19 13:43:33 " This is the optimized Porter-Duff 'Over' operation, when the\n             * input alpha is 0 the output is not changed.\n             "
2018/06/19 13:43:33 " This is the weight to apply to the output: "
2018/06/19 13:43:33 " The input must be composed onto the output. This means\n                   * multiplying the current output pixel value by the inverse\n                   * of the input alpha (1-alpha). A division is required but\n                   * it is by the constant 65535.  Approximate this as:\n                   *\n                   *     (x + (x >> 16) + 32769) >> 16;\n                   *\n                   * This is exact (and does not overflow) for all values of\n                   * x in the range 0..65535*65535.  (Note that the calculation\n                   * produces the closest integer; the maximum error is <0.5).\n                   "
2018/06/19 13:43:33 " The following is very vectorizable... "
2018/06/19 13:43:33 " Read the arguments and create this sprite. The sprite buffer has already\n    * been allocated. This reads the input PNGs one by one in linear format,\n    * composes them onto the sprite buffer (the code in the function above)\n    * then saves the result, converting it on the fly to PNG RGBA 8-bit format.\n    "
2018/06/19 13:43:33 " The only supported option is --at. "
2018/06/19 13:43:33 " success; caller will parse this option "
2018/06/19 13:43:33 " The argument has to be a file name "
2018/06/19 13:43:33 "background\nrow_stride\ncolormap for PNG_FORMAT_FLAG_COLORMAP"
2018/06/19 13:43:33 " This is the place where the Porter-Duff 'Over' operator\n                   * needs to be done by this code.  In fact, any image\n                   * processing required can be done here; the data is in\n                   * the correct format (linear, 16-bit) and source and\n                   * destination are in memory.\n                   "
2018/06/19 13:43:33 " And continue to the next argument "
2018/06/19 13:43:33 " png_image_free must be called if we abort the Simplified API\n                * read because of a problem detected in this code.  If problems\n                * are detected in the Simplified API it cleans up itself.\n                "
2018/06/19 13:43:33 " Failed to read the first argument: "
2018/06/19 13:43:33 " failure "
2018/06/19 13:43:33 " All the sprite operations have completed successfully. Save the RGBA\n    * buffer as a PNG using the simplified write API.\n    "
2018/06/19 13:43:33 "convert_to_8_bit\nrow_stride\ncolormap"
2018/06/19 13:43:33 " Success; the buffer is no longer needed: "
2018/06/19 13:43:33 " ok "
2018/06/19 13:43:33 " fail "
2018/06/19 13:43:33 " Given a --add argument naming this sprite, perform the operations listed\n    * in the following arguments.  The arguments are expected to have the form\n    * (x,y), which is just an offset at which to add the sprite to the\n    * output.\n    "
2018/06/19 13:43:33 " success "
2018/06/19 13:43:33 " Now add the new image into the sprite data, but only if it\n          * will fit.\n          "
2018/06/19 13:43:33 "SAFE\nSAFE"
2018/06/19 13:43:33 " Could just skip this, but for the moment it is an error \n error "
2018/06/19 13:43:33 " Since we know the sprite fits we can just read it into the\n             * output using the simplified API.\n             "
2018/06/19 13:43:33 " force compose "
2018/06/19 13:43:33 "background\nRGB\nrow_stride\ncolormap for PNG_FORMAT_FLAG_COLORMAP"
2018/06/19 13:43:33 " The read failed: "
2018/06/19 13:43:33 " error "
2018/06/19 13:43:33 " error "
2018/06/19 13:43:33 " ok "
2018/06/19 13:43:33 " success \nlimit"
2018/06/19 13:43:33 " fail "
2018/06/19 13:43:33 " Default a name if not given. "
2018/06/19 13:43:33 " Allocate a buffer for the sprite and calculate the buffer\n                * size:\n                "
2018/06/19 13:43:33 " This can overflow a (size_t); check for this: "
2018/06/19 13:43:33 " This buffer must be initialized to transparent: "
2018/06/19 13:43:33 " still ok "
2018/06/19 13:43:33 " error "
2018/06/19 13:43:33 " Overflow, or OOM "
2018/06/19 13:43:33 " error in add_sprite "
2018/06/19 13:43:33 " sprite not found "
2018/06/19 13:43:33 " ok  "
2018/06/19 13:43:33 " Clean up the cache of sprites: "
2018/06/19 13:43:33 " default to fail "
2018/06/19 13:43:33 " 24-bit RGB "
2018/06/19 13:43:33 " fully saturated green "
2018/06/19 13:43:33 "row_stride\ncolormap for PNG_FORMAT_FLAG_COLORMAP "
2018/06/19 13:43:33 " At this point png_image_finish_read has cleaned up the\n                * allocated data in png_image, and only the buffer needs to be\n                * freed.\n                *\n                * Perform the remaining operations:\n                "
2018/06/19 13:43:33 " Write the output: "
2018/06/19 13:43:33 "convert_to_8bit\nrow_stride\ncolormap"
2018/06/19 13:43:33 "convert_to_8bit\nrow_stride\ncolormap"
2018/06/19 13:43:33 " else simpleover_process writes an error message "
2018/06/19 13:43:33 " This is the only place where a 'free' is required; libpng does\n             * the cleanup on error and success, but in this case we couldn't\n             * complete the read because of running out of memory.\n             "
2018/06/19 13:43:33 " Failed to read the first argument: "
2018/06/19 13:43:33 " Usage message "
2018/06/19 13:43:33 " SIMPLIFIED_READ "
2018/06/19 13:43:33 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/examples/simpleover.c": 38.008481ms
2018/06/19 13:43:33 Couldn't classify license(s)
2018/06/19 13:43:34 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/examples/README.txt
2018/06/19 13:43:34 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/examples/README.txt": 8.095031ms
2018/06/19 13:43:34 Couldn't classify license(s)
2018/06/19 13:43:35 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/examples/iccfrompng.c
2018/06/19 13:43:35 detected language: 4
2018/06/19 13:43:35 "- iccfrompng\n *\n * COPYRIGHT: Written by John Cunningham Bowler, 2011.\n * To the extent possible under law, the author has waived all copyright and\n * related or neighboring rights to this work.  This work is published from:\n * United States.\n *\n * Extract any icc profiles found in the given PNG files.  This is a simple\n * example of a program that extracts information from the header of a PNG file\n * without processing the image.  Notice that some header information may occur\n * after the image data. Textual data and comments are an example; the approach\n * in this file won't work reliably for such data because it only looks for the\n * information in the section of the file that preceeds the image data.\n *\n * Compile and link against libpng and zlib, plus anything else required on the\n * system you use.\n *\n * To use supply a list of PNG files containing iCCP chunks, the chunks will be\n * extracted to a similarly named file with the extension replaced by 'icc',\n * which will be overwritten without warning.\n "
2018/06/19 13:43:35 " Initialize for error or no profile: "
2018/06/19 13:43:35 " Success return "
2018/06/19 13:43:35 " Exit code is true if any extract succeeds "
2018/06/19 13:43:35 " READ && STDIO && iCCP "
2018/06/19 13:43:35 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/examples/iccfrompng.c": 12.672242ms
2018/06/19 13:43:35 Couldn't classify license(s)
2018/06/19 13:43:36 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/examples/pngpixel.c
2018/06/19 13:43:36 detected language: 4
2018/06/19 13:43:36 "- pngpixel\n *\n * COPYRIGHT: Written by John Cunningham Bowler, 2011.\n * To the extent possible under law, the author has waived all copyright and\n * related or neighboring rights to this work.  This work is published from:\n * United States.\n *\n * Read a single pixel value from a PNG file.\n *\n * This code illustrates basic 'by-row' reading of a PNG file using libpng.\n * Rows are read until a particular pixel is found; the value of this pixel is\n * then printed on stdout.\n *\n * The code illustrates how to do this on interlaced as well as non-interlaced\n * images.  Normally you would call png_set_interlace_handling() to have libpng\n * deal with the interlace for you, but that obliges you to buffer half of the\n * image to assemble the interlaced rows.  In this code\n * png_set_interlace_handling() is not called and, instead, the code handles the\n * interlace passes directly looking for the required pixel.\n "
2018/06/19 13:43:36 " required for error handling "
2018/06/19 13:43:36 " Normally use <png.h> here to get the installed libpng, but this is done to\n * ensure the code picks up the local libpng implementation:\n "
2018/06/19 13:43:36 " Return component 'c' of pixel 'x' from the given row. "
2018/06/19 13:43:36 " PNG images can be up to 2^31 pixels wide, but this means they can be up to\n    * 2^37 bits wide (for a 64-bit pixel - the largest possible) and hence 2^34\n    * bytes wide.  Since the row fitted into memory, however, the following must\n    * work:\n    "
2018/06/19 13:43:36 " PNG pixels are packed into bytes to put the first pixel in the highest\n    * bits of the byte and into two bytes for 16-bit values with the high 8 bits\n    * first, so:\n    "
2018/06/19 13:43:36 " This should never happen; it indicates a bug in this program or in\n          * libpng itself:\n          "
2018/06/19 13:43:36 " Print a pixel from a row returned by libpng; determine the row format, find\n * the pixel, and print the relevant information to stdout.\n "
2018/06/19 13:43:36 " The palette case is slightly more difficult - the palette and, if\n       * present, the tRNS ('transparency', though the values are really\n       * opacity) data must be read to give the full picture:\n       "
2018/06/19 13:43:36 " no transparency "
2018/06/19 13:43:36 " This program uses the default, <setjmp.h> based, libpng error handling\n    * mechanism, therefore any local variable that exists before the call to\n    * setjmp and is changed after the call to setjmp returns successfully must\n    * be declared with 'volatile' to ensure that their values don't get\n    * destroyed by longjmp:\n    "
2018/06/19 13:43:36 "fail"
2018/06/19 13:43:36 " libpng requires a callback function for handling errors; this\n          * callback must not return.  The default callback function uses a\n          * stored <setjmp.h> style jmp_buf which is held in a png_struct and\n          * writes error messages to stderr.  Creating the png_struct is a\n          * little tricky; just copy the following code.\n          "
2018/06/19 13:43:36 " Declare stack variables to hold pointers to locally allocated\n                * data.\n                "
2018/06/19 13:43:36 " Initialize the error control buffer: "
2018/06/19 13:43:36 " Now associate the recently opened (FILE*) with the default\n                   * libpng initialization functions.  Sometimes libpng is\n                   * compiled without stdio support (it can be difficult to do\n                   * in some environments); in that case you will have to write\n                   * your own read callback to read data from the (FILE*).\n                   "
2018/06/19 13:43:36 " And read the first part of the PNG file - the header and\n                   * all the information up to the first pixel.\n                   "
2018/06/19 13:43:36 " This fills in enough information to tell us the width of\n                   * each row in bytes, allocate the appropriate amount of\n                   * space.  In this case png_malloc is used - it will not\n                   * return if memory isn't available.\n                   "
2018/06/19 13:43:36 " To avoid the overhead of using a volatile auto copy row_tmp\n                   * to a local here - just use row for the png_free below.\n                   "
2018/06/19 13:43:36 " All the information we need is in the header is returned by\n                   * png_get_IHDR, if this fails we can now use 'png_error' to\n                   * signal the error and return control to the setjmp above.\n                   "
2018/06/19 13:43:36 " png_set_interlace_handling returns the number of\n                      * passes required as well as turning on libpng's\n                      * handling, but since we do it ourselves this is\n                      * necessary:\n                      "
2018/06/19 13:43:36 " Now read the pixels, pass-by-pass, row-by-row: "
2018/06/19 13:43:36 " Sometimes the whole pass is empty because the\n                            * image is too narrow or too short.  libpng\n                            * expects to be called for each row that is\n                            * present in the pass, so it may be necessary to\n                            * skip the loop below (over py) if the image is\n                            * too narrow.\n                            "
2018/06/19 13:43:36 " We need the starting pixel and the offset\n                            * between each pixel in this pass; use the macros\n                            * in png.h:\n                            "
2018/06/19 13:43:36 " To find the pixel, loop over 'py' for each pass\n                         * reading a row and then checking to see if it\n                         * contains the pixel.\n                         "
2018/06/19 13:43:36 " png_read_row takes two pointers.  When libpng\n                            * handles the interlace the first is filled in\n                            * pixel-by-pixel, and the second receives the same\n                            * pixels but they are replicated across the\n                            * unwritten pixels so far for each pass.  When we\n                            * do the interlace, however, they just contain\n                            * the pixels from the interlace pass - giving\n                            * both is wasteful and pointless, so we pass a\n                            * NULL pointer.\n                            "
2018/06/19 13:43:36 " Now find the pixel if it is in this row; there\n                            * are, of course, much better ways of doing this\n                            * than using a for loop:\n                            "
2018/06/19 13:43:36 " 'ppx' is the index of the pixel in the row\n                               * buffer.\n                               "
2018/06/19 13:43:36 " Now terminate the loops early - we have\n                               * found and handled the required data.\n                               "
2018/06/19 13:43:36 " x loop \n y loop \n pass loop "
2018/06/19 13:43:36 " Finally free the temporary buffer: "
2018/06/19 13:43:36 " Else libpng has raised an error.  An error message has\n                   * already been output, so it is only necessary to clean up\n                   * locally allocated data:\n                   "
2018/06/19 13:43:36 " The default implementation of png_free never errors out\n                      * (it just crashes if something goes wrong), but the safe\n                      * way of using it is still to clear 'row' before calling\n                      * png_free:\n                      "
2018/06/19 13:43:36 " Wrong number of arguments "
2018/06/19 13:43:36 " READ && SEQUENTIAL_READ "
2018/06/19 13:43:36 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/examples/pngpixel.c": 30.272848ms
2018/06/19 13:43:36 Couldn't classify license(s)
2018/06/19 13:43:37 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/libtests/pngstest.c
2018/06/19 13:43:37 detected language: 4
2018/06/19 13:43:37 "-\n * pngstest.c\n *\n * Last changed in libpng 1.6.31 [July 27, 2017]\n * Copyright (c) 2013-2017 John Cunningham Bowler\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * Test for the PNG 'simplified' APIs.\n "
2018/06/19 13:43:37 "glibc facility: turn on debugging"
2018/06/19 13:43:37 " Define the following to use this test against your installed libpng, rather\n * than the one being built here:\n "
2018/06/19 13:43:37 " 1.6.1 added support for the configure test harness, which uses 77 to indicate\n * a skipped test, in earlier versions we need to succeed on a skipped test, so:\n "
2018/06/19 13:43:37 " Else nothing can be done "
2018/06/19 13:43:37 " KNOWN ISSUES\n *\n * These defines switch on alternate algorithms for format conversions to match\n * the current libpng implementation; they are set to allow pngstest to pass\n * even though libpng is producing answers that are not as correct as they\n * should be.\n "
2018/06/19 13:43:37 " If true include unused static GPC functions and declare an external array\n    * of them to hide the fact that they are unused.  This is for development\n    * use while testing the correct function to use to take into account libpng\n    * misbehavior, such as using a simple power law to correct sRGB to linear.\n    "
2018/06/19 13:43:37 " The following is to support direct compilation of this file as C++ "
2018/06/19 13:43:37 " __cplusplus "
2018/06/19 13:43:37 " During parallel runs of pngstest each temporary file needs a unique name,\n * this is used to permit uniqueness using a command line argument which can be\n * up to 22 characters long.\n "
2018/06/19 13:43:37 " Generate random bytes.  This uses a boring repeatable algorithm and it\n * is implemented here so that it gives the same set of numbers on every\n * architecture.  It's a linear congruential generator (Knuth or Sedgewick\n * \"Algorithms\") but it comes from the 'feedback taps' table in Horowitz and\n * Hill, \"The Art of Electronics\".\n "
2018/06/19 13:43:37 " There are thirty three bits, the next bit in the sequence is bit-33 XOR\n    * bit-20.  The top 1 bit is in u1, the bottom 32 are in u0.\n    "
2018/06/19 13:43:37 " First generate 8 new bits then shift them in at the end. "
2018/06/19 13:43:37 " Math support - neither Cygwin nor Visual Studio have C99 support and we need\n * a predictable rounding function, so make one here:\n "
2018/06/19 13:43:37 " Cast support: remove GCC whines. "
2018/06/19 13:43:37 " sRGB support: use exact calculations rounded to the nearest int, see the\n * fesetround() call in main().  sRGB_to_d optimizes the 8 to 16-bit conversion.\n "
2018/06/19 13:43:37 "range 0.0 .. 1.0"
2018/06/19 13:43:37 " not used "
2018/06/19 13:43:37 " Arbitrary, but consistent with the libpng code "
2018/06/19 13:43:37 " unused \n The error that results from using a 2.2 power law in place of the correct\n * sRGB transform, given an 8-bit value which might be either sRGB or power-law.\n "
2018/06/19 13:43:37 " Always allow an extra 1 here for rounding errors "
2018/06/19 13:43:37 " by experiment "
2018/06/19 13:43:37 " Round trip the value through an 8-bit representation but using\n       * non-matching to/from conversions.\n       "
2018/06/19 13:43:37 " Always allow an extra 1 here for rounding errors "
2018/06/19 13:43:37 " \"multiple_algorithms\" in this case means that a color-map has been\n    * involved somewhere, so we can deduce that the values were forced to 8-bit\n    * (like the via_linear case for 8-bit.)\n    "
2018/06/19 13:43:37 " unused "
2018/06/19 13:43:37 " else memory \n else use file name \n fail on warnings too "
2018/06/19 13:43:37 " else delete temporary files "
2018/06/19 13:43:37 " do not reseed on each new file \n do not ignore the gamma+background_rgb_to_gray\n                          * libpng warning. "
2018/06/19 13:43:37 " --fast is currently the default "
2018/06/19 13:43:37 " else on by default "
2018/06/19 13:43:37 " additional flag "
2018/06/19 13:43:37 " A name table for all the formats - defines the format of the '+' arguments to\n * pngstest.\n "
2018/06/19 13:43:37 " Decode an argument to a format number. "
2018/06/19 13:43:37 " Bitset/test functions for formats "
2018/06/19 13:43:37 " All off "
2018/06/19 13:43:37 " currently unused "
2018/06/19 13:43:37 " currently unused "
2018/06/19 13:43:37 " set everything, including flags that are pointless "
2018/06/19 13:43:37 " Eliminate redundant and unsupported settings. "
2018/06/19 13:43:37 " BGR is meaningless if no color: "
2018/06/19 13:43:37 "HACK: fixed value"
2018/06/19 13:43:37 " AFIRST is meaningless if no alpha: "
2018/06/19 13:43:37 "HACK: fixed value"
2018/06/19 13:43:37 " THE Image STRUCTURE \n The super-class of a png_image, contains the decoded image plus the input\n * data necessary to re-read the file with a different format.\n "
2018/06/19 13:43:37 " Initializer: also sets the permitted error limit for 16-bit operations. "
2018/06/19 13:43:37 " Reset the image to be read again - only needs to rewind the FILE* at present.\n "
2018/06/19 13:43:37 " Free the image buffer; the buffer is re-used on a re-read, this is just for\n * cleanup.\n "
2018/06/19 13:43:37 " Delete function; cleans out all the allocated data and the temporary file in\n * the image.\n "
2018/06/19 13:43:37 " This is actually a re-initializer; allows an image structure to be re-used by\n * freeing everything that relates to an old image.\n "
2018/06/19 13:43:37 " Make sure the image buffer is big enough; allows re-use of the buffer if the\n * image is re-read.\n "
2018/06/19 13:43:37 " Make sure 16 bytes match the given byte. "
2018/06/19 13:43:37 " Check for overwrite in the image buffer. "
2018/06/19 13:43:37 " ERROR HANDLING \n Log a terminal error, also frees the libpng part of the image if necessary.\n "
2018/06/19 13:43:37 " Log an error and close a file (just a utility to do both things in one\n * function call.)\n "
2018/06/19 13:43:37 " Make sure the png_image has been freed - validates that libpng is doing what\n * the spec says and freeing the image.\n "
2018/06/19 13:43:37 " Separate out the gamma+background_rgb_to_gray warning because it may\n    * produce opaque component errors:\n    "
2018/06/19 13:43:37 " IMAGE COMPARISON/CHECKING \n Compare the pixels of two images, which should be the same but aren't.  The\n * images must have been checked for a size match.\n "
2018/06/19 13:43:37 " The components, for grayscale images the gray value is in 'g' and if alpha\n    * is not present 'a' is set to 255 or 65535 according to format.\n    "
2018/06/19 13:43:37 " The background as the original sRGB 8-bit value converted to the final\n    * integer format and as a double precision linear value in the range 0..1\n    * for with partially transparent pixels.\n    "
2018/06/19 13:43:37 " linear r,g,b scaled to 0..1 "
2018/06/19 13:43:37 " Basic image formats; control the data but not the layout thereof. "
2018/06/19 13:43:37 " Read a Pixel from a buffer.  The code below stores the correct routine for\n * the format in a function pointer, these are the routines:\n "
2018/06/19 13:43:37 " Given a format, return the correct one of the above functions. "
2018/06/19 13:43:37 " The color-map flag is irrelevant here - the caller of the function\n    * returned must either pass the buffer or, for a color-mapped image, the\n    * correct entry in the color-map.\n    "
2018/06/19 13:43:37 " Convertion between pixel formats.  The code above effectively eliminates the\n * component ordering changes leaving three basic changes:\n *\n * 1) Remove an alpha channel by pre-multiplication or compositing on a\n *    background color.  (Adding an alpha channel is a no-op.)\n *\n * 2) Remove color by mapping to grayscale.  (Grayscale to color is a no-op.)\n *\n * 3) Convert between 8-bit and 16-bit components.  (Both directtions are\n *    relevant.)\n *\n * This gives the following base format conversion matrix:\n *\n *   OUT:    ----- 8-bit -----    ----- 16-bit -----\n *   IN     G    GA   RGB  RGBA  G    GA   RGB  RGBA\n *  8 G     .    .    .    .     lin  lin  lin  lin\n *  8 GA    bckg .    bckc .     pre' pre  pre' pre\n *  8 RGB   g8   g8   .    .     glin glin lin  lin\n *  8 RGBA  g8b  g8   bckc .     gpr' gpre pre' pre\n * 16 G     sRGB sRGB sRGB sRGB  .    .    .    .\n * 16 GA    b16g unpg b16c unpc  A    .    A    .\n * 16 RGB   sG   sG   sRGB sRGB  g16  g16  .    .\n * 16 RGBA  gb16 sGp  cb16 sCp   g16  g16' A    .\n *\n *  8-bit to 8-bit:\n * bckg: composite on gray background\n * bckc: composite on color background\n * g8:   convert sRGB components to sRGB grayscale\n * g8b:  convert sRGB components to grayscale and composite on gray background\n *\n *  8-bit to 16-bit:\n * lin:  make sRGB components linear, alpha := 65535\n * pre:  make sRGB components linear and premultiply by alpha  (scale alpha)\n * pre': as 'pre' but alpha := 65535\n * glin: make sRGB components linear, convert to grayscale, alpha := 65535\n * gpre: make sRGB components grayscale and linear and premultiply by alpha\n * gpr': as 'gpre' but alpha := 65535\n *\n *  16-bit to 8-bit:\n * sRGB: convert linear components to sRGB, alpha := 255\n * unpg: unpremultiply gray component and convert to sRGB (scale alpha)\n * unpc: unpremultiply color components and convert to sRGB (scale alpha)\n * b16g: composite linear onto gray background and convert the result to sRGB\n * b16c: composite linear onto color background and convert the result to sRGB\n * sG:   convert linear RGB to sRGB grayscale\n * sGp:  unpremultiply RGB then convert to sRGB grayscale\n * sCp:  unpremultiply RGB then convert to sRGB\n * gb16: composite linear onto background and convert to sRGB grayscale\n *       (order doesn't matter, the composite and grayscale operations permute)\n * cb16: composite linear onto background and convert to sRGB\n *\n *  16-bit to 16-bit:\n * A:    set alpha to 65535\n * g16:  convert linear RGB to linear grayscale (alpha := 65535)\n * g16': as 'g16' but alpha is unchanged\n "
2018/06/19 13:43:37 " Simple copy: "
2018/06/19 13:43:37 " 8-bit to 8-bit conversions \n bckg: composite on gray background "
2018/06/19 13:43:37 " bckc: composite on color background "
2018/06/19 13:43:37 " g8: convert sRGB components to sRGB grayscale "
2018/06/19 13:43:37 " g8b: convert sRGB components to grayscale and composite on gray background "
2018/06/19 13:43:37 " 8-bit to 16-bit conversions \n lin: make sRGB components linear, alpha := 65535 "
2018/06/19 13:43:37 " pre: make sRGB components linear and premultiply by alpha (scale alpha) "
2018/06/19 13:43:37 " pre': as 'pre' but alpha := 65535 "
2018/06/19 13:43:37 " glin: make sRGB components linear, convert to grayscale, alpha := 65535 "
2018/06/19 13:43:37 " gpre: make sRGB components grayscale and linear and premultiply by alpha "
2018/06/19 13:43:37 " gpr': as 'gpre' but alpha := 65535 "
2018/06/19 13:43:37 " 8-bit to 16-bit conversions for gAMA 45455 encoded values \n Lin: make gAMA 45455 components linear, alpha := 65535 "
2018/06/19 13:43:37 " Pre: make gAMA 45455 components linear and premultiply by alpha (scale alpha)\n "
2018/06/19 13:43:37 " Pre': as 'Pre' but alpha := 65535 "
2018/06/19 13:43:37 " Glin: make gAMA 45455 components linear, convert to grayscale, alpha := 65535\n "
2018/06/19 13:43:37 " Gpre: make gAMA 45455 components grayscale and linear and premultiply by\n * alpha.\n "
2018/06/19 13:43:37 " Gpr': as 'Gpre' but alpha := 65535 "
2018/06/19 13:43:37 " 16-bit to 8-bit conversions \n sRGB: convert linear components to sRGB, alpha := 255 "
2018/06/19 13:43:37 " unpg: unpremultiply gray component and convert to sRGB (scale alpha) "
2018/06/19 13:43:37 " unpc: unpremultiply color components and convert to sRGB (scale alpha) "
2018/06/19 13:43:37 " b16g: composite linear onto gray background and convert the result to sRGB "
2018/06/19 13:43:37 " b16c: composite linear onto color background and convert the result to sRGB"
2018/06/19 13:43:37 " sG: convert linear RGB to sRGB grayscale "
2018/06/19 13:43:37 " sGp: unpremultiply RGB then convert to sRGB grayscale "
2018/06/19 13:43:37 " sCp: unpremultiply RGB then convert to sRGB "
2018/06/19 13:43:37 " gb16: composite linear onto background and convert to sRGB grayscale \n  (order doesn't matter, the composite and grayscale operations permute) "
2018/06/19 13:43:37 " cb16: composite linear onto background and convert to sRGB "
2018/06/19 13:43:37 " 16-bit to 16-bit conversions \n A:    set alpha to 65535 "
2018/06/19 13:43:37 " g16:  convert linear RGB to linear grayscale (alpha := 65535) "
2018/06/19 13:43:37 " g16': as 'g16' but alpha is unchanged "
2018/06/19 13:43:37 " Unused functions (to hide them from GCC unused function warnings) "
2018/06/19 13:43:37 "   OUT:    ----- 8-bit -----    ----- 16-bit -----\n *   IN     G    GA   RGB  RGBA  G    GA   RGB  RGBA\n *  8 G     .    .    .    .     lin  lin  lin  lin\n *  8 GA    bckg .    bckc .     pre' pre  pre' pre\n *  8 RGB   g8   g8   .    .     glin glin lin  lin\n *  8 RGBA  g8b  g8   bckc .     gpr' gpre pre' pre\n * 16 G     sRGB sRGB sRGB sRGB  .    .    .    .\n * 16 GA    b16g unpg b16c unpc  A    .    A    .\n * 16 RGB   sG   sG   sRGB sRGB  g16  g16  .    .\n * 16 RGBA  gb16 sGp  cb16 sCp   g16  g16' A    .\n *\n * The matrix is held in an array indexed thus:\n *\n *   gpc_fn[out_format & BASE_FORMATS][in_format & BASE_FORMATS];\n "
2018/06/19 13:43:37 " This will produce a compile time error if the FORMAT_FLAG values don't\n * match the above matrix!\n "
2018/06/19 13:43:37 "in\nout"
2018/06/19 13:43:37 "out: G-8     GA-8     RGB-8    RGBA-8    G-16     GA-16   RGB-16  RGBA-16 "
2018/06/19 13:43:37 " The array is repeated for the cases where both the input and output are color\n * mapped because then different algorithms are used.\n "
2018/06/19 13:43:37 "in\nout"
2018/06/19 13:43:37 "out: G-8     GA-8     RGB-8    RGBA-8    G-16     GA-16   RGB-16  RGBA-16 "
2018/06/19 13:43:37 " The error arrays record the error in the same matrix; 64 entries, however\n * the different algorithms used in libpng for colormap and direct conversions\n * mean that four separate matrices are used (for each combination of\n * colormapped and direct.)\n *\n * In some cases the conversion between sRGB formats goes via a linear\n * intermediate; an sRGB to linear conversion (as above) is followed by a simple\n * linear to sRGB step with no other conversions.  This is done by a separate\n * error array from an arbitrary 'in' format to one of the four basic outputs\n * (since final output is always sRGB not colormapped).\n *\n * These arrays may be modified if the --accumulate flag is set during the run;\n * then instead of logging errors they are simply added in.\n *\n * The three entries are currently for transparent, partially transparent and\n * opaque input pixel values.  Notice that alpha should be exact in each case.\n *\n * Errors in alpha should only occur when converting from a direct format\n * to a colormapped format, when alpha is effectively smashed (so large\n * errors can occur.)  There should be no error in the '0' and 'opaque'\n * values.  The fourth entry in the array is used for the alpha error (and it\n * should always be zero for the 'via linear' case since this is never color\n * mapped.)\n *\n * Mapping to a colormap smashes the colors, it is necessary to have separate\n * values for these cases because they are much larger; it is very much\n * impossible to obtain a reasonable result, these are held in\n * gpc_error_to_colormap.\n "
2018/06/19 13:43:37 " extra check also required \n machine generated \n COLORMAP flag check \n flag checks "
2018/06/19 13:43:37 " Basic pixel information: \n Input image \n Output image "
2018/06/19 13:43:37 " 'background' is the value passed to the gpc_ routines, it may be NULL if\n    * it should not be used (*this* program has an error if it crashes as a\n    * result!)\n    "
2018/06/19 13:43:37 " Precalculated values: \n Value of input alpha that is opaque \n Sample values come from the palette \n Accumlate component errors (don't log) \n Output is 8-bit (else 16-bit) "
2018/06/19 13:43:37 " A function to perform the required transform "
2018/06/19 13:43:37 " For 'via_linear' transforms the final, from linear, step, else NULL "
2018/06/19 13:43:37 " Three error values for transparent, partially transparent and opaque\n       * input pixels (in turn).\n       "
2018/06/19 13:43:37 " Where these are stored in the static array (for 'accumulate') "
2018/06/19 13:43:37 " Return a 'transform' as above for the given format conversion. "
2018/06/19 13:43:37 " Store the original images for error messages "
2018/06/19 13:43:37 " set by caller if required "
2018/06/19 13:43:37 " The loaders (which need the ordering information) "
2018/06/19 13:43:37 " Remove the ordering information: "
2018/06/19 13:43:37 " Check for an error in this program: "
2018/06/19 13:43:37 " The input is not colormapped but the output is, the errors will\n       * typically be large (only the grayscale-no-alpha case permits preserving\n       * even 8-bit values.)\n       "
2018/06/19 13:43:37 " The caller handles the colormap->pixel value conversion, so the\n       * transform function just gets a pixel value, however because libpng\n       * currently contains a different implementation for mapping a colormap if\n       * both input and output are colormapped we need different conversion\n       * functions to deal with errors in the libpng implementation.\n       "
2018/06/19 13:43:37 " Follow the libpng simplified API rules to work out what to pass to the gpc\n    * routines as a background value, if one is not required pass NULL so that\n    * this program crashes in the even of a programming error.\n    "
2018/06/19 13:43:37 " default: not required "
2018/06/19 13:43:37 " Rule 1: background only need be supplied if alpha is to be removed "
2018/06/19 13:43:37 " The input value is 'NULL' to use the background and (otherwise) an sRGB\n       * background color (to use a solid color).  The code above uses a fixed\n       * byte value, BUFFER_INIT8, for buffer even for 16-bit output.  For\n       * linear (16-bit) output the sRGB background color is ignored; the\n       * composition is always on the background (so BUFFER_INIT8 * 257), except\n       * that for the colormap (i.e. linear colormapped output) black is used.\n       "
2018/06/19 13:43:37 " sRGB output "
2018/06/19 13:43:37 " TODO: sometimes libpng uses the power law conversion here, how\n                * to handle this?\n                "
2018/06/19 13:43:37 " grayscale: libpng only looks at 'g' "
2018/06/19 13:43:37 " TODO: sometimes libpng uses the power law conversion here, how\n                * to handle this?\n                "
2018/06/19 13:43:37 " TODO: sometimes libpng uses the power law conversion here, how\n             * to handle this?\n             "
2018/06/19 13:43:37 " Else the output is colormapped and a background color must be\n          * provided; if pngstest crashes then that is a bug in this program\n          * (though libpng should png_error as well.)\n          "
2018/06/19 13:43:37 " not used "
2018/06/19 13:43:37 " not used "
2018/06/19 13:43:37 " Copy the error values into the Transform: "
2018/06/19 13:43:37 " Compare two pixels.\n *\n * OLD error values:\nstatic int error_to_linear = 811; * by experiment *\nstatic int error_to_linear_grayscale = 424; * by experiment *\nstatic int error_to_sRGB = 6; * by experiment *\nstatic int error_to_sRGB_grayscale = 17; * libpng error by calculation +\n                                            2 by experiment *\nstatic int error_in_compose = 2; * by experiment *\nstatic int error_in_premultiply = 1;\n *\n * The following is *just* the result of a round trip from 8-bit sRGB to linear\n * then back to 8-bit sRGB when it is done by libpng.  There are two problems:\n *\n * 1) libpng currently uses a 2.2 power law with no linear segment, this results\n * in instability in the low values and even with 16-bit precision sRGB(1) ends\n * up mapping to sRGB(0) as a result of rounding in the 16-bit representation.\n * This gives an error of 1 in the handling of value 1 only.\n *\n * 2) libpng currently uses an intermediate 8-bit linear value in gamma\n * correction of 8-bit values.  This results in many more errors, the worse of\n * which is mapping sRGB(14) to sRGB(0).\n *\n * The general 'error_via_linear' is more complex because of pre-multiplication,\n * this compounds the 8-bit errors according to the alpha value of the pixel.\n * As a result 256 values are pre-calculated for error_via_linear.\n "
2018/06/19 13:43:37 " Indexed by 8-bit alpha "
2018/06/19 13:43:37 " transparent pixel "
2018/06/19 13:43:37 " 16-bit values less than 128.5 get rounded to 8-bit 0 and so the worst\n       * case error arises with 16-bit 128.5, work out what sRGB\n       * (non-associated) value generates 128.5; any value less than this is\n       * going to map to 0, so the worst error is floor(value).\n       *\n       * Note that errors are considerably higher (more than a factor of 2)\n       * because libpng uses a simple power law for sRGB data at present.\n       *\n       * Add .1 for arithmetic errors inside libpng.\n       "
2018/06/19 13:43:37 "(128.5 * 255 / 65535)"
2018/06/19 13:43:37 " This is actually 14.99, but, despite the closeness to 15, 14 seems to work\n    * ok in this case.\n    "
2018/06/19 13:43:37 " And as a result the *read* format which did any background processing\n       * was itself linear, so the background color information is also\n       * linear.\n       "
2018/06/19 13:43:37 " not used "
2018/06/19 13:43:37 "or palette index"
2018/06/19 13:43:37 " Eliminate the case where the input and output values match exactly. "
2018/06/19 13:43:37 " Eliminate the case where the output pixel is transparent and the output\n    * is 8-bit - any component values are valid.  Don't check the input alpha\n    * here to also skip the 16-bit small alpha cases.\n    "
2018/06/19 13:43:37 " Check for alpha errors first; an alpha error can damage the components too\n    * so avoid spurious checks on components if one is found.\n    "
2018/06/19 13:43:37 " If accumulating check the components too "
2018/06/19 13:43:37 " Now if *either* of the output alphas are 0 but alpha is within tolerance\n    * eliminate the 8-bit component comparison.\n    "
2018/06/19 13:43:37 " else just signal an alpha error "
2018/06/19 13:43:37 " exact match "
2018/06/19 13:43:37 " Mismatch on a component, check the input alpha "
2018/06/19 13:43:37 " opaque "
2018/06/19 13:43:37 " partially transparent "
2018/06/19 13:43:37 " transparent "
2018/06/19 13:43:37 " within the error limits "
2018/06/19 13:43:37 " Handle a component mis-match; log it, just return an error code, or\n       * accumulate it.\n       "
2018/06/19 13:43:37 " to cause the caller to keep going "
2018/06/19 13:43:37 " Failure to match and not accumulating, so the error must be logged. "
2018/06/19 13:43:37 " Given a format return the number of channels and the location of\n    * each channel.\n    *\n    * The mask 'loc' contains the component offset of the channels in the\n    * following order.  Note that if 'format' is grayscale the entries 1-3 must\n    * all contain the location of the gray channel.\n    *\n    * 0: alpha\n    * 1: red or gray\n    * 2: green or gray\n    * 3: blue or gray\n    "
2018/06/19 13:43:37 " not present "
2018/06/19 13:43:37 " Compare two images, the original 'a', which was written out then read back in\n * to * give image 'b'.  The formats may have been changed.\n "
2018/06/19 13:43:37 " This should never happen: "
2018/06/19 13:43:37 " Set up the background and the transform "
2018/06/19 13:43:37 " Find the first row and inter-row space. "
2018/06/19 13:43:37 " First shortcut the two colormap case by comparing the image data; if it\n    * matches then we expect the colormaps to match, although this is not\n    * absolutely necessary for an image match.  If the colormaps fail to match\n    * then there is a problem in libpng.\n    "
2018/06/19 13:43:37 " Only check colormap entries that actually exist; "
2018/06/19 13:43:37 " Do this the slow way to accumulate the 'in_use' flags, don't break out\n       * of the loop until the end; this validates the color-mapped data to\n       * ensure all pixels are valid color-map indexes.\n       "
2018/06/19 13:43:37 " If the buffers match then the colormaps must too. "
2018/06/19 13:43:37 " Do the color-maps match, entry by entry?  Only check the 'in_use'\n          * entries.  An error here should be logged as a color-map error.\n          "
2018/06/19 13:43:37 " match by default "
2018/06/19 13:43:37 " This is used in logpixel to get the error message correct. "
2018/06/19 13:43:37 " The colormap entries should be valid, but because libpng doesn't\n             * do any checking at present the original image may contain invalid\n             * pixel values.  These cause an error here (at present) unless\n             * accumulating errors in which case the program just ignores them.\n             "
2018/06/19 13:43:37 " All the mismatches are logged here; there can only be 256! "
2018/06/19 13:43:37 " If reqested copy the error values back from the Transform. "
2018/06/19 13:43:37 " force a continue "
2018/06/19 13:43:37 " else the image buffers don't match pixel-wise so compare sample values\n       * instead, but first validate that the pixel indexes are in range (but\n       * only if not accumulating, when the error is ignored.)\n       "
2018/06/19 13:43:37 " 2^32: GCC sprintf warning "
2018/06/19 13:43:37 " 2^8: real maximum value "
2018/06/19 13:43:37 " Check the original image first,\n          * TODO: deal with input images with bad pixel values?\n          "
2018/06/19 13:43:37 "SAFE"
2018/06/19 13:43:37 "SAFE"
2018/06/19 13:43:37 " We can directly compare pixel values without the need to use the read\n    * or transform support (i.e. a memory compare) if:\n    *\n    * 1) The bit depth has not changed.\n    * 2) RGB to grayscale has not been done (the reverse is ok; we just compare\n    *    the three RGB values to the original grayscale.)\n    * 3) An alpha channel has not been removed from an 8-bit format, or the\n    *    8-bit alpha value of the pixel was 255 (opaque).\n    *\n    * If an alpha channel has been *added* then it must have the relevant opaque\n    * value (255 or 65535).\n    *\n    * The fist two the tests (in the order given above) (using the boolean\n    * equivalence !a && !b == !(a || b))\n    "
2018/06/19 13:43:37 " Was an alpha channel changed? "
2018/06/19 13:43:37 " Was an alpha channel removed?  (The third test.)  If so the direct\n       * comparison is only possible if the input alpha is opaque.\n       "
2018/06/19 13:43:37 " Was an alpha channel added? "
2018/06/19 13:43:37 " The channels may have been moved between input and output, this finds\n       * out how, recording the result in the btoa array, which says where in\n       * 'a' to find each channel of 'b'.  If alpha was added then btoa[alpha]\n       * ends up as 4 (and is not used.)\n       "
2018/06/19 13:43:37 " The following are used only if the formats match, except that\n          * 'bchannels' is a flag for matching formats.  btoa[x] says, for each\n          * channel in b, where to find the corresponding value in a, for the\n          * bchannels.  achannels may be different for a gray to rgb transform\n          * (a will be 1 or 2, b will be 3 or 4 channels.)\n          "
2018/06/19 13:43:37 " Hence the btoa array. "
2018/06/19 13:43:37 " may be '4' for alpha "
2018/06/19 13:43:37 " location of alpha channel in image b "
2018/06/19 13:43:37 " Won't match an image b channel "
2018/06/19 13:43:37 " location of alpha channel in image a "
2018/06/19 13:43:37 " Direct compare is not possible, cancel out all the corresponding local\n       * variables.\n       "
2018/06/19 13:43:37 " 4 == not present "
2018/06/19 13:43:37 " Do the fast test if possible. "
2018/06/19 13:43:37 " Check each 'b' channel against either the corresponding 'a'\n             * channel or the opaque alpha value, as appropriate.  If\n             * alpha_removed value is set (not 4) then also do this only if the\n             * 'a' alpha channel (alpha_removed) is opaque; only relevant for\n             * the 8-bit case.\n             "
2018/06/19 13:43:37 " 16-bit checks "
2018/06/19 13:43:37 " FALLTHROUGH "
2018/06/19 13:43:37 " FALLTHROUGH "
2018/06/19 13:43:37 " FALLTHROUGH "
2018/06/19 13:43:37 " x loop "
2018/06/19 13:43:37 " impossible "
2018/06/19 13:43:37 " FALLTHROUGH "
2018/06/19 13:43:37 " FALLTHROUGH "
2018/06/19 13:43:37 " FALLTHROUGH "
2018/06/19 13:43:37 " x loop "
2018/06/19 13:43:37 " impossible "
2018/06/19 13:43:37 " If we get to here the fast match failed; do the slow match for this\n          * pixel.\n          "
2018/06/19 13:43:37 " error case "
2018/06/19 13:43:37 " If reqested copy the error values back from the Transform. "
2018/06/19 13:43:37 " Read the file; how the read gets done depends on which of input_file and\n * input_memory have been set.\n "
2018/06/19 13:43:37 " This must be set after the begin_read call: "
2018/06/19 13:43:37 " Have an initialized image with all the data we need plus, maybe, an\n    * allocated file (myfile) or buffer (mybuffer) that need to be freed.\n    "
2018/06/19 13:43:37 " Print both original and output formats. "
2018/06/19 13:43:37 " 'NO_CHANGE' combined with the color-map flag forces the base format\n       * flags to be set on read to ensure that the original representation is\n       * not lost in the pass through a colormap format.\n       "
2018/06/19 13:43:37 " Reads from a filename, which must be in image->file_name, but uses\n * image->opts to choose the method.  The file is always read in its native\n * format (the one the simplified API suggests).\n "
2018/06/19 13:43:37 " memory or stdio. "
2018/06/19 13:43:37 " memory "
2018/06/19 13:43:37 " cb is the length of the file as a (long) and\n                      * this is greater than the maximum amount of\n                      * memory that can be requested from malloc.\n                      "
2018/06/19 13:43:37 " Experimental. Coverity says tmpfile() is insecure because it\n       * generates predictable names.\n       *\n       * It is possible to satisfy Coverity by using mkstemp(); however,\n       * any platform supporting mkstemp() undoubtedly has a secure tmpfile()\n       * implementation as well, and doesn't need the fix.  Note that\n       * the fix won't work on platforms that don't support mkstemp().\n       *\n       * https://www.securecoding.cert.org/confluence/display/c/\n       * FIO21-C.+Do+not+create+temporary+files+in+shared+directories\n       * says that most historic implementations of tmpfile() provide\n       * only a limited number of possible temporary file names\n       * (usually 26) before file names are recycled. That article also\n       * provides a secure solution that unfortunately depends upon mkstemp().\n       "
2018/06/19 13:43:37 " Hide the filename immediately and ensure that the file does\n         * not exist after the program ends\n         "
2018/06/19 13:43:37 " SIMPLIFIED_WRITE_STDIO "
2018/06/19 13:43:37 " SIMPLIFIED_WRITE_STDIO "
2018/06/19 13:43:37 " Afterwards, or freeimage will delete it! "
2018/06/19 13:43:37 " SIMPLIFIED_WRITE_STDIO "
2018/06/19 13:43:37 " SIMPLIFIED_WRITE_STDIO "
2018/06/19 13:43:37 " use memory "
2018/06/19 13:43:37 " This is non-fatal but ignoring it was causing serious problems in\n          * the macro to be ignored:\n          "
2018/06/19 13:43:37 " This is also non-fatal but it safes safer to error out anyway:\n                "
2018/06/19 13:43:37 " 'output' has an initialized temporary image, read this back in and compare\n    * this against the original: there should be no change since the original\n    * format was written unmodified unless 'convert_to_8bit' was specified.\n    * However, if the original image was color-mapped, a simple read will zap\n    * the linear, color and maybe alpha flags, this will cause spurious failures\n    * under some circumstances.\n    "
2018/06/19 13:43:37 "via linear"
2018/06/19 13:43:37 " Copy the original data, stealing it from 'image' "
2018/06/19 13:43:37 " Use the low bit of 'counter' to indicate whether or not to do alpha\n       * removal with a background color or by composting onto the image; this\n       * step gets skipped if it isn't relevant\n       "
2018/06/19 13:43:37 " If there is a format change that removes the alpha channel then\n          * the background is relevant.  If the output is 8-bit color-mapped\n          * then a background color *must* be provided, otherwise there are\n          * two tests to do - one with a color, the other with NULL.  The\n          * NULL test happens second.\n          "
2018/06/19 13:43:37 " Alpha/transparency will be removed, the background is\n                * relevant: make it a color the first time\n                "
2018/06/19 13:43:37 " BUT if the output is to a color-mapped 8-bit format then\n                * the background must always be a color, so increment 'counter'\n                * to skip the NULL test.\n                "
2018/06/19 13:43:37 " Otherwise an alpha channel is not being eliminated, just leave\n             * background NULL and skip the (counter & 1) NULL test.\n             "
2018/06/19 13:43:37 " else just use NULL for background "
2018/06/19 13:43:37 " in case read_file needs to change it "
2018/06/19 13:43:37 " Make sure the file just read matches the original file. \nvia linear"
2018/06/19 13:43:37 " Write the *copy* just made to a new file to make sure the write\n             * side works ok.  Check the conversion to sRGB if the copy is\n             * linear.\n             "
2018/06/19 13:43:37 "convert to 8bit"
2018/06/19 13:43:37 " Validate against the original too; the background is needed here\n             * as well so that compare_two_images knows what color was used.\n             "
2018/06/19 13:43:37 " 'output' is linear, convert to the corresponding sRGB format.\n                "
2018/06/19 13:43:37 "convert to 8bit"
2018/06/19 13:43:37 " This may involve a conversion via linear; in the ideal world\n                * this would round-trip correctly, but libpng 1.5.7 is not the\n                * ideal world so allow a drift (error_via_linear).\n                *\n                * 'image' has an alpha channel but 'output' does not then there\n                * will a strip-alpha-channel operation (because 'output' is\n                * linear), handle this by composing on black when doing the\n                * comparison.\n                "
2018/06/19 13:43:37 "via_linear"
2018/06/19 13:43:37 " PNG_SIMPLIFIED_WRITE_SUPPORTED "
2018/06/19 13:43:37 " ensure that the random numbers don't depend on file order "
2018/06/19 13:43:37 " Ensure that stderr is flushed into any log file "
2018/06/19 13:43:37 " stdout may not be line-buffered if it is piped to a file, so: "
2018/06/19 13:43:37 " This error should not exist in 1.7 or later: "
2018/06/19 13:43:37 " initialize random number seeds "
2018/06/19 13:43:37 " skipped: no support "
2018/06/19 13:43:37 " skipped: no support "
2018/06/19 13:43:37 " Safe: checked above "
2018/06/19 13:43:37 " Loop reading files, use a static buffer to simplify this and just\n             * stop if the name gets to long.\n             "
2018/06/19 13:43:37 " Don't allow '\\0' in file names, and terminate with '\\n' or,\n                * for -0, just '\\0' (use -print0 to find to make this work!)\n                "
2018/06/19 13:43:37 " so that the increment below sets it to 0 again "
2018/06/19 13:43:37 " !PNG_SIMPLIFIED_READ_SUPPORTED "
2018/06/19 13:43:37 " So the test is skipped: "
2018/06/19 13:43:37 " PNG_SIMPLIFIED_READ_SUPPORTED "
2018/06/19 13:43:37 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/libtests/pngstest.c": 146.449848ms
2018/06/19 13:43:37 Couldn't classify license(s)
2018/06/19 13:43:38 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/libtests/pngimage.c
2018/06/19 13:43:38 detected language: 4
2018/06/19 13:43:38 " pngimage.c\n *\n * Copyright (c) 2015,2016 John Cunningham Bowler\n *\n * Last changed in libpng 1.6.24 [August 4, 2016]\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * Test the png_read_png and png_write_png interfaces.  Given a PNG file load it\n * using png_read_png and then write with png_write_png.  Test all possible\n * transforms.\n "
2018/06/19 13:43:38 " Define the following to use this test against your installed libpng, rather\n * than the one being built here:\n "
2018/06/19 13:43:38 " because png.h did *not* include this "
2018/06/19 13:43:38 " 1.6.1 added support for the configure test harness, which uses 77 to indicate\n * a skipped test, in earlier versions we need to succeed on a skipped test, so:\n "
2018/06/19 13:43:38 " READ_PNG and WRITE_PNG were not defined, so: "
2018/06/19 13:43:38 " SEQUENTIAL_READ "
2018/06/19 13:43:38 " WRITE \n INFO_IMAGE \n pre 1.7.0 "
2018/06/19 13:43:38 " If a transform is valid on both read and write this implies that if the\n * transform is applied to read it must also be applied on write to produce\n * meaningful data.  This is because these transforms when performed on read\n * produce data with a memory format that does not correspond to a PNG format.\n *\n * Most of these transforms are invertible; after applying the transform on\n * write the result is the original PNG data that would have would have been\n * read if no transform were applied.\n *\n * The exception is _SHIFT, which destroys the low order bits marked as not\n * significant in a PNG with the sBIT chunk.\n *\n * The following table lists, for each transform, the conditions under which it\n * is expected to do anything.  Conditions are defined as follows:\n *\n * 1) Color mask bits required - simply a mask to AND with color_type; one of\n *    these must be present for the transform to fire, except that 0 means\n *    'always'.\n * 2) Color mask bits which must be absent - another mask - none of these must\n *    be present.\n * 3) Bit depths - a mask of component bit depths for the transform to fire.\n * 4) 'read' - the transform works in png_read_png.\n * 5) 'write' - the transform works in png_write_png.\n * 6) PNG_INFO_chunk; a mask of the chunks that must be present for the\n *    transform to fire.  All must be present - the requirement is that\n *    png_get_valid() & mask == mask, so if mask is 0 there is no requirement.\n *\n * The condition refers to the original image state - if multiple transforms are\n * used together it is possible to cause a transform that wouldn't fire on the\n * original image to fire.\n "
2018/06/19 13:43:38 " absent = gray, no alpha "
2018/06/19 13:43:38 " i.e. true-color depths "
2018/06/19 13:43:38 " the transform was tested somewhere "
2018/06/19 13:43:38 " List ALL the PNG_TRANSFORM_ macros here.  Check for support using the READ\n    * macros; even if the transform is supported on write it cannot be tested\n    * without the read support.\n    "
2018/06/19 13:43:38 "!tested"
2018/06/19 13:43:38 " drops the bottom 8 bits when bit depth is 16 "
2018/06/19 13:43:38 " removes the alpha channel if present "
2018/06/19 13:43:38 " unpacks low-bit-depth components into 1 byte per component on read,\n       * reverses this on write.\n       "
2018/06/19 13:43:38 " reverses the order of low-bit-depth components packed into a byte "
2018/06/19 13:43:38 " expands PLTE PNG files to RGB (no tRNS) or RGBA (tRNS) *\n       * Note that the 'EXPAND' transform does lots of different things: "
2018/06/19 13:43:38 " expands grayscale PNG files to RGB, or RGBA "
2018/06/19 13:43:38 " expands the tRNS chunk in files without alpha "
2018/06/19 13:43:38 " converts gray-scale components to 1..0 from 0..1 "
2018/06/19 13:43:38 " reduces component values to the original range based on the sBIT chunk,\n       * this is only partially reversible - the low bits are lost and cannot be\n       * recovered on write.  In fact write code replicates the bits to generate\n       * new low-order bits.\n       "
2018/06/19 13:43:38 " reverses the rgb component values of true-color pixels "
2018/06/19 13:43:38 " swaps the alpha channel of RGBA or GA pixels to the front - ARGB or\n       * AG, on write reverses the process.\n       "
2018/06/19 13:43:38 " byte-swaps 16-bit component values "
2018/06/19 13:43:38 " converts an alpha channel from 0..1 to 1..0 "
2018/06/19 13:43:38 " 'A' for a filler! \n on write skips a leading filler channel; testing requires data with a\n       * filler channel so this is produced from RGBA or GA images by removing\n       * the 'alpha' flag from the color type in place.\n       "
2018/06/19 13:43:38 " on write strips a trailing filler channel "
2018/06/19 13:43:38 " expands grayscale images to RGB, also causes the palette part of\n       * 'EXPAND' to happen.  Low bit depth grayscale images are expanded to\n       * 8-bits per component and no attempt is made to convert the image to a\n       * palette image.  While this transform is partially reversible\n       * png_write_png does not currently support this.\n       "
2018/06/19 13:43:38 " The 'palette' side effect mentioned above; a bit bogus but this is the\n       * way the libpng code works.\n       "
2018/06/19 13:43:38 " expands images to 16-bits per component, as a side effect expands\n       * palette images to RGB and expands the tRNS chunk if present, so it can\n       * modify 16-bit per component images as well:\n       "
2018/06/19 13:43:38 " side effect of EXPAND_16 - expands the tRNS chunk in an RGB or G 16-bit\n       * image.\n       "
2018/06/19 13:43:38 " scales 16-bit components to 8-bits. "
2018/06/19 13:43:38 "name\n!tested"
2018/06/19 13:43:38 " Some combinations of options that should be reversible are not; these cases\n * are bugs.\n "
2018/06/19 13:43:38 " problem, antidote \nantidote"
2018/06/19 13:43:38 " non-zero if more than one set bit "
2018/06/19 13:43:38 " lowest set bit "
2018/06/19 13:43:38 " combo is ok "
2018/06/19 13:43:38 " The name, if 't' has multiple bits set the name of the lowest set bit is\n    * returned.\n    "
2018/06/19 13:43:38 " first set bit "
2018/06/19 13:43:38 " Variables calculated by validate_T below and used to record all the supported\n * transforms.  Need (unsigned int) here because of the places where these\n * values are used (unsigned compares in the 'exhaustive' iterator.)\n "
2018/06/19 13:43:38 " Validate the above table - this just builds the above values "
2018/06/19 13:43:38 " Reversible transforms are those which are supported on both read and\n    * write.\n    "
2018/06/19 13:43:38 " FILE DATA HANDLING\n *    The original file is cached in memory.  During write the output file is\n *    written to memory.\n *\n *    In both cases the file data is held in a linked list of buffers - not all\n *    of these are in use at any time.\n "
2018/06/19 13:43:38 " next buffer in list \n the actual buffer "
2018/06/19 13:43:38 " last buffer in use \n bytes in the last buffer \n current buffer being read \n count of bytes read from current \n the very first buffer "
2018/06/19 13:43:38 " Call this only once for a given buffer "
2018/06/19 13:43:38 " required by POSIX 1003.1 "
2018/06/19 13:43:38 " required by ANSI-C "
2018/06/19 13:43:38 " Used from libpng callbacks to get the current buffer "
2018/06/19 13:43:38 " Load a buffer from a file; does the equivalent of buffer_start_write.  On a\n * read error returns an errno value, else returns 0.\n "
2018/06/19 13:43:38 "size"
2018/06/19 13:43:38 " fread failed - probably end of file "
2018/06/19 13:43:38 " no error "
2018/06/19 13:43:38 " Some kind of funky error; errno should be non-zero "
2018/06/19 13:43:38 " This structure is used to control the test of a single file. "
2018/06/19 13:43:38 " switches on all messages "
2018/06/19 13:43:38 " switches on warnings "
2018/06/19 13:43:38 " just errors \n continuable error - no need to longjmp \n this and higher cause a longjmp \n erroneous behavior in libpng \n such as out-of-memory in a callback \n no normal messages \n such as file-not-found "
2018/06/19 13:43:38 " where the level is in 'options' "
2018/06/19 13:43:38 " Test all combinations of active options \n Fail on warnings as well as errors \n Log pass/fail to stdout \n Continue on APP_FAIL errors \n Skip over known bugs \n Log skipped bugs \n Attempt to deduce bad combos \n List combos by name "
2018/06/19 13:43:38 " Result masks apply to the result bits in the 'results' field below; these\n * bits are simple 1U<<error_level.  A pass requires either nothing worse than\n * warnings (--relaxes) or nothing worse than information (--strict)\n "
2018/06/19 13:43:38 " Where to go to on error "
2018/06/19 13:43:38 " The name of the original file \n Operation being performed \n Transform used in operation \n See display_log below \n A mask of errors seen "
2018/06/19 13:43:38 " used on the original read \n set by the original read "
2018/06/19 13:43:38 " of the original rows: \n from the original read "
2018/06/19 13:43:38 " Original chunks valid "
2018/06/19 13:43:38 " Original IHDR information "
2018/06/19 13:43:38 " Derived information for the original image. \n transforms that do something on read \n transforms that should do nothing "
2018/06/19 13:43:38 " Used on a read, both the original read and when validating a written\n    * image.\n    "
2018/06/19 13:43:38 " Used to write a new image (the original info_ptr is used) "
2018/06/19 13:43:38 " where the file gets written "
2018/06/19 13:43:38 " Data read from the original file "
2018/06/19 13:43:38 " Call this only once right at the start to initialize the control\n    * structure, the (struct buffer) lists are maintained across calls - the\n    * memory is not freed.\n    "
2018/06/19 13:43:38 " default to !verbose, !quiet "
2018/06/19 13:43:38 " leave the filename for error detection \n reset for next time "
2018/06/19 13:43:38 " Release any memory held in the display. "
2018/06/19 13:43:38 " The display pointer is always stored in the png_struct error pointer "
2018/06/19 13:43:38 " prevents a crash "
2018/06/19 13:43:38 " error handling "
2018/06/19 13:43:38 " Required to quiet GNUC warnings when the compiler sees a stdarg function\n    * that calls one of the stdio v APIs.\n    "
2018/06/19 13:43:38 " 'level' is as above, fmt is a stdio style format string.  This routine\n    * does not return if level is above LIBPNG_WARNING\n    "
2018/06/19 13:43:38 " anything unexpected is an internal error: "
2018/06/19 13:43:38 " else do not output any message "
2018/06/19 13:43:38 " Errors cause this routine to exit to the fail code "
2018/06/19 13:43:38 " error handler callbacks for libpng "
2018/06/19 13:43:38 " Does the initial cache of the file. "
2018/06/19 13:43:38 "NOTREACHED"
2018/06/19 13:43:38 " Move to the next buffer: "
2018/06/19 13:43:38 " Avoid update outside the loop "
2018/06/19 13:43:38 " And do a sanity check (the EOF case is caught above) "
2018/06/19 13:43:38 "NOTREACHED"
2018/06/19 13:43:38 " This cleans out any previous read and sets operation and transforms to\n    * empty.\n    "
2018/06/19 13:43:38 " else this is a verify and do not overwrite info "
2018/06/19 13:43:38 " The png_read_png API requires us to make the info struct, but it does the\n    * call to png_read_info.\n    "
2018/06/19 13:43:38 " Remove the user limits, if any "
2018/06/19 13:43:38 " Set the IO handling "
2018/06/19 13:43:38 "params"
2018/06/19 13:43:38 " crazy debugging "
2018/06/19 13:43:38 " called once after the first read to update all the info, original_pp and\n    * original_ip must have been filled in.\n    "
2018/06/19 13:43:38 " Now perform the initial read with a 0 tranform. \nno transform"
2018/06/19 13:43:38 " Move the result to the 'original' fields "
2018/06/19 13:43:38 " set by png_read_png "
2018/06/19 13:43:38 " 'active' transforms are discovered based on the original image format;\n    * running one active transform can activate others.  At present the code\n    * does not attempt to determine the closure.\n    "
2018/06/19 13:43:38 " Some transforms appear multiple times in the table; the 'active' status\n       * is the logical OR of these and the inactive status must be adjusted to\n       * take this into account.\n       "
2018/06/19 13:43:38 " excluding write-only transforms "
2018/06/19 13:43:38 " Compare the png_info from read_ip with original_info "
2018/06/19 13:43:38 " The IHDR should be identical: "
2018/06/19 13:43:38 " 'e' remains set to the name of the last thing changed: "
2018/06/19 13:43:38 " All the chunks from the original PNG should be preserved in the output PNG\n    * because the PNG format has not been changed.\n    "
2018/06/19 13:43:38 " rowbytes should be the same "
2018/06/19 13:43:38 " NOTE: on 64-bit systems this may trash the top bits of rowbytes,\n    * which could lead to weird error messages.\n    "
2018/06/19 13:43:38 " The rows should be the same too, unless the applied transforms includes\n    * the shift transform, in which case low bits may have been lost.\n    "
2018/06/19 13:43:38 " mask (if not zero) for the final byte "
2018/06/19 13:43:38 " Need the stray bits at the end, this depends only on the low bits\n          * of the image width; overflow does not matter.  If the width is an\n          * exact multiple of 8 bits this gives a mask of 0, not 0xff.\n          "
2018/06/19 13:43:38 " Find the first error "
2018/06/19 13:43:38 " don't keep reporting failed rows on 'continue' "
2018/06/19 13:43:38 " bits-per-pixel then bytes-per-pixel \n components are up to 8 bytes in size "
2018/06/19 13:43:38 "NOTREACHED"
2018/06/19 13:43:38 " libpng should catch this; if not there is a security issue\n                * because an app (like this one) may overflow an array. In fact\n                * libpng doesn't catch this at present.\n                "
2018/06/19 13:43:38 "!palette"
2018/06/19 13:43:38 " sanity check; this is a grayscale PNG; something is wrong in the\n             * code above.\n             "
2018/06/19 13:43:38 " Two bytes per component, big-endian "
2018/06/19 13:43:38 " big-endian "
2018/06/19 13:43:38 " One byte per component "
2018/06/19 13:43:38 " allowed, but dumb \n Value is 1 "
2018/06/19 13:43:38 " Replicate 4 times \n Value is 1 or 2 "
2018/06/19 13:43:38 " Relicate twice \n Value is 1, 2, 3 or 4 "
2018/06/19 13:43:38 " Convert bpp to bytes; this gives '1' for low-bit depth grayscale,\n          * where there are multiple pixels per byte.\n          "
2018/06/19 13:43:38 " The mask can be combined with sig_bits[0] "
2018/06/19 13:43:38 " for y "
2018/06/19 13:43:38 " !sBIT "
2018/06/19 13:43:38 " !sBIT "
2018/06/19 13:43:38 " compare succeeded "
2018/06/19 13:43:38 " Generic write function used both from the write callback provided to\n    * libpng and from the generic read code.\n    "
2018/06/19 13:43:38 " Write the data into the buffer, adding buffers as required "
2018/06/19 13:43:38 " avoid the need to rewrite every time "
2018/06/19 13:43:38 " safety "
2018/06/19 13:43:38 "flush"
2018/06/19 13:43:38 " Remove the user limits, if any "
2018/06/19 13:43:38 " Certain transforms require the png_info to be zapped to allow the\n    * transform to work correctly.\n    "
2018/06/19 13:43:38 "params"
2018/06/19 13:43:38 " Clean it on the way out - if control returns to the caller then the\n    * written_file contains the required data.\n    "
2018/06/19 13:43:38 " WRITE_PNG "
2018/06/19 13:43:38 " Helper to test for a bad combo and log it if it is skipped "
2018/06/19 13:43:38 " Log this to stdout if logging is on, otherwise just do an information\n       * display_log.\n       "
2018/06/19 13:43:38 " skip "
2018/06/19 13:43:38 " don't skip "
2018/06/19 13:43:38 " First cache the file and update the display original file\n    * information for the new file.\n    "
2018/06/19 13:43:38 " First test: if there are options that should be ignored for this file\n    * verify that they really are ignored.\n    "
2018/06/19 13:43:38 " The result should be identical to the original_rows \ntransforms applied\n no point testing more "
2018/06/19 13:43:38 " Second test: write the original PNG data out to a new file (to test the\n    * write side) then read the result back in and make sure that it hasn't\n    * changed.\n    "
2018/06/19 13:43:38 "transforms\ntransforms\ntransforms applied"
2018/06/19 13:43:38 " Third test: the active options.  Test each in turn, or, with the\n    * EXHAUSTIVE option, test all possible combinations.\n    "
2018/06/19 13:43:38 " Use unsigned int here because the code below to increment through all\n       * the possibilities exhaustively has to use a compare and that must be\n       * unsigned, because some transforms are negative on a 16-bit system.\n       "
2018/06/19 13:43:38 " bitwise AND of failing transforms \n bitwise OR of failures "
2018/06/19 13:43:38 " If this involved any irreversible transformations then if we write\n          * it out with just the reversible transformations and read it in again\n          * with the same transforms we should get the same thing.  At present\n          * this isn't done - it just seems like a waste of time and it would\n          * require two sets of read png_struct/png_info.\n          *\n          * If there were no irreversible transformations then if we write it\n          * out and read it back in again (without the reversible transforms)\n          * we should get back to the place where we started.\n          "
2018/06/19 13:43:38 " All transforms reversible: write the PNG with the transformations\n             * reversed, then read it back in with no transformations.  The\n             * result should be the same as the original apart from the loss of\n             * low order bits because of the SHIFT/sBIT transform.\n             "
2018/06/19 13:43:38 " And if this is read back in, because all the transformations were\n             * reversible, the result should be the same.\n             "
2018/06/19 13:43:38 "for the SHIFT/sBIT transform"
2018/06/19 13:43:38 " This set of transforms failed.  If a single bit is set - if\n                * there is just one transform - don't include this in further\n                * 'exhaustive' tests.  Notice that each transform is tested on\n                * its own before testing combos in the exhaustive case.\n                "
2018/06/19 13:43:38 " Now move to the next transform \n all combinations "
2018/06/19 13:43:38 " Everything tested "
2018/06/19 13:43:38 " skip known bad combos if the relevant option is set; skip\n                * combos involving known bad single transforms in all cases.\n                "
2018/06/19 13:43:38 " skip cases that do nothing "
2018/06/19 13:43:38 " one at a time "
2018/06/19 13:43:38 " bad_combos identifies the combos that occur in all failing cases;\n          * bad_combo_list identifies transforms that do not prevent the\n          * failure.\n          "
2018/06/19 13:43:38 " Exists solely to isolate the setjmp clobbers "
2018/06/19 13:43:38 " shouldn't longjmp on warnings "
2018/06/19 13:43:38 " For each file on the command line test it with a range of transforms "
2018/06/19 13:43:38 " prevent display "
2018/06/19 13:43:38 " Not an option "
2018/06/19 13:43:38 " abort on user or internal error "
2018/06/19 13:43:38 " Here on any return, including failures, except user/internal issues\n          "
2018/06/19 13:43:38 " Release allocated memory "
2018/06/19 13:43:38 " !READ_PNG "
2018/06/19 13:43:38 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/libtests/pngimage.c": 107.262636ms
2018/06/19 13:43:38 Couldn't classify license(s)
2018/06/19 13:43:39 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/libtests/timepng.c
2018/06/19 13:43:39 detected language: 4
2018/06/19 13:43:39 " timepng.c\n *\n * Copyright (c) 2013,2016 John Cunningham Bowler\n *\n * Last changed in libpng 1.6.22 [May 26, 2016]\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * Load an arbitrary number of PNG files (from the command line, or, if there\n * are no arguments on the command line, from stdin) then run a time test by\n * reading each file by row or by image (possibly with transforms in the latter\n * case).  The only output is a time as a floating point number of seconds with\n * 9 decimal digits.\n "
2018/06/19 13:43:39 " for clock_gettime "
2018/06/19 13:43:39 " Define the following to use this test against your installed libpng, rather\n * than the one being built here:\n "
2018/06/19 13:43:39 " The following is to support direct compilation of this file as C++ "
2018/06/19 13:43:39 " __cplusplus "
2018/06/19 13:43:39 " 'CLOCK_PROCESS_CPUTIME_ID' is one of the clock timers for clock_gettime.  It\n * need not be supported even when clock_gettime is available.  It returns the\n * 'CPU' time the process has consumed.  'CPU' time is assumed to include time\n * when the CPU is actually blocked by a pending cache fill but not time\n * waiting for page faults.  The attempt is to get a measure of the actual time\n * the implementation takes to read a PNG ignoring the potentially very large IO\n * overhead.\n "
2018/06/19 13:43:39 " These don't get freed on error, this is fine; the program immediately\n    * exits.\n    "
2018/06/19 13:43:39 " Set up for a copy to the temporary file: "
2018/06/19 13:43:39 " NOTE: this trashes the row each time; interlace handling won't\n             * work, but this avoids memory thrashing for speed testing and is\n             * somewhat representative of an application that works row-by-row.\n             "
2018/06/19 13:43:39 " Make sure to read to the end of the file: "
2018/06/19 13:43:39 " Free this up: "
2018/06/19 13:43:39 "allowed"
2018/06/19 13:43:39 "params"
2018/06/19 13:43:39 " Do the timing using clock_gettime and the per-process timer. "
2018/06/19 13:43:39 " Clear out all errors: "
2018/06/19 13:43:39 "write"
2018/06/19 13:43:39 " Work out the time difference and print it - this is the only output,\n       * so flush it immediately.\n       "
2018/06/19 13:43:39 " Successful return "
2018/06/19 13:43:39 " Read the file using libpng; this detects errors and also deals with\n       * files which contain data beyond the end of the file.\n       "
2018/06/19 13:43:39 " Fatal error reading the start: "
2018/06/19 13:43:39 "by row\noutput"
2018/06/19 13:43:39 " read ok "
2018/06/19 13:43:39 " An error in the output is fatal; exit immediately: "
2018/06/19 13:43:39 " Did not read the file successfully, simply rewind the temporary\n       * file.  This must happen after the ferror check above to avoid clearing\n       * the error.\n       "
2018/06/19 13:43:39 " file open error: "
2018/06/19 13:43:39 " file not added "
2018/06/19 13:43:39 " ISO C90 string length max 509 "
2018/06/19 13:43:39 " by row "
2018/06/19 13:43:39 " Just build the test file, argv[2] is the file name. "
2018/06/19 13:43:39 " Else use a temporary file "
2018/06/19 13:43:39 " Experimental. Coverity says tmpfile() is insecure because it\n       * generates predictable names.\n       *\n       * It is possible to satisfy Coverity by using mkstemp(); however,\n       * any platform supporting mkstemp() undoubtedly has a secure tmpfile()\n       * implementation as well, and doesn't need the fix.  Note that\n       * the fix won't work on platforms that don't support mkstemp().\n       *\n       * https://www.securecoding.cert.org/confluence/display/c/\n       * FIO21-C.+Do+not+create+temporary+files+in+shared+directories\n       * says that most historic implementations of tmpfile() provide\n       * only a limited number of possible temporary file names\n       * (usually 26) before file names are recycled. That article also\n       * provides a secure solution that unfortunately depends upon mkstemp().\n       "
2018/06/19 13:43:39 " Hide the filename immediately and ensure that the file does\n         * not exist after the program ends\n         "
2018/06/19 13:43:39 " not a user error "
2018/06/19 13:43:39 " Handle the transforms: "
2018/06/19 13:43:39 " Transforms turn on the by-image processing and maybe set some\n       * transforms:\n       "
2018/06/19 13:43:39 " handled above "
2018/06/19 13:43:39 " Handle the files: "
2018/06/19 13:43:39 " Additional files not valid with --dissemble "
2018/06/19 13:43:39 " Read from stdin withoout --dissemble "
2018/06/19 13:43:39 " Perform the test, or produce the --assemble output: "
2018/06/19 13:43:39 " Exit code 0 on success. "
2018/06/19 13:43:39 " !sufficient support "
2018/06/19 13:43:39 " !sufficient support "
2018/06/19 13:43:39 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/libtests/timepng.c": 26.098245ms
2018/06/19 13:43:39 Couldn't classify license(s)
2018/06/19 13:43:40 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/libtests/pngunknown.c
2018/06/19 13:43:40 detected language: 4
2018/06/19 13:43:40 " pngunknown.c - test the read side unknown chunk handling\n *\n * Last changed in libpng 1.6.32 [August 24, 2017]\n * Copyright (c) 2015,2017 Glenn Randers-Pehrson\n * Written by John Cunningham Bowler\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * NOTES:\n *   This is a C program that is intended to be linked against libpng.  It\n *   allows the libpng unknown handling code to be tested by interpreting\n *   arguments to save or discard combinations of chunks.  The program is\n *   currently just a minimal validation for the built-in libpng facilities.\n "
2018/06/19 13:43:40 " Define the following to use this test against your installed libpng, rather\n * than the one being built here:\n "
2018/06/19 13:43:40 " 1.6.1 added support for the configure test harness, which uses 77 to indicate\n * a skipped test, in earlier versions we need to succeed on a skipped test, so:\n "
2018/06/19 13:43:40 " Since this program tests the ability to change the unknown chunk handling\n * these must be defined:\n "
2018/06/19 13:43:40 " One of these must be defined to allow us to find out what happened.  It is\n * still useful to set unknown chunk handling without either of these in order\n * to cause *known* chunks to be discarded.  This can be a significant\n * efficiency gain, but it can't really be tested here.\n "
2018/06/19 13:43:40 " This deliberately lacks the PNG_CONST. "
2018/06/19 13:43:40 " This is copied from 1.5.1 png.h: "
2018/06/19 13:43:40 " These are needed too for the default build: "
2018/06/19 13:43:40 " This comes from pnglibconf.h afer 1.5: "
2018/06/19 13:43:40 " 1.6.0 constifies many APIs. The following exists to allow pngvalid to be\n    * compiled against earlier versions.\n    "
2018/06/19 13:43:40 " Copied from libpng 1.7.0 png.h "
2018/06/19 13:43:40 " Constants for known chunk types.\n "
2018/06/19 13:43:40 " registered July 2017 \n registered, not defined "
2018/06/19 13:43:40 " deprecated "
2018/06/19 13:43:40 " Test on flag values as defined in the spec (section 5.4): "
2018/06/19 13:43:40 " PNG_LIBPNG_VER < 10700 "
2018/06/19 13:43:40 " __cplusplus "
2018/06/19 13:43:40 " Unused formal parameter errors are removed using the following macro which is\n * expected to have no bad effects on performance.\n "
2018/06/19 13:43:40 " Types of chunks not known to libpng "
2018/06/19 13:43:40 " Chunk information "
2018/06/19 13:43:40 " Chunk not known to libpng \n Chunk set by the '-1' option \n position in pngtest.png \n unknown handling setting "
2018/06/19 13:43:40 " Critical chunks \n must be [0] "
2018/06/19 13:43:40 " Non-critical chunks that libpng handles \n This is a mess but it seems to be the only way to do it - there is no way\n    * to check for a definition outside a #if.\n    "
2018/06/19 13:43:40 " No libpng handling "
2018/06/19 13:43:40 " Type of an error_ptr "
2018/06/19 13:43:40 " the default value "
2018/06/19 13:43:40 " This must not happen - it might cause an app crash "
2018/06/19 13:43:40 " During initialization and if this is a single command line argument set\n    * exit now - there is only one test, otherwise longjmp to do the next test.\n    "
2018/06/19 13:43:40 " libpng error and warning callbacks "
2018/06/19 13:43:40 " Map the text chunks back into the flags "
2018/06/19 13:43:40 " This function mimics the behavior of png_set_keep_unknown_chunks by\n    * returning '0' to keep the chunk and '1' to discard it.\n    "
2018/06/19 13:43:40 " not one in our list, so not a known chunk "
2018/06/19 13:43:40 " See the comments in png.h - use the default for unknown chunks,\n          * do not keep known chunks.\n          "
2018/06/19 13:43:40 "handled; discard"
2018/06/19 13:43:40 "not handled; keep"
2018/06/19 13:43:40 " Also store information about this chunk in the display, the relevant flag\n    * is set if the chunk is to be kept ('not handled'.)\n    "
2018/06/19 13:43:40 " stupidity to stop a GCC warning "
2018/06/19 13:43:40 " However if there is no support to store unknown chunks don't ask libpng to\n    * do it; there will be an png_error.\n    "
2018/06/19 13:43:40 "handled; discard"
2018/06/19 13:43:40 " READ_USER_CHUNKS_SUPPORTED "
2018/06/19 13:43:40 " Create corresponding 'unknown' flags "
2018/06/19 13:43:40 " Chunks not known to pngunknown must be validated here; since they\n          * must also be unknown to libpng the 'display->keep' behavior should\n          * have been used.\n          "
2018/06/19 13:43:40 " impossible "
2018/06/19 13:43:40 " FALLTHROUGH \n (safe) "
2018/06/19 13:43:40 " SAVE_UNKNOWN_CHUNKS "
2018/06/19 13:43:40 " Otherwise this will return the cached values set by any user callback "
2018/06/19 13:43:40 " The #defines above should mean this is never reached, it's just here as\n       * a check to ensure the logic is correct.\n       "
2018/06/19 13:43:40 " READ_USER_CHUNKS \n SAVE_UNKNOWN_CHUNKS "
2018/06/19 13:43:40 "out"
2018/06/19 13:43:40 " Some of these errors are permanently fatal and cause an exit here, others\n    * are per-test and cause an error return.\n    "
2018/06/19 13:43:40 " Terminate here, this error is not test specific. "
2018/06/19 13:43:40 " This is only done if requested by the caller; it interferes with the\n       * standard store/save mechanism.\n       "
2018/06/19 13:43:40 " Handle each argument in turn; multiple settings are possible for the same\n    * chunk and multiple calls will occur (the last one should override all\n    * preceding ones).\n    "
2018/06/19 13:43:40 " chunk name "
2018/06/19 13:43:40 " These #if tests have the effect of skipping the arguments\n                   * if SAVE support is unavailable - we can't do a useful test\n                   * in this case, so we just check the arguments!  This could\n                   * be improved in the future by using the read callback.\n                   "
2018/06/19 13:43:40 " 1.7+ SAVE_UNKNOWN_CHUNKS "
2018/06/19 13:43:40 " default "
2018/06/19 13:43:40 " 1.7+ SAVE_UNKNOWN_CHUNKS "
2018/06/19 13:43:40 " all "
2018/06/19 13:43:40 " 1.7+ SAVE_UNKNOWN_CHUNKS "
2018/06/19 13:43:40 " some misplaced = "
2018/06/19 13:43:40 " Hard error because it is not test specific "
2018/06/19 13:43:40 " Skip the image data, if IDAT is not being handled then don't do this\n    * because it will cause a CRC error.\n    "
2018/06/19 13:43:40 "IDAT"
2018/06/19 13:43:40 " interlaced "
2018/06/19 13:43:40 " not interlaced "
2018/06/19 13:43:40 "before IDAT"
2018/06/19 13:43:40 " Only png_read_png sets PNG_INFO_IDAT! \nIDAT"
2018/06/19 13:43:40 "after IDAT"
2018/06/19 13:43:40 " unknown chunk "
2018/06/19 13:43:40 " known chunk "
2018/06/19 13:43:40 " chunk was processed, it won't have been saved because that is\n             * caught below when checking for inconsistent processing.\n             "
2018/06/19 13:43:40 " not processed "
2018/06/19 13:43:40 " If IDAT is being handled as unknown the image read is skipped and all the\n    * IDATs after the first end up in the end info struct, so in this case add\n    * IDAT to the list of unknowns.  (Do this after 'check' above sets the\n    * chunk_info 'keep' fields.)\n    *\n    * Note that the flag setting has to be in the 'known' field to avoid\n    * triggering the consistency check below and the flag must only be set if\n    * there are multiple IDATs, so if the check above did find an unknown IDAT\n    * after IDAT.\n    "
2018/06/19 13:43:40 "IDAT"
2018/06/19 13:43:40 " Chunks should either be known or unknown, never both and this should apply\n    * whether the chunk is before or after the IDAT (actually, the app can\n    * probably change this by swapping the handling after the image, but this\n    * test does not do that.)\n    "
2018/06/19 13:43:40 " Now find out what happened to each chunk before and after the IDAT and\n    * determine if the behavior was correct.  First some basic sanity checks,\n    * any known chunk should be known in the original count, any unknown chunk\n    * should be either known or unknown in the original.\n    "
2018/06/19 13:43:40 " Now each chunk in the original list should have been handled according to\n    * the options set for that chunk, regardless of whether libpng knows about\n    * it or not.\n    "
2018/06/19 13:43:40 " allow use of d->error_return "
2018/06/19 13:43:40 " prevent use of d->error_return "
2018/06/19 13:43:40 "end"
2018/06/19 13:43:40 "valid,unknown{before,after}"
2018/06/19 13:43:40 " A file name is required, but there should be no other arguments if\n    * --default was specified.\n    "
2018/06/19 13:43:40 " GCC BUG: if (default_tests && argc != 1) triggers some weird GCC argc\n    * optimization which causes warnings with -Wstrict-overflow!\n    "
2018/06/19 13:43:40 " The name of the test file is the last argument; remove it. "
2018/06/19 13:43:40 " First find all the chunks, known and unknown, in the test file, a failure\n    * here aborts the whole test.\n    *\n    * If 'save' is supported then the normal saving method should happen,\n    * otherwise if 'read' is supported then the read callback will do the\n    * same thing.  If both are supported the 'read' callback won't be\n    * instantiated by default.  If 'save' is *not* supported then a user\n    * callback is required even though we can call png_get_unknown_chunks.\n    "
2018/06/19 13:43:40 " Now find what the various supplied options cause to change: "
2018/06/19 13:43:40 " acts as a flag to say exit, do not longjmp "
2018/06/19 13:43:40 " Set the exit_test pointer here so we can continue after a libpng error.\n       * NOTE: this leaks memory because the png_struct data from the failing\n       * test is never freed.\n       "
2018/06/19 13:43:40 " Success, touch the success file if appropriate "
2018/06/19 13:43:40 " !(READ_USER_CHUNKS || SAVE_UNKNOWN_CHUNKS) "
2018/06/19 13:43:40 " So the test is skipped: "
2018/06/19 13:43:40 " READ_USER_CHUNKS || SAVE_UNKNOWN_CHUNKS "
2018/06/19 13:43:40 " !(SET_UNKNOWN_CHUNKS && READ) "
2018/06/19 13:43:40 " So the test is skipped: "
2018/06/19 13:43:40 " SET_UNKNOWN_CHUNKS && READ"
2018/06/19 13:43:40 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/libtests/pngunknown.c": 33.210307ms
2018/06/19 13:43:40 Couldn't classify license(s)
2018/06/19 13:43:41 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/libtests/makepng.c
2018/06/19 13:43:41 detected language: 4
2018/06/19 13:43:41 " makepng.c "
2018/06/19 13:43:41 " Copyright: "
2018/06/19 13:43:41 "\n * Last changed in libpng 1.6.20 [November 24, 2015]\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * Make a test PNG image.  The arguments are as follows:\n *\n *    makepng [--sRGB|--linear|--1.8] [--tRNS] [--nofilters] \\\n *       color-type bit-depth [file-name]\n *\n * The color-type may be numeric (and must match the numbers used by the PNG\n * specification) or one of the format names listed below.  The bit-depth is the\n * component bit depth, or the pixel bit-depth for a color-mapped image.\n *\n * Without any options no color-space information is written, with the options\n * an sRGB or the appropriate gAMA chunk is written.  \"1.8\" refers to the\n * display system used on older Apple computers to correct for high ambient\n * light levels in the viewing environment; it applies a transform of\n * approximately value^(1/1.45) to the color values and so a gAMA chunk of 65909\n * is written (1.45/2.2).\n *\n * The image data is generated internally.  Unless --color is given the images\n * used are as follows:\n *\n * 1 channel: a square image with a diamond, the least luminous colors are on\n *    the edge of the image, the most luminous in the center.\n *\n * 2 channels: the color channel increases in luminosity from top to bottom, the\n *    alpha channel increases in opacity from left to right.\n *\n * 3 channels: linear combinations of, from the top-left corner clockwise,\n *    black, green, white, red.\n *\n * 4 channels: linear combinations of, from the top-left corner clockwise,\n *    transparent, red, green, blue.\n *\n * For color-mapped images a four channel color-map is used and if --tRNS is\n * given the PNG file has a tRNS chunk, as follows:\n *\n * 1-bit: entry 0 is transparent-red, entry 1 is opaque-white\n * 2-bit: entry 0: transparent-green\n *        entry 1: 40%-red\n *        entry 2: 80%-blue\n *        entry 3: opaque-white\n * 4-bit: the 16 combinations of the 2-bit case\n * 8-bit: the 256 combinations of the 4-bit case\n *\n * The palette always has 2^bit-depth entries and the tRNS chunk one fewer.  The\n * image is the 1-channel diamond, but using palette index, not luminosity.\n *\n * For formats other than color-mapped ones if --tRNS is specified a tRNS chunk\n * is generated with all channels equal to the low bits of 0x0101.\n *\n * Image size is determined by the final pixel depth in bits, i.e. channels x\n * bit-depth, as follows:\n *\n * 8 bits or less:    64x64\n * 16 bits:           256x256\n * More than 16 bits: 1024x1024\n *\n * Row filtering is the libpng default but may be turned off (the 'none' filter\n * is used on every row) with the --nofilters option.\n *\n * The images are not interlaced.\n *\n * If file-name is given then the PNG is written to that file, else it is\n * written to stdout.  Notice that stdout is not supported on systems where, by\n * default, it assumes text output; this program makes no attempt to change the\n * text mode of stdout!\n *\n *    makepng --color=<color> ...\n *\n * If --color is given then the whole image has that color, color-mapped images\n * will have exactly one palette entry and all image files with be 16x16 in\n * size.  The color value is 1 to 4 decimal numbers as appropriate for the color\n * type.\n *\n *    makepng --small ...\n *\n * If --small is given the images are no larger than required to include every\n * possible pixel value for the format.\n *\n * For formats with pixels 8 bits or fewer in size the images consist of a\n * single row with 2^pixel-depth pixels, one of every possible value.\n *\n * For formats with 16-bit pixels a 256x256 image is generated containing every\n * possible pixel value.\n *\n * For larger pixel sizes a 256x256 image is generated where the first row\n * consists of each pixel that has identical byte values throughout the pixel\n * followed by rows where the byte values differ within the pixel.\n *\n * In all cases the pixel values are arranged in such a way that the SUB and UP\n * filters give byte sequences for maximal zlib compression.  By default (if\n * --nofilters is not given) the SUB filter is used on the first row and the UP\n * filter on all following rows.\n *\n * The --small option is meant to provide good test-case coverage, however the\n * images are not easy to examine visually.  Without the --small option the\n * images contain identical color values; the pixel values are adjusted\n * according to the gamma encoding with no gamma encoding being interpreted as\n * sRGB.\n *\n * LICENSING\n * =========\n *\n * This code is copyright of the authors, see the COPYRIGHT define above.  The\n * code is licensed as above, using the libpng license.  The code generates\n * images which are solely the product of the code; the options choose which of\n * the many possibilities to generate.  The images that result (but not the code\n * which generates them) are licensed as defined here:\n *\n * IMPORTANT: the COPYRIGHT #define must contain ISO-Latin-1 characters, the\n * IMAGE_LICENSING #define must contain UTF-8 characters.  The 'copyright'\n * symbol 0xA9U (\\251) in ISO-Latin-1 encoding and 0xC20xA9 (\\302\\251) in UTF-8.\n "
2018/06/19 13:43:41 " for offsetof "
2018/06/19 13:43:41 " Define the following to use this test against your installed libpng, rather\n * than the one being built here:\n "
2018/06/19 13:43:41 " Work round for GCC complaints about casting a (double) function result to\n * an unsigned:\n "
2018/06/19 13:43:41 " This structure is used for inserting extra chunks (the --insert argument, not\n * documented above.)\n "
2018/06/19 13:43:41 " there will be one row "
2018/06/19 13:43:41 "\n    * 1-bit: entry 0 is transparent-red, entry 1 is opaque-white\n    * 2-bit: entry 0: transparent-green\n    *        entry 1: 40%-red\n    *        entry 2: 80%-blue\n    *        entry 3: opaque-white\n    * 4-bit: the 16 combinations of the 2-bit case\n    * 8-bit: the 256 combinations of the 4-bit case\n    "
2018/06/19 13:43:41 " 2, 4 or 16 "
2018/06/19 13:43:41 " size is at most 16, so the scaled value below fits in 16 bits\n                "
2018/06/19 13:43:41 " color:    green, red,blue,white "
2018/06/19 13:43:41 " alpha:        0, 102, 204, 255) "
2018/06/19 13:43:41 " Maximum x is 4*1024, maximum bit_depth is 16 "
2018/06/19 13:43:41 " Don't gamma correct - values get smashed "
2018/06/19 13:43:41 " filter mask for row "
2018/06/19 13:43:41 " file *MASK*, 0 means the default, not NONE "
2018/06/19 13:43:41 " up to 65536 "
2018/06/19 13:43:41 " For pixel depths less than 16 generate a single row containing all the\n       * possible pixel values.  For 16 generate all 65536 byte pair\n       * combinations in a 256x256 pixel array.\n       "
2018/06/19 13:43:41 " binary: 01101100, only top 2 bits used "
2018/06/19 13:43:41 " binary 00011011, all bits used "
2018/06/19 13:43:41 " SUB gives 0x22U for all following bytes "
2018/06/19 13:43:41 " The row will have all the pixel values in order starting with\n             * '1', the SUB filter will change every byte into '1' (including\n             * the last, which generates pixel value '0').  Since the SUB filter\n             * has value 1 this should result in maximum compression.\n             "
2018/06/19 13:43:41 " Rows are generated such that each row has a constant difference\n             * between the first and second byte of each pixel and so that the\n             * difference increases by 1 at each row.  The rows start with the\n             * first byte value of 0 and the value increases to 255 across the\n             * row.\n             *\n             * The difference starts at 1, so the first row is:\n             *\n             *     0 1 1 2 2 3 3 4 ... 254 255 255 0\n             *\n             * This means that running the SUB filter on the first row produces:\n             *\n             *   [SUB==1] 0 1 0 1 0 1...\n             *\n             * Then the difference is 2 on the next row, giving:\n             *\n             *    0 2 1 3 2 4 3 5 ... 254 0 255 1\n             *\n             * When the UP filter is run on this libpng produces:\n             *\n             *   [UP ==2] 0 1 0 1 0 1...\n             *\n             * And so on for all the remain rows to the final two * rows:\n             *\n             *    row 254: 0 255 1 0 2 1 3 2 4 3 ... 254 253 255 254\n             *    row 255: 0   0 1 1 2 2 3 3 4 4 ... 254 254 255 255\n             "
2018/06/19 13:43:41 " The first row must include PNG_FILTER_UP so that libpng knows we\n             * need to keep it for the following row:\n             "
2018/06/19 13:43:41 " The rows are filled by an alogorithm similar to the above, in the\n             * first row pixel bytes are all equal, increasing from 0 by 1 for\n             * each pixel.  In the second row the bytes within a pixel are\n             * incremented 1,3,5,7,... from the previous row byte.  Using an odd\n             * number ensures all the possible byte values are used.\n             "
2018/06/19 13:43:41 " now in bytes "
2018/06/19 13:43:41 "NOT REACHED"
2018/06/19 13:43:41 " 1 channel: a square image with a diamond, the least luminous colors are on\n    *    the edge of the image, the most luminous in the center.\n    "
2018/06/19 13:43:41 " 'luma' is now in the range 0..2*size_max, we need\n                * 0..depth_max\n                "
2018/06/19 13:43:41 " 2 channels: the color channel increases in luminosity from top to bottom,\n    *    the alpha channel increases in opacity from left to right.\n    "
2018/06/19 13:43:41 " 3 channels: linear combinations of, from the top-left corner clockwise,\n    *    black, green, white, red.\n    "
2018/06/19 13:43:41 " x0: the black->red scale (the value of the red component) at the\n             *     start of the row (blue and green are 0).\n             * x1: the green->white scale (the value of the red and blue\n             *     components at the end of the row; green is depth_max).\n             "
2018/06/19 13:43:41 " Interpolate x/depth_max from start to end:\n             *\n             *        start end         difference\n             * red:     Y    Y            0\n             * green:   0   depth_max   depth_max\n             * blue:    0    Y            Y\n             "
2018/06/19 13:43:41 " red "
2018/06/19 13:43:41 " green "
2018/06/19 13:43:41 " blue "
2018/06/19 13:43:41 " 4 channels: linear combinations of, from the top-left corner clockwise,\n    *    transparent, red, green, blue.\n    "
2018/06/19 13:43:41 " x0: the transparent->blue scale (the value of the blue and alpha\n             *     components) at the start of the row (red and green are 0).\n             * x1: the red->green scale (the value of the red and green\n             *     components at the end of the row; blue is 0 and alpha is\n             *     depth_max).\n             "
2018/06/19 13:43:41 " Interpolate x/depth_max from start to end:\n             *\n             *        start    end       difference\n             * red:     0   depth_max-Y depth_max-Y\n             * green:   0       Y             Y\n             * blue:    Y       0            -Y\n             * alpha:   Y    depth_max  depth_max-Y\n             "
2018/06/19 13:43:41 " red "
2018/06/19 13:43:41 " green "
2018/06/19 13:43:41 " blue "
2018/06/19 13:43:41 " alpha "
2018/06/19 13:43:41 " Palette with fixed color: the image rows are all 0 and the image width\n       * is 16.\n       "
2018/06/19 13:43:41 " 0 on success, else an error code "
2018/06/19 13:43:41 " Allow benign errors so that we can write PNGs with errors \nallowed"
2018/06/19 13:43:41 " Max out the text compression level in an attempt to make the license\n    * small.   If --small then do the same for the IDAT.\n    "
2018/06/19 13:43:41 " For sRGB "
2018/06/19 13:43:41 " Normally images are square, but with 'small' we want to simply generate\n       * all the pixel values, or all that we reasonably can:\n       "
2018/06/19 13:43:41 " This function uses the libpng values used on read to carry extra\n       * information about the gamma:\n       "
2018/06/19 13:43:41 " Convert 'i' from sRGB (45455) to real_gamma, this makes\n             * the images look the same regardless of the gAMA chunk.\n             "
2018/06/19 13:43:41 "transparent color"
2018/06/19 13:43:41 " Reset gamma_table to prevent the image rows being changed "
2018/06/19 13:43:41 "trans"
2018/06/19 13:43:41 " Else don't set color space information "
2018/06/19 13:43:41 " Just use the sRGB values here. "
2018/06/19 13:43:41 " color      x       y \n white \n red   \n green \n blue  "
2018/06/19 13:43:41 " Insert extra information. "
2018/06/19 13:43:41 " Write the file header. "
2018/06/19 13:43:41 " Restrict the filters "
2018/06/19 13:43:41 " !WRITE_INTERLACING "
2018/06/19 13:43:41 " !WRITE_INTERLACING "
2018/06/19 13:43:41 " Finish writing the file. "
2018/06/19 13:43:41 " Round up to a multiple of 4 here to allow an iCCP profile\n                   * to be padded to a 4x boundary.\n                   "
2018/06/19 13:43:41 "base"
2018/06/19 13:43:41 " The 'fake' format is <number>*[string] "
2018/06/19 13:43:41 " capture the terminating '\\0' "
2018/06/19 13:43:41 " Now repeat that string to fill 'size' bytes. "
2018/06/19 13:43:41 " Maximum profile length "
2018/06/19 13:43:41 " else a simple parameter "
2018/06/19 13:43:41 " Maximum profile length "
2018/06/19 13:43:41 " Always fix up the profile length. "
2018/06/19 13:43:41 " load_file allocates extra space for this padding, the ICC spec requires\n       * padding with zero bytes.\n       "
2018/06/19 13:43:41 " none "
2018/06/19 13:43:41 " libpng calculates this \n libpng calculates this "
2018/06/19 13:43:41 " else a simple parameter "
2018/06/19 13:43:41 " deflate "
2018/06/19 13:43:41 " iTXt + deflate \n language tag \n translated keyword "
2018/06/19 13:43:41 " libpng takes the count from the PLTE count; we don't check it here but we\n    * do set the array to 0 for unspecified entries.\n    "
2018/06/19 13:43:41 "base"
2018/06/19 13:43:41 "base"
2018/06/19 13:43:41 " Parameters are separated by '\\n' or ':' characters, up to nparams are\n    * accepted (more is an error) and the number found is returned.\n    "
2018/06/19 13:43:41 " Terminate last parameter \n And start a new one. "
2018/06/19 13:43:41 " terminates list \n number of parameters filled in "
2018/06/19 13:43:41 " Assemble the chunk name "
2018/06/19 13:43:41 " Assemble the parameter list. "
2018/06/19 13:43:41 " iCCP "
2018/06/19 13:43:41 " tEXt "
2018/06/19 13:43:41 " zTXt "
2018/06/19 13:43:41 " iTXt "
2018/06/19 13:43:41 " hIST "
2018/06/19 13:43:41 " sBIT "
2018/06/19 13:43:41 " sPLT "
2018/06/19 13:43:41 " This is necessary because libpng expects writeable strings for things like\n * text chunks (maybe this should be fixed...)\n "
2018/06/19 13:43:41 " The program indicates a memory allocation error by crashing, this is by\n    * design.\n    "
2018/06/19 13:43:41 " These are used to insert Copyright and Licence fields, they allow the text to\n * have \\n unlike the --insert option.\n "
2018/06/19 13:43:41 " This is a not-very-good parser for a sequence of numbers (including 0).  It\n * doesn't accept some apparently valid things, but it accepts all the sensible\n * combinations.\n "
2018/06/19 13:43:41 " skip a separator "
2018/06/19 13:43:41 " checked above "
2018/06/19 13:43:41 " invalid \n invalid \n make full size images \n don't output a tRNS chunk "
2018/06/19 13:43:41 " not set "
2018/06/19 13:43:41 " It's the file name "
2018/06/19 13:43:41 " argument while loop "
2018/06/19 13:43:41 " Check the colors "
2018/06/19 13:43:41 " small and colors are incomparible (will probably crash if both are used at\n    * the same time!)\n    "
2018/06/19 13:43:41 " Restrict the filters for more speed to those we know are used for the\n    * generated images.\n    "
2018/06/19 13:43:41 "small provides defaults"
2018/06/19 13:43:41 " rgb "
2018/06/19 13:43:41 " gray 8 or 16-bit "
2018/06/19 13:43:41 " Insert standard copyright and licence text. "
2018/06/19 13:43:41 " ISO-Latin-1 "
2018/06/19 13:43:41 " UTF-8 "
2018/06/19 13:43:41 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/libtests/makepng.c": 56.722779ms
2018/06/19 13:43:41 Couldn't classify license(s)
2018/06/19 13:43:42 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/libtests/pngstest-errors.h
2018/06/19 13:43:42 detected language: 4
2018/06/19 13:43:42 " contrib/libtests/pngstest-errors.h\n *\n * BUILT USING: libpng version 1.6.19beta03 - September 25, 2015\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * THIS IS A MACHINE GENERATED FILE: do not edit it directly!\n * Instead run:\n *\n *    pngstest --accumulate\n *\n * on as many PNG files as possible; at least PNGSuite and\n * contrib/libtests/testpngs.\n "
2018/06/19 13:43:42 "in\nout\na"
2018/06/19 13:43:42 " input: sRGB-gray "
2018/06/19 13:43:42 " input: sRGB-gray+alpha "
2018/06/19 13:43:42 " input: sRGB-rgb "
2018/06/19 13:43:42 " input: sRGB-rgb+alpha "
2018/06/19 13:43:42 " input: linear-gray "
2018/06/19 13:43:42 " input: linear-gray+alpha "
2018/06/19 13:43:42 " input: linear-rgb "
2018/06/19 13:43:42 " input: linear-rgb+alpha "
2018/06/19 13:43:42 " input: color-mapped-sRGB-gray "
2018/06/19 13:43:42 " input: color-mapped-sRGB-gray+alpha "
2018/06/19 13:43:42 " input: color-mapped-sRGB-rgb "
2018/06/19 13:43:42 " input: color-mapped-sRGB-rgb+alpha "
2018/06/19 13:43:42 " input: color-mapped-linear-gray "
2018/06/19 13:43:42 " input: color-mapped-linear-gray+alpha "
2018/06/19 13:43:42 " input: color-mapped-linear-rgb "
2018/06/19 13:43:42 " input: color-mapped-linear-rgb+alpha "
2018/06/19 13:43:42 "out"
2018/06/19 13:43:42 " input: sRGB-gray "
2018/06/19 13:43:42 " input: sRGB-gray+alpha "
2018/06/19 13:43:42 " input: sRGB-rgb "
2018/06/19 13:43:42 " input: sRGB-rgb+alpha "
2018/06/19 13:43:42 " input: linear-gray "
2018/06/19 13:43:42 " input: linear-gray+alpha "
2018/06/19 13:43:42 " input: linear-rgb "
2018/06/19 13:43:42 " input: linear-rgb+alpha "
2018/06/19 13:43:42 " input: color-mapped-sRGB-gray "
2018/06/19 13:43:42 " input: color-mapped-sRGB-gray+alpha "
2018/06/19 13:43:42 " input: color-mapped-sRGB-rgb "
2018/06/19 13:43:42 " input: color-mapped-sRGB-rgb+alpha "
2018/06/19 13:43:42 " input: color-mapped-linear-gray "
2018/06/19 13:43:42 " input: color-mapped-linear-gray+alpha "
2018/06/19 13:43:42 " input: color-mapped-linear-rgb "
2018/06/19 13:43:42 " input: color-mapped-linear-rgb+alpha "
2018/06/19 13:43:42 "i\no"
2018/06/19 13:43:42 " input: sRGB-gray "
2018/06/19 13:43:42 " input: sRGB-gray+alpha "
2018/06/19 13:43:42 " input: sRGB-rgb "
2018/06/19 13:43:42 " input: sRGB-rgb+alpha "
2018/06/19 13:43:42 " input: linear-gray "
2018/06/19 13:43:42 " input: linear-gray+alpha "
2018/06/19 13:43:42 " input: linear-rgb "
2018/06/19 13:43:42 " input: linear-rgb+alpha "
2018/06/19 13:43:42 " END MACHINE GENERATED "
2018/06/19 13:43:42 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/libtests/pngstest-errors.h": 11.2475ms
2018/06/19 13:43:42 Couldn't classify license(s)
2018/06/19 13:43:43 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/libtests/tarith.c
2018/06/19 13:43:43 detected language: 4
2018/06/19 13:43:43 " tarith.c\n *\n * Copyright (c) 2011-2013 John Cunningham Bowler\n *\n * Last changed in libpng 1.6.0 [February 14, 2013]\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * Test internal arithmetic functions of libpng.\n *\n * This code must be linked against a math library (-lm), but does not require\n * libpng or zlib to work.  Because it includes the complete source of 'png.c'\n * it tests the code with whatever compiler options are used to build it.\n * Changing these options can substantially change the errors in the\n * calculations that the compiler chooses!\n "
2018/06/19 13:43:43 " Obtain a copy of the code to be tested (plus other things), disabling\n * stuff that is not required.\n "
2018/06/19 13:43:43 " Validate ASCII to fp routines. "
2018/06/19 13:43:43 " As a percentage error-in-last-digit/.5 \n Used when precision is DBL_DIG "
2018/06/19 13:43:43 " Important to test this. "
2018/06/19 13:43:43 " Check for overflow in the buffer by setting a marker. "
2018/06/19 13:43:43 " Allow for a three digit exponent, this stuff will fail if\n       * the exponent is bigger than this!\n       "
2018/06/19 13:43:43 " Following are used for the number parser below and must be\n       * initialized to zero.\n       "
2018/06/19 13:43:43 " Expect 'inf' "
2018/06/19 13:43:43 " Check the result against the original. "
2018/06/19 13:43:43 " NOTE: if you hit this error case are you compiling with gcc\n          * and -O0?  Try -O2 - the errors can accumulate if the FP\n          * code above is not optimized and may drift outside the .5 in\n          * DBL_DIG allowed.  In any case a small number of errors may\n          * occur (very small ones - 1 or 2%) because of rounding in the\n          * calculations, either in the conversion API or in atof.\n          "
2018/06/19 13:43:43 " Generate a new number and precision. "
2018/06/19 13:43:43 " Generate random numbers. "
2018/06/19 13:43:43 " Derive the exponent from the previous rand() value. "
2018/06/19 13:43:43 " arbitrary "
2018/06/19 13:43:43 " This limits the precision to 32 digits, enough for standard\n       * IEEE implementations which have at most 15 digits.\n       "
2018/06/19 13:43:43 " Observe that valid FP numbers have the forms listed in the PNG extensions\n * specification:\n *\n * [+,-]{integer,integer.fraction,.fraction}[{e,E}[+,-]integer]\n *\n * Test each of these in turn, including invalid cases.\n "
2018/06/19 13:43:43 " The characters (other than digits) that characterize the states: "
2018/06/19 13:43:43 " Characters valid at the start \n Valid characters that end the state \n Characters to test after 2 digits seen "
2018/06/19 13:43:43 " start:    \n fraction: \n exponent: "
2018/06/19 13:43:43 " Buffer for number being tested \n Command line limit \n Shadows global variable \n Number of numbers tested \n Count of millions of numbers \n Invalid strings checked \n Characters not accepted "
2018/06/19 13:43:43 " Index into number string \n Current number state \n At start (first character) of state \n Digits seen in that state \n Limit on same for checking all chars \n Current parser state \n Number is negative \n Number is (still) zero \n Previous character validity "
2018/06/19 13:43:43 " Test this character (ch) to ensure the parser does the correct thing.\n    "
2018/06/19 13:43:43 " This should never fail (it's a serious bug if it does): "
2018/06/19 13:43:43 " Validate the new state, note that the PNG_FP_IS_ macros all return\n    * false unless the number is valid.\n    "
2018/06/19 13:43:43 " Testing a digit "
2018/06/19 13:43:43 " Continue testing characters in this state.  Either test all of\n       * them or, if we have already seen one digit in this state, just test a\n       * limited set.\n       "
2018/06/19 13:43:43 " A non-digit; is it allowed here? "
2018/06/19 13:43:43 " The number remains valid after start of fraction but nowhere else. "
2018/06/19 13:43:43 " Check for a state change.  When changing to 'fraction' if the number\n       * is valid at this point set the at_start to false to allow an exponent\n       * 'e' to come next.\n       "
2018/06/19 13:43:43 " Else it was a sign, and the state doesn't change. "
2018/06/19 13:43:43 " Testing an invalid character "
2018/06/19 13:43:43 " Do nothing - the parser has stuck; return success and keep going with\n       * the next character.\n       "
2018/06/19 13:43:43 " Successful return (the caller will try the next character.) "
2018/06/19 13:43:43 " At the end check all the characters. "
2018/06/19 13:43:43 " Find out about the random number generator. "
2018/06/19 13:43:43 " NOTE: your mileage may vary, a type is required below that can\n       * hold 64 bits or more, if floating point is used a 64-bit or\n       * better mantissa is required.\n       "
2018/06/19 13:43:43 " Check the values, png_64bit_product can only handle positive\n       * numbers, so correct for that here.\n       "
2018/06/19 13:43:43 " -x = ~x+1 "
2018/06/19 13:43:43 " Round - this is C round to zero. "
2018/06/19 13:43:43 " Assume 2's complement here: "
2018/06/19 13:43:43 "misleading"
2018/06/19 13:43:43 " Generate three new values, this uses rand() and rand() only returns\n       * up to RAND_MAX.\n       "
2018/06/19 13:43:43 " CRUDE "
2018/06/19 13:43:43 " When FP is on this just becomes a speed test - compile without FP to get real\n * validation.\n "
2018/06/19 13:43:43 " log(2)/65536 \n 65536/log(2) "
2018/06/19 13:43:43 " For speed testing, need the internal functions too: "
2018/06/19 13:43:43 " FLOATING_ARITHMETIC "
2018/06/19 13:43:43 " Silence the output with -s, just test the gamma functions with -g: "
2018/06/19 13:43:43 " First validate the log functions: "
2018/06/19 13:43:43 " By experiment error is less than .68 "
2018/06/19 13:43:43 " Now exponentiations. "
2018/06/19 13:43:43 " By experiment. "
2018/06/19 13:43:43 " By experiment "
2018/06/19 13:43:43 " By experiment "
2018/06/19 13:43:43 " !onlygamma "
2018/06/19 13:43:43 " Test the overall gamma correction. "
2018/06/19 13:43:43 "*************************** VALIDATION TESTS *******************************\n Various validation routines are included herein, they require some\n * definition for png_warning and png_error, seetings of VALIDATION:\n *\n * 1: validates the ASCII to floating point conversions\n * 2: validates png_muldiv\n * 3: accuracy test of fixed point gamma tables\n "
2018/06/19 13:43:43 " The following COUNT (10^8) takes about 1 hour on a 1GHz Pentium IV\n * processor.\n "
2018/06/19 13:43:43 " Bad argument: "
2018/06/19 13:43:43 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/libtests/tarith.c": 27.235269ms
2018/06/19 13:43:43 Couldn't classify license(s)
2018/06/19 13:43:44 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/libtests/pngvalid.c
2018/06/19 13:43:44 detected language: 4
2018/06/19 13:43:44 " pngvalid.c - validate libpng by constructing then reading png files.\n *\n * Last changed in libpng 1.6.31 [July 27, 2017]\n * Copyright (c) 2014-2017 John Cunningham Bowler\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * NOTES:\n *   This is a C program that is intended to be linked against libpng.  It\n *   generates bitmaps internally, stores them as PNG files (using the\n *   sequential write code) then reads them back (using the sequential\n *   read code) and validates that the result has the correct data.\n *\n *   The program can be modified and extended to test the correctness of\n *   transformations performed by libpng.\n "
2018/06/19 13:43:44 " For floating point \n For the floating point exception extension "
2018/06/19 13:43:44 " from config.h, if included "
2018/06/19 13:43:44 " Define the following to use this test against your installed libpng, rather\n * than the one being built here:\n "
2018/06/19 13:43:44 " For crc32 "
2018/06/19 13:43:44 " 1.6.1 added support for the configure test harness, which uses 77 to indicate\n * a skipped test, in earlier versions we need to succeed on a skipped test, so:\n "
2018/06/19 13:43:44 " pngvalid requires write support and one of the fixed or floating point APIs.\n "
2018/06/19 13:43:44 " This deliberately lacks the const. "
2018/06/19 13:43:44 " This is copied from 1.5.1 png.h: "
2018/06/19 13:43:44 " These are needed too for the default build: "
2018/06/19 13:43:44 " This comes from pnglibconf.h afer 1.5: "
2018/06/19 13:43:44 " 1.6.0 constifies many APIs, the following exists to allow pngvalid to be\n    * compiled against earlier versions.\n    "
2018/06/19 13:43:44 " RELEASE_BUILD is true for releases and release candidates: "
2018/06/19 13:43:44 " !RELEASE_BUILD "
2018/06/19 13:43:44 " !RELEASE_BUILD "
2018/06/19 13:43:44 " For floating point constants \n For malloc \n For memcpy, memset \n For floor "
2018/06/19 13:43:44 " Convenience macros. "
2018/06/19 13:43:44 " Unused formal parameter errors are removed using the following macro which is\n * expected to have no bad effects on performance.\n "
2018/06/19 13:43:44 "**************************** EXCEPTION HANDLING ****************************"
2018/06/19 13:43:44 " __cplusplus "
2018/06/19 13:43:44 " The following are macros to reduce typing everywhere where the well known\n * name 'the_exception_context' must be defined.\n "
2018/06/19 13:43:44 " This macro returns the number of elements in an array as an (unsigned int),\n * it is necessary to avoid the inability of certain versions of GCC to use\n * the value of a compile-time constant when performing range checks.  It must\n * be passed an array name.\n "
2018/06/19 13:43:44 " GCC BUG 66447 (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66447) requires\n * some broken GCC versions to be fixed up to avoid invalid whining about auto\n * variables that are *not* changed within the scope of a setjmp being changed.\n *\n * Feel free to extend the list of broken versions.\n "
2018/06/19 13:43:44 " For the moment just do it always; all versions of GCC seem to be broken: "
2018/06/19 13:43:44 " !GNUC broken versions "
2018/06/19 13:43:44 " !GNUC broken versions "
2018/06/19 13:43:44 "****************************** UTILITIES ***********************************\n Error handling is particularly problematic in production code - error\n * handlers often themselves have bugs which lead to programs that detect\n * minor errors crashing.  The following functions deal with one very\n * common class of errors in error handlers - attempting to format error or\n * warning messages into buffers that are too small.\n "
2018/06/19 13:43:44 " Convert a double precision value to fixed point. "
2018/06/19 13:43:44 " PNG_READ_SUPPORTED "
2018/06/19 13:43:44 " Generate random bytes.  This uses a boring repeatable algorithm and it\n * is implemented here so that it gives the same set of numbers on every\n * architecture.  It's a linear congruential generator (Knuth or Sedgewick\n * \"Algorithms\") but it comes from the 'feedback taps' table in Horowitz and\n * Hill, \"The Art of Electronics\" (Pseudo-Random Bit Sequences and Noise\n * Generation.)\n "
2018/06/19 13:43:44 " There are thirty three bits, the next bit in the sequence is bit-33 XOR\n    * bit-20.  The top 1 bit is in u1, the bottom 32 are in u0.\n    "
2018/06/19 13:43:44 " First generate 8 new bits then shift them in at the end. "
2018/06/19 13:43:44 " READ "
2018/06/19 13:43:44 " READ_FILLER || READ_RGB_TO_GRAY "
2018/06/19 13:43:44 " READ || WRITE_tRNS || WRITE_FILTER "
2018/06/19 13:43:44 " 0 .. max-1 "
2018/06/19 13:43:44 " READ_TRANSFORMS || WRITE_FILTER "
2018/06/19 13:43:44 " READ_RGB_TO_GRAY || READ_FILLER "
2018/06/19 13:43:44 " A numeric ID based on PNG file characteristics.  The 'do_interlace' field\n * simply records whether pngvalid did the interlace itself or whether it\n * was done by libpng.  Width and height must be less than 256.  'palette' is an\n * index of the palette to use for formats with a palette otherwise a boolean\n * indicating if a tRNS chunk was generated.\n "
2018/06/19 13:43:44 " Utility to construct a standard name for a standard image. "
2018/06/19 13:43:44 " must have a palette "
2018/06/19 13:43:44 " Convenience API and defines to list valid formats.  Note that 16 bit read and\n * write support is required to do 16 bit read tests (we must be able to make a\n * 16 bit image to test!)\n "
2018/06/19 13:43:44 " The following defines the number of different palettes to generate for\n * each log bit depth of a colour type 3 standard image.\n "
2018/06/19 13:43:44 "no alpha channel"
2018/06/19 13:43:44 " Add multiple palettes for colour type 3, one image with tRNS\n       * and one without for other non-alpha formats:\n       "
2018/06/19 13:43:44 "GRAY\nRGB\nPALETTE"
2018/06/19 13:43:44 " No: next bit depth "
2018/06/19 13:43:44 " Palette images are restricted to 8 bit depth "
2018/06/19 13:43:44 " Move to the next color type, or return 0 at the end. "
2018/06/19 13:43:44 " Find a sample index for the desired sample: "
2018/06/19 13:43:44 " !palette "
2018/06/19 13:43:44 " Alpha channel "
2018/06/19 13:43:44 " Multiple channels; select one: "
2018/06/19 13:43:44 " Return the sample from the row as an integer. "
2018/06/19 13:43:44 " Less than 8 bits per sample.  By default PNG has the big end of\n    * the egg on the left of the screen, but if littleendian is set\n    * then the big end is on the right.\n    "
2018/06/19 13:43:44 " PNG_READ_TRANSFORMS_SUPPORTED "
2018/06/19 13:43:44 " Copy a single pixel, of a given size, from one buffer to another -\n * while this is basically bit addressed there is an implicit assumption\n * that pixels 8 or more bits in size are byte aligned and that pixels\n * do not otherwise cross byte boundaries.  (This is, so far as I know,\n * universally true in bitmap computer graphics.  [JCB 20101212])\n *\n * NOTE: The to and from buffers may be the same.\n "
2018/06/19 13:43:44 " Assume we can multiply by 'size' without overflow because we are\n    * just working in a single buffer.\n    "
2018/06/19 13:43:44 " Sub-byte "
2018/06/19 13:43:44 " Mask to select the location of the copied pixel: "
2018/06/19 13:43:44 " The following read the entire pixels and clears the extra: "
2018/06/19 13:43:44 " Don't rely on << or >> supporting '0' here, just in case: "
2018/06/19 13:43:44 " One or more bytes "
2018/06/19 13:43:44 " Copy a complete row of pixels, taking into account potential partial\n * bytes at the end.\n "
2018/06/19 13:43:44 " Compare pixels - they are assumed to start at the first byte in the\n * given buffers.\n "
2018/06/19 13:43:44 " Ok, any differences? "
2018/06/19 13:43:44 " There are, but they may not be significant, remove the bits\n       * after the end (the low order bits in PNG.)\n       "
2018/06/19 13:43:44 " From libpng-1.5.6 the overwrite should be fixed, so compare the trailing\n    * bits too:\n    "
2018/06/19 13:43:44 " Return the index of the changed byte. "
2018/06/19 13:43:44 " PNG_READ_SUPPORTED "
2018/06/19 13:43:44 "************************** BASIC PNG FILE WRITING **************************\n A png_store takes data from the sequential writer or provides data\n * to the sequential reader.  It can also store the result of a PNG\n * write for later retrieval.\n "
2018/06/19 13:43:44 " arbitrary "
2018/06/19 13:43:44 " NOTE: stored in reverse order "
2018/06/19 13:43:44 " record of a single palette entry "
2018/06/19 13:43:44 " as many as you like... "
2018/06/19 13:43:44 " Number of bits in IDAT size \n Total size of IDAT data \n must be correct (see FILEID) \n In this (the last) buffer \n Last buffer in file \n Number of entries in palette \n May be NULL "
2018/06/19 13:43:44 " The following is a pool of memory allocated by a single libpng read or write\n * operation.\n "
2018/06/19 13:43:44 " Back pointer \n List of allocated memory \n Before and after data "
2018/06/19 13:43:44 " Statistics for this run. \n Maximum single allocation \n Current allocation \n Highest current allocation \n Total allocation "
2018/06/19 13:43:44 " Overall statistics (retained across successive runs). "
2018/06/19 13:43:44 " For cexcept.h exception handling - simply store one of these;\n    * the context is a self pointer but it may point to a different\n    * png_store (in fact it never does in this program.)\n    "
2018/06/19 13:43:44 " use progressive read \n used as a temporary flag "
2018/06/19 13:43:44 " number of options below: "
2018/06/19 13:43:44 " option number, 0..30 \n setting (unset,invalid,on,off) "
2018/06/19 13:43:44 " Name of test "
2018/06/19 13:43:44 " Share fields \n Length of chunk+overhead (chunkpos >= 8) \n Type of chunk (valid if chunkpos >= 4) \n Position in chunk \n Accumulated IDAT size in .new \n Cache of the file store value "
2018/06/19 13:43:44 " Read fields \n Used to read a saved file "
2018/06/19 13:43:44 " Set when reading \n Set when reading \n Position in *next \n Buffer for reading interlaced images \n Size of this buffer \n Row size of the image(s) "
2018/06/19 13:43:44 " Used when re-chunking IDAT chunks \n Used when re-chunking IDAT chunks \n Number of rows in a single image "
2018/06/19 13:43:44 " Write fields "
2018/06/19 13:43:44 " Used when writing a new file "
2018/06/19 13:43:44 " Position in .new "
2018/06/19 13:43:44 " The end of the new PNG file being written. "
2018/06/19 13:43:44 " Initialization and cleanup "
2018/06/19 13:43:44 " Use this for random 32 bit values; this function makes sure the result is\n * non-zero.\n "
2018/06/19 13:43:44 " PNG_READ_SUPPORTED "
2018/06/19 13:43:44 " Return the number of bits in 'num' "
2018/06/19 13:43:44 " 0..32 "
2018/06/19 13:43:44 " Main interface to file storeage, after writing a new PNG file (see the API\n * below) call store_storefile to store the result with the given name and id.\n "
2018/06/19 13:43:44 " Because the IDAT always has zlib header stuff this must be true: "
2018/06/19 13:43:44 " And save it. "
2018/06/19 13:43:44 " Generate an error message (in the given buffer) "
2018/06/19 13:43:44 " Reading a file "
2018/06/19 13:43:44 " Writing a file "
2018/06/19 13:43:44 " Neither reading nor writing (or a memory error in struct delete) "
2018/06/19 13:43:44 " Verbose output to the error stream: "
2018/06/19 13:43:44 " Log an error or warning - the relevant count is always incremented. "
2018/06/19 13:43:44 " The warning is copied to the error buffer if there are no errors and it is\n    * the first warning.  The error is copied to the error buffer if it is the\n    * first error (overwriting any prior warnings).\n    "
2018/06/19 13:43:44 " Internal error function, called with a png_store but no libpng stuff. "
2018/06/19 13:43:44 " error "
2018/06/19 13:43:44 " And finally throw an exception. "
2018/06/19 13:43:44 " PNG_READ_SUPPORTED "
2018/06/19 13:43:44 " Functions to use as PNG callbacks. "
2018/06/19 13:43:44 " PNG_NORETURN "
2018/06/19 13:43:44 " error "
2018/06/19 13:43:44 " And finally throw an exception. "
2018/06/19 13:43:44 " warning "
2018/06/19 13:43:44 " These somewhat odd functions are used when reading an image to ensure that\n * the buffer is big enough, the png_structp is for errors.\n "
2018/06/19 13:43:44 " Return a single row from the correct image. "
2018/06/19 13:43:44 " The buffer is deliberately mis-aligned. "
2018/06/19 13:43:44 " Called from the startup - ignore the error for the moment. "
2018/06/19 13:43:44 " These magic tags are used to detect overwrites above. "
2018/06/19 13:43:44 " We have an adequate sized image; lay out the rows.  There are 2 bytes at\n    * the start and three at the end of each (this ensures that the row\n    * alignment starts out odd - 2+1 and changes for larger images on each row.)\n    "
2018/06/19 13:43:44 " For error checking, the whole buffer is set to 10110010 (0xb2 - 178).\n    * This deliberately doesn't match the bits in the size test image which are\n    * outside the image; these are set to 0xff (all 1).  To make the row\n    * comparison work in the 'size' test case the size rows are pre-initialized\n    * to the same value prior to calling 'standard_row'.\n    "
2018/06/19 13:43:44 " Then put in the marks. "
2018/06/19 13:43:44 " The markers: "
2018/06/19 13:43:44 " skip image first row markers "
2018/06/19 13:43:44 " PNG_READ_SUPPORTED "
2018/06/19 13:43:44 " Each byte in the chunk type must be in one of the ranges 65..90, 97..122\n    * (both inclusive), so:\n    "
2018/06/19 13:43:44 " It's valid "
2018/06/19 13:43:44 " Technically this is legal, but in practice libpng never writes more than\n    * the maximum chunk size at once so if it happens something weird has\n    * changed inside libpng (probably).\n    "
2018/06/19 13:43:44 " Now process the bytes to be written.  Do this in units of the space in the\n    * output (write) buffer or, at the start 4 bytes for the chunk type and\n    * length limited in any case by the amount of data.\n    "
2018/06/19 13:43:44 " for header and CRC "
2018/06/19 13:43:44 " chunkpos >= 8 "
2018/06/19 13:43:44 " bytes left in chunk\nSAFE"
2018/06/19 13:43:44 "SAFE"
2018/06/19 13:43:44 " must be equal "
2018/06/19 13:43:44 " while (st > 0) "
2018/06/19 13:43:44 "DOES NOTHING"
2018/06/19 13:43:44 " Return the bytes available for read in the current buffer. "
2018/06/19 13:43:44 " Return total bytes available for read. "
2018/06/19 13:43:44 " EOF or error "
2018/06/19 13:43:44 " Need separate implementation and callback to allow use of the same code\n * during progressive read, where the io_ptr is set internally by libpng.\n "
2018/06/19 13:43:44 " end of last chunk "
2018/06/19 13:43:44 " Read the header of the next chunk: "
2018/06/19 13:43:44 " Position read so far "
2018/06/19 13:43:44 " The IDAT headers are constructed here; skip the input header. "
2018/06/19 13:43:44 " Make a new IDAT chunk, if IDAT_len is 0 this is the first IDAT,\n             * if IDAT_size is 0 this is the end.  At present this is set up\n             * using a random number so that there is a 25% chance before\n             * the start of the first IDAT chunk being 0 length.\n             "
2018/06/19 13:43:44 " First IDAT "
2018/06/19 13:43:44 " 0 bytes \n 1 byte "
2018/06/19 13:43:44 " 1..IDAT_size bytes "
2018/06/19 13:43:44 " all IDAT data read "
2018/06/19 13:43:44 " The last (IDAT) chunk should be positioned at the CRC now: "
2018/06/19 13:43:44 " The only option here is to add a zero length IDAT, this\n                * happens 25% of the time.  Because of the check above\n                * chunklen-4U-chunkpos must be zero, we just need to skip the\n                * CRC now.\n                "
2018/06/19 13:43:44 " Output another 0 length IDAT "
2018/06/19 13:43:44 " End of IDATs, skip the CRC to make the code above load the\n                   * next chunk header next time round.\n                   "
2018/06/19 13:43:44 " Read the next chunk "
2018/06/19 13:43:44 " Middle of IDATs, use 'random' to determine the number of bits\n                * to use in the IDAT length.\n                "
2018/06/19 13:43:44 " zero bytes may occur "
2018/06/19 13:43:44 " Ie: crc32(0UL, \"IDAT\", 4) \n IDAT_pos == IDAT_len "
2018/06/19 13:43:44 " Return the header "
2018/06/19 13:43:44 " I.e not the CRC "
2018/06/19 13:43:44 "SAFE"
2018/06/19 13:43:44 "SAFE"
2018/06/19 13:43:44 "SAFE"
2018/06/19 13:43:44 "SAFE\nSAFE\nSAFE\nSAFE\nSAFE"
2018/06/19 13:43:44 " skip the input CRC "
2018/06/19 13:43:44 " IDAT crc "
2018/06/19 13:43:44 " 4..1 "
2018/06/19 13:43:44 " !IDAT "
2018/06/19 13:43:44 " If there is still some pending IDAT data after the IDAT chunks have\n          * been processed there is a problem:\n          "
2018/06/19 13:43:44 " Return the header "
2018/06/19 13:43:44 " Return chunk bytes, including the CRC "
2018/06/19 13:43:44 "SAFE"
2018/06/19 13:43:44 "SAFE"
2018/06/19 13:43:44 " Check for end of chunk and end-of-file; don't try to read a new\n             * chunk header at this point unless instructed to do so by 'min'.\n             "
2018/06/19 13:43:44 " !IDAT "
2018/06/19 13:43:44 " space left "
2018/06/19 13:43:44 " This is another Horowitz and Hill random noise generator.  In this case\n    * the aim is to stress the progressive reader with truly horrible variable\n    * buffer sizes in the range 1..500, so a sequence of 9 bit random numbers\n    * is generated.  We could probably just count from 1 to 32767 and get as\n    * good a result.\n    "
2018/06/19 13:43:44 " Generate 15 more bits of stuff: "
2018/06/19 13:43:44 " PNG_READ_SUPPORTED "
2018/06/19 13:43:44 " The caller must fill this in: "
2018/06/19 13:43:44 " This function can only return NULL if called with '0'! "
2018/06/19 13:43:44 " This is an internal error (the call has been made outside a read\n    * operation.)\n    "
2018/06/19 13:43:44 " The result may be null if there is no palette. "
2018/06/19 13:43:44 " PNG_READ_SUPPORTED "
2018/06/19 13:43:44 "**************************** MEMORY MANAGEMENT*** **************************"
2018/06/19 13:43:44 " A store_memory is simply the header for an allocated block of memory.  The\n * pointer returned to libpng is just after the end of the header block, the\n * allocated memory is followed by a second copy of the 'mark'.\n "
2018/06/19 13:43:44 " Originating pool \n Singly linked list \n Size of memory allocated \n ID marker "
2018/06/19 13:43:44 " Handle a fatal error in memory allocation.  This calls png_error if the\n * libpng struct is non-NULL, else it outputs a message and returns.  This means\n * that a memory problem while libpng is running will abort (png_error) the\n * handling of particular file while one in cleanup (after the destroy of the\n * struct has returned) will simply keep going and free (or attempt to free)\n * all the memory.\n "
2018/06/19 13:43:44 " Else we have to do it ourselves.  png_error eventually calls store_log,\n    * above.  store_log accepts a NULL png_structp - it just changes what gets\n    * output by store_message.\n    "
2018/06/19 13:43:44 " error "
2018/06/19 13:43:44 " Note that pp may be NULL (see store_pool_delete below), the caller has\n    * found 'memory' in pool->list *and* unlinked this entry, so this is a valid\n    * pointer (for sure), but the contents may have been trashed.\n    "
2018/06/19 13:43:44 " It should be safe to read the size field now. "
2018/06/19 13:43:44 " Finally give the library a chance to find problems too: "
2018/06/19 13:43:44 " The NULL means this will always return, even if the memory is\n          * corrupted.\n          "
2018/06/19 13:43:44 " And reset the other fields too for the next time. "
2018/06/19 13:43:44 " unexpected internal error "
2018/06/19 13:43:44 " Get a new mark too. "
2018/06/19 13:43:44 " The memory callbacks: "
2018/06/19 13:43:44 " NOTE: the PNG user malloc function cannot use the png_ptr it is passed\n       * other than to retrieve the allocation pointer!  libpng calls the\n       * store_malloc callback in two basic cases:\n       *\n       * 1) From png_malloc; png_malloc will do a png_error itself if NULL is\n       *    returned.\n       * 2) From png_struct or png_info structure creation; png_malloc is\n       *    to return so cleanup can be performed.\n       *\n       * To handle this store_malloc can log a message, but can't do anything\n       * else.\n       "
2018/06/19 13:43:44 " is_error "
2018/06/19 13:43:44 " Because libpng calls store_free with a dummy png_struct when deleting\n    * png_struct or png_info via png_destroy_struct_2 it is necessary to check\n    * the passed in png_structp to ensure it is valid, and not pass it to\n    * png_error if it is not.\n    "
2018/06/19 13:43:44 " First check that this 'memory' really is valid memory - it must be in the\n    * pool list.  If it is, use the shared memory_free function to free it.\n    "
2018/06/19 13:43:44 " Unlink this entry, *test == this. "
2018/06/19 13:43:44 " PNG_USER_MEM_SUPPORTED "
2018/06/19 13:43:44 " Setup functions. \n Cleanup when aborting a write or after storing the new file. "
2018/06/19 13:43:44 " memory corruption: continue. "
2018/06/19 13:43:44 " And make sure that all the memory has been freed - this will output\n    * spurious errors in the case of memory corruption above, but this is safe.\n    "
2018/06/19 13:43:44 " The following is the main write function, it returns a png_struct and,\n * optionally, a png_info suitable for writiing a new PNG file.  Use\n * store_storefile above to record this file after it has been written.  The\n * returned libpng structures as destroyed by store_write_reset above.\n "
2018/06/19 13:43:44 " Don't do the slow memory checks if doing a speed test, also if user\n       * memory is not supported we can't do it anyway.\n       "
2018/06/19 13:43:44 " Cleanup when finished reading (either due to error or in the success case).\n * This routine exists even when there is no read support to make the code\n * tidier (avoid a mass of ifdefs) and so easier to maintain.\n "
2018/06/19 13:43:44 " error already output: continue "
2018/06/19 13:43:44 " Always do this to be safe. "
2018/06/19 13:43:44 " just a cache "
2018/06/19 13:43:44 " The main interface for reading a saved file - pass the id number of the file\n * to retrieve.  Ids must be unique or the earlier file will be hidden.  The API\n * returns a png_struct and, optionally, a png_info.  Both of these will be\n * destroyed by store_read_reset above.\n "
2018/06/19 13:43:44 " Set the name for png_error "
2018/06/19 13:43:44 " Both the create APIs can return NULL if used in their default mode\n    * (because there is no other way of handling an error because the jmp_buf\n    * by default is stored in png_struct and that has not been allocated!)\n    * However, given that store_error works correctly in these circumstances\n    * we don't ever expect NULL in this program.\n    "
2018/06/19 13:43:44 "error"
2018/06/19 13:43:44 " PNG_READ_SUPPORTED "
2018/06/19 13:43:44 " The overall cleanup of a store simply calls the above then removes all the\n * saved files.  This does not delete the store itself.\n "
2018/06/19 13:43:44 "********************** PNG FILE MODIFICATION ON READ ***********************\n Files may be modified on read.  The following structure contains a complete\n * png_store together with extra members to handle modification and a special\n * read callback for libpng.  To use this the 'modifications' field must be set\n * to a list of png_modification structures that actually perform the\n * modification, otherwise a png_modifier is functionally equivalent to a\n * png_store.  There is a special read function, set_modifier_for_read, which\n * replaces set_store_for_read.\n "
2018/06/19 13:43:44 " Initial value \n Have a signature \n Have an IHDR "
2018/06/19 13:43:44 " A single CIE tristimulus value, representing the unique response of a\n    * standard observer to a variety of light spectra.  The observer recognizes\n    * all spectra that produce this response as the same color, therefore this\n    * is effectively a description of a color.\n    "
2018/06/19 13:43:44 " A description of an (R,G,B) encoding of color (as defined above); this\n    * includes the actual colors of the (R,G,B) triples (1,0,0), (0,1,0) and\n    * (0,0,1) plus an encoding value that is used to encode the linear\n    * components R, G and B to give the actual values R^gamma, G^gamma and\n    * B^gamma that are stored.\n    "
2018/06/19 13:43:44 " Encoding (file) gamma of space \n End points "
2018/06/19 13:43:44 " READ_TRANSFORMS && READ_cHRM "
2018/06/19 13:43:44 " READ_TRANSFORMS \n PNG_READ_SUPPORTED "
2018/06/19 13:43:44 " I am a png_store \n Changes to make "
2018/06/19 13:43:44 " My state "
2018/06/19 13:43:44 " Information from IHDR: \n From IHDR \n From IHDR "
2018/06/19 13:43:44 " While handling PLTE, IDAT and IEND these chunks may be pended to allow\n    * other chunks to be inserted.\n    "
2018/06/19 13:43:44 " Test values "
2018/06/19 13:43:44 " Number of gamma tests to run\n 0 if not set "
2018/06/19 13:43:44 " If an encoding has been set \n For iteration \n Something overwrote it "
2018/06/19 13:43:44 " Control variables used to iterate through possible encodings, the\n    * following must be set to 0 and tested by the function that uses the\n    * png_modifier because the modifier only sets it to 1 (true.)\n    "
2018/06/19 13:43:44 " Repeat this transform test. "
2018/06/19 13:43:44 " Lowest sbit to test (pre-1.7 libpng fails for sbit < 8) "
2018/06/19 13:43:44 " Error control - these are the limits on errors accepted by the gamma tests\n    * below.\n    "
2018/06/19 13:43:44 " Maximum output value error \n Absolute sample error 0..1 \n Absolute sample error 0..1 \n Percentage sample error 0..100% \n Maximum output value error \n Absolute sample error 0..1 \n Absolute sample error 0..1 \n Absolute sample error 0..1 \n Percentage sample error 0..100% "
2018/06/19 13:43:44 " This is set by transforms that need to allow a higher limit, it is an\n    * internal check on pngvalid to ensure that the calculated error limits are\n    * not ridiculous; without this it is too easy to make a mistake in pngvalid\n    * that allows any value through.\n    *\n    * NOTE: this is not checked in release builds.\n    "
2018/06/19 13:43:44 " limit on error values, normally 4E-3 "
2018/06/19 13:43:44 " Log limits - values above this are logged, but not necessarily\n    * warned.\n    "
2018/06/19 13:43:44 " Absolute error in 8 bits to log \n Absolute error in 16 bits to log "
2018/06/19 13:43:44 " Logged 8 and 16 bit errors ('output' values): "
2018/06/19 13:43:44 " Flags: \n Whether to call png_read_update_info, not png_read_start_image, and how\n    * many times to call it.\n    "
2018/06/19 13:43:44 " Whether or not to interlace. \n int, but must store '1' "
2018/06/19 13:43:44 " Run the standard tests? "
2018/06/19 13:43:44 " Run the odd-sized image and interlace read/write tests? "
2018/06/19 13:43:44 " Run tests on reading with a combination of transforms, "
2018/06/19 13:43:44 " Includes tRNS images "
2018/06/19 13:43:44 " When to use the use_input_precision option, this controls the gamma\n    * validation code checks.  If set any value that is within the transformed\n    * range input-.5 to input+.5 will be accepted, otherwise the value must be\n    * within the normal limits.  It should not be necessary to set this; the\n    * result should always be exact within the permitted error limits.\n    "
2018/06/19 13:43:44 " If set assume that the calculation bit depth is set by the input\n    * precision, not the output precision.\n    "
2018/06/19 13:43:44 " If set assume that the calculations are done in 16 bits even if the sample\n    * depth is 8 bits.\n    "
2018/06/19 13:43:44 " Which gamma tests to run: "
2018/06/19 13:43:44 " main tests "
2018/06/19 13:43:44 " Whether or not to run the low-bit-depth grayscale tests.  This fails on\n    * gamma images in some cases because of gross inaccuracies in the grayscale\n    * gamma handling for low bit depth.\n    "
2018/06/19 13:43:44 " Log max error "
2018/06/19 13:43:44 " Buffer information, the buffer size limits the size of the chunks that can\n    * be modified - they must fit (including header and CRC) into the buffer!\n    "
2018/06/19 13:43:44 " Count of bytes to flush \n Bytes in buffer \n Position in buffer "
2018/06/19 13:43:44 " This returns true if the test should be stopped now because it has already\n * failed and it is running silently.\n  "
2018/06/19 13:43:44 " Means 'off' "
2018/06/19 13:43:44 " Rely on the memset for all the other fields - there are no pointers "
2018/06/19 13:43:44 " This controls use of checks that explicitly know how libpng digitizes the\n * samples in calculations; setting this circumvents simple error limit checking\n * in the rgb_to_gray check, replacing it with an exact copy of the libpng 1.5\n * algorithm.\n "
2018/06/19 13:43:44 " If pm->calculations_use_input_precision is set then operations will happen\n * with the precision of the input, not the precision of the output depth.\n *\n * If pm->assume_16_bit_calculations is set then even 8 bit calculations use 16\n * bit precision.  This only affects those of the following limits that pertain\n * to a calculation - not a digitization operation - unless the following API is\n * called directly.\n "
2018/06/19 13:43:44 " 'value' is in the range 0 to 1, the result is the same value rounded to a\n    * multiple of the digitization factor - 8 or 16 bits depending on both the\n    * sample depth and the 'assume' setting.  Digitization is normally by\n    * rounding and 'do_round' should be 1, if it is 0 the digitized value will\n    * be truncated.\n    "
2018/06/19 13:43:44 " Limiting the range is done as a convenience to the caller - it's easier to\n    * do it once here than every time at the call site.\n    "
2018/06/19 13:43:44 " RGB_TO_GRAY "
2018/06/19 13:43:44 " Absolute error permitted in linear values - affected by the bit depth of\n    * the calculations.\n    "
2018/06/19 13:43:44 " Error in the linear composition arithmetic - only relevant when\n    * composition actually happens (0 < alpha < 1).\n    "
2018/06/19 13:43:44 " Percentage error permitted in the linear values.  Note that the specified\n    * value is a percentage but this routine returns a simple number.\n    "
2018/06/19 13:43:44 " Output error - the error in the encoded value.  This is determined by the\n * digitization of the output so can be +/-0.5 in the actual output value.  In\n * the expand_16 case with the current code in libpng the expand happens after\n * all the calculations are done in 8 bit arithmetic, so even though the output\n * depth is 16 the output error is determined by the 8 bit calculation.\n *\n * This limit is not determined by the bit depth of internal calculations.\n *\n * The specified parameter does *not* include the base .5 digitization error but\n * it is added here.\n "
2018/06/19 13:43:44 " There is a serious error in the 2 and 4 bit grayscale transform because\n    * the gamma table value (8 bits) is simply shifted, not rounded, so the\n    * error in 4 bit grayscale gamma is up to the value below.  This is a hack\n    * to allow pngvalid to succeed:\n    *\n    * TODO: fix this in libpng\n    "
2018/06/19 13:43:44 " This is the case where the value was calculated at 8-bit precision then\n    * scaled to 16 bits.\n    "
2018/06/19 13:43:44 " This does the same thing as the above however it returns the value to log,\n * rather than raising a warning.  This is useful for debugging to track down\n * exactly what set of parameters cause high error values.\n "
2018/06/19 13:43:44 " The command line parameters are either 8 bit (0..255) or 16 bit (0..65535)\n    * and so must be adjusted for low bit depth grayscale:\n    "
2018/06/19 13:43:44 " switched off "
2018/06/19 13:43:44 " This is the case where the value was calculated at 8-bit precision then\n    * scaled to 16 bits.\n    "
2018/06/19 13:43:44 " This complements the above by providing the appropriate quantization for the\n * final value.  Normally this would just be quantization to an integral value,\n * but in the 8 bit calculation case it's actually quantization to a multiple of\n * 257!\n "
2018/06/19 13:43:44 " PNG_READ_GAMMA_SUPPORTED "
2018/06/19 13:43:44 " One modification structure must be provided for each chunk to be modified (in\n * fact more than one can be provided if multiple separate changes are desired\n * for a single chunk.)  Modifications include adding a new chunk when a\n * suitable chunk does not exist.\n *\n * The caller of modify_fn will reset the CRC of the chunk and record 'modified'\n * or 'added' as appropriate if the modify_fn returns 1 (true).  If the\n * modify_fn is NULL the chunk is simply removed.\n "
2018/06/19 13:43:44 " If the following is NULL all matching chunks will be removed: "
2018/06/19 13:43:44 " If the following is set to PLTE, IDAT or IEND and the chunk has not been\n    * found and modified (and there is a modify_fn) the modify_fn will be called\n    * to add the chunk before the relevant chunk.\n    "
2018/06/19 13:43:44 " Chunk was modified \n Chunk was added \n Chunk was removed "
2018/06/19 13:43:44 " Iterate through the usefully testable color encodings.  An encoding is one\n * of:\n *\n * 1) Nothing (no color space, no gamma).\n * 2) Just a gamma value from the gamma array (including 1.0)\n * 3) A color space from the encodings array with the corresponding gamma.\n * 4) The same, but with gamma 1.0 (only really useful with 16 bit calculations)\n *\n * The iterator selects these in turn, the randomizer selects one at random,\n * which is used depends on the setting of the 'test_exhaustive' flag.  Notice\n * that this function changes the colour space encoding so it must only be\n * called on completion of the previous test.  This is what 'modifier_reset'\n * does, below.\n *\n * After the function has been called the 'repeat' flag will still be set; the\n * caller of modifier_reset must reset it at the start of each run of the test!\n "
2018/06/19 13:43:44 " (1) nothing \n (2) gamma values to test \n (3) total number of encodings \n The following test only works after the first time through the\n       * png_modifier code because 'bit_depth' is set when the IHDR is read.\n       * modifier_reset, below, preserves the setting until after it has called\n       * the iterate function (also below.)\n       *\n       * For this reason do not rely on this function outside a call to\n       * modifier_reset.\n       "
2018/06/19 13:43:44 " (4) encodings with gamma == 1.0 "
2018/06/19 13:43:44 " Else something needs the current encoding again. \n Some transform is encoding dependent "
2018/06/19 13:43:44 " This will stop the repeat "
2018/06/19 13:43:44 " Not exhaustive - choose an encoding at random; generate a number in\n          * the range 1..(max-1), so the result is always non-zero:\n          "
2018/06/19 13:43:44 " The following must be set in the next run.  In particular\n    * test_uses_encodings must be set in the _ini function of each transform\n    * that looks at the encodings.  (Not the 'add' function!)\n    "
2018/06/19 13:43:44 " These only become value after IHDR is read: "
2018/06/19 13:43:44 " The following must be called before anything else to get the encoding set up\n * on the modifier.  In particular it must be called before the transform init\n * functions are called.\n "
2018/06/19 13:43:44 " Set the encoding to the one specified by the current encoding counter,\n    * first clear out all the settings - this corresponds to an encoding_counter\n    * of 0.\n    "
2018/06/19 13:43:44 " not ignored yet - happens in _ini functions. "
2018/06/19 13:43:44 " Now, if required, set the gamma and encoding fields. "
2018/06/19 13:43:44 " The gammas[] array is an array of screen gammas, not encoding gammas,\n       * so we need the inverse:\n       "
2018/06/19 13:43:44 " Linear, only in the 16 bit case "
2018/06/19 13:43:44 " Enquiry functions to find out what is set.  Notice that there is an implicit\n * assumption below that the first encoding in the list is the one for sRGB.\n "
2018/06/19 13:43:44 " The guts of modification are performed during a read. "
2018/06/19 13:43:44 " Recalculate the chunk CRC - a complete chunk must be in\n    * the buffer, at the start.\n    "
2018/06/19 13:43:44 " The cast to png_uint_32 is safe because a crc32 is always a 32 bit value.\n    "
2018/06/19 13:43:44 " Separate the callback into the actual implementation (which is passed the\n * png_modifier explicitly) and the callback, which gets the modifier from the\n * png_struct.\n "
2018/06/19 13:43:44 " signature. "
2018/06/19 13:43:44 " IHDR "
2018/06/19 13:43:44 " Check the list of modifiers for modifications to the IHDR. "
2018/06/19 13:43:44 " Ignore removal or add if IHDR! "
2018/06/19 13:43:44 " Cache information from the IHDR (the modified one.) "
2018/06/19 13:43:44 " Read a new chunk and process it until we see PLTE, IDAT or\n             * IEND.  'flush' indicates that there is still some data to\n             * output from the preceding chunk.\n             "
2018/06/19 13:43:44 " No more bytes to flush, read a header, or handle a pending\n             * chunk.\n             "
2018/06/19 13:43:44 " Check for something to modify or a terminator chunk. "
2018/06/19 13:43:44 " Terminators first, they may have to be delayed for added\n             * chunks\n             "
2018/06/19 13:43:44 " Regardless of what the modify function does do not run\n                      * this again.\n                      "
2018/06/19 13:43:44 "add"
2018/06/19 13:43:44 " Reset the CRC on a new chunk "
2018/06/19 13:43:44 " The buffer has been filled with something (we assume)\n                         * so output this.  Pend the current chunk.\n                         "
2018/06/19 13:43:44 " out of while "
2018/06/19 13:43:44 " Don't do any further processing if the buffer was modified -\n                * otherwise the code will end up modifying a chunk that was\n                * just added.\n                "
2018/06/19 13:43:44 " out of switch "
2018/06/19 13:43:44 " If we get to here then this chunk may need to be modified.  To\n             * do this it must be less than 1024 bytes in total size, otherwise\n             * it just gets flushed.\n             "
2018/06/19 13:43:44 " Check for a modification, else leave it be. "
2018/06/19 13:43:44 " Remove this chunk "
2018/06/19 13:43:44 " Terminate the while loop "
2018/06/19 13:43:44 " The chunk may have been removed: "
2018/06/19 13:43:44 " data + crc "
2018/06/19 13:43:44 " Take the data from the buffer (if there is any). "
2018/06/19 13:43:44 " Here to read from the modifier buffer (not directly from\n       * the store, as in the flush case above.)\n       "
2018/06/19 13:43:44 " The callback: "
2018/06/19 13:43:44 " Like store_progressive_read but the data is getting changed as we go so we\n * need a local buffer.\n "
2018/06/19 13:43:44 " This is another Horowitz and Hill random noise generator.  In this case\n    * the aim is to stress the progressive reader with truly horrible variable\n    * buffer sizes in the range 1..500, so a sequence of 9 bit random numbers\n    * is generated.  We could probably just count from 1 to 32767 and get as\n    * good a result.\n    "
2018/06/19 13:43:44 " Generate 15 more bits of stuff: "
2018/06/19 13:43:44 " Check that this number of bytes are available (in the current buffer.)\n       * (This doesn't quite work - the modifier might delete a chunk; unlikely\n       * but possible, it doesn't happen at present because the modifier only\n       * adds chunks to standard images.)\n       "
2018/06/19 13:43:44 " Check for EOF: "
2018/06/19 13:43:44 " Check the invariants at the end (if this fails it's a problem in this\n    * file!)\n    "
2018/06/19 13:43:44 " Set up a modifier. "
2018/06/19 13:43:44 " Do this first so that the modifier fields are cleared even if an error\n    * happens allocating the png_struct.  No allocation is done here so no\n    * cleanup is required.\n    "
2018/06/19 13:43:44 "******************************* MODIFICATIONS ******************************\n Standard modifications to add chunks.  These do not require the _SUPPORTED\n * macros because the chunks can be there regardless of whether this specific\n * libpng supports them.\n "
2018/06/19 13:43:44 " This simply dumps the given gamma value into the buffer. "
2018/06/19 13:43:44 " As with gAMA this just adds the required cHRM chunk to the buffer. "
2018/06/19 13:43:44 " Original end points: "
2018/06/19 13:43:44 " Chromaticities (in fixed point): "
2018/06/19 13:43:44 " As above, ignore add and just make a new chunk "
2018/06/19 13:43:44 " if valid, else *delete* sRGB chunks "
2018/06/19 13:43:44 " Remove the sBIT chunk "
2018/06/19 13:43:44 " do nothing "
2018/06/19 13:43:44 " PNG_READ_GAMMA_SUPPORTED \n PNG_READ_TRANSFORMS_SUPPORTED "
2018/06/19 13:43:44 "**************************** STANDARD PNG FILES ****************************\n Standard files - write and save standard files. \n There are two basic forms of standard images.  Those which attempt to have\n * all the possible pixel values (not possible for 16bpp images, but a range of\n * values are produced) and those which have a range of image sizes.  The former\n * are used for testing transforms, in particular gamma correction and bit\n * reduction and increase.  The latter are reserved for testing the behavior of\n * libpng with respect to 'odd' image sizes - particularly small images where\n * rows become 1 byte and interlace passes disappear.\n *\n * The first, most useful, set are the 'transform' images, the second set of\n * small images are the 'size' images.\n *\n * The transform files are constructed with rows which fit into a 1024 byte row\n * buffer.  This makes allocation easier below.  Further regardless of the file\n * format every row has 128 pixels (giving 1024 bytes for 64bpp formats).\n *\n * Files are stored with no gAMA or sBIT chunks, with a PLTE only when needed\n * and with an ID derived from the colour type, bit depth and interlace type\n * as above (FILEID).  The width (128) and height (variable) are not stored in\n * the FILEID - instead the fields are set to 0, indicating a transform file.\n *\n * The size files ar constructed with rows a maximum of 128 bytes wide, allowing\n * a maximum width of 16 pixels (for the 64bpp case.)  They also have a maximum\n * height of 16 rows.  The width and height are stored in the FILEID and, being\n * non-zero, indicate a size file.\n *\n * Because the PNG filter code is typically the largest CPU consumer within\n * libpng itself there is a tendency to attempt to optimize it.  This results in\n * special case code which needs to be validated.  To cause this to happen the\n * 'size' images are made to use each possible filter, in so far as this is\n * possible for smaller images.\n *\n * For palette image (colour type 3) multiple transform images are stored with\n * the same bit depth to allow testing of more colour combinations -\n * particularly important for testing the gamma code because libpng uses a\n * different code path for palette images.  For size images a single palette is\n * used.\n "
2018/06/19 13:43:44 " Make a 'standard' palette.  Because there are only 256 entries in a palette\n * (maximum) this actually makes a random palette in the hope that enough tests\n * will catch enough errors.  (Note that the same palette isn't produced every\n * time for the same test - it depends on what previous tests have been run -\n * but a given set of arguments to pngvalid will always produce the same palette\n * at the same test!  This is why pseudo-random number generators are useful for\n * testing.)\n *\n * The store must be open for write when this is called, otherwise an internal\n * error will occur.  This routine contains its own magic number seed, so the\n * palettes generated don't change if there are intervening errors (changing the\n * calls to the store_mark seed.)\n "
2018/06/19 13:43:44 " Always put in black and white plus the six primary and secondary colors.\n    "
2018/06/19 13:43:44 " Then add 62 grays (one quarter of the remaining 256 slots). "
2018/06/19 13:43:44 "got black\nneed these\nbut not white"
2018/06/19 13:43:44 " Finally add 192 colors at random - don't worry about matches to things we\n    * already have, chance is less than 1/65536.  Don't worry about grays,\n    * chance is the same, so we get a duplicate or extra gray less than 1 time\n    * in 170.\n    "
2018/06/19 13:43:44 " Fill in the alpha values in the first byte.  Just use all possible values\n    * (0..255) in an apparently random order:\n    "
2018/06/19 13:43:44 " no transparency/tRNS chunk "
2018/06/19 13:43:44 " 'values' contains 256 ARGB values, but we only need 'npalette'.\n       * 'npalette' will always be a power of 2: 2, 4, 16 or 256.  In the low\n       * bit depth cases select colors at random, else it is difficult to have\n       * a set of low bit depth palette test with any chance of a reasonable\n       * range of colors.  Do this by randomly permuting values into the low\n       * 'npalette' entries using an XOR mask generated here.  This also\n       * permutes the npalette == 256 case in a potentially useful way (there is\n       * no relationship between palette index and the color value therein!)\n       "
2018/06/19 13:43:44 " Initialize a standard palette on a write stream.  The 'do_tRNS' argument\n * indicates whether or not to also set the tRNS chunk.\n "
2018/06/19 13:43:44 " TODO: the png_structp here can probably be 'const' in the future "
2018/06/19 13:43:44 " Set all entries to detect overread errors. "
2018/06/19 13:43:44 " Just in case fill in the rest with detectable values: "
2018/06/19 13:43:44 " Set all the entries, but skip trailing opaque entries "
2018/06/19 13:43:44 " Fill in the remainder with a detectable value: "
2018/06/19 13:43:44 "color"
2018/06/19 13:43:44 " To make this useful the tRNS color needs to match at least one pixel.\n    * Random values are fine for gray, including the 16-bit case where we know\n    * that the test image contains all the gray values.  For RGB we need more\n    * method as only 65536 different RGB values are generated.\n    "
2018/06/19 13:43:44 " makes unset fields random "
2018/06/19 13:43:44 "RGB"
2018/06/19 13:43:44 " bit_depth == 16 "
2018/06/19 13:43:44 " The number of passes is related to the interlace type. There was no libpng\n * API to determine this prior to 1.5, so we need an inquiry function:\n "
2018/06/19 13:43:44 " 16 pixels, max 8 bytes each - 128 bytes \n The larger of the two \n Maximum range of size images "
2018/06/19 13:43:44 " transform_width(pp, colour_type, bit_depth) current returns the same number\n * every time, so just use a macro:\n "
2018/06/19 13:43:44 " Total of 128 pixels "
2018/06/19 13:43:44 " Total of 256 pixels/bytes "
2018/06/19 13:43:44 " Total of 65536 pixels "
2018/06/19 13:43:44 " 65536 pixels "
2018/06/19 13:43:44 " 4 x 65536 pixels. "
2018/06/19 13:43:44 " Error, will be caught later "
2018/06/19 13:43:44 " The following can only be defined here, now we have the definitions\n * of the transform image sizes.\n "
2018/06/19 13:43:44 " This won't overflow: "
2018/06/19 13:43:44 " PNG_READ_SUPPORTED "
2018/06/19 13:43:44 " 256 bytes total, 128 bytes in each row set as follows: "
2018/06/19 13:43:44 " Generate all 65536 pixel values in order, which includes the 8 bit\n          * GA case as well as the 16 bit G case.\n          "
2018/06/19 13:43:44 " 65535 pixels, but rotate the values. "
2018/06/19 13:43:44 " Three bytes per pixel, r, g, b, make b by r^g "
2018/06/19 13:43:44 " 65535 pixels, r, g, b, a; just replicate "
2018/06/19 13:43:44 " y is maximum 2047, giving 4x65536 pixels, make 'r' increase by 1 at\n          * each pixel, g increase by 257 (0x101) and 'b' by 0x1111:\n          "
2018/06/19 13:43:44 " As above in the 32 bit case. "
2018/06/19 13:43:44 " This is just to do the right cast - could be changed to a function to check\n * 'bd' but there isn't much point.\n "
2018/06/19 13:43:44 " This is just a helper for compiling on minimal systems with no write\n * interlacing support.  If there is no write interlacing we can't generate test\n * cases with interlace:\n "
2018/06/19 13:43:44 " Prior to 1.7.0 libpng does not support the write of an interlaced image\n    * unless PNG_WRITE_INTERLACING_SUPPORTED, even with do_interlace so the\n    * code here does the pixel interlace itself, so:\n    "
2018/06/19 13:43:44 " This is an internal error - --interlace tests should be skipped, not\n       * attempted.\n       "
2018/06/19 13:43:44 " libpng 1.7+ "
2018/06/19 13:43:44 " WRITE_INTERLACING tests "
2018/06/19 13:43:44 " Do the same thing for read interlacing; this controls whether read tests do\n * their own de-interlace or use libpng.\n "
2018/06/19 13:43:44 " no libpng read interlace support "
2018/06/19 13:43:44 " The following two routines use the PNG interlace support macros from\n * png.h to interlace or deinterlace rows.\n "
2018/06/19 13:43:44 " Note that this can, trivially, be optimized to a memcpy on pass 7, the\n    * code is presented this way to make it easier to understand.  In practice\n    * consult the code in the libpng source to see other ways of doing this.\n    *\n    * It is OK for buffer and imageRow to be identical, because 'xin' moves\n    * faster than 'xout' and we copy up.\n    "
2018/06/19 13:43:44 " The inverse of the above, 'row' is part of row 'y' of the output image,\n    * in 'buffer'.  The image is 'w' wide and this is pass 'pass', distribute\n    * the pixels of row into buffer and return the number written (to allow\n    * this to be checked).\n    "
2018/06/19 13:43:44 " PNG_READ_SUPPORTED "
2018/06/19 13:43:44 " Make a standardized image given an image colour type, bit depth and\n * interlace type.  The standard images have a very restricted range of\n * rows and heights and are used for testing transforms rather than image\n * layout details.  See make_size_images below for a way to make images\n * that test odd sizes along with the libpng interlace handling.\n "
2018/06/19 13:43:44 " Choose filters randomly except that on the very first row ensure that\n    * there is at least one previous row filter.\n    "
2018/06/19 13:43:44 " There may be no filters; skip the setting. "
2018/06/19 13:43:44 "method"
2018/06/19 13:43:44 " !WRITE_FILTER "
2018/06/19 13:43:44 " !WRITE_FILTER "
2018/06/19 13:43:44 " In the event of a problem return control to the Catch statement below\n       * to do the clean up - it is not possible to 'return' directly from a Try\n       * block.\n       "
2018/06/19 13:43:44 " must be writeable "
2018/06/19 13:43:44 " Use a compressed text string to test the correct interaction of text\n          * compression and IDAT compression.\n          "
2018/06/19 13:43:44 " Yuck: the text must be writable! "
2018/06/19 13:43:44 " palette \ndo tRNS"
2018/06/19 13:43:44 " Somewhat confusingly this must be called *after* png_write_info\n          * because if it is called before, the information in *pp has not been\n          * updated to reflect the interlaced image.\n          "
2018/06/19 13:43:44 " do_own_interlace is a pre-defined boolean (a #define) which is\n             * set if we have to work out the interlaced rows here.\n             "
2018/06/19 13:43:44 " If do_own_interlace *and* the image is interlaced we need a\n                   * reduced interlace row; this may be reduced to empty.\n                   "
2018/06/19 13:43:44 " The row must not be written if it doesn't exist, notice\n                      * that there are two conditions here, either the row isn't\n                      * ever in the pass or the row would be but isn't wide\n                      * enough to contribute any pixels.  In fact the wPass test\n                      * can be used to skip the whole y loop in this case.\n                      "
2018/06/19 13:43:44 "data always bigendian"
2018/06/19 13:43:44 " do_own_interlace "
2018/06/19 13:43:44 " Use a compressed text string to test the correct interaction of text\n          * compression and IDAT compression.\n          "
2018/06/19 13:43:44 " And store this under the appropriate id, then clean up. "
2018/06/19 13:43:44 " Use the png_store returned by the exception. This may help the compiler\n       * because 'ps' is not used in this branch of the setjmp.  Note that fault\n       * and ps will always be the same value.\n       "
2018/06/19 13:43:44 " This is in case of errors. "
2018/06/19 13:43:44 " Use next_format to enumerate all the combinations we test, including\n    * generating multiple low bit depth palette images. Non-A images (palette\n    * and direct) are created with and without tRNS chunks.\n    "
2018/06/19 13:43:44 " Build a single row for the 'size' test images; this fills in only the\n * first bit_width bits of the sample row.\n "
2018/06/19 13:43:44 " height is in the range 1 to 16, so: "
2018/06/19 13:43:44 " the following ensures bits are set in small images: "
2018/06/19 13:43:44 " There may be up to 7 remaining bits, these go in the most significant\n    * bits of the byte.\n    "
2018/06/19 13:43:44 " Make a name and get an appropriate id for the store: "
2018/06/19 13:43:44 "palette"
2018/06/19 13:43:44 " In the event of a problem return control to the Catch statement below\n       * to do the clean up - it is not possible to 'return' directly from a Try\n       * block.\n       "
2018/06/19 13:43:44 " must be writeable "
2018/06/19 13:43:44 " Use a compressed text string to test the correct interaction of text\n          * compression and IDAT compression.\n          "
2018/06/19 13:43:44 " Yuck: the text must be writable! "
2018/06/19 13:43:44 " palette \ndo tRNS"
2018/06/19 13:43:44 " Calculate the bit size, divide by 8 to get the byte size - this won't\n       * overflow because we know the w values are all small enough even for\n       * a system where 'unsigned int' is only 16 bits.\n       "
2018/06/19 13:43:44 " To help consistent error detection make the parts of this buffer\n          * that aren't set below all '1':\n          "
2018/06/19 13:43:44 " Prepare the whole image first to avoid making it 7 times: "
2018/06/19 13:43:44 " The following two are for checking the macros: "
2018/06/19 13:43:44 " If do_interlace is set we don't call png_write_row for every\n             * row because some of them are empty.  In fact, for a 1x1 image,\n             * most of them are empty!\n             "
2018/06/19 13:43:44 " If do_interlace *and* the image is interlaced we\n                * need a reduced interlace row; this may be reduced\n                * to empty.\n                "
2018/06/19 13:43:44 " The row must not be written if it doesn't exist, notice\n                   * that there are two conditions here, either the row isn't\n                   * ever in the pass or the row would be but isn't wide\n                   * enough to contribute any pixels.  In fact the wPass test\n                   * can be used to skip the whole y loop in this case.\n                   "
2018/06/19 13:43:44 " Set to all 1's for error detection (libpng tends to\n                      * set unset things to 0).\n                      "
2018/06/19 13:43:44 "data always bigendian"
2018/06/19 13:43:44 " Only get to here if the row has some pixels in it, set the\n                * filters to 'all' for the very first row and thereafter to a\n                * single filter.  It isn't well documented, but png_set_filter\n                * does accept a filter number (per the spec) as well as a bit\n                * mask.\n                *\n                * The code now uses filters at random, except that on the first\n                * row of an image it ensures that a previous row filter is in\n                * the set so that libpng allocates the row buffer.\n                "
2018/06/19 13:43:44 "method"
2018/06/19 13:43:44 " Use a compressed text string to test the correct interaction of text\n          * compression and IDAT compression.\n          "
2018/06/19 13:43:44 " And store this under the appropriate id, then clean up. "
2018/06/19 13:43:44 " Use the png_store returned by the exception. This may help the compiler\n       * because 'ps' is not used in this branch of the setjmp.  Note that fault\n       * and ps will always be the same value.\n       "
2018/06/19 13:43:44 " The four combinations of DIY interlace and interlace or not -\n             * no interlace + DIY should be identical to no interlace with\n             * libpng doing it.\n             "
2018/06/19 13:43:44 " 1.7.0 removes the hack that prevented app write of an interlaced\n             * image if WRITE_INTERLACE was not supported\n             "
2018/06/19 13:43:44 " This is in case of errors. "
2018/06/19 13:43:44 " Arguments are colour_type, low bit depth, high bit depth\n    "
2018/06/19 13:43:44 "palette: max 8 bits"
2018/06/19 13:43:44 " Return a row based on image id and 'y' for checking: "
2018/06/19 13:43:44 " PNG_READ_SUPPORTED "
2018/06/19 13:43:44 " Tests - individual test cases \n Like 'make_standard' but errors are deliberately introduced into the calls\n * to ensure that they get detected - it should not be possible to write an\n * invalid image with libpng!\n "
2018/06/19 13:43:44 " TODO: the 'set' functions can probably all be made to take a\n * png_const_structp rather than a modifiable one.\n "
2018/06/19 13:43:44 " 0 is invalid... "
2018/06/19 13:43:44 " Now we know the bit depth we can easily generate an invalid sBIT entry "
2018/06/19 13:43:44 " the error is a warning... "
2018/06/19 13:43:44 " no warnings makes these errors undetectable prior to 1.7.0 "
2018/06/19 13:43:44 " palette \ndo tRNS"
2018/06/19 13:43:44 " Time for a few errors; these are in various optional chunks, the\n       * standard tests test the standard chunks pretty well.\n       "
2018/06/19 13:43:44 " Expect this to throw: "
2018/06/19 13:43:44 " Normally the error is only detected here: "
2018/06/19 13:43:44 " And handle the case where it was only a warning: "
2018/06/19 13:43:44 " If we get here there is a problem, we have success - no error or\n          * no warning - when we shouldn't have success.  Log an error.\n          "
2018/06/19 13:43:44 "error"
2018/06/19 13:43:44 " expected exit "
2018/06/19 13:43:44 " And clear these flags "
2018/06/19 13:43:44 " Now write the whole image, just to make sure that the detected, or\n          * undetected, errro has not created problems inside libpng.  This\n          * doesn't work if there was a png_error in png_write_info because that\n          * can abort before PLTE was written.\n          "
2018/06/19 13:43:44 " If do_own_interlace *and* the image is interlaced we\n                      * need a reduced interlace row; this may be reduced to\n                      * empty.\n                      "
2018/06/19 13:43:44 " The row must not be written if it doesn't exist,\n                         * notice that there are two conditions here, either the\n                         * row isn't ever in the pass or the row would be but\n                         * isn't wide enough to contribute any pixels.  In fact\n                         * the wPass test can be used to skip the whole y loop\n                         * in this case.\n                         "
2018/06/19 13:43:44 "data always bigendian"
2018/06/19 13:43:44 " do_own_interlace "
2018/06/19 13:43:44 " image writing "
2018/06/19 13:43:44 " The following deletes the file that was just written. "
2018/06/19 13:43:44 " keep going "
2018/06/19 13:43:44 " PNG_WARNINGS_SUPPORTED "
2018/06/19 13:43:44 " else there are no cases that work! \n Need to do this here because we just write in this test. "
2018/06/19 13:43:44 " This is just to validate the internal PNG formatting code - if this fails\n * then the warning messages the library outputs will probably be garbage.\n "
2018/06/19 13:43:44 " The handle into the formatting code is the RFC1123 support; this test does\n    * nothing if that is compiled out.\n    "
2018/06/19 13:43:44 " Arbitrary settings: "
2018/06/19 13:43:44 " a leap second "
2018/06/19 13:43:44 " Because we want to use the same code in both the progressive reader and the\n * sequential reader it is necessary to deal with the fact that the progressive\n * reader callbacks only have one parameter (png_get_progressive_ptr()), so this\n * must contain all the test parameters and all the local variables directly\n * accessible to the sequential reader implementation.\n *\n * The technique adopted is to reinvent part of what Dijkstra termed a\n * 'display'; an array of pointers to the stack frames of enclosing functions so\n * that a nested function definition can access the local (C auto) variables of\n * the functions that contain its definition.  In fact C provides the first\n * pointer (the local variables - the stack frame pointer) and the last (the\n * global variables - the BCPL global vector typically implemented as global\n * addresses), this code requires one more pointer to make the display - the\n * local variables (and function call parameters) of the function that actually\n * invokes either the progressive or sequential reader.\n *\n * Perhaps confusingly this technique is confounded with classes - the\n * 'standard_display' defined here is sub-classed as the 'gamma_display' below.\n * A gamma_display is a standard_display, taking advantage of the ANSI-C\n * requirement that the pointer to the first member of a structure must be the\n * same as the pointer to the structure.  This allows us to reuse standard_\n * functions in the gamma test code; something that could not be done with\n * nested functions!\n "
2018/06/19 13:43:44 " Test parameters (passed to the function) "
2018/06/19 13:43:44 " Input data sBIT values. "
2018/06/19 13:43:44 " Output has a filler \n Calculated file ID \n Width of image \n Height of image \n Number of interlaced passes \n Width of one pixel in bits \n Width of output row in bits \n Bytes in a row of the output image \n Do interlacing internally \n App (row) data is little endian \n Transparency information was present. \n color type GRAY or RGB with a tRNS chunk. \n Doing a speed test \n Call update_info, not start_image "
2018/06/19 13:43:44 " The transparent color, if set. \n Number of entries in the palette. "
2018/06/19 13:43:44 " All the rest are filled in after the read_info: "
2018/06/19 13:43:44 " Preset the transparent color to black: "
2018/06/19 13:43:44 " Preset the palette to full intensity/opaque througout: "
2018/06/19 13:43:44 " Initialize the palette fields - this must be done later because the palette\n * comes from the particular png_store_file that is selected.\n "
2018/06/19 13:43:44 " The remaining entries remain white/opaque. "
2018/06/19 13:43:44 " Check for a non-opaque palette entry: "
2018/06/19 13:43:44 " GCC can't handle the more obviously optimizable version. "
2018/06/19 13:43:44 " Utility to read the palette from the PNG file and convert it into\n * store_palette format.  This returns 1 if there is any transparency in the\n * palette (it does not check for a transparent colour in the non-palette case.)\n "
2018/06/19 13:43:44 " Mark the remainder of the entries with a flag value (other than\n       * white/opaque which is the flag value stored above.)\n       "
2018/06/19 13:43:44 " !png_get_PLTE "
2018/06/19 13:43:44 " But there is no palette, so record this: "
2018/06/19 13:43:44 " force error below "
2018/06/19 13:43:44 "returns 1 for a transparent color\n Oops, if a palette tRNS gets expanded png_read_update_info (at least so\n       * far as 1.5.4) does not remove the trans_alpha pointer, only num_trans,\n       * so in the above call we get a success, we get a pointer (who knows what\n       * to) and we get num_trans == 0:\n       "
2018/06/19 13:43:44 " TODO: fix this in libpng. "
2018/06/19 13:43:44 " Any of these are crash-worthy - given the implementation of\n       * png_get_tRNS up to 1.5 an app won't crash if it just checks the\n       * result above and fails to check that the variables it passed have\n       * actually been filled in!  Note that if the app were to pass the\n       * last, png_color_16p, variable too it couldn't rely on this.\n       "
2018/06/19 13:43:44 " flag value "
2018/06/19 13:43:44 " transparency "
2018/06/19 13:43:44 " No palette transparency - just set the alpha channel to opaque. "
2018/06/19 13:43:44 " flag value "
2018/06/19 13:43:44 " no transparency "
2018/06/19 13:43:44 " Utility to validate the palette if it should not have changed (the\n * non-transform case).\n "
2018/06/19 13:43:44 " npalette is aliased "
2018/06/19 13:43:44 " By passing a 'standard_display' the progressive callbacks can be used\n * directly by the sequential code, the functions suffixed \"_imp\" are the\n * implementations, the functions without the suffix are the callbacks.\n *\n * The code for the info callback is split into two because this callback calls\n * png_read_update_info or png_start_read_image and what gets called depends on\n * whether the info needs updating (we want to test both calls in pngvalid.)\n "
2018/06/19 13:43:44 " Record (but don't check at present) the input sBIT according to the colour\n    * type information.\n    "
2018/06/19 13:43:44 " !COLOR "
2018/06/19 13:43:44 " All 8 bits in tRNS for a palette image are significant - see the\n          * spec.\n          "
2018/06/19 13:43:44 " Important: this is validating the value *before* any transforms have been\n    * put in place.  It doesn't matter for the standard tests, where there are\n    * no transforms, but it does for other tests where rowbytes may change after\n    * png_read_update_info.\n    "
2018/06/19 13:43:44 " Validate the colour type 3 palette (this can be present on other color\n    * types.)\n    "
2018/06/19 13:43:44 " In any case always check for a tranparent color (notice that the\n    * colour type 3 case must not give a successful return on the get_tRNS call\n    * with these arguments!)\n    "
2018/06/19 13:43:44 " Not expected because it should result in the array case\n             * above.\n             "
2018/06/19 13:43:44 " Read the number of passes - expected to match the value used when\n    * creating the image (interlaced or not).  This has the side effect of\n    * turning on interlace handling (if do_interlace is not set.)\n    "
2018/06/19 13:43:44 " !READ_INTERLACING \n This should never happen: the relevant tests (!do_interlace) should\n          * not be run.\n          "
2018/06/19 13:43:44 " !READ_INTERLACING "
2018/06/19 13:43:44 " Caller calls png_read_update_info or png_start_read_image now, then calls\n    * part2.\n    "
2018/06/19 13:43:44 " This must be called *after* the png_read_update_info call to get the correct\n * 'rowbytes' value, otherwise png_get_rowbytes will refer to the untransformed\n * image.\n "
2018/06/19 13:43:44 " Record cbRow now that it can be found. "
2018/06/19 13:43:44 " handle filler as faked alpha channel "
2018/06/19 13:43:44 " Validate the rowbytes here again. "
2018/06/19 13:43:44 " Then ensure there is enough space for the output image(s). "
2018/06/19 13:43:44 " Note that the validation routine has the side effect of turning on\n    * interlace handling in the subsequent code.\n    "
2018/06/19 13:43:44 " And the info callback has to call this (or png_read_update_info - see\n    * below in the png_modifier code for that variant.\n    "
2018/06/19 13:43:44 " For debugging the effect of multiple calls: "
2018/06/19 13:43:44 " Validate the height, width and rowbytes plus ensure that sufficient buffer\n    * exists for decoding the image.\n    "
2018/06/19 13:43:44 " Call with nImages==1 because the progressive reader can only produce one\n    * image.\n    "
2018/06/19 13:43:44 "only one image"
2018/06/19 13:43:44 " When handling interlacing some rows will be absent in each pass, the\n    * callback still gets called, but with a NULL pointer.  This is checked\n    * in the 'else' clause below.  We need our own 'cbRow', but we can't call\n    * png_get_rowbytes because we got no info structure.\n    "
2018/06/19 13:43:44 " In the case where the reader doesn't do the interlace it gives\n       * us the y in the sub-image:\n       "
2018/06/19 13:43:44 " Use this opportunity to validate the png 'current' APIs: "
2018/06/19 13:43:44 " USER_TRANSFORM_INFO "
2018/06/19 13:43:44 " Validate this just in case. "
2018/06/19 13:43:44 " Combine the new row into the old: "
2018/06/19 13:43:44 " READ_INTERLACING "
2018/06/19 13:43:44 " PNG_READ_INTERLACING_SUPPORTED "
2018/06/19 13:43:44 " wPass may be zero or this row may not be in this pass.\n             * png_read_row must not be called in either case.\n             "
2018/06/19 13:43:44 " Read the row into a pair of temporary buffers, then do the\n                * merge here into the output rows.\n                "
2018/06/19 13:43:44 " The following aids (to some extent) error detection - we can\n                * see where png_read_row wrote.  Use opposite values in row and\n                * display to make this easier.  Don't use 0xff (which is used in\n                * the image write code to fill unused bits) or 0 (which is a\n                * likely value to overwrite unused bits with).\n                "
2018/06/19 13:43:44 " And finish the read operation (only really necessary if the caller wants\n    * to find additional data in png_info from chunks after the last IDAT.)\n    "
2018/06/19 13:43:44 " Remove the \", \" at the end "
2018/06/19 13:43:44 " This exists because prior to 1.5.18 the progressive reader left the\n       * png_struct z_stream unreset at the end of the image, so subsequent\n       * attempts to use it simply returns Z_STREAM_END.\n       "
2018/06/19 13:43:44 " The row must be pre-initialized to the magic number here for the size\n    * tests to pass:\n    "
2018/06/19 13:43:44 " At the end both the 'row' and 'display' arrays should end up identical.\n    * In earlier passes 'row' will be partially filled in, with only the pixels\n    * that have been read so far, but 'display' will have those pixels\n    * replicated to fill the unread pixels while reading an interlaced image.\n    "
2018/06/19 13:43:44 " This avoids false positives if the validation code is never called! "
2018/06/19 13:43:44 " Validate the image - progressive reading only produces one variant for\n    * interlaced images.\n    "
2018/06/19 13:43:44 "check_end: see comments above"
2018/06/19 13:43:44 " A single test run checking the standard image to ensure it is not damaged. "
2018/06/19 13:43:44 " Set up the display (stack frame) variables from the arguments to the\n    * function and initialize the locals that are filled in later.\n    "
2018/06/19 13:43:44 " Everything is protected by a Try/Catch.  The functions called also\n    * typically have local Try/Catch blocks.\n    "
2018/06/19 13:43:44 " Get a png_struct for reading the image. This will throw an error if it\n       * fails, so we don't need to check the result.\n       "
2018/06/19 13:43:44 " Initialize the palette correctly from the png_store_file. "
2018/06/19 13:43:44 " Introduce the correct read function. "
2018/06/19 13:43:44 " Now feed data into the reader until we reach the end: "
2018/06/19 13:43:44 " Note that this takes the store, not the display. "
2018/06/19 13:43:44 " Check the header values: "
2018/06/19 13:43:44 " The code tests both versions of the images that the sequential\n          * reader can produce.\n          "
2018/06/19 13:43:44 "images"
2018/06/19 13:43:44 " Need the total bytes in the image below; we can't get to this point\n          * unless the PNG file values have been checked against the expected\n          * values.\n          "
2018/06/19 13:43:44 " After the last pass loop over the rows again to check that the\n             * image is correct.\n             "
2018/06/19 13:43:44 "check_end"
2018/06/19 13:43:44 " Check for validation. "
2018/06/19 13:43:44 " Successful completion. "
2018/06/19 13:43:44 " make sure this hasn't been clobbered. "
2018/06/19 13:43:44 " In either case clean up the store. "
2018/06/19 13:43:44 "palette"
2018/06/19 13:43:44 " keep going "
2018/06/19 13:43:44 " Test each colour type over the valid range of bit depths (expressed as\n    * log2(bit_depth) in turn, stop as soon as any error is detected.\n    "
2018/06/19 13:43:44 "********************************* SIZE TESTS *******************************"
2018/06/19 13:43:44 " Run the tests on each combination.\n    *\n    * NOTE: on my 32 bit x86 each of the following blocks takes\n    * a total of 3.5 seconds if done across every combo of bit depth\n    * width and height.  This is a waste of time in practice, hence the\n    * hinc and winc stuff:\n    "
2018/06/19 13:43:44 " First test all the 'size' images against the sequential\n          * reader using libpng to deinterlace (where required.)  This\n          * validates the write side of libpng.  There are four possibilities\n          * to validate.\n          "
2018/06/19 13:43:44 "palette\ndo_interlace"
2018/06/19 13:43:44 "palette\ndo_interlace"
2018/06/19 13:43:44 " Now validate the interlaced read side - do_interlace true,\n          * in the progressive case this does actually make a difference\n          * to the code used in the non-interlaced case too.\n          "
2018/06/19 13:43:44 "palette\ndo_interlace"
2018/06/19 13:43:44 " Validate the pngvalid code itself: \npalette\ndo_interlace"
2018/06/19 13:43:44 " Now do the tests of libpng interlace handling, after we have made sure\n    * that the pngvalid version works:\n    "
2018/06/19 13:43:44 " Test with pngvalid generated interlaced images first; we have\n          * already verify these are ok (unless pngvalid has self-consistent\n          * read/write errors, which is unlikely), so this detects errors in the\n          * read side first:\n          "
2018/06/19 13:43:44 "palette\ndo_interlace"
2018/06/19 13:43:44 " READ_INTERLACING "
2018/06/19 13:43:44 " Test the libpng write side against the pngvalid read side: \npalette\ndo_interlace"
2018/06/19 13:43:44 " Test both together: \npalette\ndo_interlace"
2018/06/19 13:43:44 " READ_INTERLACING "
2018/06/19 13:43:44 " keep going "
2018/06/19 13:43:44 " Test each colour type over the valid range of bit depths (expressed as\n    * log2(bit_depth) in turn, stop as soon as any error is detected.\n    "
2018/06/19 13:43:44 " For the moment don't do the palette test - it's a waste of time when\n    * compared to the grayscale test.\n    "
2018/06/19 13:43:44 "****************************** TRANSFORM TESTS *****************************"
2018/06/19 13:43:44 " A set of tests to validate libpng image transforms.  The possibilities here\n * are legion because the transforms can be combined in a combinatorial\n * fashion.  To deal with this some measure of restraint is required, otherwise\n * the tests would take forever.\n "
2018/06/19 13:43:44 " A local (pngvalid) representation of a PNG pixel, in all its\n    * various forms.\n    "
2018/06/19 13:43:44 " For non-palette images. \n For a palette image. \n As in the spec. \n Defines bit size in row \n Scale of samples \n tRNS chunk may need processing \n RGB swapped to BGR \n Alpha at start, not end \n Alpha channel inverted \n Gray channel inverted \n Byte swap 16-bit components \n High bits on right \n Pixel shifted (sig bits only) "
2018/06/19 13:43:44 " For checking the code calculates double precision floating point values\n    * along with an error value, accumulated from the transforms.  Because an\n    * sBIT setting allows larger error bounds (indeed, by the spec, apparently\n    * up to just less than +/-1 in the scaled value) the *lowest* sBIT for each\n    * channel is stored.  This sBIT value is folded in to the stored error value\n    * at the end of the application of the transforms to the pixel.\n    *\n    * If sig_bits is set above the red, green, blue and alpha values have been\n    * scaled so they only contain the significant bits of the component values.\n    "
2018/06/19 13:43:44 " Shared utility function, see below. "
2018/06/19 13:43:44 " Initialize the structure for the next pixel - call this before doing any\n * transforms and call it for each pixel since all the fields may need to be\n * reset.\n "
2018/06/19 13:43:44 "from pngvalid transform of input"
2018/06/19 13:43:44 " Initially just set everything to the same number and the alpha to opaque.\n    * Note that this currently assumes a simple palette where entry x has colour\n    * rgb(x,x,x)!\n    "
2018/06/19 13:43:44 " Then override as appropriate: \n palette "
2018/06/19 13:43:44 " This permits the caller to default to the sample value. "
2018/06/19 13:43:44 " not palette "
2018/06/19 13:43:44 " This handles the gray case for 'AG' pixels "
2018/06/19 13:43:44 " Green is second for both BGR and RGB: "
2018/06/19 13:43:44 " BGR "
2018/06/19 13:43:44 " grayscale "
2018/06/19 13:43:44 " alpha "
2018/06/19 13:43:44 " Calculate the scaled values, these are simply the values divided by\n    * 'max' and the error is initialized to the double precision epsilon value\n    * from the header file.\n    "
2018/06/19 13:43:44 " Store the input information for use in the transforms - these will\n    * modify the information.\n    "
2018/06/19 13:43:44 " Convert a palette image to an rgb image.  This necessarily converts the tRNS\n * chunk at the same time, because the tRNS will be in palette form.  The way\n * palette validation works means that the original palette is never updated,\n * instead the image_pixel value from the row contains the RGB of the\n * corresponding palette entry and *this* is updated.  Consequently this routine\n * only needs to change the colour type information.\n "
2018/06/19 13:43:44 " The bit depth of the row changes at this point too (notice that this is\n       * the row format, not the sample depth, which is separate.)\n       "
2018/06/19 13:43:44 " Add an alpha channel; this will import the tRNS information because tRNS is\n * not valid in an alpha image.  The bit depth will invariably be set to at\n * least 8 prior to 1.7.0.  Palette images will be converted to alpha (using\n * the above API).  With png_set_background the alpha channel is never expanded\n * but this routine is used by pngvalid to simplify code; 'for_background'\n * records this.\n "
2018/06/19 13:43:44 " After 1.7 the expansion of bit depth only happens if there is a\n             * tRNS chunk to expand at this point.\n             "
2018/06/19 13:43:44 " Check the input, original, channel value here against the\n             * original tRNS gray chunk valie.\n             "
2018/06/19 13:43:44 " Again, check the exact input values, not the current transformed\n             * value!\n             "
2018/06/19 13:43:44 " The error in the alpha is zero and the sBIT value comes from the\n       * original sBIT data (actually it will always be the original bit depth).\n       "
2018/06/19 13:43:44 " transforms that need image_pixel_add_alpha "
2018/06/19 13:43:44 " The name of this transform: a string. "
2018/06/19 13:43:44 " Each transform can be disabled from the command line: "
2018/06/19 13:43:44 " The global list of transforms; read only. "
2018/06/19 13:43:44 " The global count of the number of times this transform has been set on an\n    * image.\n    "
2018/06/19 13:43:44 " The local count of the number of times this transform has been set. "
2018/06/19 13:43:44 " The next transform in the list, each transform must call its own next\n    * transform after it has processed the pixel successfully.\n    "
2018/06/19 13:43:44 " A single transform for the image, expressed as a series of function\n    * callbacks and some space for values.\n    *\n    * First a callback to add any required modifications to the png_modifier;\n    * this gets called just before the modifier is set up for read.\n    "
2018/06/19 13:43:44 " And a callback to set the transform on the current png_read_struct:\n    "
2018/06/19 13:43:44 " Then a transform that takes an input pixel in one PNG format or another\n    * and modifies it by a pngvalid implementation of the transform (thus\n    * duplicating the libpng intent without, we hope, duplicating the bugs\n    * in the libpng implementation!)  The png_structp is solely to allow error\n    * reporting via png_error and png_warning.\n    "
2018/06/19 13:43:44 " Add this transform to the list and return true if the transform is\n    * meaningful for this colour type and bit depth - if false then the\n    * transform should have no effect on the image so there's not a lot of\n    * point running it.\n    "
2018/06/19 13:43:44 " Parameters "
2018/06/19 13:43:44 " Local variables "
2018/06/19 13:43:44 " Modifications (not necessarily used.) "
2018/06/19 13:43:44 " Set sRGB, cHRM and gAMA transforms as required by the current encoding. "
2018/06/19 13:43:44 " Set up the png_modifier '_current' fields then use these to determine how\n    * to add appropriate chunks.\n    "
2018/06/19 13:43:44 " Set gAMA and cHRM separately. "
2018/06/19 13:43:44 " Three functions to end the list: "
2018/06/19 13:43:44 " At the end of the list recalculate the output image pixel value from the\n * double precision values set up by the preceding 'mod' calls:\n "
2018/06/19 13:43:44 " Return NaN as 0: "
2018/06/19 13:43:44 " At the end recalculate the digitized red green and blue values according\n    * to the current sample_depth of the pixel.\n    *\n    * The sample value is simply scaled to the maximum, checking for over\n    * and underflow (which can both happen for some image transforms,\n    * including simple size scaling, though libpng doesn't do that at present.\n    "
2018/06/19 13:43:44 " This is a bit bogus; really the above calculation should use the red_sBIT\n    * value, not sample_depth, but because libpng does png_set_shift by just\n    * shifting the bits we get errors if we don't do it the same way.\n    "
2018/06/19 13:43:44 " The error value is increased, at the end, according to the lowest sBIT\n    * value seen.  Common sense tells us that the intermediate integer\n    * representations are no more accurate than +/- 0.5 in the integral values,\n    * the sBIT allows the implementation to be worse than this.  In addition the\n    * PNG specification actually permits any error within the range (-1..+1),\n    * but that is ignored here.  Instead the final digitized value is compared,\n    * below to the digitized value of the error limits - this has the net effect\n    * of allowing (almost) +/-1 in the output value.  It's difficult to see how\n    * any algorithm that digitizes intermediate results can be more accurate.\n    "
2018/06/19 13:43:44 " opaque \n Override this. \n It's exact ;-) "
2018/06/19 13:43:44 " Static 'end' structure: "
2018/06/19 13:43:44 " name \n enable \n list \n global_use \n local_use \n next "
2018/06/19 13:43:44 " never called, I want it to crash if it is! "
2018/06/19 13:43:44 " Reader callbacks and implementations, where they differ from the standard\n * ones.\n "
2018/06/19 13:43:44 " Standard fields "
2018/06/19 13:43:44 " Parameter fields "
2018/06/19 13:43:44 " Local variable fields \n invalid \n invalid \n not unpacked "
2018/06/19 13:43:44 " Reuse the standard stuff as appropriate. "
2018/06/19 13:43:44 " Now set the list of transforms. "
2018/06/19 13:43:44 " Update the info structure for these transforms: "
2018/06/19 13:43:44 " Always do one call, even if use_update_info is 0. "
2018/06/19 13:43:44 " And get the output information into the standard_display \nimages"
2018/06/19 13:43:44 " Plus the extra stuff we need for the transform tests: "
2018/06/19 13:43:44 " If png_set_filler is in action then fake the output color type to include\n    * an alpha channel where appropriate.\n    "
2018/06/19 13:43:44 " Validate the combination of colour type and bit depth that we are getting\n    * out of libpng; the semantics of something not in the PNG spec are, at\n    * best, unclear.\n    "
2018/06/19 13:43:44 " FALLTHROUGH "
2018/06/19 13:43:44 " FALLTHROUGH "
2018/06/19 13:43:44 " FALLTHROUGH "
2018/06/19 13:43:44 " Use a test pixel to check that the output agrees with what we expect -\n    * this avoids running the whole test if the output is unexpected.  This also\n    * checks for internal errors.\n    "
2018/06/19 13:43:44 " input "
2018/06/19 13:43:44 " Don't need sBIT here, but it must be set to non-zero to avoid\n       * arithmetic overflows.\n       "
2018/06/19 13:43:44 " If both bit depth and colour type are correct check the sample depth.\n       "
2018/06/19 13:43:44 " oops - internal error! "
2018/06/19 13:43:44 " Because unless something has set 'unpacked' or the image is palette\n          * mapped we expect the transform to keep sample depth and bit depth\n          * the same.\n          "
2018/06/19 13:43:44 " This could be a libpng error too; libpng has not produced what we\n          * expect for the output bit depth.\n          "
2018/06/19 13:43:44 " Compare the scaled, digitzed, values of our local calculation (in+-err)\n    * with the digitized values libpng produced;  'sample_depth' is the actual\n    * digitization depth of the libpng output colors (the bit depth except for\n    * palette images where it is always 8.)  The check on 'err' is to detect\n    * internal errors in pngvalid itself.\n    "
2018/06/19 13:43:44 " Constants for the loop below: "
2018/06/19 13:43:44 " Check for row overwrite errors "
2018/06/19 13:43:44 " Read the palette corresponding to the output if the output colour type\n    * indicates a palette, othewise set out_palette to garbage.\n    "
2018/06/19 13:43:44 " Validate that the palette count itself has not changed - this is not\n       * expected.\n       "
2018/06/19 13:43:44 " use-input-precision means assume that if the input has 8 bit (or less)\n       * samples and the output has 16 bit samples the calculations will be done\n       * with 8 bit precision, not 16.\n       "
2018/06/19 13:43:44 " Else calculations are at 8 bit precision, and the output actually\n       * consists of scaled 8-bit values, so scale .5 in 8 bits to the 16 bits:\n       "
2018/06/19 13:43:44 " The original, standard, row pre-transforms. "
2018/06/19 13:43:44 " Go through each original pixel transforming it and comparing with what\n       * libpng did to the same pixel.\n       "
2018/06/19 13:43:44 " Find out what we think the pixel should be: "
2018/06/19 13:43:44 " For error detection, below. "
2018/06/19 13:43:44 " This applies the transforms to the input data, including output\n          * format operations which must be used when reading the output\n          * pixel that libpng produces.\n          "
2018/06/19 13:43:44 " Read the output pixel and compare it to what we got, we don't\n          * use the error field here, so no need to update sBIT.  in_pixel\n          * says whether we expect libpng to change the output format.\n          "
2018/06/19 13:43:44 " We don't expect changes to the index here even if the bit depth is\n          * changed.\n          "
2018/06/19 13:43:44 " Check the colours for palette images too - in fact the palette could\n          * be separately verified itself in most cases.\n          "
2018/06/19 13:43:44 " pixel (x) loop \n row (y) loop "
2018/06/19 13:43:44 " Record that something was actually checked to avoid a false positive. "
2018/06/19 13:43:44 " A single test run. "
2018/06/19 13:43:44 " Make sure the encoding fields are correct and enter the required\n       * modifications.\n       "
2018/06/19 13:43:44 " Add any modifications required by the transform list. "
2018/06/19 13:43:44 " Add the color space information, if any, to the name. "
2018/06/19 13:43:44 " Get a png_struct for reading the image. "
2018/06/19 13:43:44 " Logging (debugging only) "
2018/06/19 13:43:44 " Introduce the correct read function. "
2018/06/19 13:43:44 " Share the row function with the standard implementation. "
2018/06/19 13:43:44 " Now feed data into the reader until we reach the end: "
2018/06/19 13:43:44 " modifier_read expects a png_modifier* "
2018/06/19 13:43:44 " Check the header values: "
2018/06/19 13:43:44 " Process the 'info' requirements. Only one image is generated "
2018/06/19 13:43:44 " The transforms: "
2018/06/19 13:43:44 "enable\nlist\nglobal_use\nlocal_use\nnext"
2018/06/19 13:43:44 " stores the previous transform "
2018/06/19 13:43:44 " To save code: "
2018/06/19 13:43:44 " silence GCC warnings "
2018/06/19 13:43:44 " private, but almost always needed "
2018/06/19 13:43:44 " png_set_palette_to_rgb "
2018/06/19 13:43:44 " PNG_READ_EXPAND_SUPPORTED "
2018/06/19 13:43:44 " png_set_tRNS_to_alpha "
2018/06/19 13:43:44 " If there was a tRNS chunk that would get expanded and add an alpha\n    * channel is_transparent must be updated:\n    "
2018/06/19 13:43:44 " LIBPNG BUG: this always forces palette images to RGB. "
2018/06/19 13:43:44 " This effectively does an 'expand' only if there is some transparency to\n    * convert to an alpha channel.\n    "
2018/06/19 13:43:44 "!for background"
2018/06/19 13:43:44 " LIBPNG BUG: otherwise libpng still expands to 8 bits! "
2018/06/19 13:43:44 " We don't know yet whether there will be a tRNS chunk, but we know that\n    * this transformation should do nothing if there already is an alpha\n    * channel.  In addition, after the bug fix in 1.7.0, there is no longer\n    * any action on a palette image.\n    "
2018/06/19 13:43:44 " PNG_READ_EXPAND_SUPPORTED "
2018/06/19 13:43:44 " png_set_gray_to_rgb "
2018/06/19 13:43:44 " NOTE: this doesn't result in tRNS expansion. "
2018/06/19 13:43:44 " NOTE: we can actually pend the tRNS processing at this point because we\n    * can correctly recognize the original pixel value even though we have\n    * mapped the one gray channel to the three RGB ones, but in fact libpng\n    * doesn't do this, so we don't either.\n    "
2018/06/19 13:43:44 "!for background"
2018/06/19 13:43:44 " Simply expand the bit depth and alter the colour type as required. "
2018/06/19 13:43:44 " RGB images have a bit depth at least equal to '8' "
2018/06/19 13:43:44 " And just changing the colour type works here because the green and blue\n       * channels are being maintained in lock-step with the red/gray:\n       "
2018/06/19 13:43:44 " PNG_READ_GRAY_TO_RGB_SUPPORTED "
2018/06/19 13:43:44 " png_set_expand "
2018/06/19 13:43:44 " The general expand case depends on what the colour type is: "
2018/06/19 13:43:44 " grayscale "
2018/06/19 13:43:44 "!for background"
2018/06/19 13:43:44 " 'expand' should do nothing for RGBA or GA input - no tRNS and the bit\n    * depth is at least 8 already.\n    "
2018/06/19 13:43:44 " PNG_READ_EXPAND_SUPPORTED "
2018/06/19 13:43:44 " png_set_expand_gray_1_2_4_to_8\n * Pre 1.7.0 LIBPNG BUG: this just does an 'expand'\n "
2018/06/19 13:43:44 " NOTE: don't expect this to expand tRNS "
2018/06/19 13:43:44 " Only expand grayscale of bit depth less than 8: "
2018/06/19 13:43:44 " 1.7 or later "
2018/06/19 13:43:44 " This should do nothing unless the color type is gray and the bit depth is\n    * less than 8:\n    "
2018/06/19 13:43:44 " 1.7 or later "
2018/06/19 13:43:44 " PNG_READ_EXPAND_SUPPORTED "
2018/06/19 13:43:44 " png_set_expand_16 "
2018/06/19 13:43:44 " NOTE: prior to 1.7 libpng does SET_EXPAND as well, so tRNS is expanded. "
2018/06/19 13:43:44 " Expect expand_16 to expand everything to 16 bits as a result of also\n    * causing 'expand' to happen.\n    "
2018/06/19 13:43:44 "!for background"
2018/06/19 13:43:44 " expand_16 does something unless the bit depth is already 16. "
2018/06/19 13:43:44 " PNG_READ_EXPAND_16_SUPPORTED "
2018/06/19 13:43:44 " API added in 1.5.4 \n png_set_scale_16 "
2018/06/19 13:43:44 " libpng will limit the gamma table size: "
2018/06/19 13:43:44 " PNG_READ_SCALE_16_TO_8_SUPPORTED (1.5.4 on) "
2018/06/19 13:43:44 " the default before 1.5.4 \n png_set_strip_16 "
2018/06/19 13:43:44 " libpng will limit the gamma table size: "
2018/06/19 13:43:44 " Prior to 1.5.4 png_set_strip_16 would use an 'accurate' method if this\n       * configuration option is set.  From 1.5.4 the flag is never set and the\n       * 'scale' API (above) must be used.\n       "
2018/06/19 13:43:44 " The strip 16 algorithm drops the low 8 bits rather than calculating\n          * 1/257, so we need to adjust the permitted errors appropriately:\n          * Notice that this is only relevant prior to the addition of the\n          * png_set_scale_16 API in 1.5.4 (but 1.5.4+ always defines the above!)\n          "
2018/06/19 13:43:44 " PNG_READ_16_TO_8_SUPPORTED "
2018/06/19 13:43:44 " png_set_strip_alpha "
2018/06/19 13:43:44 " PNG_READ_STRIP_ALPHA_SUPPORTED "
2018/06/19 13:43:44 " png_set_rgb_to_gray(png_structp, int err_action, double red, double green)\n * png_set_rgb_to_gray_fixed(png_structp, int err_action, png_fixed_point red,\n *    png_fixed_point green)\n * png_get_rgb_to_gray_status\n *\n * The 'default' test here uses values known to be used inside libpng prior to\n * 1.7.0:\n *\n *   red:    6968\n *   green: 23434\n *   blue:   2366\n *\n * These values are being retained for compatibility, along with the somewhat\n * broken truncation calculation in the fast-and-inaccurate code path.  Older\n * versions of libpng will fail the accuracy tests below because they use the\n * truncation algorithm everywhere.\n "
2018/06/19 13:43:44 " File gamma to use in processing "
2018/06/19 13:43:44 " The following are the parameters for png_set_rgb_to_gray: "
2018/06/19 13:43:44 " The actual coefficients: "
2018/06/19 13:43:44 " Set if the coeefficients have been overridden. "
2018/06/19 13:43:44 " Since we check the encoding this flag must be set: "
2018/06/19 13:43:44 " If 'e' is not NULL chromaticity information is present and either a cHRM\n    * or an sRGB chunk will be inserted.\n    "
2018/06/19 13:43:44 " Coefficients come from the encoding, but may need to be normalized to a\n       * white point Y of 1.0\n       "
2018/06/19 13:43:44 " The default (built in) coeffcients, as above: "
2018/06/19 13:43:44 " If not set then the calculations assume linear encoding (implicitly): "
2018/06/19 13:43:44 " The arguments to png_set_rgb_to_gray can override the coefficients implied\n    * by the color space encoding.  If doing exhaustive checks do the override\n    * in each case, otherwise do it randomly.\n    "
2018/06/19 13:43:44 " First time in coefficients_overridden is 0, the following sets it to 1,\n       * so repeat if it is set.  If a test fails this may mean we subsequently\n       * skip a non-override test, ignore that.\n       "
2018/06/19 13:43:44 " These values override the color encoding defaults, simply use random\n       * numbers.\n       "
2018/06/19 13:43:44 " The following just changes the error messages: "
2018/06/19 13:43:44 " Adjust the error limit in the png_modifier because of the larger errors\n    * produced in the digitization during the gamma handling.\n    "
2018/06/19 13:43:44 " Use gamma tables "
2018/06/19 13:43:44 " The computations have the form:\n          *\n          *    r * rc + g * gc + b * bc\n          *\n          *  Each component of which is +/-1/65535 from the gamma_to_1 table\n          *  lookup, resulting in a base error of +/-6.  The gamma_from_1\n          *  conversion adds another +/-2 in the 16-bit case and\n          *  +/-(1<<(15-PNG_MAX_GAMMA_8)) in the 8-bit case.\n          "
2018/06/19 13:43:44 " Rounding to 8 bits in the linear space causes massive errors which\n          * will trigger the error check in transform_range_check.  Fix that\n          * here by taking the gamma encoding into account.\n          *\n          * When DIGITIZE is set because a pre-1.7 version of libpng is being\n          * tested allow a bigger slack.\n          *\n          * NOTE: this number only affects the internal limit check in pngvalid,\n          * it has no effect on the limits applied to the libpng values.\n          "
2018/06/19 13:43:44 " With no gamma correction a large error comes from the truncation of the\n       * calculation in the 8 bit case, allow for that here.\n       "
2018/06/19 13:43:44 " no error, no defines in png.h "
2018/06/19 13:43:44 " We have an encoding so a cHRM chunk may have been set; if so then\n          * check that the libpng APIs give the correct (X,Y,Z) values within\n          * some margin of error for the round trip through the chromaticity\n          * form.\n          "
2018/06/19 13:43:44 " Expect libpng to return a normalized result, but the original\n             * color space encoding may not be normalized.\n             "
2018/06/19 13:43:44 " Sanity check the pngvalid code - the coefficients should match\n             * the normalized Y values of the encoding unless they were\n             * overridden.\n             "
2018/06/19 13:43:44 " Generate a colour space encoding. \n not used "
2018/06/19 13:43:44 " This should match the original one from the png_modifier, within\n             * the range permitted by the libpng fixed point representation.\n             "
2018/06/19 13:43:44 " Set to element name with error "
2018/06/19 13:43:44 " Here in both fixed and floating cases to check the values read\n             * from the cHRm chunk.  PNG uses fixed point in the cHRM chunk, so\n             * we can't expect better than +/-.5E-5 on the result, allow 1E-5.\n             "
2018/06/19 13:43:44 " Print the color space without the gamma value: "
2018/06/19 13:43:44 " READ_cHRM "
2018/06/19 13:43:44 " Image now has RGB channels... "
2018/06/19 13:43:44 " Do this using interval arithmetic, otherwise it is too difficult to\n          * handle the errors correctly.\n          *\n          * To handle the gamma correction work out the upper and lower bounds\n          * of the digitized value.  Assume rounding here - normally the values\n          * will be identical after this operation if there is only one\n          * transform, feel free to delete the png_error checks on this below in\n          * the future (this is just me trying to ensure it works!)\n          *\n          * Interval arithmetic is exact, but to implement it it must be\n          * possible to control the floating point implementation rounding mode.\n          * This cannot be done in ANSI-C, so instead I reduce the 'lo' values\n          * by DBL_EPSILON and increase the 'hi' values by the same.\n          "
2018/06/19 13:43:44 "round"
2018/06/19 13:43:44 "round"
2018/06/19 13:43:44 "round"
2018/06/19 13:43:44 "round"
2018/06/19 13:43:44 "round"
2018/06/19 13:43:44 "round"
2018/06/19 13:43:44 " If a gamma calculation is done it is done using lookup tables of\n             * precision gamma_depth, so the already digitized value above may\n             * need to be further digitized here.\n             "
2018/06/19 13:43:44 "truncate\ntruncate\ntruncate\ntruncate\ntruncate\ntruncate"
2018/06/19 13:43:44 " 'abse' is the error in the gamma table calculation itself. "
2018/06/19 13:43:44 " Now calculate the actual gray values.  Although the error in the\n          * coefficients depends on whether they were specified on the command\n          * line (in which case truncation to 15 bits happened) or not (rounding\n          * was used) the maxium error in an individual coefficient is always\n          * 2/32768, because even in the rounding case the requirement that\n          * coefficients add up to 32768 can cause a larger rounding error.\n          *\n          * The only time when rounding doesn't occur in 1.5.5 and later is when\n          * the non-gamma code path is used for less than 16 bit data.\n          "
2018/06/19 13:43:44 " always accept the right answer "
2018/06/19 13:43:44 " And invert the gamma. "
2018/06/19 13:43:44 " And this happens yet again, shifting the values once more. "
2018/06/19 13:43:44 "truncate\ntruncate\ntruncate\ntruncate\ntruncate\ntruncate"
2018/06/19 13:43:44 " Now the error can be calculated.\n          *\n          * If r==g==b because there is no overall gamma correction libpng\n          * currently preserves the original value.\n          "
2018/06/19 13:43:44 " Check that this worked: "
2018/06/19 13:43:44 " !RELEASE_BUILD "
2018/06/19 13:43:44 " !DIGITIZE "
2018/06/19 13:43:44 " The true gray case involves no math in earlier versions (not\n             * true, there was some if gamma correction was happening too.)\n             "
2018/06/19 13:43:44 " before 1.7 "
2018/06/19 13:43:44 " There is no need to do the conversions to and from linear space,\n             * so the calculation should be a lot more accurate.  There is a\n             * built in error in the coefficients because they only have 15 bits\n             * and are adjusted to make sure they add up to 32768.  This\n             * involves a integer calculation with truncation of the form:\n             *\n             *     ((int)(coefficient * 100000) * 32768)/100000\n             *\n             * This is done to the red and green coefficients (the ones\n             * provided to the API) then blue is calculated from them so the\n             * result adds up to 32768.  In the worst case this can result in\n             * a -1 error in red and green and a +2 error in blue.  Consequently\n             * the worst case in the calculation below is 2/32768 error.\n             *\n             * TODO: consider fixing this in libpng by rounding the calculation\n             * limiting the error to 1/32768.\n             *\n             * Handling this by adding 2/32768 here avoids needing to increase\n             * the global error limits to take this into account.)\n             "
2018/06/19 13:43:44 " The calculation happens in linear space, and this produces much\n             * wider errors in the encoded space.  These are handled here by\n             * factoring the errors in to the calculation.  There are two table\n             * lookups in the calculation and each introduces a quantization\n             * error defined by the table size.\n             "
2018/06/19 13:43:44 " Work out the lower and upper bounds for the gray value in the\n             * encoded space, then work out an average and error.  Remove the\n             * previously added input quantization error at this point.\n             "
2018/06/19 13:43:44 " Validate that the error is within limits (this has caused\n             * problems before, it's much easier to detect them here.)\n             "
2018/06/19 13:43:44 " !RELEASE_BUILD "
2018/06/19 13:43:44 " !DIGITIZE "
2018/06/19 13:43:44 " The sBIT is the minium of the three colour channel sBITs. "
2018/06/19 13:43:44 " And remove the colour bit in the type: "
2018/06/19 13:43:44 " PNG_READ_RGB_TO_GRAY_SUPPORTED "
2018/06/19 13:43:44 " png_set_background(png_structp, png_const_color_16p background_color,\n *    int background_gamma_code, int need_expand, double background_gamma)\n * png_set_background_fixed(png_structp, png_const_color_16p background_color,\n *    int background_gamma_code, int need_expand,\n *    png_fixed_point background_gamma)\n *\n * This ignores the gamma (at present.)\n"
2018/06/19 13:43:44 " 8 bytes - 64 bits - the biggest pixel "
2018/06/19 13:43:44 " We need a background colour, because we don't know exactly what transforms\n    * have been set we have to supply the colour in the original file format and\n    * so we need to know what that is!  The background colour is stored in the\n    * transform_display.\n    "
2018/06/19 13:43:44 " Read the random value, for colour type 3 the background colour is actually\n    * expressed as a 24bit rgb, not an index.\n    "
2018/06/19 13:43:44 " passing in an RGB not a pixel index "
2018/06/19 13:43:44 "x\nunused: palette\nformat"
2018/06/19 13:43:44 " Extract the background colour from this image_pixel, but make sure the\n    * unused fields of 'back' are garbage.\n    "
2018/06/19 13:43:44 " Check for tRNS first: "
2018/06/19 13:43:44 "for background"
2018/06/19 13:43:44 " This is only necessary if the alpha value is less than 1. "
2018/06/19 13:43:44 " Now we do the background calculation without any gamma correction. "
2018/06/19 13:43:44 " 0 < alpha < 1 "
2018/06/19 13:43:44 " Remove the alpha type and set the alpha (not in that order.) "
2018/06/19 13:43:44 " PNG_COLOR_TYPE_PALETTE is not changed "
2018/06/19 13:43:44 " PNG_READ_BACKGROUND_SUPPORTED "
2018/06/19 13:43:44 " png_set_quantize(png_structp, png_colorp palette, int num_palette,\n *    int maximum_colors, png_const_uint_16p histogram, int full_quantize)\n *\n * Very difficult to validate this!\n "
2018/06/19 13:43:44 "NOTE: TBD NYI "
2018/06/19 13:43:44 " The data layout transforms are handled by swapping our own channel data,\n * necessarily these need to happen at the end of the transform list because the\n * semantic of the channels changes after these are executed.  Some of these,\n * like set_shift and set_packing, can't be done at present because they change\n * the layout of the data at the sub-sample level so sample() won't get the\n * right answer.\n "
2018/06/19 13:43:44 " png_set_invert_alpha "
2018/06/19 13:43:44 " Invert the alpha channel\n *\n *  png_set_invert_alpha(png_structrp png_ptr)\n "
2018/06/19 13:43:44 " Only has an effect on pixels with alpha: "
2018/06/19 13:43:44 " PNG_READ_INVERT_ALPHA_SUPPORTED "
2018/06/19 13:43:44 " png_set_bgr "
2018/06/19 13:43:44 " Swap R,G,B channels to order B,G,R.\n *\n *  png_set_bgr(png_structrp png_ptr)\n *\n * This only has an effect on RGB and RGBA pixels.\n "
2018/06/19 13:43:44 " PNG_READ_BGR_SUPPORTED "
2018/06/19 13:43:44 " png_set_swap_alpha "
2018/06/19 13:43:44 " Put the alpha channel first.\n *\n *  png_set_swap_alpha(png_structrp png_ptr)\n *\n * This only has an effect on GA and RGBA pixels.\n "
2018/06/19 13:43:44 " PNG_READ_SWAP_ALPHA_SUPPORTED "
2018/06/19 13:43:44 " png_set_swap "
2018/06/19 13:43:44 " Byte swap 16-bit components.\n *\n *  png_set_swap(png_structrp png_ptr)\n "
2018/06/19 13:43:44 " PNG_READ_SWAP_SUPPORTED "
2018/06/19 13:43:44 " Add a filler byte to 8-bit Gray or 24-bit RGB images.\n *\n *  png_set_filler, (png_structp png_ptr, png_uint_32 filler, int flags));\n *\n * Flags:\n *\n *  PNG_FILLER_BEFORE\n *  PNG_FILLER_AFTER\n "
2018/06/19 13:43:44 " Need a random choice for 'before' and 'after' as well as for the\n    * filler.  The 'filler' value has all 32 bits set, but only bit_depth\n    * will be used.  At this point we don't know bit_depth.\n    "
2018/06/19 13:43:44 " The standard display handling stuff also needs to know that\n    * there is a filler, so set that here.\n    "
2018/06/19 13:43:44 " The filler has been stored in the alpha channel, we must record\n       * that this has been done for the checking later on, the color\n       * type is faked to have an alpha channel, but libpng won't report\n       * this; the app has to know the extra channel is there and this\n       * was recording in standard_display::filler above.\n       "
2018/06/19 13:43:44 " alpha added "
2018/06/19 13:43:44 " png_set_add_alpha, (png_structp png_ptr, png_uint_32 filler, int flags)); \n Add an alpha byte to 8-bit Gray or 24-bit RGB images. "
2018/06/19 13:43:44 " Need a random choice for 'before' and 'after' as well as for the\n    * filler.  The 'filler' value has all 32 bits set, but only bit_depth\n    * will be used.  At this point we don't know bit_depth.\n    "
2018/06/19 13:43:44 " alpha added "
2018/06/19 13:43:44 " PNG_READ_FILLER_SUPPORTED "
2018/06/19 13:43:44 " png_set_packing "
2018/06/19 13:43:44 " Use 1 byte per pixel in 1, 2, or 4-bit depth files.\n *\n *  png_set_packing(png_structrp png_ptr)\n *\n * This should only affect grayscale and palette images with less than 8 bits\n * per pixel.\n "
2018/06/19 13:43:44 " The general expand case depends on what the colour type is,\n    * low bit-depth pixel values are unpacked into bytes without\n    * scaling, so sample_depth is not changed.\n    "
2018/06/19 13:43:44 " grayscale or palette "
2018/06/19 13:43:44 " Nothing should happen unless the bit depth is less than 8: "
2018/06/19 13:43:44 " PNG_READ_PACK_SUPPORTED "
2018/06/19 13:43:44 " png_set_packswap "
2018/06/19 13:43:44 " Swap pixels packed into bytes; reverses the order on screen so that\n * the high order bits correspond to the rightmost pixels.\n *\n *  png_set_packswap(png_structrp png_ptr)\n "
2018/06/19 13:43:44 " PNG_READ_PACKSWAP_SUPPORTED "
2018/06/19 13:43:44 " png_set_invert_mono "
2018/06/19 13:43:44 " Invert the gray channel\n *\n *  png_set_invert_mono(png_structrp png_ptr)\n "
2018/06/19 13:43:44 " Only has an effect on pixels with no colour: "
2018/06/19 13:43:44 " PNG_READ_INVERT_MONO_SUPPORTED "
2018/06/19 13:43:44 " png_set_shift(png_structp, png_const_color_8p true_bits)\n *\n * The output pixels will be shifted by the given true_bits\n * values.\n "
2018/06/19 13:43:44 " Get a random set of shifts.  The shifts need to do something\n    * to test the transform, so they are limited to the bit depth\n    * of the input image.  Notice that in the following the 'gray'\n    * field is randomized independently.  This acts as a check that\n    * libpng does use the correct field.\n    "
2018/06/19 13:43:44 "SAFE\nSAFE\nSAFE\nSAFE\nSAFE"
2018/06/19 13:43:44 " Copy the correct values into the sBIT fields, libpng does not do\n    * anything to palette data:\n    "
2018/06/19 13:43:44 " The sBIT fields are reset to the values previously sent to\n        * png_set_shift according to the colour type.\n        * does.\n        "
2018/06/19 13:43:44 " RGB channels "
2018/06/19 13:43:44 " One grey channel "
2018/06/19 13:43:44 " PNG_READ_SHIFT_SUPPORTED "
2018/06/19 13:43:44 " This may just be 'end' if all the transforms are disabled! "
2018/06/19 13:43:44 " Everything starts out enabled, so if we see an 'enable' disabled\n    * everything else the first time round.\n    "
2018/06/19 13:43:44 " This can only happen if we every have more than 32 transforms (excluding\n    * the end) in the list.\n    "
2018/06/19 13:43:44 " Test the list to see if there is any point contining, given a current\n    * counter and a 'max' value.\n    "
2018/06/19 13:43:44 " For max 0 or 1 continue until the counter overflows: "
2018/06/19 13:43:44 " Continue if any entry hasn't reacked the max. "
2018/06/19 13:43:44 " until we manage to add something "
2018/06/19 13:43:44 " Find the next counter value, if the counter is zero this is the start\n       * of the list.  This routine always returns the current counter (not the\n       * next) so it returns 0 at the end and expects 0 at the beginning.\n       "
2018/06/19 13:43:44 " first time "
2018/06/19 13:43:44 " advance the counter "
2018/06/19 13:43:44 " Now add all these items, if possible "
2018/06/19 13:43:44 " Go through the whole list adding anything that the counter selects: "
2018/06/19 13:43:44 " Candidate to add: "
2018/06/19 13:43:44 " Added, so add to the name too. "
2018/06/19 13:43:44 " Not useful and max>0, so remove it from *this: "
2018/06/19 13:43:44 " And, since we know it isn't useful, stop it being added again\n                * in this run:\n                "
2018/06/19 13:43:44 " Now if anything was added we have something to do. "
2018/06/19 13:43:44 " Nothing added, but was there anything in there to add? "
2018/06/19 13:43:44 " 'max' is currently hardwired to '1'; this should be settable on the\n          * command line.\n          "
2018/06/19 13:43:44 "max"
2018/06/19 13:43:44 " The command line can change this to checking interlaced images. "
2018/06/19 13:43:44 " PNG_READ_TRANSFORMS_SUPPORTED "
2018/06/19 13:43:44 "******************************** GAMMA TESTS *******************************"
2018/06/19 13:43:44 " Reader callbacks and implementations, where they differ from the standard\n * ones.\n "
2018/06/19 13:43:44 " Parameters "
2018/06/19 13:43:44 " Local variables "
2018/06/19 13:43:44 " Standard fields "
2018/06/19 13:43:44 " Parameter fields "
2018/06/19 13:43:44 " Local variable fields "
2018/06/19 13:43:44 " Reuse the standard stuff as appropriate. "
2018/06/19 13:43:44 " If requested strip 16 to 8 bits - this is handled automagically below\n    * because the output bit depth is read from the library.  Note that there\n    * are interactions with sBIT but, internally, libpng makes sbit at most\n    * PNG_MAX_GAMMA_8 prior to 1.7 when doing the following.\n    "
2018/06/19 13:43:44 " The following works both in 1.5.4 and earlier versions: "
2018/06/19 13:43:44 " This tests the alpha mode handling, if supported. "
2018/06/19 13:43:44 " The gamma value is the output gamma, and is in the standard,\n          * non-inverted, represenation.  It provides a default for the PNG file\n          * gamma, but since the file has a gAMA chunk this does not matter.\n          "
2018/06/19 13:43:44 " However, for the standard Porter-Duff algorithm the output defaults\n          * to be linear, so if the test requires non-linear output it must be\n          * corrected here.\n          "
2018/06/19 13:43:44 " Set up gamma processing. "
2018/06/19 13:43:44 " NOTE: this assumes the caller provided the correct background gamma!\n          "
2018/06/19 13:43:44 "need_expand"
2018/06/19 13:43:44 "need_expand"
2018/06/19 13:43:44 " Always do one call, even if use_update_info is 0. "
2018/06/19 13:43:44 " Now we may get a different cbRow: \nimages"
2018/06/19 13:43:44 " Validate a single component value - the routine gets the input and output\n * sample values as unscaled PNG component values along with a cache of all the\n * information required to validate the values.\n "
2018/06/19 13:43:44 " Overall correction required. \n Inverse of file gamma. "
2018/06/19 13:43:44 " Inverse of screen gamma. "
2018/06/19 13:43:44 " Linear background value, red or gray. "
2018/06/19 13:43:44 " Total including quantization error "
2018/06/19 13:43:44 " This mimics the libpng threshold test, '0' is used to prevent gamma\n    * correction in the validation test.\n    "
2018/06/19 13:43:44 " Caller must at least put the gray value into the red channel "
2018/06/19 13:43:44 " libpng doesn't do this optimization, if we do pngvalid will fail.\n          "
2018/06/19 13:43:44 " Do not expect any background processing "
2018/06/19 13:43:44 " This function handles composition of a single non-alpha component.  The\n * argument is the input sample value, in the range 0..1, and the alpha value.\n * The result is the composed, linear, input sample.  If alpha is less than zero\n * this is the alpha component and the function should not be called!\n "
2018/06/19 13:43:44 " Standard PNG background processing. "
2018/06/19 13:43:44 " The components are premultiplied in either case and the output is\n          * gamma encoded (to get standard Porter-Duff we expect the output\n          * gamma to be set to 1.0!)\n          "
2018/06/19 13:43:44 " The optimization is that the partial-alpha entries are linear\n          * while the opaque pixels are gamma encoded, but this only affects the\n          * output encoding.\n          "
2018/06/19 13:43:44 " Standard cases where no compositing is done (so the component\n          * value is already correct.)\n          "
2018/06/19 13:43:44 " This API returns the encoded *input* component, in the range 0..1 "
2018/06/19 13:43:44 " <0 for the alpha channel itself \n component background value "
2018/06/19 13:43:44 " First check on the 'perfect' result obtained from the digitized input\n    * value, id, and compare this against the actual digitized result, 'od'.\n    * 'i' is the input result in the range 0..1:\n    "
2018/06/19 13:43:44 " Check for the fast route: if we don't do any background composition or if\n    * this is the alpha channel ('alpha' < 0) or if the pixel is opaque then\n    * just use the gamma_correction field to correct to the final output gamma.\n    "
2018/06/19 13:43:44 " opaque pixel component "
2018/06/19 13:43:44 " alpha channel "
2018/06/19 13:43:44 " Then get the gamma corrected version of 'i' and compare to 'od', any\n       * error less than .5 is insignificant - just quantization of the output\n       * value to the nearest digital value (nevertheless the error is still\n       * recorded - it's interesting ;-)\n       "
2018/06/19 13:43:44 " alpha less than 0 indicates the alpha channel, which is always linear\n       "
2018/06/19 13:43:44 " The slow route - attempt to do linear calculations. \n There may be an error, or background processing is required, so calculate\n    * the actual sample values - unencoded light intensity values.  Note that in\n    * practice these are not completely unencoded because they include a\n    * 'viewing correction' to decrease or (normally) increase the perceptual\n    * contrast of the image.  There's nothing we can do about this - we don't\n    * know what it is - so assume the unencoded value is perceptually linear.\n    "
2018/06/19 13:43:44 " In range 0..1 "
2018/06/19 13:43:44 " Set to one if composition done \n Set if encoded to screen gamma \n Check maximum error values \n Reason test passes (or 0 for fail) "
2018/06/19 13:43:44 " Convert to linear light (with the above caveat.)  The alpha channel is\n       * already linear.\n       "
2018/06/19 13:43:44 " Handle the compose processing: "
2018/06/19 13:43:44 " And similarly for the output value, but we need to check the background\n       * handling to linearize it correctly.\n       "
2018/06/19 13:43:44 " The alpha channel "
2018/06/19 13:43:44 " In all other cases the output alpha channel is linear already,\n             * don't log errors here, they are much larger in linear data.\n             "
2018/06/19 13:43:44 " A component "
2018/06/19 13:43:44 " the optimized case - linear output "
2018/06/19 13:43:44 " Calculate (or recalculate) the encoded_sample value and repeat the\n       * check above (unnecessary if we took the fast route, but harmless.)\n       "
2018/06/19 13:43:44 " Don't log errors in the alpha channel, or the 'optimized' case,\n       * neither are significant to the overall perception.\n       "
2018/06/19 13:43:44 " Test passed but error is bigger than the log limit, record why the\n          * test passed:\n          "
2018/06/19 13:43:44 " i: the original input value in the range 0..1\n       *\n       * pngvalid calculations:\n       *  input_sample: linear result; i linearized and composed, range 0..1\n       *  encoded_sample: encoded result; input_sample scaled to ouput bit depth\n       *\n       * libpng calculations:\n       *  output: linear result; od scaled to 0..1 and linearized\n       *  od: encoded result from libpng\n       "
2018/06/19 13:43:44 " Now we have the numbers for real errors, both absolute values as as a\n       * percentage of the correct value (output):\n       "
2018/06/19 13:43:44 " The following is an attempt to ignore the tendency of quantization to\n       * dominate the percentage errors for lower result values:\n       "
2018/06/19 13:43:44 " Now calculate the digitization limits for 'encoded_sample' using the\n       * 'max' values.  Note that maxout is in the encoded space but maxpc and\n       * maxabs are in linear light space.\n       *\n       * First find the maximum error in linear light space, range 0..1:\n       "
2018/06/19 13:43:44 " If 'compose' is true the composition was done in linear space using\n          * integer arithmetic.  This introduces an extra error of +/- 0.5 (at\n          * least) in the integer space used.  'maxcalc' records this, taking\n          * into account the possibility that even for 16 bit output 8 bit space\n          * may have been used.\n          "
2018/06/19 13:43:44 " The 'maxout' value refers to the encoded result, to compare with\n          * this encode input_sample adjusted by the maximum error (tmp) above.\n          "
2018/06/19 13:43:44 " Quantize this appropriately: "
2018/06/19 13:43:44 " The primary test is that the final encoded value returned by the\n       * library should be between the two limits (inclusive) that were\n       * calculated above.\n       "
2018/06/19 13:43:44 " The value passes, but we may need to log the information anyway. "
2018/06/19 13:43:44 " There has been an error in processing, or we need to log this\n          * value.\n          "
2018/06/19 13:43:44 " pass is set at this point if either of the tests above would have\n          * passed.  Don't do these additional tests here - just log the\n          * original [es_lo..es_hi] values.\n          "
2018/06/19 13:43:44 " Ok, something is wrong - this actually happens in current libpng\n             * 16-to-8 processing.  Assume that the input value (id, adjusted\n             * for sbit) can be anywhere between value-.5 and value+.5 - quite a\n             * large range if sbit is low.\n             *\n             * NOTE: at present because the libpng gamma table stuff has been\n             * changed to use a rounding algorithm to correct errors in 8-bit\n             * calculations the precise sbit calculation (a shift) has been\n             * lost.  This can result in up to a +/-1 error in the presence of\n             * an sbit less than the bit depth.\n             "
2018/06/19 13:43:44 " One last chance.  If this is an alpha channel and the 16to8\n             * option has been used and 'inaccurate' scaling is used then the\n             * bit reduction is obtained by simply using the top 8 bits of the\n             * value.\n             *\n             * This is only done for older libpng versions when the 'inaccurate'\n             * (chop) method of scaling was used.\n             "
2018/06/19 13:43:44 " This may be required for other components in the future,\n                   * but at present the presence of gamma correction effectively\n                   * prevents the errors in the component scaling (I don't quite\n                   * understand why, but since it's better this way I care not\n                   * to ask, JB 20110419.)\n                   "
2018/06/19 13:43:44 " !use_input_precision "
2018/06/19 13:43:44 " Attempt to output a meaningful error/warning message: the message\n          * output depends on the background/composite operation being performed\n          * because this changes what parameters were actually used above.\n          "
2018/06/19 13:43:44 " Need either 1/255 or 1/65535 precision here; 3 or 6 decimal\n             * places.  Just use outmax to work out which.\n             "
2018/06/19 13:43:44 " Set up the various flags, the output_is_encoded flag above\n             * is also used below.  do_compose is just a double check.\n             "
2018/06/19 13:43:44 " FALLTHROUGH "
2018/06/19 13:43:44 " ALPHA_MODE_SUPPORTED "
2018/06/19 13:43:44 " Check the 'compose' flag "
2018/06/19 13:43:44 " 'name' is the component name "
2018/06/19 13:43:44 "logging"
2018/06/19 13:43:44 " sBIT has reduced the precision of the input: "
2018/06/19 13:43:44 " The output is either \"id/max\" or \"id sbit(sbit): isbit/max\" "
2018/06/19 13:43:44 " A component may have been multiplied (in linear space) by the\n             * alpha value, 'compose' says whether this is relevant.\n             "
2018/06/19 13:43:44 " If any form of composition is being done report our\n                * calculated linear value here (the code above doesn't record\n                * the input value before composition is performed, so what\n                * gets reported is the value after composition.)\n                "
2018/06/19 13:43:44 " Now record the *linear* background value if it was used\n                * (this function is not passed the original, non-linear,\n                * value but it is contained in the test name.)\n                "
2018/06/19 13:43:44 " Report the calculated value (input_sample) and the linearized\n             * libpng value (output) unless this is just a component gamma\n             * correction.\n             "
2018/06/19 13:43:44 " Finally report the output gamma encoding, if any. "
2018/06/19 13:43:44 " logging "
2018/06/19 13:43:44 " This is the non-composition case, the internal linear\n                * values are irrelevant (though the log below will reveal\n                * them.)  Output a much shorter warning/error message and report\n                * the overall gamma correction.\n                "
2018/06/19 13:43:44 " This is our calculated encoded_sample which should (but does\n             * not) match od:\n             "
2018/06/19 13:43:44 " The error condition "
2018/06/19 13:43:44 " logging this value "
2018/06/19 13:43:44 " Get some constants derived from the input and output file formats: "
2018/06/19 13:43:44 " There are three sources of error, firstly the quantization in the\n    * file encoding, determined by sbit and/or the file depth, secondly\n    * the output (screen) gamma and thirdly the output file encoding.\n    *\n    * Since this API receives the screen and file gamma in double\n    * precision it is possible to calculate an exact answer given an input\n    * pixel value.  Therefore we assume that the *input* value is exact -\n    * sample/maxsample - calculate the corresponding gamma corrected\n    * output to the limits of double precision arithmetic and compare with\n    * what libpng returns.\n    *\n    * Since the library must quantize the output to 8 or 16 bits there is\n    * a fundamental limit on the accuracy of the output of +/-.5 - this\n    * quantization limit is included in addition to the other limits\n    * specified by the paramaters to the API.  (Effectively, add .5\n    * everywhere.)\n    *\n    * The behavior of the 'sbit' paramter is defined by section 12.5\n    * (sample depth scaling) of the PNG spec.  That section forces the\n    * decoder to assume that the PNG values have been scaled if sBIT is\n    * present:\n    *\n    *     png-sample = floor( input-sample * (max-out/max-in) + .5);\n    *\n    * This means that only a subset of the possible PNG values should\n    * appear in the input. However, the spec allows the encoder to use a\n    * variety of approximations to the above and doesn't require any\n    * restriction of the values produced.\n    *\n    * Nevertheless the spec requires that the upper 'sBIT' bits of the\n    * value stored in a PNG file be the original sample bits.\n    * Consequently the code below simply scales the top sbit bits by\n    * (1<<sbit)-1 to obtain an original sample value.\n    *\n    * Because there is limited precision in the input it is arguable that\n    * an acceptable result is any valid result from input-.5 to input+.5.\n    * The basic tests below do not do this, however if 'use_input_precision'\n    * is set a subsequent test is performed above.\n    "
2018/06/19 13:43:44 " Just refers to the palette case "
2018/06/19 13:43:44 " Check for row overwrite errors "
2018/06/19 13:43:44 " Supply the input and output sample depths here - 8 for an indexed image,\n    * otherwise the bit depth.\n    "
2018/06/19 13:43:44 " TODO: FIX THIS: MAJOR BUG!  If the transformations all happen inside\n    * the palette there is no way of finding out, because libpng fails to\n    * update the palette on png_read_update_info.  Indeed, libpng doesn't\n    * even do the required work until much later, when it doesn't have any\n    * info pointer.  Oops.  For the moment 'processing' is turned off if\n    * out_ct is palette.\n    "
2018/06/19 13:43:44 " serves as a flag value "
2018/06/19 13:43:44 " Record the palette index for index images. "
2018/06/19 13:43:44 " Handle input alpha - png_set_background will cause the output\n             * alpha to disappear so there is nothing to check.\n             "
2018/06/19 13:43:44 " as a flag value "
2018/06/19 13:43:44 "alpha\nbackground"
2018/06/19 13:43:44 " no alpha in output "
2018/06/19 13:43:44 " This is a copy of the calculation of 'i' above in order to\n                   * have the alpha value to use in the background calculation.\n                   "
2018/06/19 13:43:44 " alpha needs to be set appropriately for this pixel, it is\n                * currently 1 and needs to be 0 for an input pixel which matches\n                * the values in tRNS.\n                "
2018/06/19 13:43:44 " gray "
2018/06/19 13:43:44 " RGB "
2018/06/19 13:43:44 " Handle grayscale or RGB components. \n grayscale "
2018/06/19 13:43:44 "component\n RGB or palette "
2018/06/19 13:43:44 "component"
2018/06/19 13:43:44 "component"
2018/06/19 13:43:44 "component"
2018/06/19 13:43:44 " No transform is expected on the threshold tests. "
2018/06/19 13:43:44 " row (y) loop "
2018/06/19 13:43:44 " A single test run checking a gamma transformation.\n *\n * maxabs: maximum absolute error as a fraction\n * maxout: maximum output error in the output units\n * maxpc:  maximum percentage error (as a percentage)\n "
2018/06/19 13:43:44 " For the moment don't use the png_modifier support here. "
2018/06/19 13:43:44 " Just resets everything "
2018/06/19 13:43:44 " Make an appropriate modifier to set the PNG file gamma to the\n       * given gamma value and the sBIT chunk to the given precision.\n       "
2018/06/19 13:43:44 "delete"
2018/06/19 13:43:44 " Get a png_struct for reading the image. "
2018/06/19 13:43:44 " Introduce the correct read function. "
2018/06/19 13:43:44 " Share the row function with the standard implementation. "
2018/06/19 13:43:44 " Now feed data into the reader until we reach the end: "
2018/06/19 13:43:44 " modifier_read expects a png_modifier* "
2018/06/19 13:43:44 " Check the header values: "
2018/06/19 13:43:44 " Process the 'info' requirements. Only one image is generated "
2018/06/19 13:43:44 " Log the summary values too. "
2018/06/19 13:43:44 "palette\nsBIT\nthreshold test\nno input precision\nno scale16\nno expand16\nno background\nhence\nno background gamma"
2018/06/19 13:43:44 " Don't test more than one instance of each palette - it's pointless, in\n    * fact this test is somewhat excessive since libpng doesn't make this\n    * decision based on colour type or bit depth!\n    *\n    * CHANGED: now test two palettes and, as a side effect, images with and\n    * without tRNS.\n    "
2018/06/19 13:43:44 " There's little point testing the interlacing vs non-interlacing,\n          * but this can be set from the command line.\n          "
2018/06/19 13:43:44 " And a special test for sRGB "
2018/06/19 13:43:44 "sBIT\ndo not scale16"
2018/06/19 13:43:44 " The only interesting cases are colour and grayscale, alpha is ignored here\n    * for overall speed.  Only bit depths where sbit is less than the bit depth\n    * are tested.\n    "
2018/06/19 13:43:44 "scale16"
2018/06/19 13:43:44 " Note that this requires a 16 bit source image but produces 8 bit output, so\n * we only need the 16bit write support, but the 16 bit images are only\n * generated if DO_16BIT is defined.\n "
2018/06/19 13:43:44 " Include the alpha cases here. Note that sbit matches the internal value\n    * used by the library - otherwise we will get spurious errors from the\n    * internal sbit style approximation.\n    *\n    * The threshold test is here because otherwise the 16 to 8 conversion will\n    * proceed *without* gamma correction, and the tests above will fail (but not\n    * by much) - this could be fixed, it only appears with the -g option.\n    "
2018/06/19 13:43:44 "scale16"
2018/06/19 13:43:44 "scale16"
2018/06/19 13:43:44 "scale16"
2018/06/19 13:43:44 "scale16"
2018/06/19 13:43:44 " 16 to 8 bit conversion "
2018/06/19 13:43:44 " Make up a name and get an appropriate background gamma value. "
2018/06/19 13:43:44 " should not be used "
2018/06/19 13:43:44 " This tests the handling of a unique value, the math is such that the\n          * value tends to be <1, but is neither screen nor file (even if they\n          * match!)\n          "
2018/06/19 13:43:44 " should not be used "
2018/06/19 13:43:44 " should not be used "
2018/06/19 13:43:44 " should not be used "
2018/06/19 13:43:44 " should not be used "
2018/06/19 13:43:44 " Use random background values - the background is always presented in the\n    * output space (8 or 16 bit components).\n    "
2018/06/19 13:43:44 " In earlier libpng versions, those where DIGITIZE is set, any background\n       * gamma correction in the expand16 case was done using 8-bit gamma\n       * correction tables, resulting in larger errors.  To cope with those\n       * cases use a 16-bit background value which will handle this gamma\n       * correction.\n       "
2018/06/19 13:43:44 " The background values will be looked up in an 8-bit table to do\n             * the gamma correction, so only select values which are an exact\n             * match for the 8-bit table entries:\n             "
2018/06/19 13:43:44 " 8 bit colors "
2018/06/19 13:43:44 " rgb(193,193,193) to detect errors "
2018/06/19 13:43:44 " Because, currently, png_set_background is always called with\n       * 'need_expand' false in this case and because the gamma test itself\n       * doesn't cause an expand to 8-bit for lower bit depths the colour must\n       * be reduced to the correct range.\n       "
2018/06/19 13:43:44 " Grayscale input, we do not convert to RGB (TBD), so we must set the\n       * background to gray - else libpng seems to fail.\n       "
2018/06/19 13:43:44 " Include the background color and gamma in the name: "
2018/06/19 13:43:44 " This assumes no expand gray->rgb - the current code won't handle that!\n       "
2018/06/19 13:43:44 "sBIT\nstrip 16"
2018/06/19 13:43:44 " Skip the non-alpha cases - there is no setting of a transparency colour at\n    * present.\n    *\n    * TODO: incorrect; the palette case sets tRNS and, now RGB and gray do,\n    * however the palette case fails miserably so is commented out below.\n    "
2018/06/19 13:43:44 " TODO: FIXME \nTODO: FIXME: this should work "
2018/06/19 13:43:44 " Don't skip the i==j case here - it's relevant. "
2018/06/19 13:43:44 " READ_BACKGROUND || READ_ALPHA_MODE "
2018/06/19 13:43:44 " Use -1 to catch tests that were not actually run "
2018/06/19 13:43:44 "TODO: remove this\n Save certain values for the temporary overrides below. "
2018/06/19 13:43:44 " First some arbitrary no-transform tests: "
2018/06/19 13:43:44 " Now some real transforms. "
2018/06/19 13:43:44 "TODO: remove this.  Necessary because the current libpng\n       * implementation works in 8 bits:\n       "
2018/06/19 13:43:44 "who\nlow bit depth\nindexed"
2018/06/19 13:43:44 " The sbit tests produce much larger errors: "
2018/06/19 13:43:44 "indexed"
2018/06/19 13:43:44 " Should be READ_16BIT_SUPPORTED "
2018/06/19 13:43:44 " The 16 to 8 bit strip operations: "
2018/06/19 13:43:44 "TODO: remove this.  Necessary because the current libpng\n       * implementation works in 8 bits:\n       "
2018/06/19 13:43:44 " because the 16 bit background is smashed "
2018/06/19 13:43:44 "indexed"
2018/06/19 13:43:44 "TODO: remove this.  Necessary because the current libpng\n       * implementation works in 8 bits:\n       "
2018/06/19 13:43:44 "indexed"
2018/06/19 13:43:44 " PNG_READ_GAMMA_SUPPORTED \n PNG_READ_SUPPORTED "
2018/06/19 13:43:44 " INTERLACE MACRO VALIDATION \n This is copied verbatim from the specification, it is simply the pass\n * number in which each pixel in each 8x8 tile appears.  The array must\n * be indexed adam7[y][x] and notice that the pass numbers are based at\n * 1, not 0 - the base libpng uses.\n "
2018/06/19 13:43:44 " This routine validates all the interlace support macros in png.h for\n * a variety of valid PNG widths and heights.  It uses a number of similarly\n * named internal routines that feed off the above array.\n "
2018/06/19 13:43:44 " error - more than one 'inc' value! "
2018/06/19 13:43:44 " error - no row in pass! "
2018/06/19 13:43:44 " The shift is always 1, 2 or 3 - no pass has all the rows! "
2018/06/19 13:43:44 " error - unrecognized 'inc' "
2018/06/19 13:43:44 " error - more than one 'inc' value! "
2018/06/19 13:43:44 " error - no row in pass! "
2018/06/19 13:43:44 " The shift is always 1, 2 or 3 - no pass has all the rows! "
2018/06/19 13:43:44 " pass 7 has all the columns "
2018/06/19 13:43:44 " error - unrecognized 'inc' "
2018/06/19 13:43:44 " By examination of the array: "
2018/06/19 13:43:44 " bad pass number "
2018/06/19 13:43:44 " By examination of the array: "
2018/06/19 13:43:44 " bad pass number "
2018/06/19 13:43:44 " Is row 'y' in pass 'pass'? "
2018/06/19 13:43:44 " Is column 'x' in pass 'pass'? "
2018/06/19 13:43:44 " i.e. break the 'x', column, loop. "
2018/06/19 13:43:44 " i.e. break the 'y', row, loop. "
2018/06/19 13:43:44 " The macros to validate, first those that depend only on pass:\n    *\n    * PNG_PASS_START_ROW(pass)\n    * PNG_PASS_START_COL(pass)\n    * PNG_PASS_ROW_SHIFT(pass)\n    * PNG_PASS_COL_SHIFT(pass)\n    "
2018/06/19 13:43:44 " Macros that depend on the image or sub-image height too:\n       *\n       * PNG_PASS_ROWS(height, pass)\n       * PNG_PASS_COLS(width, pass)\n       * PNG_ROW_FROM_PASS_ROW(yIn, pass)\n       * PNG_COL_FROM_PASS_COL(xIn, pass)\n       * PNG_ROW_IN_INTERLACE_PASS(y, pass)\n       * PNG_COL_IN_INTERLACE_PASS(x, pass)\n       "
2018/06/19 13:43:44 " The first two tests overflow if the pass row or column is outside\n          * the possible range for a 32-bit result.  In fact the values should\n          * never be outside the range for a 31-bit result, but checking for 32\n          * bits here ensures that if an app uses a bogus pass row or column\n          * (just so long as it fits in a 32 bit integer) it won't get a\n          * possibly dangerous overflow.\n          "
2018/06/19 13:43:44 " First the base 0 stuff: "
2018/06/19 13:43:44 " Then the base 1 stuff: "
2018/06/19 13:43:44 " Move to the next v - the stepping algorithm starts skipping\n          * values above 1024.\n          "
2018/06/19 13:43:44 " Test color encodings. These values are back-calculated from the published\n * chromaticities.  The values are accurate to about 14 decimal places; 15 are\n * given.  These values are much more accurate than the ones given in the spec,\n * which typically don't exceed 4 decimal places.  This allows testing of the\n * libpng code to its theoretical accuracy of 4 decimal places.  (If pngvalid\n * used the published errors the 'slack' permitted would have to be +/-.5E-4 or\n * more.)\n *\n * The png_modifier code assumes that encodings[0] is sRGB and treats it\n * specially: do not change the first entry in this list!\n "
2018/06/19 13:43:44 " sRGB: must be first in this list! \ngamma:\nred:  \ngreen:\nblue: \n Kodak ProPhoto (wide gamut) \ngamma:\napproximate: uses 1.8 power law compared to sRGB 2.4\nred:  \ngreen:\nblue: \n Adobe RGB (1998) \ngamma:\nred:  \ngreen:\nblue: \n Adobe Wide Gamut RGB \ngamma:\nred:  \ngreen:\nblue: \n Fake encoding which selects just the green channel \ngamma:\n the 'Mac' gamma \nred:  \ngreen:\nblue: "
2018/06/19 13:43:44 " signal handler\n *\n * This attempts to trap signals and escape without crashing.  It needs a\n * context pointer so that it can throw an exception (call longjmp) to recover\n * from the condition; this is handled by making the png_modifier used by 'main'\n * into a global variable.\n "
2018/06/19 13:43:44 "png_structp\nerror"
2018/06/19 13:43:44 " And finally throw an exception so we can keep going, unless this is\n    * SIGTERM in which case stop now.\n    "
2018/06/19 13:43:44 " main program "
2018/06/19 13:43:44 " Print the error summary at the end \n Print memory statistics at the end "
2018/06/19 13:43:44 " Create the given output file on success: "
2018/06/19 13:43:44 " This is an array of standard gamma values (believe it or not I've seen\n    * every one of these mentioned somewhere.)\n    *\n    * In the following list the most useful values are first!\n    "
2018/06/19 13:43:44 " This records the command and arguments: "
2018/06/19 13:43:44 " Add appropriate signal handlers, just the ANSI specified ones: "
2018/06/19 13:43:44 " Only required to enable FP exceptions on platforms where they start off\n    * disabled; this is not necessary but if it is not done pngvalid will likely\n    * end up ignoring FP conditions that other platforms fault.\n    "
2018/06/19 13:43:44 " Preallocate the image buffer, because we know how big it needs to be,\n    * note that, for testing purposes, it is deliberately mis-aligned by tag\n    * bytes either side.  All rows have an additional five bytes of padding for\n    * overwrite checking.\n    "
2018/06/19 13:43:44 " Don't give argv[0], it's normally some horrible libtool string: "
2018/06/19 13:43:44 " Default to error on warning: "
2018/06/19 13:43:44 " Default assume_16_bit_calculations appropriately; this tells the checking\n    * code that 16-bit arithmetic is used for 8-bit samples when it would make a\n    * difference.\n    "
2018/06/19 13:43:44 " Currently 16 bit expansion happens at the end of the pipeline, so the\n    * calculations are done in the input bit depth not the output.\n    *\n    * TODO: fix this\n    "
2018/06/19 13:43:44 " Store the test gammas "
2018/06/19 13:43:44 " default to off "
2018/06/19 13:43:44 " Low bit depth gray images don't do well in the gamma tests, until\n    * this is fixed turn them off for some gamma cases:\n    "
2018/06/19 13:43:44 " And the test encodings "
2018/06/19 13:43:44 " because libpng doesn't do sBIT below 8! "
2018/06/19 13:43:44 " The following allows results to pass if they correspond to anything in the\n    * transformed range [input-.5,input+.5]; this is is required because of the\n    * way libpng treates the 16_TO_8 flag when building the gamma tables in\n    * releases up to 1.6.0.\n    *\n    * TODO: review this\n    "
2018/06/19 13:43:44 " because libpng now rounds sBIT "
2018/06/19 13:43:44 " Some default values (set the behavior for 'make check' here).\n    * These values simply control the maximum error permitted in the gamma\n    * transformations.  The practial limits for human perception are described\n    * below (the setting for maxpc16), however for 8 bit encodings it isn't\n    * possible to meet the accepted capabilities of human vision - i.e. 8 bit\n    * images can never be good enough, regardless of encoding.\n    "
2018/06/19 13:43:44 " Arithmetic error in *encoded* value \n 1/20000 \n +/-1 in 8 bits for compose errors \n I.e., .499% fractional error \n Error in *encoded* value \n 1/20000 \n +/-1 in 16 bits for compose errors "
2018/06/19 13:43:44 " NOTE: this is a reasonable perceptual limit. We assume that humans can\n    * perceive light level differences of 1% over a 100:1 range, so we need to\n    * maintain 1 in 10000 accuracy (in linear light space), which is what the\n    * following guarantees.  It also allows significantly higher errors at\n    * higher 16 bit values, which is important for performance.  The actual\n    * maximum 16 bit error is about +/-1.9 in the fixed point implementation but\n    * this is only allowed for values >38149 by the following:\n    "
2018/06/19 13:43:44 " I.e., 1/200% - 1/20000 "
2018/06/19 13:43:44 " Now parse the command line options. "
2018/06/19 13:43:44 " Set if the argument has an argument. "
2018/06/19 13:43:44 " Record each argument for posterity: "
2018/06/19 13:43:44 " NOTE: this is the default! "
2018/06/19 13:43:44 " PNG_READ_TRANSFORMS_SUPPORTED "
2018/06/19 13:43:44 " Just do two gamma tests here (2.2 and linear) for speed: "
2018/06/19 13:43:44 " composition "
2018/06/19 13:43:44 " Can call multiple times "
2018/06/19 13:43:44 " !CAN_WRITE_INTERLACE "
2018/06/19 13:43:44 " !CAN_WRITE_INTERLACE "
2018/06/19 13:43:44 " Syntax of the argument is <option>:{on|off} "
2018/06/19 13:43:44 " PNG_SET_OPTION_SUPPORTED "
2018/06/19 13:43:44 " consumed an extra *argv "
2018/06/19 13:43:44 " If pngvalid is run with no arguments default to a reasonable set of the\n    * tests.\n    "
2018/06/19 13:43:44 " Make this do all the tests done in the test shell scripts with the same\n       * parameters, where possible.  The limitation is that all the progressive\n       * read and interlace stuff has to be done in separate runs, so only the\n       * basic 'standard' and 'size' tests are done.\n       "
2018/06/19 13:43:44 " Nothing to test so turn everything off: "
2018/06/19 13:43:44 " Make useful base images "
2018/06/19 13:43:44 " Perform the standard and gamma tests. "
2018/06/19 13:43:44 " Various oddly sized images: "
2018/06/19 13:43:44 " Combinatorial transforms: "
2018/06/19 13:43:44 " PNG_READ_TRANSFORMS_SUPPORTED "
2018/06/19 13:43:44 " Do this here to provoke memory corruption errors in memory not directly\n    * allocated by libpng - not a complete test, but better than nothing.\n    "
2018/06/19 13:43:44 " Error exit if there are any errors, and maybe if there are any\n    * warnings.\n    "
2018/06/19 13:43:44 " Success case. "
2018/06/19 13:43:44 " This is required because some very minimal configurations do not use it:\n    "
2018/06/19 13:43:44 " write or low level APIs not supported "
2018/06/19 13:43:44 " So the test is skipped: "
2018/06/19 13:43:44 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/libtests/pngvalid.c": 492.326481ms
2018/06/19 13:43:44 Couldn't classify license(s)
2018/06/19 13:43:45 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/libtests/gentests.sh
2018/06/19 13:43:45 detected language: 32
2018/06/19 13:43:45 "!/bin/sh\n\n Copyright (c) 2013 John Cunningham Bowler\n\n Last changed in libpng 1.6.0 [February 14, 2013]\n\n This code is released under the libpng license.\n For conditions of distribution and use, see the disclaimer\n and license in png.h\n\n Generate a set of PNG test images.  The images are generated in a\n sub-directory called 'tests' by default, however a command line argument will\n change that name.  The generation requires a built version of makepng in the\n current directory.\n"
2018/06/19 13:43:45 " Just one argument: the directory"
2018/06/19 13:43:45 " -gt 1 && {"
2018/06/19 13:43:45 " -eq 0 || usage"
2018/06/19 13:43:45 " Take care not to clobber something"
2018/06/19 13:43:45 " mkdir -p isn't portable, so do the following"
2018/06/19 13:43:45 " This fails in a very satisfactory way if it's not accessible"
2018/06/19 13:43:45 " Now call makepng ($mp) to create every file we can think of with a\n reasonable name"
2018/06/19 13:43:45 ""
2018/06/19 13:43:45 ""
2018/06/19 13:43:45 ""
2018/06/19 13:43:45 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/libtests/gentests.sh": 8.354418ms
2018/06/19 13:43:45 Couldn't classify license(s)
2018/06/19 13:43:46 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/libtests/fakepng.c
2018/06/19 13:43:46 detected language: 4
2018/06/19 13:43:46 " Fake a PNG - just write it out directly.\n *\n * COPYRIGHT: Written by John Cunningham Bowler, 2014.\n * To the extent possible under law, the author has waived all copyright and\n * related or neighboring rights to this work.  This work is published from:\n * United States.\n *\n "
2018/06/19 13:43:46 " for crc32 "
2018/06/19 13:43:46 " Exclude the tag "
2018/06/19 13:43:46 " IHDR \n width \n height \n bit depth \n color type: greyscale \n compression method \n filter method \n interlace method: none "
2018/06/19 13:43:46 " \"unKn\" - private safe to copy "
2018/06/19 13:43:46 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/libtests/fakepng.c": 7.122098ms
2018/06/19 13:43:46 Couldn't classify license(s)
2018/06/19 13:43:47 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/libtests/readpng.c
2018/06/19 13:43:47 detected language: 4
2018/06/19 13:43:47 " readpng.c\n *\n * Copyright (c) 2013 John Cunningham Bowler\n *\n * Last changed in libpng 1.6.1 [March 28, 2013]\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * Load an arbitrary number of PNG files (from the command line, or, if there\n * are no arguments on the command line, from stdin) then run a time test by\n * reading each file by row.  The test does nothing with the read result and\n * does no transforms.  The only output is a time as a floating point number of\n * seconds with 9 decimal digits.\n "
2018/06/19 13:43:47 " Define the following to use this test against your installed libpng, rather\n * than the one being built here:\n "
2018/06/19 13:43:47 " Failure to initialize these is harmless "
2018/06/19 13:43:47 " !READ_INTERLACING "
2018/06/19 13:43:47 " !READ_INTERLACING "
2018/06/19 13:43:47 " READ_INTERLACING "
2018/06/19 13:43:47 " NOTE: this trashes the row each time; interlace handling won't\n             * work, but this avoids memory thrashing for speed testing.\n             "
2018/06/19 13:43:47 " Make sure to read to the end of the file: "
2018/06/19 13:43:47 " Exit code 0 on success. "
2018/06/19 13:43:47 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/libtests/readpng.c": 12.372377ms
2018/06/19 13:43:47 Couldn't classify license(s)
2018/06/19 13:43:48 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/tools/checksum-icc.c
2018/06/19 13:43:48 detected language: 4
2018/06/19 13:43:48 " checksum-icc.c\n *\n * Copyright (c) 2013 John Cunningham Bowler\n *\n * Last changed in libpng 1.6.0 [February 14, 2013]\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * Generate crc32 and adler32 checksums of the given input files, used to\n * generate check-codes for use when matching ICC profiles within libpng.\n "
2018/06/19 13:43:48 " Success "
2018/06/19 13:43:48 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/tools/checksum-icc.c": 6.906701ms
2018/06/19 13:43:48 Couldn't classify license(s)
2018/06/19 13:43:48 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/tools/pngfix.c
2018/06/19 13:43:48 detected language: 4
2018/06/19 13:43:48 " pngfix.c\n *\n * Last changed in libpng 1.6.31 [July 27, 2017]\n * Copyright (c) 2014-2017 John Cunningham Bowler\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * Tool to check and fix the zlib inflate 'too far back' problem.\n * See the usage message for more information.\n "
2018/06/19 13:43:48 " This is used to fix the error:\n    *\n    * pngfix.c:\n    * In function 'zlib_advance':\n    * pngfix.c:181:13: error: assuming signed overflow does not\n    *   occur when simplifying conditional to constant [-Werror=strict-overflow]\n    "
2018/06/19 13:43:48 " Define the following to use this program against your installed libpng,\n * rather than the one being built here:\n "
2018/06/19 13:43:48 " 1.6.3 "
2018/06/19 13:43:48 " zlib.h defines the structure z_stream, an instance of which is included\n * in this structure and is required for decompressing the LZ compressed\n * data in PNG files.\n "
2018/06/19 13:43:48 " We must ensure that zlib uses 'const' in declarations. "
2018/06/19 13:43:48 " zlib.h sometimes #defines const to nothing, undo this. "
2018/06/19 13:43:48 " zlib.h has mediocre z_const use before 1.2.6, this stuff is for compatibility\n * with older builds.\n "
2018/06/19 13:43:48 " Copied from pngpriv.h "
2018/06/19 13:43:48 " __cplusplus "
2018/06/19 13:43:48 " Chunk tags (copied from pngpriv.h) "
2018/06/19 13:43:48 " Constants for known chunk types. "
2018/06/19 13:43:48 " registered, not defined "
2018/06/19 13:43:48 " deprecated "
2018/06/19 13:43:48 " The 8-byte signature as a pair of 32-bit quantities "
2018/06/19 13:43:48 " Is the chunk critical? "
2018/06/19 13:43:48 " Is it safe to copy? "
2018/06/19 13:43:48 " Fix ups for builds with limited read support "
2018/06/19 13:43:48 "******************************** UTILITIES *********************************\n UNREACHED is a value to cause an assert to fail. Because of the way the\n * assert macro is written the string \"UNREACHED\" is produced in the error\n * message.\n "
2018/06/19 13:43:48 " 80-bit number handling - a PNG image can be up to (2^31-1)x(2^31-1) 8-byte\n * (16-bit RGBA) pixels in size; that's less than 2^65 bytes or 2^68 bits, so\n * arithmetic of 80-bit numbers is sufficient.  This representation uses an\n * arbitrary length array of png_uint_16 digits (0..65535).  The representation\n * is little endian.\n *\n * The arithmetic functions take zero to two uarb values together with the\n * number of digits in those values and write the result to the given uarb\n * (always the first argument) returning the number of digits in the result.\n * If the result is negative the return value is also negative (this would\n * normally be an error).\n "
2018/06/19 13:43:48 " A 'unum' is an array of these "
2018/06/19 13:43:48 " IMPORTANT: only apply this to an array, applied to a pointer the result\n    * will typically be '2', which is not useful.\n    "
2018/06/19 13:43:48 " Set (initialize) 'result' to 'val'.  The size required for 'result' must\n    * be determined by the caller from a knowledge of the maximum for 'val'.\n    "
2018/06/19 13:43:48 " Copy a uarb, may reduce the digit count "
2018/06/19 13:43:48 " This is a signed 32-bit add, except that to avoid overflow the value added\n    * or subtracted must be no more than 2^31-65536.  A negative result\n    * indicates a negative number (which is an error below).  The size of\n    * 'num' should be max(in_digits+1,2) for arbitrary 'add' but can be just\n    * in_digits+1 if add is known to be in the range -65535..65535.\n    "
2018/06/19 13:43:48 " may be 0 "
2018/06/19 13:43:48 " negative result "
2018/06/19 13:43:48 " As above but this works with any 32-bit value and only does 'add' "
2018/06/19 13:43:48 " Primitive one-digit multiply - 'val' must be 0..65535. Note that this\n    * primitive is a multiply and accumulate - the result of *num * val is added\n    * to *acc.\n    *\n    * This is a one-digit multiply, so the product may be up to one digit longer\n    * than 'num', however the add to 'acc' means that the caller must ensure\n    * that 'acc' is at least one digit longer than this *and* at least one digit\n    * longer than the current length of 'acc'.  (Or the caller must otherwise\n    * ensure 'adigits' is adequate from knowledge of the values.)\n    "
2018/06/19 13:43:48 " The digits in *acc, *num and val are in the range 0..65535, so the\n    * result below is at most (65535*65535)+2*65635 = 65535*(65535+2), which is\n    * exactly 0xffffffff.\n    "
2018/06/19 13:43:48 " Else the product is 0 "
2018/06/19 13:43:48 " So carry is 0 and all the input digits have been consumed. This means\n       * that it is possible to skip any remaining digits in acc.\n       "
2018/06/19 13:43:48 " calculate acc += num * val, 'val' may be any 32-bit value, 'acc' and 'num'\n    * may be any value, returns the number of digits in 'acc'.\n    "
2018/06/19 13:43:48 " Because n_digits and val are >0 the following must be true: "
2018/06/19 13:43:48 " Shift inout right by right_shift bits, right_shift must be in the range\n    * 1..15\n    "
2018/06/19 13:43:48 " Bottom bits to top bits of carry "
2018/06/19 13:43:48 " The shift may reduce ndigits "
2018/06/19 13:43:48 " Return -1/0/+1 according as a<b/a==b/a>b "
2018/06/19 13:43:48 "UNUSED"
2018/06/19 13:43:48 " Return true if the uarb is equal to 'val' "
2018/06/19 13:43:48 " Print 'num' as a hexadecimal number (easier than decimal!) "
2018/06/19 13:43:48 " the number is 0 "
2018/06/19 13:43:48 " Prints 'num' as a decimal if it will fit in an unsigned long, else as a\n    * hexadecimal number.  Notice that the results vary for images over 4GByte\n    * in a system dependent way, and the hexadecimal form doesn't work very well\n    * in awk script input.\n    *\n    *\n    * TODO: write uarb_div10\n    "
2018/06/19 13:43:48 " Generate random bytes.  This uses a boring repeatable algorithm and it\n * is implemented here so that it gives the same set of numbers on every\n * architecture.  It's a linear congruential generator (Knuth or Sedgewick\n * \"Algorithms\") but it comes from the 'feedback taps' table in Horowitz and\n * Hill, \"The Art of Electronics\" (Pseudo-Random Bit Sequences and Noise\n * Generation.)\n *\n * (Copied from contrib/libtests/pngvalid.c)\n "
2018/06/19 13:43:48 " There are thirty-three bits; the next bit in the sequence is bit-33 XOR\n    * bit-20.  The top 1 bit is in u1, the bottom 32 are in u0.\n    "
2018/06/19 13:43:48 " First generate 8 new bits then shift them in at the end. "
2018/06/19 13:43:48 " Clear an object to a random value. "
2018/06/19 13:43:48 " Copied from unreleased 1.7 code.\n *\n * CRC checking uses a local pre-built implementation of the Ethernet CRC32.\n * This is to avoid a function call to the zlib DLL and to optimize the\n * byte-by-byte case.\n "
2018/06/19 13:43:48 " The CRC calculated here *IS* conditioned, the corresponding value used by\n * zlib and the result value is obtained by XORing with CRC_INIT, which is also\n * the first value that must be passed in (for the first byte) to crc_one_byte.\n "
2018/06/19 13:43:48 " This is an alternative to the algorithm used in zlib, which requires four\n    * separate tables to parallelize the four byte operations, it only works for\n    * a CRC of the first four bytes of the stream, but this is what happens in\n    * the parser below where length+chunk-name is read and chunk-name used to\n    * initialize the CRC.  Notice that the calculation here avoids repeated\n    * conditioning (xor with 0xffffffff) by storing the conditioned value.\n    "
2018/06/19 13:43:48 " Bit whacking approach to chunk name validation that is intended to avoid\n    * branches.  The cost is that it uses a lot of 32-bit constants, which might\n    * be bad on some architectures.\n    "
2018/06/19 13:43:48 " Remove bit 5 from all but the reserved byte; this means every\n    * 8-bit unit must be in the range 65-90 to be valid.  So bit 5\n    * must be zero, bit 6 must be set and bit 7 zero.\n    "
2018/06/19 13:43:48 " Subtract 65 for each 8-bit quantity, this must not overflow\n    * and each byte must then be in the range 0-25.\n    "
2018/06/19 13:43:48 " Subtract 26, handling the overflow which should set the top\n    * three bits of each byte.\n    "
2018/06/19 13:43:48 "*************************** CONTROL INFORMATION ****************************"
2018/06/19 13:43:48 " Information about a sequence of IDAT chunks, the chunks have been re-synced\n * using sync_stream below and the new lengths are recorded here.  Because the\n * number of chunks is unlimited this is handled using a linked list of these\n * structures.\n "
2018/06/19 13:43:48 " Linked list \n Actual length of the array below \n Number of entries that are valid "
2018/06/19 13:43:48 " Return the size in bytes of an IDAT_list of the given length. "
2018/06/19 13:43:48 " Use the previous cached value if available. "
2018/06/19 13:43:48 " Insert a new, malloc'ed, block of IDAT information buffers, this\n       * one twice as large as the previous one:\n       "
2018/06/19 13:43:48 " arithmetic overflow "
2018/06/19 13:43:48 " The caller must handle this: "
2018/06/19 13:43:48 " GLOBAL CONTROL STRUCTURE "
2018/06/19 13:43:48 " PUBLIC GLOBAL VARIABLES: OWNER INITIALIZE \n print file errors to stderr \n print libpng warnings to stderr \n Run optimization search \n don't output summaries \n various internal tracking \n Non-critical chunks to skip "
2018/06/19 13:43:48 " Chunks with a bad CRC \n Chunks not safe to copy \n Chunks not used by libpng \n Chunks only used in transforms \n Everything but tRNS, sBIT, gAMA and sRGB \n Everything but tRNS and sBIT "
2018/06/19 13:43:48 " 0 to perform no re-chunking "
2018/06/19 13:43:48 " Accumulated status code \n found a too-far-back error \n fixed an invalid CRC \n damaged PNG stream (may be fixable) \n truncated but still readable \n could not read the file \n write error (this terminates the read) \n internal limits/errors encountered "
2018/06/19 13:43:48 " PUBLIC GLOBAL VARIABLES: USED INTERNALLY BY IDAT READ CODE \n Cache of file IDAT information buffers \n The structure is shared across all uses of this global control\n       * structure to avoid reallocation between IDAT streams.\n       "
2018/06/19 13:43:48 " Call this once (and only once) to initialize the control "
2018/06/19 13:43:48 " Globals "
2018/06/19 13:43:48 " no re-chunking of IDAT "
2018/06/19 13:43:48 " Return true if this chunk is to be skipped according to the --strip\n    * option.  This code needs to recognize all known ancillary chunks in order\n    * to handle the --strip=unsafe option.\n    "
2018/06/19 13:43:48 " Never strip critical chunks: "
2018/06/19 13:43:48 " Chunks that are treated as, effectively, critical because they affect\n       * correct interpretation of the pixel values:\n       "
2018/06/19 13:43:48 " Chunks that specify gamma encoding which should therefore only be\n       * removed the the user insists:\n       "
2018/06/19 13:43:48 " Chunks that affect color interpretation - not used by libpng and rarely\n       * used by applications, but technically still required for correct\n       * interpretation of the image data:\n       "
2018/06/19 13:43:48 " Other chunks that are used by libpng in image transformations (as\n       * opposed to known chunks that have get/set APIs but are not otherwise\n       * used.)\n       "
2018/06/19 13:43:48 " All other chunks that libpng knows about and affect neither image\n       * interpretation nor libpng transforms - chunks that are effectively\n       * unused by libpng even though libpng might recognize and store them.\n       "
2018/06/19 13:43:48 " Chunks that libpng does not know about (notice that this depends on the\n       * list above including all known chunks!)  The decision here depends on\n       * whether the safe-to-copy bit is set in the chunk type.\n       "
2018/06/19 13:43:48 " as above "
2018/06/19 13:43:48 " PER-FILE CONTROL STRUCTURE "
2018/06/19 13:43:48 " ANCESTORS "
2018/06/19 13:43:48 " PUBLIC PER-FILE VARIABLES: CALLER INITIALIZE "
2018/06/19 13:43:48 " Name of output file (if required) "
2018/06/19 13:43:48 " PUBLIC PER-FILE VARIABLES: SET BY PNG READ CODE \n File specific result codes \n Set to a bit mask of the following: \n Records a read error errno \n Records a write error errno "
2018/06/19 13:43:48 " IHDR information "
2018/06/19 13:43:48 " PROTECTED PER-FILE VARIABLES: USED BY THE READ CODE \n Original PNG file \n If a new one is being written \n Set while reading a PNG "
2018/06/19 13:43:48 " PROTECTED CHUNK SPECIFIC VARIABLES: USED BY CHUNK CODE \n The following variables are used during reading to record the length, type\n    * and data position of the *next* chunk or, right at the start, the\n    * signature (in length,type).\n    *\n    * When a chunk control structure is instantiated these values are copied\n    * into the structure and can then be overritten with the data for the next\n    * chunk.\n    "
2018/06/19 13:43:48 " Position of first byte of chunk data \n First word (length or signature start) \n Second word (type or signature end) \n Running chunk CRC (used by read_chunk) "
2018/06/19 13:43:48 " These counts are maintained by the read and write routines below and are\n    * reset by the chunk handling code.  They record the total number of bytes\n    * read or written for the chunk, including the header (length,type) bytes.\n    "
2018/06/19 13:43:49 " Count of bytes read (in the chunk) \n Count of bytes written (in the chunk) \n As defined here: \n The signature is being written \n Non-IDAT chunks are being written \n An IDAT stream is being written "
2018/06/19 13:43:49 " Two pointers used to enable clean-up in the event of fatal errors and to\n    * hold state about the parser process (only one of each at present.)\n    "
2018/06/19 13:43:49 " Interface to allocate a new chunk or IDAT control structure.  The result\n    * is returned by setting one or other of the above variables.  Note that the\n    * relevant initializer is called by the allocator function.  The alloc_ptr\n    * is used only by the implementation of the allocate function.\n    "
2018/06/19 13:43:49 " idat: allocate IDAT not chunk "
2018/06/19 13:43:49 " Valid longjmp (stop) codes are: \n generic png_error \n generic png_error \n generic zlib error \n detected an invalid PNG \n read failed \n error in write \n unexpected (internal?) error "
2018/06/19 13:43:49 " Print a string with spaces replaced by '_' and non-printing characters by\n    * an octal escape.\n    "
2018/06/19 13:43:49 " Generic error message routine, takes a 'stop' code but can be used\n    * elsewhere.  Always outputs a message.\n    "
2018/06/19 13:43:49 " If either of the chunk pointers are set end them here, the IDAT structure\n    * must be deallocated first as it may deallocate the chunk structure.\n    "
2018/06/19 13:43:49 " NOTE: this is bitwise |, all the following functions must execute and\n       * must succeed.\n       "
2018/06/19 13:43:49 " Accumulate the result codes "
2018/06/19 13:43:49 " status code: non-zero on read or write error "
2018/06/19 13:43:49 " Initialize a file control structure.  This will open the given files as\n    * well.  The status code returned is 0 on success, non zero (using the flags\n    * above) on a file open error.\n    "
2018/06/19 13:43:49 " jmpbuf is garbage: must be set by read_png "
2018/06/19 13:43:49 " Open the files: "
2018/06/19 13:43:49 " Always output: please give a readable file! "
2018/06/19 13:43:49 " Like emit_error but checks the global 'errors' flag "
2018/06/19 13:43:49 " In fact because chunk::chunk_type is validated prior to any call to this\n    * function it will always return a-zA-Z, but the extra codes are just there\n    * to help in finding internal (programming) errors.  Note that the code only\n    * ever considers the low 7 bits of the value (so it is not necessary for the\n    * type_name function to mask of the byte.)\n    "
2018/06/19 13:43:49 " Return control when a PNG file cannot be read. This outputs an 'ERR'\n    * summary line too.\n    "
2018/06/19 13:43:49 " The chunk being read is typically identified by file->chunk or, if this is\n    * NULL, by file->type.  This may be wrong if libpng reads ahead, but this\n    * only happens with IDAT where libpng reads the header then jumps around\n    * finding errors in the previous chunks.  We know that is happening because\n    * we are at the start of the IDAT (i.e. no IDAT data has yet been written.)\n    *\n    * SUMMARY FORMAT (stop):\n    *\n    * IDAT ERR status code read-errno write-errno message file\n    *\n    * 'uncompressed' will be 0 if there was a problem in the IHDR.  The errno\n    * values are emit_string(strerror(errno)).\n    "
2018/06/19 13:43:49 " need two quiets to stop this. "
2018/06/19 13:43:49 " Gropes in struct chunk and IDAT "
2018/06/19 13:43:49 " magic: an IDAT header, produces bogons for too many IDATs \n not a registered chunk! "
2018/06/19 13:43:49 " This only works one strerror at a time, because of the way strerror is\n       * implemented.\n       "
2018/06/19 13:43:49 " Error message for a chunk; the chunk name comes from 'type' "
2018/06/19 13:43:49 " Input file positioning - we jump around in the input file while reading\n * stuff, these wrappers deal with the error handling.\n "
2018/06/19 13:43:49 " This is unexpected, so perror it "
2018/06/19 13:43:49 " Get the current position and store it in 'data_pos'.  The corresponding\n    * setpos() function is chunk specific because it uses the copy of the\n    * position for the specific chunk.\n    "
2018/06/19 13:43:49 " Read utility - read a single byte, returns a value in the range 0..255 or EOF\n * on a read error.  In the latter case status_code and read_errno are updated\n * appropriately.\n "
2018/06/19 13:43:49 " out of range character "
2018/06/19 13:43:49 " This is very unexpected; an error message is always output: "
2018/06/19 13:43:49 " Interrupted, try again "
2018/06/19 13:43:49 " An error, it doesn't really matter what the error is but it gets\n       * recorded anyway.\n       "
2018/06/19 13:43:49 " I.e. a regular EOF, no error "
2018/06/19 13:43:49 " unexpected "
2018/06/19 13:43:49 " 'TRUNCATED' is used for all cases of failure to read a byte, because of\n    * the way libpng works a byte read is never attempted unless the byte is\n    * expected to be there, so EOF should not occur.\n    "
2018/06/19 13:43:49 " Read a byte when an error is not expected to happen because the byte has\n    * been read before without error.\n    "
2018/06/19 13:43:49 " The same but for a four byte quantity "
2018/06/19 13:43:49 " Skip exactly 12 bytes in the input stream - used to skip a CRC and chunk\n    * header that has been read before.\n    "
2018/06/19 13:43:49 " Since the chunks were read before this shouldn't fail: "
2018/06/19 13:43:49 " Write one byte to the output - this causes a fatal error if the write\n    * fails and the read of this PNG file immediately terminates.  Just\n    * increments the write count if there is no output file.\n    "
2018/06/19 13:43:49 " Derivatives of the read/write functions. "
2018/06/19 13:43:49 " Read four bytes, returns the number of bytes read successfully and, if all\n    * four bytes are read, assigns the result to *pu.\n    "
2018/06/19 13:43:49 " CRC handling - read but calculate the CRC while doing so. "
2018/06/19 13:43:49 " Reads 'length' bytes and updates the CRC, returns true on success, false\n    * if the input is truncated.\n    "
2018/06/19 13:43:49 " Truncated "
2018/06/19 13:43:49 " OK "
2018/06/19 13:43:49 " Fill in the image_bytes field given the IHDR information, calls stop on\n    * error.\n    "
2018/06/19 13:43:49 " g "
2018/06/19 13:43:49 " rgb "
2018/06/19 13:43:49 " ga "
2018/06/19 13:43:49 " rgba "
2018/06/19 13:43:49 " Interlacing makes the image larger because of the replication of\n          * both the filter byte and the padding to a byte boundary.\n          "
2018/06/19 13:43:49 " calculate 1+((pw*pd+7)>>3) in row_bytes "
2018/06/19 13:43:49 " Add row_bytes * pass-height to the file image_bytes field\n                   "
2018/06/19 13:43:49 " As above, but use image_width in place of the pass width: "
2018/06/19 13:43:49 " Set row_bytes * image-height to the file image_bytes field "
2018/06/19 13:43:49 " PER-CHUNK CONTROL STRUCTURE\n * This structure is instantiated for each chunk, except for the IDAT chunks\n * where one chunk control structure is used for the whole of a single stream of\n * IDAT chunks (see the IDAT control structure below).\n "
2018/06/19 13:43:49 " ANCESTORS "
2018/06/19 13:43:49 " PUBLIC IDAT INFORMATION: SET BY THE ZLIB CODE "
2018/06/19 13:43:49 " PUBLIC PER-CHUNK INFORMATION: USED BY CHUNK READ CODE \n This information is filled in by chunk_init from the data in the file\n    * control structure, but chunk_length may be changed later.\n    "
2018/06/19 13:43:49 " Position of first byte of chunk data \n From header (or modified below) \n From header "
2018/06/19 13:43:49 " PUBLIC PER-CHUNK INFORMATION: FOR THE CHUNK WRITE CODE \n Output CRC (may differ from read_crc) \n Count of bytes before rewrite. \n Number of bytes left to change \n Buffer of new byte values "
2018/06/19 13:43:49 " When a chunk is initialized the file length/type/pos are copied into the\n    * corresponding chunk fields and the new chunk is registered in the file\n    * structure.  There can only be one chunk at a time.\n    *\n    * NOTE: this routine must onely be called from the file alloc routine!\n    "
2018/06/19 13:43:49 " Compresssed/uncompressed size information (from the zlib control structure\n    * that is used to check the compressed data in a chunk.)\n    "
2018/06/19 13:43:49 " Guess the actual chunk type that causes a stop() "
2018/06/19 13:43:49 " This may return png_IDAT for errors detected (late) in the header; that\n    * includes any inter-chunk consistency check that libpng performs.  Assume\n    * that if the chunk_type is png_IDAT and the file write count is 8 this is\n    * what is happening.\n    "
2018/06/19 13:43:49 " This is probably wrong for the excess IDATs case, because then libpng\n       * whines about too many of them (apparently in some cases erroneously)\n       * when the header is read.\n       "
2018/06/19 13:43:49 " magic "
2018/06/19 13:43:49 " Reset the position to 'chunk_data_pos' - the start of the data for this\n    * chunk.  As a side effect the read_count in the file is reset to 8, just\n    * after the length/type header.\n    "
2018/06/19 13:43:49 " Specific chunk handling - called for each chunk header, all special chunk\n * processing is initiated in these functions.\n "
2018/06/19 13:43:49 " The next functions handle special processing for those chunks with LZ data,\n * the data is identified and checked for validity.  If there are problems which\n * cannot be corrected the routines return false, otherwise true (although\n * modification to the zlib header may be required.)\n *\n * The compressed data is in zlib format (RFC1950) and consequently has a\n * minimum length of 7 bytes.\n "
2018/06/19 13:43:49 " zTXt and iCCP have exactly the same form - keyword, null, compression\n    * method then compressed data.\n    "
2018/06/19 13:43:49 " keyword null terminator "
2018/06/19 13:43:49 " compression method "
2018/06/19 13:43:49 " skip "
2018/06/19 13:43:49 " Like zTXt but more fields. "
2018/06/19 13:43:49 " keyword null terminator "
2018/06/19 13:43:49 " uncompressed text \n nothing to check "
2018/06/19 13:43:49 " compression method "
2018/06/19 13:43:49 " Skip the language tag (null terminated). "
2018/06/19 13:43:49 " terminator "
2018/06/19 13:43:49 " Skip the translated keyword "
2018/06/19 13:43:49 " terminator "
2018/06/19 13:43:49 " Ran out of bytes in the compressed case. "
2018/06/19 13:43:49 " skip "
2018/06/19 13:43:49 " IDAT READ/WRITE CONTROL STRUCTURE "
2018/06/19 13:43:49 " ANCESTORS "
2018/06/19 13:43:49 " PROTECTED IDAT INFORMATION: SET BY THE IDAT READ CODE \n START of the list of IDAT information \n *END* of the list of IDAT information "
2018/06/19 13:43:49 " PROTECTED IDAT INFORMATION: USED BY THE IDAT WRITE CODE \n Current list entry \n And the *current* index into the list \n Index of *next* input byte to write \n Cache of current chunk length "
2018/06/19 13:43:49 " NOTE: there is currently no IDAT_reset, so a stream cannot contain more than\n * one IDAT sequence (i.e. MNG is not supported).\n "
2018/06/19 13:43:49 " Regardless of why the IDAT was killed set the state back to CHUNKS (it may\n    * already be CHUNKS because the state isn't changed until process_IDAT\n    * returns; a stop will cause IDAT_end to be entered in state CHUNKS!)\n    "
2018/06/19 13:43:49 " When the chunk is png_IDAT instantiate an IDAT control structure in place\n    * of a chunk control structure.  The IDAT will instantiate a chunk control\n    * structure using the file alloc routine.\n    *\n    * NOTE: this routine must only be called from the file alloc routine!\n    "
2018/06/19 13:43:49 " Initialize the tail to the pre-allocated buffer and set the count to 0\n    * (empty.)\n    "
2018/06/19 13:43:49 " Now the chunk.  The allocator calls the initializer of the new chunk and\n    * stores the result in file->chunk:\n    "
2018/06/19 13:43:49 "chunk"
2018/06/19 13:43:49 " And store this for cleanup (and to check for double alloc or failure to\n    * free.)\n    "
2018/06/19 13:43:49 " Return the length for the next IDAT chunk, taking into account\n    * rechunking.\n    "
2018/06/19 13:43:49 " use original chunk lengths "
2018/06/19 13:43:49 " use the cache "
2018/06/19 13:43:49 " Otherwise rechunk_length is called at the end of a chunk for the length\n       * of the next one.\n       "
2018/06/19 13:43:49 " Return length of the *next* chunk "
2018/06/19 13:43:49 " End of this list "
2018/06/19 13:43:49 " rechunking "
2018/06/19 13:43:49 " The chunk size is the lesser of file->idat_max and the number\n       * of remaining bytes.\n       "
2018/06/19 13:43:49 " the next IDAT in the list "
2018/06/19 13:43:49 " Add up the remaining bytes.  This can't overflow because the\n             * individual lengths are always <= 0x7fffffff, so when we add two\n             * of them overflow is not possible.\n             "
2018/06/19 13:43:49 " NOTE: IDAT_list::count here, not IDAT_list::length "
2018/06/19 13:43:49 " If this was the end return the count of the available bytes "
2018/06/19 13:43:49 " Process the IDAT stream, this is the more complex than the preceding\n    * cases because the compressed data is spread across multiple IDAT chunks\n    * (typically).  Rechunking of the data is not handled here; all this\n    * function does is establish whether the zlib header needs to be modified.\n    *\n    * Initially the function returns false, indicating that the chunk should not\n    * be written.  It does this until the last IDAT chunk is passed in, then it\n    * checks the zlib data and returns true.\n    *\n    * It does not return false on a fatal error; it calls stop instead.\n    *\n    * The caller must have an instantiated (IDAT) control structure and it must\n    * have extent over the whole read of the IDAT stream.  For a PNG this means\n    * the whole PNG read, for MNG it could have lesser extent.\n    "
2018/06/19 13:43:49 " We need to first check the entire sequence of IDAT chunks to ensure the\n    * stream is in sync.  Do this by building a list of all the chunks and\n    * recording the length of each because the length may have been fixed up by\n    * sync_stream below.\n    *\n    * At the end of the list of chunks, where the type of the next chunk is not\n    * png_IDAT, process the whole stream using the list data to check validity\n    * then return control to the start and rewrite everything.\n    "
2018/06/19 13:43:49 " Move to the next block "
2018/06/19 13:43:49 " And fill in the next IDAT information buffer. "
2018/06/19 13:43:49 " The type of the next chunk was recorded in the file control structure by\n    * the caller, if this is png_IDAT return 'skip' to the caller.\n    "
2018/06/19 13:43:49 " skip this for the moment "
2018/06/19 13:43:49 " This is the final IDAT chunk, so run the tests to check for the too far\n    * back error and possibly optimize the window bits.  This means going back\n    * to the start of the first chunk data, which is stored in the original\n    * chunk allocation.\n    "
2018/06/19 13:43:49 " The IDAT stream was successfully uncompressed; see whether it\n       * contained the correct number of bytes of image data.\n       "
2018/06/19 13:43:49 " Return the stream to the start of the first IDAT chunk; the length\n       * is set in the write case below but the input chunk variables must be\n       * set (once) here:\n       "
2018/06/19 13:43:49 " Count of chunks read in current list \n Index into chunk data "
2018/06/19 13:43:49 " Update the chunk length to the correct value for the IDAT chunk: \nstart"
2018/06/19 13:43:49 " Change the state to writing IDAT chunks "
2018/06/19 13:43:49 " Failure to decompress the IDAT stream; give up. "
2018/06/19 13:43:49 " ZLIB CONTROL STRUCTURE "
2018/06/19 13:43:49 " ANCESTORS \n NOTE: May be NULL "
2018/06/19 13:43:49 " GLOBAL ZLIB INFORMATION: SET BY THE CALLER "
2018/06/19 13:43:49 " GLOBAL ZLIB INFORMATION: SET BY THE ZLIB READ CODE "
2018/06/19 13:43:49 " window bits from the file \n Set <16 on a successful read \n Set on a checksum error "
2018/06/19 13:43:49 " PROTECTED ZLIB INFORMATION: USED BY THE ZLIB ROUTINES "
2018/06/19 13:43:49 " Count of extra compressed bytes "
2018/06/19 13:43:49 " Last return code \n 0 if no change "
2018/06/19 13:43:49 " Return a string for the zlib return code "
2018/06/19 13:43:49 " Output a message given a zlib rc "
2018/06/19 13:43:49 " Output the summary line now; this ensures a summary line always gets\n    * output regardless of the manner of exit.\n    "
2018/06/19 13:43:49 " stream was read ok "
2018/06/19 13:43:49 " checksum error "
2018/06/19 13:43:49 " fixing a too-far-back error "
2018/06/19 13:43:49 " optimizing window bits "
2018/06/19 13:43:49 " SUMMARY FORMAT (for a successful zlib inflate):\n          *\n          * IDAT reason flevel file-bits ok-bits compressed uncompressed file\n          "
2018/06/19 13:43:49 " This is a zlib read error; the chunk will be skipped.  For an IDAT\n          * stream this will also cause a fatal read error (via stop()).\n          *\n          * SUMMARY FORMAT:\n          *\n          * IDAT SKP flevel file-bits z-rc compressed message file\n          *\n          * z-rc is the zlib failure code; message is the error message with\n          * spaces replaced by '-'.  The compressed byte count indicates where\n          * in the zlib stream the error occurred.\n          "
2018/06/19 13:43:49 "unexpected"
2018/06/19 13:43:49 " Reinitializes a zlib with a different window_bits "
2018/06/19 13:43:49 " initialized by zlib_init "
2018/06/19 13:43:49 " initialized, once "
2018/06/19 13:43:49 "unexpected"
2018/06/19 13:43:49 " Initialize a zlib_control; the result is true/false "
2018/06/19 13:43:49 " never changed for this zlib "
2018/06/19 13:43:49 " *_out does not need to be set: "
2018/06/19 13:43:49 " These values are sticky across reset (in addition to the stuff in the\n    * first block, which is actually constant.)\n    "
2018/06/19 13:43:49 " unset \n set when a checksum error is detected "
2018/06/19 13:43:49 " '0' means use the header; inflateInit2 should always succeed because it\n    * does nothing apart from allocating the internal zstate.\n    "
2018/06/19 13:43:49 "unexpected"
2018/06/19 13:43:49 " initialized "
2018/06/19 13:43:49 " Return the zlib stream window bits required for data of the given size. "
2018/06/19 13:43:49 " Read nbytes compressed bytes; the stream will be initialized if required.\n    * Bytes are always being reread and errors are fatal.  The return code is as\n    * follows:\n    *\n    *    -1: saw the \"too far back\" error\n    *     0: ok, keep going\n    *     1: saw Z_STREAM_END (zlib->extra_bytes indicates too much data)\n    *     2: a zlib error that cannot be corrected (error message already\n    *        output if required.)\n    "
2018/06/19 13:43:49 " first header byte "
2018/06/19 13:43:49 " Check against the existing value - it may not need to be\n                * changed.  Note that a bogus file_bits is allowed through once,\n                * to see if it works, but the window_bits value is set to 15,\n                * the maximum.\n                "
2018/06/19 13:43:49 " no change "
2018/06/19 13:43:49 " rewrite required "
2018/06/19 13:43:49 " second header byte "
2018/06/19 13:43:49 " top 3 bits "
2018/06/19 13:43:49 " The checksum calculation, on the first 11 bits: "
2018/06/19 13:43:49 " Update the checksum byte if required: "
2018/06/19 13:43:49 " If the first byte wasn't changed this indicates an error in\n                   * the checksum calculation; signal this by setting 'cksum'.\n                   "
2018/06/19 13:43:49 " After the header bytes "
2018/06/19 13:43:49 " For some streams, perhaps only those compressed with 'superfast\n       * compression' (which results in a lot of copying) Z_BUF_ERROR can happen\n       * immediately after all output has been flushed on the next input byte.\n       * This is handled below when Z_BUF_ERROR is detected by adding an output\n       * byte.\n       "
2018/06/19 13:43:49 " Initially "
2018/06/19 13:43:49 " Initially use Z_NO_FLUSH in an attempt to persuade zlib to look at this\n       * byte without confusing what is going on with output.\n       "
2018/06/19 13:43:49 " NOTE: expression 3 is only evaluted on 'continue', because of the\n       * 'break' at the end of this loop below.\n       "
2018/06/19 13:43:49 " Try another output byte. "
2018/06/19 13:43:49 " Try another input byte "
2018/06/19 13:43:49 " Both avail_out and avail_in are 1 yet zlib returned a code\n                * indicating no progress was possible.  This is unexpected.\n                "
2018/06/19 13:43:49 "unexpected\n stop processing "
2018/06/19 13:43:49 " Zlib is supposed to have made progress: "
2018/06/19 13:43:49 " This is the successful end. \n end of stream "
2018/06/19 13:43:49 "stream error"
2018/06/19 13:43:49 " The too far back error can be corrected, others cannot: "
2018/06/19 13:43:49 " FALLTHROUGH "
2018/06/19 13:43:49 "stream error"
2018/06/19 13:43:49 " switch (inflate rc) "
2018/06/19 13:43:49 " Control gets here when further output is not possible; endrc may\n          * still be ZLIB_OK if more input is required.\n          "
2018/06/19 13:43:49 " for (output bytes) "
2018/06/19 13:43:49 " Keep a running count of output byte produced: "
2018/06/19 13:43:49 " Keep going, the loop will terminate when endrc is no longer set to\n       * ZLIB_OK or all the input bytes have been consumed; meanwhile keep\n       * adding input bytes.\n       "
2018/06/19 13:43:49 " while (input bytes) "
2018/06/19 13:43:49 " Update the running total of input bytes consumed "
2018/06/19 13:43:49 " At the end of the stream update the chunk with the accumulated\n    * information if it is an improvement:\n    "
2018/06/19 13:43:49 " A rewrite is required "
2018/06/19 13:43:49 " Like zlib_advance but also handles a stream of IDAT chunks. "
2018/06/19 13:43:49 " The 'extra_bytes' field is set by zlib_advance if there is extra\n    * compressed data in the chunk it handles (if it sees Z_STREAM_END before\n    * all the input data has been used.)  This function uses the value to update\n    * the correct chunk length, so the problem should only ever be detected once\n    * for each chunk.  zlib_advance outputs the error message, though see the\n    * IDAT specific check below.\n    "
2018/06/19 13:43:49 " 'rewrite_offset' is the offset of the LZ data within the chunk, for\n       * IDAT it should be 0:\n       "
2018/06/19 13:43:49 " Process each IDAT_list in turn; the caller has left the stream\n       * positioned at the start of the first IDAT chunk data.\n       "
2018/06/19 13:43:49 " Skip CRC and next IDAT header "
2018/06/19 13:43:49 " for the next time "
2018/06/19 13:43:49 " keep going "
2018/06/19 13:43:49 " stop \n There may be extra chunks; if there are and one of them is\n                   * not zero length output the 'extra data' message.  Only do\n                   * this check if errors are being output.\n                   "
2018/06/19 13:43:49 " Terminate the list at the current position, reducing the\n                   * length of the last IDAT too if required.\n                   "
2018/06/19 13:43:49 " FALLTHROUGH "
2018/06/19 13:43:49 " At the end of the compressed data and Z_STREAM_END was not seen. "
2018/06/19 13:43:49 " The extra bytes in the chunk are handled now by adjusting the chunk\n       * length to exclude them; the zlib data is always stored at the end of\n       * the PNG chunk (although clearly this is not necessary.)  zlib_advance\n       * has already output a warning message.\n       "
2018/06/19 13:43:49 " global function; not a member function "
2018/06/19 13:43:49 " Check the stream of zlib compressed data in either idat (if given) or (if\n    * not) chunk.  In fact it is zlib_run that handles the difference in reading\n    * a single chunk and a list of IDAT chunks.\n    *\n    * In either case the input file must be positioned at the first byte of zlib\n    * compressed data (the first header byte).\n    *\n    * The return value is true on success, including the case where the zlib\n    * header may need to be rewritten, and false on an unrecoverable error.\n    *\n    * In the case of IDAT chunks 'offset' should be 0.\n    "
2018/06/19 13:43:49 " Record the start of the LZ data to allow a re-read. "
2018/06/19 13:43:49 " First test the existing (file) window bits: \nwindow bits"
2018/06/19 13:43:49 " The first run using the existing window bits. "
2018/06/19 13:43:49 " too far back error "
2018/06/19 13:43:49 " The trivial case where the stream is ok and optimization was\n                * not requested.\n                "
2018/06/19 13:43:49 " cksum is set if there is an error in the zlib header checksum\n             * calculation in the original file (and this may be the only reason\n             * a rewrite is required).  We can't rely on the file window bits in\n             * this case, so do the optimization anyway.\n             "
2018/06/19 13:43:49 " Truncated stream; unrecoverable, gets converted to ZLIB_FATAL "
2018/06/19 13:43:49 "expected\n FALLTHROUGH "
2018/06/19 13:43:49 " Unrecoverable error; skip the chunk; a zlib_message has already\n             * been output.\n             "
2018/06/19 13:43:49 " Optimize window bits or fix a too-far-back error.  min_bits and\n       * max_bits have been set appropriately, ok_bits records the bit value\n       * known to work.\n       "
2018/06/19 13:43:49 "if 16"
2018/06/19 13:43:49 " This happens when the stream really is damaged and it\n                      * contains a distance code that addresses bytes before\n                      * the start of the uncompressed data.\n                      "
2018/06/19 13:43:49 " Output the error that wasn't output before: "
2018/06/19 13:43:49 "stream error"
2018/06/19 13:43:49 " success "
2018/06/19 13:43:49 " A fatal error; this happens if a too-far-back error was\n                   * hiding a more serious error, zlib_advance has already\n                   * output a zlib_message.\n                   "
2018/06/19 13:43:49 " inflateReset2 failed "
2018/06/19 13:43:49 " The loop guarantees this "
2018/06/19 13:43:49 " zlib initialization failed - skip the chunk "
2018/06/19 13:43:49 "**************************** LIBPNG CALLBACKS ******************************\n The strategy here is to run a regular libpng PNG file read but examine the\n * input data (from the file) before passing it to libpng so as to be aware of\n * the state we expect libpng to be in.  Warning and error callbacks are also\n * intercepted so that they can be quieted and interpreted.  Interpretation\n * depends on a somewhat risky string match for known error messages; let us\n * hope that this can be fixed in the next version of libpng.\n *\n * The control structure is pointed to by the libpng error pointer.  It contains\n * that set of structures which must persist across multiple read callbacks,\n * which is pretty much everything except the 'zlib' control structure.\n *\n * The file structure is instantiated in the caller of the per-file routine, but\n * the per-file routine contains the chunk and IDAT control structures.\n "
2018/06/19 13:43:49 " The three routines read_chunk, process_chunk and sync_stream can only be\n * called via a call to read_chunk and only exit at a return from process_chunk.\n * These routines could have been written as one confusing large routine,\n * instead this code relies on the compiler to do tail call elimination.  The\n * possible calls are as follows:\n *\n * read_chunk\n *    -> sync_stream\n *       -> process_chunk\n *    -> process_chunk\n *       -> read_chunk\n *       returns\n "
2018/06/19 13:43:49 " Called when the chunk data has been read, next_length and next_type\n    * will be set for the next chunk (or 0 if this is IEND).\n    *\n    * When this routine returns, chunk_length and chunk_type will be set for the\n    * next chunk to write because if a chunk is skipped this return calls back\n    * to read_chunk.\n    "
2018/06/19 13:43:49 " The basic structure seems correct but the CRC may not match, in this\n    * case assume that it is simply a bad CRC, either wrongly calculated or\n    * because of damaged stream data.\n    "
2018/06/19 13:43:49 " The behavior is set by the 'skip' setting; if it is anything other\n       * than SKIP_BAD_CRC ignore the bad CRC and return the chunk, with a\n       * corrected CRC and possibly processed, to libpng.  Otherwise skip the\n       * chunk, which will result in a fatal error if the chunk is critical.\n       "
2018/06/19 13:43:49 " Ignore the bad CRC  "
2018/06/19 13:43:49 " This will cause an IEND with a bad CRC to stop "
2018/06/19 13:43:49 " NOTE: this cannot be reached for IEND because it is critical. "
2018/06/19 13:43:49 " Check for other 'skip' cases and handle these; these only apply to\n    * ancillary chunks (and not tRNS, which should probably have been a critical\n    * chunk.)\n    "
2018/06/19 13:43:49 " The chunk may still be skipped if problems are detected in the LZ data,\n    * however the LZ data check requires a chunk.  Handle this by instantiating\n    * a chunk unless an IDAT is already instantiated (IDAT control structures\n    * instantiate their own chunk.)\n    "
2018/06/19 13:43:49 "chunk"
2018/06/19 13:43:49 "IDAT"
2018/06/19 13:43:49 " The chunk length must be updated for process_IDAT "
2018/06/19 13:43:49 " Record the 'next' information too, now that the original values for\n    * this chunk have been copied.  Notice that the IDAT chunks only make a\n    * copy of the position of the first chunk, this is fine - process_IDAT does\n    * not need the position of this chunk.\n    "
2018/06/19 13:43:49 " Do per-type processing, note that if this code does not return from the\n    * function the chunk will be skipped.  The rewrite is cancelled here so that\n    * it can be set in the per-chunk processing.\n    "
2018/06/19 13:43:49 " Read this now and update the control structure with the information\n          * it contains.  The header is validated completely to ensure this is a\n          * PNG.\n          "
2018/06/19 13:43:49 " Read all the IHDR information and validate it. "
2018/06/19 13:43:49 " This validates all the fields, and calls stop_invalid if\n             * there is a problem.\n             "
2018/06/19 13:43:49 " Ancillary chunks that require further processing: "
2018/06/19 13:43:49 " First pass: "
2018/06/19 13:43:49 " Control reaches this point if the chunk must be skipped.  For chunks other\n    * than IDAT this means that the zlib compressed data is fatally damanged and\n    * the chunk will not be passed to libpng.  For IDAT it means that the end of\n    * the IDAT stream has not yet been reached and we must handle the next\n    * (IDAT) chunk.  If the LZ data in an IDAT stream cannot be read 'stop' must\n    * be used to halt parsing of the PNG.\n    "
2018/06/19 13:43:49 " This is the generic code to skip the current chunk; simply jump to the\n    * next one.\n    "
2018/06/19 13:43:49 " Read a 32-bit value from an 8-byte circular buffer (used only below).\n    "
2018/06/19 13:43:49 " The stream seems to be messed up, attempt to resync from the current chunk\n    * header.  Executes stop on a fatal error, otherwise calls process_chunk.\n    "
2018/06/19 13:43:49 " Return to the start of the chunk data "
2018/06/19 13:43:49 " else completely truncated "
2018/06/19 13:43:49 " Ignore the recorded chunk length, proceed through the data looking for\n       * a leading sequence of bytes that match the CRC in the following four\n       * bytes.  Each time a match is found check the next 8 bytes for a valid\n       * length, chunk-type pair.\n       "
2018/06/19 13:43:49 " A match on the CRC; for IEND this is sufficient, but for anything\n             * else expect a following chunk header.\n             "
2018/06/19 13:43:49 " Need 8 bytes "
2018/06/19 13:43:49 " Prevent overflow "
2018/06/19 13:43:49 " or, nused &= 7 ;-) "
2018/06/19 13:43:49 " Examine the 8 bytes for a valid chunk header. "
2018/06/19 13:43:49 " Not valid, keep going. "
2018/06/19 13:43:49 " This catches up with the circular buffer which gets filled above\n          * while checking a chunk header.  This code is slightly tricky - if\n          * the chunk_type is IEND the buffer will never be used, if it is not\n          * the code will always read ahead exactly 8 bytes and pass this on to\n          * process_chunk.  So the invariant that IEND leaves the file position\n          * after the IEND CRC and other chunk leave it after the *next* chunk\n          * header is not broken.\n          "
2018/06/19 13:43:49 " Control gets to here if when 0x7fffffff bytes (plus 8) have been read,\n       * ok, treat this as a damaged stream too:\n       "
2018/06/19 13:43:49 " On entry file::data_pos must be set to the position of the first byte\n    * of the chunk data *and* the input file must be at this position.  This\n    * routine (via process_chunk) instantiates a chunk or IDAT control structure\n    * based on file::length and file::type and also resets these fields and\n    * file::data_pos for the chunk after this one.  For an IDAT chunk the whole\n    * stream of IDATs will be read, until something other than an IDAT is\n    * encountered, and the file fields will be set for the chunk after the end\n    * of the stream of IDATs.\n    *\n    * For IEND the file::type field will be set to 0, and nothing beyond the end\n    * of the IEND chunk will have been read.\n    "
2018/06/19 13:43:49 " After IEND file::type is set to 0, if libpng attempts to read\n    * more data at this point this is a bug in libpng.\n    "
2018/06/19 13:43:49 " Start the read_crc calculation with the chunk type, then read to the end\n    * of the chunk data (without processing it in any way) to check that it is\n    * all there and calculate the CRC.\n    "
2018/06/19 13:43:49 " else it was truncated "
2018/06/19 13:43:49 " CRC read from file "
2018/06/19 13:43:49 " do not read beyond IEND "
2018/06/19 13:43:49 " Adjust the read count back to the correct value for this\n                   * chunk.\n                   "
2018/06/19 13:43:49 " IEND "
2018/06/19 13:43:49 " Control gets to here if the the stream seems invalid or damaged in some\n    * way.  Either there was a problem reading all the expected data (this\n    * chunk's data, its CRC and the length and type of the next chunk) or the\n    * next chunk length/type are invalid.  Notice that the cases that end up\n    * here all correspond to cases that would otherwise terminate the read of\n    * the PNG file.\n    "
2018/06/19 13:43:49 " This returns a file* from a png_struct in an implementation specific way. "
2018/06/19 13:43:49 " Read callback - this is where the work gets done to check the stream before\n * passing it to libpng\n "
2018/06/19 13:43:49 " Return 'count' bytes to libpng in 'buffer' "
2018/06/19 13:43:49 " For the chunk be *WRITTEN* "
2018/06/19 13:43:49 " libpng should always ask for at least one byte "
2018/06/19 13:43:49 " The callback always reads ahead by 8 bytes - the signature or chunk header\n    * - these bytes are stored in chunk_length and chunk_type.  This block is\n    * executed once for the signature and once for the first chunk right at the\n    * start.\n    "
2018/06/19 13:43:49 " Else write it (this is the initialization of write_count, prior to\n          * this it contains CLEAR garbage.)\n          "
2018/06/19 13:43:49 " The first chunk must be a well formed IHDR (this could be relaxed to\n          * use the checks in process_chunk, but that seems unnecessary.)\n          "
2018/06/19 13:43:49 " The position of the data must be stored too "
2018/06/19 13:43:49 " Retrieve previous state (because the read callbacks are made pretty much\n    * byte-by-byte in the sequential reader prior to 1.7).\n    "
2018/06/19 13:43:49 " This is the signature case; for IDAT and other chunks these values will\n       * be overwritten when read_chunk is called below.\n       "
2018/06/19 13:43:49 " Complete the read of a chunk; as a side effect this also instantiates\n       * a chunk control structure and sets the file length/type/data_pos fields\n       * for the *NEXT* chunk header.\n       *\n       * NOTE: at an IDAT any following IDAT chunks will also be read and the\n       * next_ fields will refer to the chunk after the last IDAT.\n       *\n       * NOTE: read_chunk only returns when it has read a chunk that must now be\n       * written.\n       "
2018/06/19 13:43:49 " Do the initialization that was not done before. "
2018/06/19 13:43:49 " And start writing the new chunk. "
2018/06/19 13:43:49 " The chunk_ fields describe a chunk that must be written, or hold the\n       * signature.  Write the header first.  In the signature case this\n       * rewrites the signature.\n       "
2018/06/19 13:43:49 " The header has been written.  If this is really the signature\n             * that's all that is required and we can go to normal chunk\n             * processing.\n             "
2018/06/19 13:43:49 " The signature has been written, the tail call to read_callback\n                * below (it's just a goto to the start with a decent compiler)\n                * will read the IHDR header ahead and validate it.\n                "
2018/06/19 13:43:49 " Forces a header read \n IHDR: checked above "
2018/06/19 13:43:49 " Set up for write, notice that repositioning the input stream\n                * is only necessary if something is to be read from it.  Also\n                * notice that for the IDAT stream this must only happen once -\n                * on the first IDAT - to get back to the start of the list and\n                * this is done inside process_IDAT:\n                "
2018/06/19 13:43:49 " FALLTHROUGH "
2018/06/19 13:43:49 " NOTE: the arithmetic below overflows and gives a large positive\n             * png_uint_32 value until the whole chunk data has been written.\n             "
2018/06/19 13:43:49 " Write the chunk data, normally this just comes from\n                * the file.  The only exception is for that part of a\n                * chunk which is zlib data and which must be rewritten,\n                * and IDAT chunks which can be completely\n                * reconstructed.\n                "
2018/06/19 13:43:49 " Read an IDAT byte from the input stream of IDAT chunks.\n                      * Because the IDAT stream can be re-chunked this stream is\n                      * held in the struct IDAT members.  The chunk members, in\n                      * particular chunk_length (and therefore the length local)\n                      * refer to the output chunk.\n                      "
2018/06/19 13:43:49 " Advance one chunk "
2018/06/19 13:43:49 " NOTE: IDAT_list::count here, not IDAT_list::length "
2018/06/19 13:43:49 " Move on to the next IDAT_list: "
2018/06/19 13:43:49 " This is an internal error - read beyond the end of\n                            * the pre-calculated stream.\n                            "
2018/06/19 13:43:49 " Zero length IDAT chunks are permitted, so the length\n                         * here may be 0.\n                         "
2018/06/19 13:43:49 " And skip 12 bytes to the next chunk data "
2018/06/19 13:43:49 " The index is always that of the next byte, the rest of\n                      * the information is always the current IDAT chunk and the\n                      * current list.\n                      "
2018/06/19 13:43:49 " Read the byte from the stream. "
2018/06/19 13:43:49 " If the byte must be rewritten handle that here "
2018/06/19 13:43:49 " The CRC is written at:\n                *\n                *    chunk_write == chunk_length+8..chunk_length+11\n                *\n                * so 8 to 11.  The CRC is not (yet) conditioned.\n                "
2018/06/19 13:43:49 " This must happen before the chunk_end below: "
2018/06/19 13:43:49 " The IDAT stream is written without a call to read_chunk\n                   * until the end is reached.  rechunk_length() calculates the\n                   * length of the output chunks.  Control gets to this point at\n                   * the end of an *output* chunk - the length calculated by\n                   * rechunk_length.  If this corresponds to the end of the\n                   * input stream stop writing IDAT chunks, otherwise continue.\n                   "
2018/06/19 13:43:49 " Write another IDAT chunk.  Call rechunk_length to\n                      * calculate the length required.\n                      "
2018/06/19 13:43:49 "end"
2018/06/19 13:43:49 " for the new chunk \n fake out the increment below "
2018/06/19 13:43:49 " Entered at the end of a non-IDAT chunk and at the end of\n                      * the IDAT stream.  The rewrite should have been cleared.\n                      "
2018/06/19 13:43:49 " This is the last byte so reset chunk_read for the next\n                      * chunk and move the input file to the position after the\n                      * *next* chunk header if required.\n                      "
2018/06/19 13:43:49 " conditioning "
2018/06/19 13:43:49 " Write one byte "
2018/06/19 13:43:49 " increments chunk_write "
2018/06/19 13:43:49 " Bundle the file and an uninitialized chunk and IDAT control structure\n * together to allow implementation of the chunk/IDAT allocate routine.\n "
2018/06/19 13:43:49 " This just returns the (file*).  The chunk and idat control structures\n    * don't always exist.\n    "
2018/06/19 13:43:49 " chunk "
2018/06/19 13:43:49 " This wraps file_init(&control::file) and simply returns the result from\n    * file_init.\n    "
2018/06/19 13:43:49 " Read a PNG, return 0 on success else an error (status) code; a bit mask as\n    * defined for file::status_code as above.\n    "
2018/06/19 13:43:49 " This is not really expected. "
2018/06/19 13:43:49 " Remove any limits on the size of PNG files that can be read,\n          * without this we may reject files based on built-in safety\n          * limits.\n          "
2018/06/19 13:43:49 " NOTE: this skips asking libpng to return either version of\n            * the image row, but libpng still reads the rows.\n            "
2018/06/19 13:43:49 " Make sure to read to the end of the file: "
2018/06/19 13:43:49 " Although control_init can return a failure code the structure is always\n    * initialized, so control_end can be used to accumulate any status codes.\n    "
2018/06/19 13:43:49 " ANSI C-90 limits strings to 509 characters, so use a string array: "
2018/06/19 13:43:49 "NYI"
2018/06/19 13:43:49 " if at least one file is processed "
2018/06/19 13:43:49 " To help debugging problems: "
2018/06/19 13:43:49 " NYI "
2018/06/19 13:43:49 " else this takes precedence "
2018/06/19 13:43:49 " Consider the prefix/suffix options "
2018/06/19 13:43:49 " ZLIB_VERNUM < 0x1240 "
2018/06/19 13:43:49 " ZLIB_VERNUM "
2018/06/19 13:43:49 " No read support "
2018/06/19 13:43:49 " PNG_READ_SUPPORTED && PNG_EASY_ACCESS_SUPPORTED \n No setjmp support "
2018/06/19 13:43:49 " PNG_SETJMP_SUPPORTED "
2018/06/19 13:43:49 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/tools/pngfix.c": 222.542356ms
2018/06/19 13:43:49 Couldn't classify license(s)
2018/06/19 13:43:49 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/tools/reindent
2018/06/19 13:43:50 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/tools/reindent": 8.371873ms
2018/06/19 13:43:50 Couldn't classify license(s)
2018/06/19 13:43:50 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/tools/intgamma.sh
2018/06/19 13:43:50 detected language: 32
2018/06/19 13:43:50 110:EOF in string
2018/06/19 13:43:50 "!/bin/sh\n\n intgamma.sh\n\n Last changed in libpng 1.6.0 [February 14, 2013]\n\n COPYRIGHT: Written by John Cunningham Bowler, 2013.\n To the extent possible under law, the author has waived all copyright and\n related or neighboring rights to this work.  This work is published from:\n United States.\n\n Shell script to generate png.c 8-bit and 16-bit log tables (see the code in\n png.c for details).\n\n This script uses the \"bc\" arbitrary precision calculator to calculate 32-bit\n fixed point values of logarithms appropriate to finding the log of an 8-bit\n (0..255) value and a similar table for the exponent calculation.\n\n \"bc\" must be on the path when the script is executed, and the math library\n (-lm) must be available\n\n function to print out a list of numbers as integers; the function truncates\n the integers which must be one-per-line"
2018/06/19 13:43:50 "\n The logarithm table."
2018/06/19 13:43:50 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/tools/intgamma.sh": 9.747345ms
2018/06/19 13:43:50 Couldn't classify license(s)
2018/06/19 13:43:51 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/tools/cvtcolor.c
2018/06/19 13:43:51 detected language: 4
2018/06/19 13:43:51 "-\n * convert.c\n *\n * Last changed in libpng 1.6.0 [February 14, 2013]\n *\n * COPYRIGHT: Written by John Cunningham Bowler, 2013.\n * To the extent possible under law, the author has waived all copyright and\n * related or neighboring rights to this work.  This work is published from:\n * United States.\n *\n * Convert 8-bit sRGB or 16-bit linear values to another format.\n "
2018/06/19 13:43:51 " FE_TONEAREST is the IEEE754 round to nearest, preferring even, mode; i.e.\n    * everything rounds to the nearest value except that '.5' rounds to the\n    * nearest even value.\n    "
2018/06/19 13:43:51 " alpha, if present "
2018/06/19 13:43:51 " to sRGB "
2018/06/19 13:43:51 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/tools/cvtcolor.c": 9.56197ms
2018/06/19 13:43:51 Couldn't classify license(s)
2018/06/19 13:43:52 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/tools/chkfmt
2018/06/19 13:43:52 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/tools/chkfmt": 17.935694ms
2018/06/19 13:43:52 Couldn't classify license(s)
2018/06/19 13:43:53 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/tools/pngcp.c
2018/06/19 13:43:53 detected language: 4
2018/06/19 13:43:53 " pngcp.c\n *\n * Copyright (c) 2016 John Cunningham Bowler\n *\n * Last changed in libpng 1.6.24 [August 4, 2016]\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * This is an example of copying a PNG without changes using the png_read_png\n * and png_write_png interfaces.  A considerable number of options are provided\n * to manipulate the compression of the PNG data and other compressed chunks.\n *\n * For a more extensive example that uses the transforms see\n * contrib/libtests/pngimage.c in the libpng distribution.\n "
2018/06/19 13:43:53 " To find how libpng was configured. "
2018/06/19 13:43:53 " WARNING:\n    *\n    * This test is here to allow POSIX.1b extensions to be used if enabled in\n    * the compile; specifically the code requires_POSIX_C_SOURCE support of\n    * 199309L or later to enable clock_gettime use.\n    *\n    * IF this causes problems THEN compile with a strict ANSI C compiler and let\n    * this code turn on the POSIX features that it minimally requires.\n    *\n    * IF this does not work there is probably a bug in your ANSI C compiler or\n    * your POSIX implementation.\n    "
2018/06/19 13:43:53 " No timing support required "
2018/06/19 13:43:53 " Define the following to use this test against your installed libpng, rather\n * than the one being built here:\n "
2018/06/19 13:43:53 " READ_PNG and WRITE_PNG were not defined, so: "
2018/06/19 13:43:53 " SEQUENTIAL_READ "
2018/06/19 13:43:53 " WRITE \n INFO_IMAGE \n pre 1.7.0 "
2018/06/19 13:43:53 " because png.h did *not* include this "
2018/06/19 13:43:53 " __cplusplus "
2018/06/19 13:43:53 " Many versions of GCC erroneously report that local variables unmodified\n    * within the scope of a setjmp may be clobbered.  This hacks round the\n    * problem (sometimes) without harming other compilers.\n    "
2018/06/19 13:43:53 " 'CLOCK_PROCESS_CPUTIME_ID' is one of the clock timers for clock_gettime.  It\n * need not be supported even when clock_gettime is available.  It returns the\n * 'CPU' time the process has consumed.  'CPU' time is assumed to include time\n * when the CPU is actually blocked by a pending cache fill but not time\n * waiting for page faults.  The attempt is to get a measure of the actual time\n * the implementation takes to read a PNG ignoring the potentially very large IO\n * overhead.\n "
2018/06/19 13:43:53 " clock_gettime and associated definitions "
2018/06/19 13:43:53 " Prevent inclusion of the spurious code: "
2018/06/19 13:43:53 " PNGCP_TIMING "
2018/06/19 13:43:53 " So if the timing feature has been activated: "
2018/06/19 13:43:53 " This structure is used to control the test of a single file. "
2018/06/19 13:43:53 " switches on all messages "
2018/06/19 13:43:53 " switches on warnings "
2018/06/19 13:43:53 " just errors \n continuable error - no need to longjmp \n this and higher cause a longjmp \n erroneous behavior in libpng \n such as out-of-memory in a callback \n no normal messages \n such as file-not-found "
2018/06/19 13:43:53 " where the level is in 'options' "
2018/06/19 13:43:53 " Fail on warnings as well as errors \n Log pass/fail to stdout \n Continue on APP_FAIL errors \n Report input and output sizes \n Search IDAT compression options \n Do not write an output file "
2018/06/19 13:43:53 " Ignore out of range palette indices (BAD!) "
2018/06/19 13:43:53 " 'Fix' out of range palette indices (OK) \n GET_PALETTE_MAX \n CHECK_FOR_INVALID_INDEX \n Used for handling options \n Used for handling options "
2018/06/19 13:43:53 " Result masks apply to the result bits in the 'results' field below; these\n * bits are simple 1U<<error_level.  A pass requires either nothing worse than\n * warnings (--relaxes) or nothing worse than information (--strict)\n "
2018/06/19 13:43:53 " OPTION DEFINITIONS "
2018/06/19 13:43:53 " the command line name of the value \n the actual value to use "
2018/06/19 13:43:53 " Overall compression control.  The order controls the search order for\n    * 'all'.  Since the search is for the smallest the order used is low memory\n    * then high speed.\n    "
2018/06/19 13:43:53 " SW_COMPRESS_png_level "
2018/06/19 13:43:53 " This controls the order of search. "
2018/06/19 13:43:53 " the remainder do window searchs "
2018/06/19 13:43:53 "from zlib"
2018/06/19 13:43:53 "from zlib"
2018/06/19 13:43:53 " text compression "
2018/06/19 13:43:53 " this is -1 "
2018/06/19 13:43:53 " this deliberately excludes '0' "
2018/06/19 13:43:53 " zlib maximum \n zlib minimum \n zlib default "
2018/06/19 13:43:53 " for explicit testing \nzlib\n exclude 5 and below: zlib bugs "
2018/06/19 13:43:53 " WRITE_CUSTOMIZE_*COMPRESSION "
2018/06/19 13:43:53 " WRITE_FILTER "
2018/06/19 13:43:53 " PNGCP_TIMING \n for png_set_IDAT_size "
2018/06/19 13:43:53 " Pre 1.7 API: "
2018/06/19 13:43:53 " !SW_IDAT_size \n stack limit in display, below "
2018/06/19 13:43:53 " modified by set_windowBits_hi "
2018/06/19 13:43:53 " IDAT compression "
2018/06/19 13:43:53 " name of the option \n an option, or OPTION or LIST \n Search on --search \n length of the list of values: \n values for OPTION or LIST "
2018/06/19 13:43:53 " struct display options, these are set when the command line is read "
2018/06/19 13:43:53 " IGNORE_INDEX "
2018/06/19 13:43:53 " FIX_INDEX "
2018/06/19 13:43:53 " OPTION settings, these and LIST settings are read on demand "
2018/06/19 13:43:53 "search"
2018/06/19 13:43:53 "search"
2018/06/19 13:43:53 " WRITE_CUSTOMIZE_COMPRESSION "
2018/06/19 13:43:53 "search"
2018/06/19 13:43:53 " WRITE_CUSTOMIZE_ZTXT_COMPRESSION "
2018/06/19 13:43:53 " The libpng compression level isn't searched beause it justs sets the\n       * other things that are searched!\n       "
2018/06/19 13:43:53 " SW_COMPRESS_png_level "
2018/06/19 13:43:53 "sic"
2018/06/19 13:43:53 " LIST settings "
2018/06/19 13:43:53 " WRITE_FILTER "
2018/06/19 13:43:53 " PNGCP_TIMING "
2018/06/19 13:43:53 " !__cplusplus "
2018/06/19 13:43:53 " !__cplusplus "
2018/06/19 13:43:53 " Where to go to on error \n error_return is set "
2018/06/19 13:43:53 " What is happening \n The name of the original file \n The name of the output file "
2018/06/19 13:43:53 " Used on both read and write: "
2018/06/19 13:43:53 " Used on a read, both the original read and when validating a written\n    * image.\n    "
2018/06/19 13:43:53 " stash of text chunks "
2018/06/19 13:43:53 " pre 1.7 "
2018/06/19 13:43:53 " PNGCP_TIMING "
2018/06/19 13:43:53 " Used to write a new image (the original info_ptr is used) "
2018/06/19 13:43:53 " Base file information "
2018/06/19 13:43:53 " Do not output libpng warnings \n The windowBits range is 8..8 "
2018/06/19 13:43:53 " Options handling \n A mask of errors seen \n See display_log below \n The selected entry+1 of an option\n                                          * that appears on the command line, or\n                                          * 0 if it was not given. "
2018/06/19 13:43:53 " Corresponding value "
2018/06/19 13:43:53 " Compression exhaustive testing \n Temporary variables used only while testing a single collection of\n    * settings:\n    "
2018/06/19 13:43:53 " next stack entry to use \n highest active entry+1 found so far "
2018/06/19 13:43:53 " Values used while iterating through all the combinations of settings for a\n    * single file:\n    "
2018/06/19 13:43:53 " nsp from the last run; this is the\n                                        * index+1 of the highest active entry on\n                                        * this run; this entry will be advanced.\n                                        "
2018/06/19 13:43:53 " Position in buffer for the first\n                                        * searched option; non-zero if earlier\n                                        * options were set on the command line.\n                                        "
2018/06/19 13:43:53 " Best so far for this option "
2018/06/19 13:43:53 " For binary chop of a range \n Best value found so far \n End of the option string in 'curr' \n The option being tested \n The next value entry to be tested \n This is the last entry \n Stack of entries being tested \n current options being tested \n best options "
2018/06/19 13:43:53 " output file name "
2018/06/19 13:43:53 " Call this only once right at the start to initialize the control\n    * structure, the (struct buffer) lists are maintained across calls - the\n    * memory is not freed.\n    "
2018/06/19 13:43:53 " default to !verbose, !quiet "
2018/06/19 13:43:53 " this is an OPTIND, so -1 won't match anything "
2018/06/19 13:43:53 " pre 1.7 "
2018/06/19 13:43:53 " This is actually created and used by the write code, but only\n       * once; it has to be retained for subsequent writes of the same file.\n       "
2018/06/19 13:43:53 " pre 1.7 "
2018/06/19 13:43:53 " leave the filename for error detection \n reset for next time "
2018/06/19 13:43:53 " Release any memory held in the display. "
2018/06/19 13:43:53 " The display pointer is always stored in the png_struct error pointer "
2018/06/19 13:43:53 " prevents a crash "
2018/06/19 13:43:53 " error handling "
2018/06/19 13:43:53 " Required to quiet GNUC warnings when the compiler sees a stdarg function\n    * that calls one of the stdio v APIs.\n    "
2018/06/19 13:43:53 " 'level' is as above, fmt is a stdio style format string.  This routine\n    * does not return if level is above LIBPNG_WARNING\n    "
2018/06/19 13:43:53 " anything unexpected is an internal error: "
2018/06/19 13:43:53 " else do not output any message "
2018/06/19 13:43:53 " Errors cause this routine to exit to the fail code "
2018/06/19 13:43:53 " libpng 1.6 and earlier fixed a bug whereby text chunks were written\n    * multiple times by png_write_png; the issue was that png_write_png passed\n    * the same png_info to both png_write_info and png_write_end.  Rather than\n    * fixing it by recording the information in the png_struct, or by recording\n    * where to write the chunks, the fix made was to change the 'compression'\n    * field of the chunk to invalid values, rendering the png_info somewhat\n    * useless.\n    *\n    * The only fix for this given that we use the png_info more than once is to\n    * make a copy of the text chunks and png_set_text it each time.  This adds a\n    * text chunks, so they get replicated, but only the new set gets written\n    * each time.  This uses memory like crazy but there is no way to delete the\n    * useless chunks from the png_info.\n    *\n    * To make this slightly more efficient only the top level structure is\n    * copied; since the old strings are actually preserved (in 1.6 and earlier)\n    * this happens to work.\n    "
2018/06/19 13:43:53 " regardless of whether there are chunks or not "
2018/06/19 13:43:53 " libpng makes a copy, so this is fine: "
2018/06/19 13:43:53 " pre 1.7 "
2018/06/19 13:43:53 " OPTIONS:\n *\n * The command handles options of the forms:\n *\n *    --option\n *       Turn an option on (Option)\n *    --no-option\n *       Turn an option off (Option)\n *    --option=value\n *       Set an option to a value (Value)\n *    --option=val1,val2,val3\n *       Set an option to a bitmask constructed from the values (List)\n "
2018/06/19 13:43:53 " Return the index (in options[]) of the given option, outputs an error if\n    * it does not exist.  Takes the name of the option and a length (number of\n    * characters in the name).\n    "
2018/06/19 13:43:53 " If the setjmp buffer is set the code is asking for an option index; this\n    * is bad.  Otherwise this is the command line option parsing.\n    "
2018/06/19 13:43:53 "SAFE\n NOT REACHED "
2018/06/19 13:43:53 " This works for an option name (no quotes): "
2018/06/19 13:43:53 " option was set on command line "
2018/06/19 13:43:53 " Add the appropriate option string to dp->curr. "
2018/06/19 13:43:53 "SAFE"
2018/06/19 13:43:53 " Add the appropriate option string to dp->curr. "
2018/06/19 13:43:53 " Record this option in dp->curr; called for an option not being searched,\n    * the caller passes in the name of the value, or range_lo to use the\n    * numerical value.\n    "
2018/06/19 13:43:53 " stack entry of next searched option "
2018/06/19 13:43:53 " At top of stack; add the opt string for this entry to the previous\n       * searched entry or the start of the dp->curr buffer if there is nothing\n       * on the stack yet (sp == 0).\n       "
2018/06/19 13:43:53 " else do nothing: option already recorded "
2018/06/19 13:43:53 " missing range_hi \n likewise \n range end "
2018/06/19 13:43:53 " missing 'all' \n last entry "
2018/06/19 13:43:53 " Push a new option onto the stack, initializing the new stack entry\n    * appropriately; this does all the work of next_opt (setting end/nsp) for\n    * the first entry in the list.\n    "
2018/06/19 13:43:53 " The starting entry is entry 0 unless there is a range in which case it is\n    * the entry corresponding to range_lo:\n    "
2018/06/19 13:43:53 " search this range "
2018/06/19 13:43:53 " check for a mal-formed RANGE above: "
2018/06/19 13:43:53 " next_opt will just iterate over the range. "
2018/06/19 13:43:53 " Prevent range chop "
2018/06/19 13:43:53 " This works for the search case too; if the range has only one entry 'end'\n    * will be marked here.\n    "
2018/06/19 13:43:53 " Skip the warning if pngcp did this itself.  See the code in\n       * set_windowBits_hi.\n       "
2018/06/19 13:43:53 " Do a lazy cache of the text chunks for libpng 1.6 and earlier; this is\n    * because they can only be written once(!) so if we are going to re-use the\n    * png_info we need a copy.\n    "
2018/06/19 13:43:53 " Return the next value for this option.  When called 'sp' is expected to be\n    * the topmost stack entry - only the topmost entry changes each time round -\n    * and there must be a valid entry to return.  next_opt will set dp->nsp to\n    * sp+1 if more entries are available, otherwise it will not change it and\n    * set dp->stack[s].end to true.\n    "
2018/06/19 13:43:53 " dp->stack[sp] must be the top stack entry and it must be active: "
2018/06/19 13:43:53 " For ranges increment the value but don't change the entry, for all other\n    * cases move to the next entry and load its value:\n    "
2018/06/19 13:43:53 " a range "
2018/06/19 13:43:53 " A range can be iterated over or searched.  The default iteration option\n       * is indicated by hi < lo on the stack, otherwise the range being search\n       * is [lo..hi] (inclusive).\n       "
2018/06/19 13:43:53 " This is the best size found for this option value: "
2018/06/19 13:43:53 " end is determined here "
2018/06/19 13:43:53 " Finding the best for the low end of the range: "
2018/06/19 13:43:53 " only 2 entries "
2018/06/19 13:43:53 " else 'end' set above "
2018/06/19 13:43:53 " only three entries to test "
2018/06/19 13:43:53 " lo and hi should have been tested. "
2018/06/19 13:43:53 " These cases arise with the 'probe' handling below when there is a\n             * dip or peak in the size curve.\n             "
2018/06/19 13:43:53 " probing a new lo "
2018/06/19 13:43:53 " Swap lo and val: "
2018/06/19 13:43:53 " probing a new hi "
2018/06/19 13:43:53 " Swap hi and val: "
2018/06/19 13:43:53 " The following should be true or something got messed up above. "
2018/06/19 13:43:53 " If there are only four entries (lo, val, hi plus one more) just\n             * test the remaining entry.\n             "
2018/06/19 13:43:53 " Because of the 'probe' code val can either be lo+1 or hi-1; we\n                * need to test the other.\n                "
2018/06/19 13:43:53 " There are at least 2 entries still untested between lo and hi,\n                * i.e. hi >= lo+4.  'val' is the midpoint +/- 0.5\n                *\n                * Separate out the four easy cases when lo..val..hi are\n                * monotonically decreased or (more weird) increasing:\n                "
2018/06/19 13:43:53 " Select the low range; testing this first favours the low\n                   * range over the high range when everything comes out equal.\n                   * Because of the probing 'val' may be lo+1.  In that case end\n                   * the search and set 'val' to lo+2.\n                   "
2018/06/19 13:43:53 " Monotonically decreasing size; this is the expected case.\n                   * Select the high end of the range.  As above, val may be\n                   * hi-1.\n                   "
2018/06/19 13:43:53 " If both those tests failed 'best_size' is either greater than\n                * or less than both lo_size and hi_size.  There is a peak or dip\n                * in the curve of sizes from lo to hi and val is on the peak or\n                * dip.\n                *\n                * Because the ranges being searched as so small (level is 1..9,\n                * windowBits 8..15, memLevel 1..9) there will only be at most\n                * three untested values between lo..val and val..hi, so solve\n                * the problem by probing down from hi or up from lo, whichever\n                * is the higher.\n                *\n                * This is the place where 'val' is set to outside the range\n                * lo..hi, described as 'probing', though maybe 'narrowing' would\n                * be more accurate.\n                "
2018/06/19 13:43:53 " down from hi "
2018/06/19 13:43:53 " up from low "
2018/06/19 13:43:53 " lo and hi are still the true range limits, check for the end\n                * condition.\n                "
2018/06/19 13:43:53 " should be a new value "
2018/06/19 13:43:53 " Increment 'entry' "
2018/06/19 13:43:53 " end of list "
2018/06/19 13:43:53 " still active after all these tests "
2018/06/19 13:43:53 " If the best so far is numerically less than the current value the\n    * current set of options is invariably worse.\n    "
2018/06/19 13:43:53 " Lists of options are searched out of numerical order (currently only\n    * strategy), so only return +1 here when a range is being searched.\n    "
2018/06/19 13:43:53 "searching"
2018/06/19 13:43:53 " match; current value is the best one "
2018/06/19 13:43:53 " my stack entry "
2018/06/19 13:43:53 " nsp starts off zero "
2018/06/19 13:43:53 " If the entry was active in the previous run dp->stack[sp] is already\n    * set up and dp->tsp will be greater than sp, otherwise a new entry\n    * needs to be created.\n    *\n    * dp->nsp is handled this way:\n    *\n    * 1) When an option is pushed onto the stack dp->nsp and dp->tsp are\n    *    both set (by push_opt) to the next stack entry *unless* there is\n    *    only one entry in the new list, in which case dp->stack[sp].end\n    *    is set.\n    *\n    * 2) For the top stack entry next_opt is called.  The entry must be\n    *    active (dp->stack[sp].end is not set) and either 'nsp' or 'end'\n    *    will be updated as appropriate.\n    *\n    * 3) For lower stack entries nsp is set unless the stack entry is\n    *    already at the end.  This means that when all the higher entries\n    *    are popped this entry will be too.\n    "
2018/06/19 13:43:53 " This sets tsp to sp+1 \n initialized "
2018/06/19 13:43:53 " unchanged "
2018/06/19 13:43:53 " An option that is already on the stack; update best_size and best_val\n       * if appropriate.  On the first run there are no previous values and\n       * dp->write_size will be MAX_SIZE, however on the first run dp->tsp\n       * starts off as 0.\n       "
2018/06/19 13:43:53 " advanced "
2018/06/19 13:43:53 " Active, not at top of stack "
2018/06/19 13:43:53 " advanced || unchanged "
2018/06/19 13:43:53 " Like getop but iterate over all the values if the option was set to \"all\".\n    "
2018/06/19 13:43:53 " option was set on command line "
2018/06/19 13:43:53 " Simple, single value, entries don't have a stack frame and have a fixed\n       * value (it doesn't change once set on the command line).  Otherwise the\n       * value (entry) selected from the command line is 'all':\n       "
2018/06/19 13:43:53 "do not search; iterate"
2018/06/19 13:43:53 " set "
2018/06/19 13:43:53 " not set "
2018/06/19 13:43:53 " As above except that if the option was not set try a search "
2018/06/19 13:43:53 " If it was set on the command line honour the setting, including 'all'\n    * which will override the built in search:\n    "
2018/06/19 13:43:53 " not a search option \n unset and not searched "
2018/06/19 13:43:53 " Otherwise decide what to do here. "
2018/06/19 13:43:53 " record the value, not the name "
2018/06/19 13:43:53 " search all strategies \niterate"
2018/06/19 13:43:53 " Both RLE and HUFFMAN don't benefit from level increases "
2018/06/19 13:43:53 " fixed, filtered or default \nsearch"
2018/06/19 13:43:53 " Changing windowBits for strategies that do not search the window is\n       * pointless.  Huffman-only does not search, RLE only searches backwards\n       * one byte, so given that the maximum string length is 258, a windowBits\n       * of 9 is always sufficient.\n       "
2018/06/19 13:43:53 " fixed, filtered or default \nsearch"
2018/06/19 13:43:53 "all"
2018/06/19 13:43:53 " something else "
2018/06/19 13:43:53 " One of the above searched options: "
2018/06/19 13:43:53 " Like option_index but sets (index+i) of the entry in options[opt] that\n    * matches str[0..len-1] into dp->entry[opt] as well as returning the actual\n    * value.\n    "
2018/06/19 13:43:53 " No match on the name, but there may be a range. "
2018/06/19 13:43:53 " range_lo \nSAFE"
2018/06/19 13:43:53 "SAFE\n NOT REACHED "
2018/06/19 13:43:53 " --no- "
2018/06/19 13:43:53 " -- "
2018/06/19 13:43:53 " Find the length (expect arg\\0 or arg=) "
2018/06/19 13:43:53 " So arg[0..i-1] is the argument name, this does not return if this isn't\n       * a valid option name.\n       "
2018/06/19 13:43:53 " It matcheth an option; check the remainder. \n no specified value, use the default "
2018/06/19 13:43:53 "SAFE"
2018/06/19 13:43:53 " Expect a single value here unless this is a list, in which case\n          * multiple values are combined.\n          "
2018/06/19 13:43:53 " find_val sets 'dp->entry[j]' to a non-zero value: "
2018/06/19 13:43:53 " NOT REACHED "
2018/06/19 13:43:53 " multiple options separated by ',' characters "
2018/06/19 13:43:53 " --no-option negates list values from the default, which should\n             * therefore be 'all'.  Notice that if the option list is empty in\n             * this case nothing will be removed and therefore --no-option= is\n             * the same as --option.\n             "
2018/06/19 13:43:53 " allows option= which sets 0 "
2018/06/19 13:43:53 " A value is terminated by the end of the list or a ','\n                * character.\n                "
2018/06/19 13:43:53 " an index into 'list' "
2018/06/19 13:43:53 " skip the ',' "
2018/06/19 13:43:53 " 'val' is the new value, store it for use later and debugging: "
2018/06/19 13:43:53 " The handling for error levels is to set the level. \n Set this level "
2018/06/19 13:43:53 " this is an option "
2018/06/19 13:43:53 " not an option "
2018/06/19 13:43:53 " Do the timing using clock_gettime and the per-process timer. "
2018/06/19 13:43:53 " i.e. off "
2018/06/19 13:43:53 " !PNGCP_TIMING "
2018/06/19 13:43:53 " !PNGCP_TIMING "
2018/06/19 13:43:53 " The following is used in main to verify that the final argument is a\n * directory:\n "
2018/06/19 13:43:53 " Work out whether a path is valid (if not a display_log occurs), a directory\n * (1 is returned) or a file *or* non-existent (0 is returned).\n *\n * Used for a write path.\n "
2018/06/19 13:43:53 " stdout "
2018/06/19 13:43:53 " empty string "
2018/06/19 13:43:53 " the entry exists "
2018/06/19 13:43:53 " Else expect an object that exists and can be written: "
2018/06/19 13:43:53 " file (exists, can be written) "
2018/06/19 13:43:53 " an error "
2018/06/19 13:43:53 " Non-existence is fine, other errors are not: "
2018/06/19 13:43:53 " file (does not exist) "
2018/06/19 13:43:53 " Make a name for an output file (and check it). "
2018/06/19 13:43:53 " Allow for name + '/' + '\\0' "
2018/06/19 13:43:53 " This should fail before here: "
2018/06/19 13:43:53 " Find the rightmost non-/ character: "
2018/06/19 13:43:53 " dsize + infile + '\\0' "
2018/06/19 13:43:53 " allowed for: -2 at start "
2018/06/19 13:43:53 " error handler callbacks for libpng "
2018/06/19 13:43:53 " This is used to prevent repeated warnings while searching "
2018/06/19 13:43:53 " safety "
2018/06/19 13:43:53 "allowed\n BENIGN_ERRORS "
2018/06/19 13:43:53 "on, no warning"
2018/06/19 13:43:53 " IGNORE_INDEX \n FIX_INDEX "
2018/06/19 13:43:53 " DANGEROUS \noff completely\n IGNORE_INDEX "
2018/06/19 13:43:53 " The png_read_png API requires us to make the info struct, but it does the\n    * call to png_read_info.\n    "
2018/06/19 13:43:53 " Set the IO handling "
2018/06/19 13:43:53 " HANDLE_AS_UNKNOWN "
2018/06/19 13:43:53 " Remove the user limits, if any "
2018/06/19 13:43:53 " SET_USER_LIMITS "
2018/06/19 13:43:53 " Now read the PNG. "
2018/06/19 13:43:53 "transforms\nparams"
2018/06/19 13:43:53 " png_get_rowbytes should never return 0 because the value is set by the\n       * first call to png_set_IHDR, which should have happened by now, but just\n       * in case:\n       "
2018/06/19 13:43:53 " The size calc can overflow. "
2018/06/19 13:43:53 "filter byte"
2018/06/19 13:43:53 " 'Fix' the palette. "
2018/06/19 13:43:53 " Fill in any remainder with a warning color: "
2018/06/19 13:43:53 " FIX_INDEX "
2018/06/19 13:43:53 " The write fail is classed as a USER_ERROR, so --quiet does not turn it\n    * off, this seems more likely to be correct.\n    "
2018/06/19 13:43:53 " Compression option, 'method' is never set: there is no choice.\n *\n * IMPORTANT: the order of the entries in this macro determines the preference\n * order when two different combos of two of these options produce an IDAT of\n * the same size.  The logic here is to put the things that affect the decoding\n * of the PNG image ahead of those that are relevant only to the encoding.\n "
2018/06/19 13:43:53 " Like set_compression below but use a more restricted search than 'all' "
2018/06/19 13:43:53 " 1.7.0+ "
2018/06/19 13:43:53 " WRITE_CUSTOMIZE_COMPRESSION "
2018/06/19 13:43:53 " WRITE_CUSTOMIZE_ZTXT_COMPRESSION "
2018/06/19 13:43:53 " safety "
2018/06/19 13:43:53 "allowed\n BENIGN_ERRORS "
2018/06/19 13:43:53 "flush"
2018/06/19 13:43:53 " DANGEROUS \noff completely\n IGNORE_INDEX "
2018/06/19 13:43:53 " Restore the text chunks when using libpng 1.6 or less; this is a macro\n    * which expands to nothing in 1.7+  In earlier versions it tests\n    * dp->text_stashed, which is only set (below) *after* the first write.\n    "
2018/06/19 13:43:53 " HANDLE_AS_UNKNOWN "
2018/06/19 13:43:53 " Remove the user limits, if any "
2018/06/19 13:43:53 " OPTION HANDLING \n compression outputs, IDAT and zTXt/iTXt: "
2018/06/19 13:43:53 " This sets everything, but then the following options just override\n          * the specific settings for ICC profiles and text.\n          "
2018/06/19 13:43:53 " png_level support "
2018/06/19 13:43:53 " The permitted range is 1..0x7FFFFFFF, so the cast is safe "
2018/06/19 13:43:53 " filter handling "
2018/06/19 13:43:53 " WRITE_FILTER "
2018/06/19 13:43:53 " This just uses the 'read' info_struct directly, it contains the image. "
2018/06/19 13:43:53 "transforms\nparams"
2018/06/19 13:43:53 " Make sure the file was written ok: "
2018/06/19 13:43:53 " Clean it on the way out - if control returns to the caller then the\n    * written_file contains the required data.\n    "
2018/06/19 13:43:53 " windowBits is in the range 8..15 but zlib maps '8' to '9' so it is only\n    * worth using if the data size is 256 byte or less.\n    "
2018/06/19 13:43:53 " for large images "
2018/06/19 13:43:53 " vl_windowBits_IDAT always has a RANGE() "
2018/06/19 13:43:53 " If wb == 8 then any search has been restricted to just one windowBits\n    * entry.  Record that here to avoid producing a spurious app-level warning\n    * above.\n    "
2018/06/19 13:43:53 " Are these options better than the best found so far?  Normally the\n    * options are tested in preference order, best first, however when doing a\n    * search operation on a range the range values are tested out of order.  In\n    * that case preferable options will get tested later.\n    *\n    * This function looks through the stack from the bottom up looking for an\n    * option that does not match the current best value.  When it finds one it\n    * checks to see if it is more or less desireable and returns true or false\n    * as appropriate.\n    *\n    * Notice that this means that the order options are pushed onto the stack\n    * conveys a priority; lower/earlier options are more important than later\n    * ones.\n    "
2018/06/19 13:43:53 " worse "
2018/06/19 13:43:53 " better "
2018/06/19 13:43:53 " Log, and reset, the search so far: \nnext entry to change"
2018/06/19 13:43:53 " Start again with this entry: "
2018/06/19 13:43:53 " Read it then write it: "
2018/06/19 13:43:53 " But 'destname' may be a directory. "
2018/06/19 13:43:53 " Limit the upper end of the windowBits range for this file "
2018/06/19 13:43:53 " For logging, depth to log: "
2018/06/19 13:43:53 "SAFE"
2018/06/19 13:43:53 " else stdout "
2018/06/19 13:43:53 " acts as a flag for the caller "
2018/06/19 13:43:53 " safety "
2018/06/19 13:43:53 " Initialize the 'best' fields: "
2018/06/19 13:43:53 " interating over lists "
2018/06/19 13:43:53 " Cancel warnings on subsequent writes "
2018/06/19 13:43:53 " Make a temporary name for the subsequent tests: "
2018/06/19 13:43:53 " space for .tmp allocated above "
2018/06/19 13:43:53 " stdout "
2018/06/19 13:43:53 " Loop to find the best option. "
2018/06/19 13:43:53 " And compare the sizes (the write function makes sure write_size\n          * doesn't overflow.)\n          "
2018/06/19 13:43:53 " Do this for the 'sizes' option so that it reports the correct size. "
2018/06/19 13:43:53 " Exists solely to isolate the setjmp clobbers which some versions of GCC\n    * erroneously generate.\n    "
2018/06/19 13:43:53 " shouldn't longjmp on warnings "
2018/06/19 13:43:53 " For each file on the command line test it with a range of transforms "
2018/06/19 13:43:53 " Do a quick check on the directory target case; when there are more than\n    * two arguments the last one must be a directory.\n    "
2018/06/19 13:43:53 " Do this at least once; if there are no arguments stdin/stdout are used.\n       "
2018/06/19 13:43:53 " abort on user or internal error "
2018/06/19 13:43:53 " An error: the output is meaningless "
2018/06/19 13:43:53 " This result may already have been output, in which case best_size\n             * has been reset.\n             "
2018/06/19 13:43:53 " Here on any return, including failures, except user/internal issues\n          "
2018/06/19 13:43:53 " When logging output the files for each file, if enabled. "
2018/06/19 13:43:53 " PNGCP_TIMING "
2018/06/19 13:43:53 " I.e. for write cases after the first time through the loop require\n          * there to be at least two arguments left and for the last one to be a\n          * directory (this was checked above).\n          "
2018/06/19 13:43:53 " Release allocated memory "
2018/06/19 13:43:53 " PNGCP_TIMING "
2018/06/19 13:43:53 " !READ_PNG || !WRITE_PNG "
2018/06/19 13:43:53 " !READ_PNG || !WRITE_PNG "
2018/06/19 13:43:53 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/tools/pngcp.c": 102.934766ms
2018/06/19 13:43:53 Couldn't classify license(s)
2018/06/19 13:43:54 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/tools/png-fix-itxt.c
2018/06/19 13:43:54 detected language: 4
2018/06/19 13:43:54 " png-fix-itxt version 1.0.0\n *\n * Copyright 2015 Glenn Randers-Pehrson\n * Last changed in libpng 1.6.18 [July 23, 2015]\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * Usage:\n *\n *     png-fix-itxt.exe < bad.png > good.png\n *\n * Fixes a PNG file written with libpng-1.6.0 or 1.6.1 that has one or more\n * uncompressed iTXt chunks.  Assumes that the actual length is greater\n * than or equal to the value in the length byte, and that the CRC is\n * correct for the actual length.  This program hunts for the CRC and\n * adjusts the length byte accordingly.  It is not an error to process a\n * PNG file that has no iTXt chunks or one that has valid iTXt chunks;\n * such files will simply be copied.\n *\n * Requires zlib (for crc32 and Z_NULL); build with\n *\n *     gcc -O -o png-fix-itxt png-fix-itxt.c -lz\n *\n * If you need to handle iTXt chunks larger than 500000 kbytes you must\n * rebuild png-fix-itxt with a larger values of MAX_LENGTH (or a smaller value\n * if you know you will never encounter such huge iTXt chunks).\n "
2018/06/19 13:43:54 " Read one character (inchar), also return octet (c), break if EOF "
2018/06/19 13:43:54 " Skip 8-byte signature "
2018/06/19 13:43:54 " !EOF "
2018/06/19 13:43:54 " Read the length \n must be 32 bits! "
2018/06/19 13:43:54 " Read the chunkname "
2018/06/19 13:43:54 " The iTXt chunk type expressed as integers is (105, 84, 88, 116) "
2018/06/19 13:43:54 " To do: handle this more gracefully "
2018/06/19 13:43:54 " Initialize the CRC "
2018/06/19 13:43:54 " Copy the data bytes "
2018/06/19 13:43:54 " EOF "
2018/06/19 13:43:54 " Calculate the CRC "
2018/06/19 13:43:54 " Check the CRC "
2018/06/19 13:43:54 " Update the CRC "
2018/06/19 13:43:54 " EOF "
2018/06/19 13:43:54 " Update length bytes "
2018/06/19 13:43:54 " Write the fixed iTXt chunk (length, name, data, crc) "
2018/06/19 13:43:54 " EOF "
2018/06/19 13:43:54 " Copy bytes that were already read (length and chunk name) "
2018/06/19 13:43:54 " Copy data bytes and CRC "
2018/06/19 13:43:54 " EOF "
2018/06/19 13:43:54 " The IEND chunk type expressed as integers is (73, 69, 78, 68) "
2018/06/19 13:43:54 " EOF "
2018/06/19 13:43:54 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/tools/png-fix-itxt.c": 15.138373ms
2018/06/19 13:43:54 Couldn't classify license(s)
2018/06/19 13:43:55 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/tools/README.txt
2018/06/19 13:43:55 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/tools/README.txt": 9.884686ms
2018/06/19 13:43:55 Couldn't classify license(s)
2018/06/19 13:43:56 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/tools/makesRGB.c
2018/06/19 13:43:56 detected language: 4
2018/06/19 13:43:56 " makesRGB.c -- build sRGB-to-linear and linear-to-sRGB conversion tables\n *\n * Last changed in libpng 1.6.0 [February 14, 2013]\n *\n * COPYRIGHT: Written by John Cunningham Bowler, 2013.\n * To the extent possible under law, the author has waived all copyright and\n * related or neighboring rights to this work.  This work is published from:\n * United States.\n *\n * Make a table to convert 8-bit sRGB encoding values into the closest 16-bit\n * linear value.\n *\n * Make two tables to take a linear value scaled to 255*65535 and return an\n * approximation to the 8-bit sRGB encoded value.  Calculate the error in these\n * tables and display it.\n "
2018/06/19 13:43:56 " pngpriv.h includes the definition of 'PNG_sRGB_FROM_LINEAR' which is required\n * to verify the actual code.\n "
2018/06/19 13:43:56 " The tables are declared 'const' in pngpriv.h, so this redefines the tables to\n * be used.\n "
2018/06/19 13:43:56 " Initialize the encoding table first. "
2018/06/19 13:43:56 " Now work out the decoding tables (this is where the error comes in because\n    * there are 512 set points and 512 straight lines between them.)\n    "
2018/06/19 13:43:56 " Calculate the table using the current 'adjust' "
2018/06/19 13:43:56 " Check the 16-bit linear values alone: "
2018/06/19 13:43:56 " Now try changing the adjustment. "
2018/06/19 13:43:56 " For each entry in the table try to adjust it to minimize the error count\n    * in that entry.  Each entry corresponds to 128 input values.\n    "
2018/06/19 13:43:56 " Check the 16-bit linear values alone: "
2018/06/19 13:43:56 " First test "
2018/06/19 13:43:56 " end of tests "
2018/06/19 13:43:56 " Only do the full (slow) test at the end: "
2018/06/19 13:43:56 " Re-check the 16-bit cases too, including the warning if there is an error\n    * bigger than 1.\n    "
2018/06/19 13:43:56 " Check the round trip for each 8-bit sRGB value. "
2018/06/19 13:43:56 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/tools/makesRGB.c": 17.475437ms
2018/06/19 13:43:56 Couldn't classify license(s)
2018/06/19 13:43:57 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/tools/sRGB.h
2018/06/19 13:43:57 detected language: 4
2018/06/19 13:43:57 "-\n * sRGB.h\n *\n * Last changed in libpng 1.6.0 [February 14, 2013]\n *\n * COPYRIGHT: Written by John Cunningham Bowler, 2013.\n * To the extent possible under law, the author has waived all copyright and\n * related or neighboring rights to this work.  This work is published from:\n * United States.\n *\n * Utility file; not actually a header, this contains definitions of sRGB\n * calculation functions for inclusion in those test programs that need them.\n *\n * All routines take and return a floating point value in the range\n * 0 to 1.0, doing a calculation according to the sRGB specification\n * (in fact the source of the numbers is the wikipedia article at\n * https://en.wikipedia.org/wiki/SRGB).\n "
2018/06/19 13:43:57 " Use the sRGB (rounded) coefficients for Rlinear, Glinear, Blinear to get\n    * the CIE Y value (also linear).\n    "
2018/06/19 13:43:57 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/tools/sRGB.h": 9.48603ms
2018/06/19 13:43:57 Couldn't classify license(s)
2018/06/19 13:43:58 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/tools/genpng.c
2018/06/19 13:43:58 detected language: 4
2018/06/19 13:43:58 "- genpng\n *\n * COPYRIGHT: Written by John Cunningham Bowler, 2015.\n * Revised by Glenn Randers-Pehrson, 2017, to add buffer-size check.\n * To the extent possible under law, the authors have waived all copyright and\n * related or neighboring rights to this work.  This work is published from:\n * United States.\n *\n * Generate a PNG with an alpha channel, correctly.\n *\n * This is a test case generator; the resultant PNG files are only of interest\n * to those of us who care about whether the edges of circles are green, red,\n * or yellow.\n *\n * The program generates an RGB+Alpha PNG of a given size containing the given\n * shapes on a transparent background:\n *\n *  genpng width height { shape }\n *    shape ::= color width shape x1 y1 x2 y2\n *\n * 'color' is:\n *\n *  black white red green yellow blue brown purple pink orange gray cyan\n *\n * The point is to have colors that are linguistically meaningful plus that old\n * bugbear of the department store dress murders, Cyan, the only color we argue\n * about.\n *\n * 'shape' is:\n *\n *  circle: an ellipse\n *  square: a rectangle\n *  line: a straight line\n *\n * Each shape is followed by four numbers, these are two points in the output\n * coordinate space (as real numbers) which describe the circle, square, or\n * line.  The shape is filled if it is preceded by 'filled' (not valid for\n * 'line') or is drawn with a line, in which case the width of the line must\n * precede the shape.\n *\n * The whole set of information can be repeated as many times as desired:\n *\n *    shape ::= color width shape x1 y1 x2 y2\n *\n *    color ::= black|white|red|green|yellow|blue\n *    color ::= brown|purple|pink|orange|gray|cyan\n *    width ::= filled\n *    width ::= <number>\n *    shape ::= circle|square|line\n *    x1    ::= <number>\n *    x2    ::= <number>\n *    y1    ::= <number>\n *    y2    ::= <number>\n *\n * The output PNG is generated by down-sampling a 4x supersampled image using\n * a bi-cubic filter.  The bi-cubic has a 2 (output) pixel width, so an 8x8\n * array of super-sampled points contribute to each output pixel.  The value of\n * a super-sampled point is found using an unfiltered, aliased, infinite\n * precision image: Each shape from the last to the first is checked to see if\n * the point is in the drawn area and, if it is, the color of the point is the\n * color of the shape and the alpha is 1, if not the previous shape is checked.\n *\n * This is an aliased algorithm because no filtering is done; a point is either\n * inside or outside each shape and 'close' points do not contribute to the\n * sample.  The down-sampling is relied on to correct the error of not using\n * a filter.\n *\n * The line end-caps are 'flat'; they go through the points.  The square line\n * joins are mitres; the outside of the lines are continued to the point of\n * intersection.\n "
2018/06/19 13:43:58 " Normally use <png.h> here to get the installed libpng, but this is done to\n * ensure the code picks up the local libpng implementation:\n "
2018/06/19 13:43:58 " color ::= black|white|red|green|yellow|blue\n * color ::= brown|purple|pink|orange|gray|cyan\n "
2018/06/19 13:43:58 " forward declaration "
2018/06/19 13:43:58 " A function to determine if (x,y) is inside the shape.\n    *\n    * There are two implementations:\n    *\n    *    inside_fn: returns true if the point is inside\n    *    check_fn:  returns;\n    *       -1: the point is outside the shape by more than the filter width (2)\n    *        0: the point may be inside the shape\n    *       +1: the point is inside the shape by more than the filter width\n    "
2018/06/19 13:43:58 " line width, 0 for 'filled' "
2018/06/19 13:43:58 " IMPLEMENTATION NOTE:\n *\n * We want the contribution of each shape to the sample corresponding to each\n * pixel.  This could be obtained by super sampling the image to infinite\n * dimensions, finding each point within the shape and assigning that a value\n * '1' while leaving every point outside the shape with value '0' then\n * downsampling to the image size with sinc; computationally very expensive.\n *\n * Approximations are as follows:\n *\n * 1) If the pixel coordinate is within the shape assume the sample has the\n *    shape color and is opaque, else assume there is no contribution from\n *    the shape.\n *\n *    This is the equivalent of aliased rendering or resampling an image with\n *    a block filter.  The maximum error in the calculated alpha (which will\n *    always be 0 or 1) is 0.5.\n *\n * 2) If the shape is within a square of size 1x1 centered on the pixel assume\n *    that the shape obscures an amount of the pixel equal to its area within\n *    that square.\n *\n *    This is the equivalent of 'pixel coverage' alpha calculation or resampling\n *    an image with a bi-linear filter.  The maximum error is over 0.2, but the\n *    results are often acceptable.\n *\n *    This can be approximated by applying (1) to a super-sampled image then\n *    downsampling with a bi-linear filter.  The error in the super-sampled\n *    image is 0.5 per sample, but the resampling reduces this.\n *\n * 3) Use a better filter with a super-sampled image; in the limit this is the\n *    sinc() approach.\n *\n * 4) Do the geometric calculation; a bivariate definite integral across the\n *    shape, unfortunately this means evaluating Si(x), the integral of sinc(x),\n *    which is still a lot of math.\n *\n * This code uses approach (3) with a bi-cubic filter and 8x super-sampling\n * and method (1) for the super-samples.  This means that the sample is either\n * 0 or 1, depending on whether the sub-pixel is within or outside the shape.\n * The bi-cubic weights are also fixed and the 16 required weights are\n * pre-computed here (note that the 'scale' setting will need to be changed if\n * 'super' is increased).\n *\n * The code also calculates a sum to the edge of the filter. This is not\n * currently used by could be used to optimize the calculation.\n "
2018/06/19 13:43:58 " bc code "
2018/06/19 13:43:58 "     |x| <= 1 \n 1 < |x| <  2 \n Twice the first sum below \n Actually half the width; -2..+2 \n steps per filter unit "
2018/06/19 13:43:58 " These numbers are exact; the weight for the filter is 1/9, but this\n    * would make the numbers inexact, so it is not included here.\n    "
2018/06/19 13:43:58 "          bicubic      sum        \n 0\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15"
2018/06/19 13:43:58 " For [x-2..x+2],[y-2,y+2] calculate the weighted bicubic given a function\n    * which tells us whether a point is inside or outside the shape.  First\n    * check if we need to do this at all:\n    "
2018/06/19 13:43:58 " all samples outside the shape "
2018/06/19 13:43:58 " all samples inside the shape "
2018/06/19 13:43:58 " This needs to be weighted for each dimension: "
2018/06/19 13:43:58 " These are the shape functions. \n \"square\",\n * { inside_square_filled, check_square_filled },\n * { inside_square, check_square }\n "
2018/06/19 13:43:58 " Is x,y inside the square (x1,y1)..(x2,y2)? "
2018/06/19 13:43:58 " Do a modified Cohen-Sutherland on one point, bit patterns that indicate\n    * 'outside' are:\n    *\n    *   x<x1 | x<y1 | x<x2 | x<y2\n    *    0      x      0      x     To the right\n    *    1      x      1      x     To the left\n    *    x      0      x      0     Below\n    *    x      1      x      1     Above\n    *\n    * So 'inside' is (x<x1) != (x<x2) && (y<y1) != (y<y2);\n    "
2018/06/19 13:43:58 " Check for a point being inside the boundaries implied by the given arg\n    * and assuming a width 2*w each side of the boundaries.  This returns the\n    * 'check' INSIDE/OUTSIDE/0 result but note the semantics:\n    *\n    *          +--------------+\n    *          |              |   OUTSIDE\n    *          |   INSIDE     |\n    *          |              |\n    *          +--------------+\n    *\n    * And '0' means within the line boundaries.\n    "
2018/06/19 13:43:58 " Inside, but maybe too far; check for the redundant case where\n       * the lines overlap:\n       "
2018/06/19 13:43:58 " between (inside) the boundary lines. "
2018/06/19 13:43:58 " inside the lines themselves. "
2018/06/19 13:43:58 " outside the boundary lines. "
2018/06/19 13:43:58 " The filter extends +/-FILTER_WIDTH each side of each output point, so\n    * the check has to expand and contract the square by that amount; '0'\n    * means close enough to the edge of the square that the bicubic filter has\n    * to be run, OUTSIDE means alpha==0, INSIDE means alpha==1.\n    "
2018/06/19 13:43:58 " Return true if within the drawn lines, else false, no need to distinguish\n    * INSIDE vs OUTSIDE here:\n    "
2018/06/19 13:43:58 " So for this function a result of 'INSIDE' means inside the actual lines.\n    "
2018/06/19 13:43:58 " Somewhere close to the boundary lines. If far enough inside one of\n       * them then we can return INSIDE:\n       "
2018/06/19 13:43:58 " Point is somewhere in the filter region: "
2018/06/19 13:43:58 " Inside or outside the square by more than w+FILTER_WIDTH. "
2018/06/19 13:43:58 " \"circle\",\n * { inside_circle_filled, check_circle_filled },\n * { inside_circle, check_circle }\n *\n * The functions here are analoguous to the square ones; however, they check\n * the corresponding ellipse as opposed to the rectangle.\n "
2018/06/19 13:43:58 " Inside the square, so maybe inside the circle too: "
2018/06/19 13:43:58 " It is outside if the distance from the center is more than half the\n       * diameter:\n       "
2018/06/19 13:43:58 " outside "
2018/06/19 13:43:58 " Check for a point being inside the boundaries implied by the given arg\n    * and assuming a width 2*w each side of the boundaries.  This function has\n    * the same semantic as square_check_line but tests the circle.\n    "
2018/06/19 13:43:58 " Inside, but maybe too far; check for the redundant case where\n       * the lines overlap:\n       "
2018/06/19 13:43:58 " between (inside) the boundary lines. "
2018/06/19 13:43:58 " inside the lines themselves. "
2018/06/19 13:43:58 " outside the boundary lines. "
2018/06/19 13:43:58 " Exactly as the 'square' code.  "
2018/06/19 13:43:58 " Point is somewhere in the filter region: "
2018/06/19 13:43:58 " Inside or outside the square by more than w+FILTER_WIDTH. "
2018/06/19 13:43:58 " \"line\",\n * { NULL, NULL },  There is no 'filled' line.\n * { inside_line, check_line }\n "
2018/06/19 13:43:58 " Shift all the points to (arg->x1, arg->y1) "
2018/06/19 13:43:58 " The dot product is the distance down the line, the cross product is\n    * the distance away from the line:\n    *\n    *    distance = |cross| / sqrt(len2)\n    "
2018/06/19 13:43:58 " If 'distance' is more than w the point is definitely outside the line:\n    *\n    *     distance >= w\n    *     |cross|  >= w * sqrt(len2)\n    *     cross^2  >= w^2 * len2:\n    "
2018/06/19 13:43:58 " outside "
2018/06/19 13:43:58 " Now find the distance *along* the line; this comes from the dot product\n    * lx.x+ly.y. The actual distance (in pixels) is:\n    *\n    *   distance = dot / sqrt(len2)\n    "
2018/06/19 13:43:58 " The test for 'outside' is:\n    *\n    *    distance < 0 || distance > sqrt(len2)\n    *                 -> dot / sqrt(len2) > sqrt(len2)\n    *                 -> dot > len2\n    *\n    * But 'expand' is used for the filter width and needs to be handled too:\n    "
2018/06/19 13:43:58 " The end caps of the line must be checked too; it's not enough just to\n    * widen the line by FILTER_WIDTH; 'expand' exists for this purpose:\n    "
2018/06/19 13:43:58 " Inside the line+filter; far enough inside that the filter isn't\n       * required?\n       "
2018/06/19 13:43:58 "fill,line"
2018/06/19 13:43:58 "7 arguments"
2018/06/19 13:43:58 " shape ::= color width shape x1 y1 x2 y2 "
2018/06/19 13:43:58 " read a PNG width or height "
2018/06/19 13:43:58 "SAFE"
2018/06/19 13:43:58 " Fill in the pixel by checking each shape (args[nargs]) for effects on\n    * the corresponding sample:\n    "
2018/06/19 13:43:58 " NOTE: alpha_calc can return a value outside the range 0..1 with the\n       * bicubic filter.\n       "
2018/06/19 13:43:58 " 'a' may be negative or greater than 1; if it is, negative clamp the\n    * pixel to 0 if >1 clamp r/g/b:\n    "
2018/06/19 13:43:58 " And fill in the pixel: \nSAFE\nSAFE\nSAFE\nSAFE"
2018/06/19 13:43:58 " There is one option: --8bit: "
2018/06/19 13:43:58 " The libpng Simplified API write code requires a fully initialized\n       * structure.\n       "
2018/06/19 13:43:58 " Check the remainder of the arguments "
2018/06/19 13:43:58 " TO do: determine whether this guard against overflow is necessary.\n      * This comment in png.h indicates that it should be safe: \"libpng will\n      * refuse to process an image where such an overflow would occur\", but\n      * I don't see where the image gets rejected when the buffer is too\n      * large before the malloc is attempted.\n      "
2018/06/19 13:43:58 " Create the buffer: "
2018/06/19 13:43:58 " Write each row... "
2018/06/19 13:43:58 " Each pixel in each row: "
2018/06/19 13:43:58 " Write the result (to stdout) "
2018/06/19 13:43:58 "row_stride\ncolormap"
2018/06/19 13:43:58 " success "
2018/06/19 13:43:58 " Wrong number of arguments "
2018/06/19 13:43:58 " SIMPLIFIED_WRITE && STDIO "
2018/06/19 13:43:58 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/tools/genpng.c": 49.344853ms
2018/06/19 13:43:58 Couldn't classify license(s)
2018/06/19 13:43:59 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/gregbook/Makefile.sgi
2018/06/19 13:43:59 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/gregbook/Makefile.sgi": 5.769296ms
2018/06/19 13:43:59 Couldn't classify license(s)
2018/06/19 13:44:00 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/gregbook/rpng-x.c
2018/06/19 13:44:00 detected language: 4
2018/06/19 13:44:00 "---------------------------------------------------------------------------\n\n   rpng - simple PNG display program                               rpng-x.c\n\n   This program decodes and displays PNG images, with gamma correction and\n   optionally with a user-specified background color (in case the image has\n   transparency).  It is very nearly the most basic PNG viewer possible.\n   This version is for the X Window System (tested by author under Unix and\n   by Martin Zinser under OpenVMS; may work under OS/2 with some tweaking).\n\n   to do:\n    - 8-bit (colormapped) X support\n    - use %.1023s to simplify truncation of title-bar string?\n\n  ---------------------------------------------------------------------------\n\n   Changelog:\n    - 1.01:  initial public release\n    - 1.02:  modified to allow abbreviated options; fixed long/ulong mis-\n              match; switched to png_jmpbuf() macro\n    - 1.10:  added support for non-default visuals; fixed X pixel-conversion\n    - 1.11:  added extra set of parentheses to png_jmpbuf() macro; fixed\n              command-line parsing bug\n    - 1.12:  fixed some small X memory leaks (thanks to Fran�ois Petitjean)\n    - 1.13:  fixed XFreeGC() crash bug (thanks to Patrick Welche)\n    - 1.14:  added support for X resources (thanks to Gerhard Niklasch)\n    - 2.00:  dual-licensed (added GNU GPL)\n    - 2.01:  fixed improper display of usage screen on PNG error(s)\n    - 2.02:  Added \"void(argc);\" statement to quiet pedantic compiler warnings\n             about unused variable (GR-P)\n    - 2.03:  check for integer overflow (Glenn R-P)\n\n  ---------------------------------------------------------------------------\n\n      Copyright (c) 1998-2008, 2017 Greg Roelofs.  All rights reserved.\n\n      This software is provided \"as is,\" without warranty of any kind,\n      express or implied.  In no event shall the author or contributors\n      be held liable for any damages arising in any way from the use of\n      this software.\n\n      The contents of this file are DUAL-LICENSED.  You may modify and/or\n      redistribute this software according to the terms of one of the\n      following two licenses (at your option):\n\n\n      LICENSE 1 (\"BSD-like with advertising clause\"):\n\n      Permission is granted to anyone to use this software for any purpose,\n      including commercial applications, and to alter it and redistribute\n      it freely, subject to the following restrictions:\n\n      1. Redistributions of source code must retain the above copyright\n         notice, disclaimer, and this list of conditions.\n      2. Redistributions in binary form must reproduce the above copyright\n         notice, disclaimer, and this list of conditions in the documenta-\n         tion and/or other materials provided with the distribution.\n      3. All advertising materials mentioning features or use of this\n         software must display the following acknowledgment:\n\n            This product includes software developed by Greg Roelofs\n            and contributors for the book, \"PNG: The Definitive Guide,\"\n            published by O'Reilly and Associates.\n\n\n      LICENSE 2 (GNU GPL v2 or later):\n\n      This program is free software; you can redistribute it and/or modify\n      it under the terms of the GNU General Public License as published by\n      the Free Software Foundation; either version 2 of the License, or\n      (at your option) any later version.\n\n      This program is distributed in the hope that it will be useful,\n      but WITHOUT ANY WARRANTY; without even the implied warranty of\n      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n      GNU General Public License for more details.\n\n      You should have received a copy of the GNU General Public License\n      along with this program; if not, write to the Free Software Foundation,\n      Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:00 " our X resource application name \n our X resource class name "
2018/06/19 13:44:00 " #define DEBUG  :  this enables the Trace() macros "
2018/06/19 13:44:00 " typedefs, common macros, readpng prototypes "
2018/06/19 13:44:00 " could just include png.h, but this macro is the only thing we need\n * (name and typedefs changed to local versions); note that side effects\n * only happen with alpha (which could easily be avoided with\n * \"ush acopy = (alpha);\") "
2018/06/19 13:44:00 " local prototypes "
2018/06/19 13:44:00 " X-specific variables "
2018/06/19 13:44:00 "\nulg numcolors=0, pixels[256];\nush reds[256], greens[256], blues[256];\n "
2018/06/19 13:44:00 " just the lookup table \n just the monitor \n whole display system "
2018/06/19 13:44:00 " First set the default value for our display-system exponent, i.e.,\n     * the product of the CRT exponent and the exponent corresponding to\n     * the frame-buffer's lookup table (LUT), if any.  This is not an\n     * exhaustive list of LUT values (e.g., OpenStep has a lot of weird\n     * ones), but it should cover 99% of the current possibilities. "
2018/06/19 13:44:00 "\n    if (some_next_function_that_returns_gamma(&next_gamma))\n        LUT_exponent = 1.0 / next_gamma;\n     "
2018/06/19 13:44:00 " there doesn't seem to be any documented function to get the\n     * \"gamma\" value, so we do it the hard way "
2018/06/19 13:44:00 "\n    if (some_mac_function_that_returns_gamma(&mac_gamma))\n        LUT_exponent = mac_gamma / 2.61;\n     "
2018/06/19 13:44:00 " assume no LUT:  most PCs "
2018/06/19 13:44:00 " the defaults above give 1.0, 1.3, 1.5 and 2.2, respectively: "
2018/06/19 13:44:00 " If the user has set the SCREEN_GAMMA environment variable as suggested\n     * (somewhat imprecisely) in the libpng documentation, use that; otherwise\n     * use the default value we just calculated.  Either way, the user may\n     * override this via a command-line option. "
2018/06/19 13:44:00 " Now parse the command line for options and the PNG filename. "
2018/06/19 13:44:00 " shouldn't be any more args after filename "
2018/06/19 13:44:00 " not expecting any other options "
2018/06/19 13:44:00 " print usage screen if any errors up to this point "
2018/06/19 13:44:00 " set the title-bar string, but make sure buffer doesn't overflow "
2018/06/19 13:44:00 " if the user didn't specify a background color on the command line,\n     * check for one in the PNG file--if not, the initialized values of 0\n     * (black) will be used "
2018/06/19 13:44:00 " this approach quiets compiler warnings "
2018/06/19 13:44:00 " do the basic X initialization stuff, make the window and fill it\n     * with the background color "
2018/06/19 13:44:00 " decode the image, all at once "
2018/06/19 13:44:00 " done with PNG file, so clean up to minimize memory usage (but do NOT\n     * nuke image_data!) "
2018/06/19 13:44:00 " display image (composite with background if requested) "
2018/06/19 13:44:00 " wait for the user to tell us when to quit "
2018/06/19 13:44:00 "  v--- or 1 for shifted keys "
2018/06/19 13:44:00 " OK, we're done:  clean up all image and X resources and go away "
2018/06/19 13:44:00 " Unused "
2018/06/19 13:44:00 " GRR:  add 8-bit support \n depth != 8 && "
2018/06/19 13:44:00 " 24-bit first "
2018/06/19 13:44:00 " GRR:  add 15-, 16- and 32-bit TrueColor visuals (also DirectColor?) "
2018/06/19 13:44:00 "\n        colormap_size = visual_list[0].colormap_size;\n        visual_class = visual->class;\n        visualID = XVisualIDFromVisual(visual);\n "
2018/06/19 13:44:00 " GRR:  add/check 8-bit support "
2018/06/19 13:44:00 " these are right-shifts "
2018/06/19 13:44:00 " these are left-shifts "
2018/06/19 13:44:00 " these are right-shifts, too "
2018/06/19 13:44:00 "---------------------------------------------------------------------------\n    Finally, create the window.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:00 " OK if any hints allocation fails; XSetWMProperties() allows NULLs "
2018/06/19 13:44:00 " window will not be resizable "
2018/06/19 13:44:00 " wm_hints->icon_pixmap = icon_pixmap; \n | IconPixmapHint "
2018/06/19 13:44:00 " various properties and hints no longer needed; free memory "
2018/06/19 13:44:00 "---------------------------------------------------------------------------\n    Fill window with the specified background color.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:00 " depth == 8 "
2018/06/19 13:44:00 " GRR:  add 8-bit support "
2018/06/19 13:44:00 "---------------------------------------------------------------------------\n    Wait for first Expose event to do any drawing, then flush.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:00 "---------------------------------------------------------------------------\n    Allocate memory for the X- and display-specific version of the image.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:00 " depth == 8 "
2018/06/19 13:44:00 " to avoid testing the byte order every pixel (or doubling the size of\n     * the drawing routine with a giant if-test), we arbitrarily set the byte\n     * order to MSBFirst and let Xlib worry about inverting things on little-\n     * endian machines (like Linux/x86, old VAXen, etc.)--this is not the most\n     * efficient approach (the giant if-test would be better), but in the\n     * interest of clarity, we take the easy way out... "
2018/06/19 13:44:00 " end function rpng_x_create_window() "
2018/06/19 13:44:00 "  int bpp = ximage->bits_per_pixel;  "
2018/06/19 13:44:00 " recall that we set ximage->byte_order = MSBFirst above \n GRR BUG:  this assumes bpp == 32, but may be 24: "
2018/06/19 13:44:00 " recall that we set ximage->byte_order = MSBFirst above "
2018/06/19 13:44:00 " if (image_channels == 4) "
2018/06/19 13:44:00 " this macro (from png.h) composites the foreground\n                         * and background values and puts the result into the\n                         * first argument "
2018/06/19 13:44:00 " recall that we set ximage->byte_order = MSBFirst above "
2018/06/19 13:44:00 " display after every 16 lines "
2018/06/19 13:44:00 " recall that we set ximage->byte_order = MSBFirst above "
2018/06/19 13:44:00 " if (image_channels == 4) "
2018/06/19 13:44:00 " this macro (from png.h) composites the foreground\n                         * and background values and puts the result back into\n                         * the first argument (== fg byte here:  safe) "
2018/06/19 13:44:00 " recall that we set ximage->byte_order = MSBFirst above "
2018/06/19 13:44:00 " display after every 16 lines "
2018/06/19 13:44:00 " depth == 8 "
2018/06/19 13:44:00 " GRR:  add 8-bit support "
2018/06/19 13:44:00 " we allocated it, so we free it \n  instead of XDestroyImage() "
2018/06/19 13:44:00 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/gregbook/rpng-x.c": 37.87234ms
2018/06/19 13:44:00 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/gregbook/wpng.c
2018/06/19 13:44:00 detected language: 4
2018/06/19 13:44:00 "---------------------------------------------------------------------------\n\n   wpng - simple PNG-writing program                                 wpng.c\n\n   This program converts certain NetPBM binary files (grayscale and RGB,\n   maxval = 255) to PNG.  Non-interlaced PNGs are written progressively;\n   interlaced PNGs are read and written in one memory-intensive blast.\n\n   Thanks to Jean-loup Gailly for providing the necessary trick to read\n   interactive text from the keyboard while stdin is redirected.  Thanks\n   to Cosmin Truta for Cygwin fixes.\n\n   NOTE:  includes provisional support for PNM type \"8\" (portable alphamap)\n          images, presumed to be a 32-bit interleaved RGBA format; no pro-\n          vision for possible interleaved grayscale+alpha (16-bit) format.\n          THIS IS UNLIKELY TO BECOME AN OFFICIAL NETPBM ALPHA FORMAT!\n\n   to do:\n    - delete output file if quit before calling any writepng routines\n    - process backspace with -text option under DOS/Win? (currently get ^H)\n\n  ---------------------------------------------------------------------------\n\n   Changelog:\n    - 1.01:  initial public release\n    - 1.02:  modified to allow abbreviated options\n    - 1.03:  removed extraneous character from usage screen; fixed bug in\n              command-line parsing\n    - 1.04:  fixed DOS/OS2/Win32 detection, including partial Cygwin fix\n              (see http://home.att.net/~perlspinr/diffs/GregBook_cygwin.diff)\n    - 2.00:  dual-licensed (added GNU GPL)\n    - 2.01:  check for integer overflow (Glenn R-P)\n\n        [REPORTED BUG (win32 only):  \"contrib/gregbook/wpng.c - cmd line\n         dose not work!  In order to do something useful I needed to redirect\n         both input and output, with cygwin and with bcc32 as well.  Under\n         Linux, the same wpng appears to work fine.  I don't know what is\n         the problem.\"]\n\n  ---------------------------------------------------------------------------\n\n      Copyright (c) 1998-2007, 2017 Greg Roelofs.  All rights reserved.\n\n      This software is provided \"as is,\" without warranty of any kind,\n      express or implied.  In no event shall the author or contributors\n      be held liable for any damages arising in any way from the use of\n      this software.\n\n      The contents of this file are DUAL-LICENSED.  You may modify and/or\n      redistribute this software according to the terms of one of the\n      following two licenses (at your option):\n\n\n      LICENSE 1 (\"BSD-like with advertising clause\"):\n\n      Permission is granted to anyone to use this software for any purpose,\n      including commercial applications, and to alter it and redistribute\n      it freely, subject to the following restrictions:\n\n      1. Redistributions of source code must retain the above copyright\n         notice, disclaimer, and this list of conditions.\n      2. Redistributions in binary form must reproduce the above copyright\n         notice, disclaimer, and this list of conditions in the documenta-\n         tion and/or other materials provided with the distribution.\n      3. All advertising materials mentioning features or use of this\n         software must display the following acknowledgment:\n\n            This product includes software developed by Greg Roelofs\n            and contributors for the book, \"PNG: The Definitive Guide,\"\n            published by O'Reilly and Associates.\n\n\n      LICENSE 2 (GNU GPL v2 or later):\n\n      This program is free software; you can redistribute it and/or modify\n      it under the terms of the GNU General Public License as published by\n      the Free Software Foundation; either version 2 of the License, or\n      (at your option) any later version.\n\n      This program is distributed in the hope that it will be useful,\n      but WITHOUT ANY WARRANTY; without even the implied warranty of\n      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n      GNU General Public License for more details.\n\n      You should have received a copy of the GNU General Public License\n      along with this program; if not, write to the Free Software Foundation,\n      Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:01 " treat Win32 native ports of gcc as Unix environments "
2018/06/19 13:44:01 " for jmpbuf declaration in writepng.h "
2018/06/19 13:44:01 " for isatty(), setmode() prototypes \n O_BINARY for fdopen() without text translation "
2018/06/19 13:44:01 " need getche() "
2018/06/19 13:44:01 " !__EMX__ "
2018/06/19 13:44:01 " GRR:  need getche() "
2018/06/19 13:44:01 " for getche() console input "
2018/06/19 13:44:01 " ?__EMX__ "
2018/06/19 13:44:01 " for isatty() prototype "
2018/06/19 13:44:01 " #define DEBUG  :  this enables the Trace() macros "
2018/06/19 13:44:01 " #define FORBID_LATIN1_CTRL  :  this requires the user to re-enter any\n   text that includes control characters discouraged by the PNG spec; text\n   that includes an escape character (27) must be re-entered regardless "
2018/06/19 13:44:01 " typedefs, common macros, writepng prototypes "
2018/06/19 13:44:01 " local prototypes "
2018/06/19 13:44:01 " lone global "
2018/06/19 13:44:01 " or we could just use keybd, since no overlap "
2018/06/19 13:44:01 " just the lookup table \n just the monitor \n whole display system "
2018/06/19 13:44:01 " First get the default value for our display-system exponent, i.e.,\n     * the product of the CRT exponent and the exponent corresponding to\n     * the frame-buffer's lookup table (LUT), if any.  If the PNM image\n     * looks correct on the user's display system, its file gamma is the\n     * inverse of this value.  (Note that this is not an exhaustive list\n     * of LUT values--e.g., OpenStep has a lot of weird ones--but it should\n     * cover 99% of the current possibilities.  This section must ensure\n     * that default_display_exponent is positive.) "
2018/06/19 13:44:01 " third-party utilities can modify the default LUT exponent "
2018/06/19 13:44:01 "\n    if (some_next_function_that_returns_gamma(&next_gamma))\n        LUT_exponent = 1.0 / next_gamma;\n     "
2018/06/19 13:44:01 " there doesn't seem to be any documented function to\n     * get the \"gamma\" value, so we do it the hard way "
2018/06/19 13:44:01 "\n    if (some_mac_function_that_returns_gamma(&mac_gamma))\n        LUT_exponent = mac_gamma / 2.61;\n     "
2018/06/19 13:44:01 " assume no LUT:  most PCs "
2018/06/19 13:44:01 " the defaults above give 1.0, 1.3, 1.5 and 2.2, respectively: "
2018/06/19 13:44:01 " If the user has set the SCREEN_GAMMA environment variable as suggested\n     * (somewhat imprecisely) in the libpng documentation, use that; otherwise\n     * use the default value we just calculated.  Either way, the user may\n     * override this via a command-line option. "
2018/06/19 13:44:01 " Now parse the command line for options and the PNM filename. "
2018/06/19 13:44:01 " this way quiets compiler warnings "
2018/06/19 13:44:01 " shouldn't be any more args after filename "
2018/06/19 13:44:01 " not expecting any other options "
2018/06/19 13:44:01 " open the input and output files, or register an error and abort "
2018/06/19 13:44:01 " some buggy C libraries require BOTH setmode() and fdopen(bin) "
2018/06/19 13:44:01 " no need for bg if opaque "
2018/06/19 13:44:01 " lose any comments "
2018/06/19 13:44:01 " more comment lines "
2018/06/19 13:44:01 " <==> maxval 255 "
2018/06/19 13:44:01 " make outname from inname "
2018/06/19 13:44:01 " check if outname already exists; if not, open "
2018/06/19 13:44:01 " if we had any errors, print usage and die horrible death...arrr! "
2018/06/19 13:44:01 " prepare the text buffers for libpng's use; note that even though\n     * PNG's png_text struct includes a length field, we don't have to fill\n     * it out "
2018/06/19 13:44:01 " note:  just <Enter> leaves len == 1 "
2018/06/19 13:44:01 " escape character "
2018/06/19 13:44:01 " escape character "
2018/06/19 13:44:01 " now points at NULL; char before is newline "
2018/06/19 13:44:01 " escape character "
2018/06/19 13:44:01 " escape character "
2018/06/19 13:44:01 " escape character "
2018/06/19 13:44:01 " escape character "
2018/06/19 13:44:01 " allocate libpng stuff, initialize transformations, write pre-IDAT data "
2018/06/19 13:44:01 " free textbuf, since it's a completely local variable and all text info\n     * has just been written to the PNG file "
2018/06/19 13:44:01 " calculate rowbytes on basis of image type; note that this becomes much\n     * more complicated if we choose to support PBM type, ASCII PNM types, or\n     * 16-bit-per-sample binary data [currently not an official NetPBM type] "
2018/06/19 13:44:01 " if (wpng_info.pnmtype == 8) "
2018/06/19 13:44:01 " read and write the image, either in its entirety (if writing interlaced\n     * PNG) or row by row (if non-interlaced) "
2018/06/19 13:44:01 " Guard against integer overflow "
2018/06/19 13:44:01 " not interlaced:  write progressively (row by row) "
2018/06/19 13:44:01 " OK, we're done (successfully):  clean up all resources and quit "
2018/06/19 13:44:01 " character is completely OK "
2018/06/19 13:44:01 " mark location of first questionable one \n  or of first escape character (bad) "
2018/06/19 13:44:01 " terminate string \n Enter key makes CR, so change to newline "
2018/06/19 13:44:01 " Enter key does *not* cause a newline "
2018/06/19 13:44:01 " DOS_OS2_W32 "
2018/06/19 13:44:01 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/gregbook/wpng.c": 32.137884ms
2018/06/19 13:44:01 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/gregbook/Makefile.mingw32
2018/06/19 13:44:01 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/gregbook/Makefile.mingw32": 6.847154ms
2018/06/19 13:44:01 Couldn't classify license(s)
2018/06/19 13:44:02 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/gregbook/rpng-win.c
2018/06/19 13:44:02 detected language: 4
2018/06/19 13:44:02 "---------------------------------------------------------------------------\n\n   rpng - simple PNG display program                             rpng-win.c\n\n   This program decodes and displays PNG images, with gamma correction and\n   optionally with a user-specified background color (in case the image has\n   transparency).  It is very nearly the most basic PNG viewer possible.\n   This version is for 32-bit Windows; it may compile under 16-bit Windows\n   with a little tweaking (or maybe not).\n\n   to do:\n    - handle quoted command-line args (especially filenames with spaces)\n    - have minimum window width:  oh well\n    - use %.1023s to simplify truncation of title-bar string?\n\n  ---------------------------------------------------------------------------\n\n   Changelog:\n    - 1.00:  initial public release\n    - 1.01:  modified to allow abbreviated options; fixed long/ulong mis-\n              match; switched to png_jmpbuf() macro\n    - 1.02:  added extra set of parentheses to png_jmpbuf() macro; fixed\n              command-line parsing bug\n    - 1.10:  enabled \"message window\"/console (thanks to David Geldreich)\n    - 2.00:  dual-licensed (added GNU GPL)\n    - 2.01:  fixed improper display of usage screen on PNG error(s)\n    - 2.02:  check for integer overflow (Glenn R-P)\n\n  ---------------------------------------------------------------------------\n\n      Copyright (c) 1998-2008, 2017 Greg Roelofs.  All rights reserved.\n\n      This software is provided \"as is,\" without warranty of any kind,\n      express or implied.  In no event shall the author or contributors\n      be held liable for any damages arising in any way from the use of\n      this software.\n\n      The contents of this file are DUAL-LICENSED.  You may modify and/or\n      redistribute this software according to the terms of one of the\n      following two licenses (at your option):\n\n\n      LICENSE 1 (\"BSD-like with advertising clause\"):\n\n      Permission is granted to anyone to use this software for any purpose,\n      including commercial applications, and to alter it and redistribute\n      it freely, subject to the following restrictions:\n\n      1. Redistributions of source code must retain the above copyright\n         notice, disclaimer, and this list of conditions.\n      2. Redistributions in binary form must reproduce the above copyright\n         notice, disclaimer, and this list of conditions in the documenta-\n         tion and/or other materials provided with the distribution.\n      3. All advertising materials mentioning features or use of this\n         software must display the following acknowledgment:\n\n            This product includes software developed by Greg Roelofs\n            and contributors for the book, \"PNG: The Definitive Guide,\"\n            published by O'Reilly and Associates.\n\n\n      LICENSE 2 (GNU GPL v2 or later):\n\n      This program is free software; you can redistribute it and/or modify\n      it under the terms of the GNU General Public License as published by\n      the Free Software Foundation; either version 2 of the License, or\n      (at your option) any later version.\n\n      This program is distributed in the hope that it will be useful,\n      but WITHOUT ANY WARRANTY; without even the implied warranty of\n      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n      GNU General Public License for more details.\n\n      You should have received a copy of the GNU General Public License\n      along with this program; if not, write to the Free Software Foundation,\n      Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:02 " getch replacement. Turns out, we don't really need this,\n * but leave it here if we ever enable any of the uses of\n * _getch in the main code\n "
2018/06/19 13:44:02 " only for _getch() "
2018/06/19 13:44:02 " #define DEBUG  :  this enables the Trace() macros "
2018/06/19 13:44:02 " typedefs, common macros, readpng prototypes "
2018/06/19 13:44:02 " could just include png.h, but this macro is the only thing we need\n * (name and typedefs changed to local versions); note that side effects\n * only happen with alpha (which could easily be avoided with\n * \"ush acopy = (alpha);\") "
2018/06/19 13:44:02 " local prototypes "
2018/06/19 13:44:02 " Windows-specific variables "
2018/06/19 13:44:02 " arbitrary limit, but should suffice "
2018/06/19 13:44:02 " just the lookup table \n just the monitor \n whole display system "
2018/06/19 13:44:02 " First reenable console output, which normally goes to the bit bucket\n     * for windowed apps.  Closing the console window will terminate the\n     * app.  Thanks to David.Geldreich at realviz.com for supplying the magical\n     * incantation. "
2018/06/19 13:44:02 " Next set the default value for our display-system exponent, i.e.,\n     * the product of the CRT exponent and the exponent corresponding to\n     * the frame-buffer's lookup table (LUT), if any.  This is not an\n     * exhaustive list of LUT values (e.g., OpenStep has a lot of weird\n     * ones), but it should cover 99% of the current possibilities.  And\n     * yes, these ifdefs are completely wasted in a Windows program... "
2018/06/19 13:44:02 "\n    if (some_next_function_that_returns_gamma(&next_gamma))\n        LUT_exponent = 1.0 / next_gamma;\n     "
2018/06/19 13:44:02 " there doesn't seem to be any documented function to get the\n     * \"gamma\" value, so we do it the hard way "
2018/06/19 13:44:02 "\n    if (some_mac_function_that_returns_gamma(&mac_gamma))\n        LUT_exponent = mac_gamma / 2.61;\n     "
2018/06/19 13:44:02 " assume no LUT:  most PCs "
2018/06/19 13:44:02 " the defaults above give 1.0, 1.3, 1.5 and 2.2, respectively: "
2018/06/19 13:44:02 " If the user has set the SCREEN_GAMMA environment variable as suggested\n     * (somewhat imprecisely) in the libpng documentation, use that; otherwise\n     * use the default value we just calculated.  Either way, the user may\n     * override this via a command-line option. "
2018/06/19 13:44:02 " Windows really hates command lines, so we have to set up our own argv.\n     * Note that we do NOT bother with quoted arguments here, so don't use\n     * filenames with spaces in 'em! "
2018/06/19 13:44:02 " now p points at the first non-space after some spaces "
2018/06/19 13:44:02 " nothing after the spaces:  done "
2018/06/19 13:44:02 " now q points at a space or the end of the string "
2018/06/19 13:44:02 " last argv already terminated; quit \n change space to terminator "
2018/06/19 13:44:02 " terminate the argv array itself "
2018/06/19 13:44:02 " Now parse the command line for options and the PNG filename. "
2018/06/19 13:44:02 " shouldn't be any more args after filename "
2018/06/19 13:44:02 " not expecting any other options "
2018/06/19 13:44:02 " print usage screen if any errors up to this point "
2018/06/19 13:44:02 " set the title-bar string, but make sure buffer doesn't overflow "
2018/06/19 13:44:02 " if the user didn't specify a background color on the command line,\n     * check for one in the PNG file--if not, the initialized values of 0\n     * (black) will be used "
2018/06/19 13:44:02 " this approach quiets compiler warnings "
2018/06/19 13:44:02 " do the basic Windows initialization stuff, make the window and fill it\n     * with the background color "
2018/06/19 13:44:02 " decode the image, all at once "
2018/06/19 13:44:02 " done with PNG file, so clean up to minimize memory usage (but do NOT\n     * nuke image_data!) "
2018/06/19 13:44:02 " display image (composite with background if requested) "
2018/06/19 13:44:02 " wait for the user to tell us when to quit "
2018/06/19 13:44:02 " OK, we're done:  clean up all image and Windows resources and go away "
2018/06/19 13:44:02 "---------------------------------------------------------------------------\n    Allocate memory for the display-specific version of the image (round up\n    to multiple of 4 for Windows DIB).\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:02 " Guard against integer overflow "
2018/06/19 13:44:02 " fail "
2018/06/19 13:44:02 " fail "
2018/06/19 13:44:02 "---------------------------------------------------------------------------\n    Initialize the DIB.  Negative height means to use top-down BMP ordering\n    (must be uncompressed, but that's what we want).  Bit count of 1, 4 or 8\n    implies a colormap of RGBX quads, but 24-bit BMPs just use B,G,R values\n    directly => wimage_data begins immediately after BMP header.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:02 "---------------------------------------------------------------------------\n    Fill in background color (black by default); data are in BGR order.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:02 "---------------------------------------------------------------------------\n    Set the window parameters.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:02 "---------------------------------------------------------------------------\n    Finally, create the window.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:02 " end function rpng_win_create_window() "
2018/06/19 13:44:02 "---------------------------------------------------------------------------\n    Blast image data to buffer.  This whole routine takes place before the\n    message loop begins, so there's no real point in any pseudo-progressive\n    display...\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:02 " note reverse order "
2018/06/19 13:44:02 " if (image_channels == 4) "
2018/06/19 13:44:02 " this macro (copied from png.h) composites the\n                     * foreground and background values and puts the\n                     * result into the first argument; there are no\n                     * side effects with the first argument "
2018/06/19 13:44:02 " display after every 16 lines "
2018/06/19 13:44:02 " possibly off by one? \n possibly off by one? "
2018/06/19 13:44:02 " similar to XFlush() "
2018/06/19 13:44:02 " possibly off by one? \n possibly off by one? "
2018/06/19 13:44:02 " similar to XFlush() "
2018/06/19 13:44:02 "\n    last param determines whether or not background is wiped before paint\n    InvalidateRect(global_hwnd, NULL, TRUE);\n    UpdateWindow(global_hwnd);\n "
2018/06/19 13:44:02 " one-time processing here, if any "
2018/06/19 13:44:02 "                    dest                          "
2018/06/19 13:44:02 "                    source                        "
2018/06/19 13:44:02 "              iUsage: no clue                     "
2018/06/19 13:44:02 " wait for the user to tell us when to quit "
2018/06/19 13:44:02 " only need one, so ignore repeat count "
2018/06/19 13:44:02 " Esc key "
2018/06/19 13:44:02 " another way of quitting "
2018/06/19 13:44:02 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/gregbook/rpng-win.c": 36.823881ms
2018/06/19 13:44:03 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/gregbook/LICENSE
2018/06/19 13:44:03 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/gregbook/LICENSE": 15.737113ms
2018/06/19 13:44:04 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/gregbook/Makefile.unx
2018/06/19 13:44:04 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/gregbook/Makefile.unx": 6.645002ms
2018/06/19 13:44:04 Couldn't classify license(s)
2018/06/19 13:44:05 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/gregbook/readppm.c
2018/06/19 13:44:05 detected language: 4
2018/06/19 13:44:05 "---------------------------------------------------------------------------\n\n   rpng - simple PNG display program                              readppm.c\n\n  ---------------------------------------------------------------------------\n\n   This is a special-purpose replacement for readpng.c that allows binary\n   PPM files to be used in place of PNG images.\n\n  ---------------------------------------------------------------------------\n\n      Copyright (c) 1998-2007,2017 Greg Roelofs.  All rights reserved.\n\n      This software is provided \"as is,\" without warranty of any kind,\n      express or implied.  In no event shall the author or contributors\n      be held liable for any damages arising in any way from the use of\n      this software.\n\n      The contents of this file are DUAL-LICENSED.  You may modify and/or\n      redistribute this software according to the terms of one of the\n      following two licenses (at your option):\n\n\n      LICENSE 1 (\"BSD-like with advertising clause\"):\n\n      Permission is granted to anyone to use this software for any purpose,\n      including commercial applications, and to alter it and redistribute\n      it freely, subject to the following restrictions:\n\n      1. Redistributions of source code must retain the above copyright\n         notice, disclaimer, and this list of conditions.\n      2. Redistributions in binary form must reproduce the above copyright\n         notice, disclaimer, and this list of conditions in the documenta-\n         tion and/or other materials provided with the distribution.\n      3. All advertising materials mentioning features or use of this\n         software must display the following acknowledgment:\n\n            This product includes software developed by Greg Roelofs\n            and contributors for the book, \"PNG: The Definitive Guide,\"\n            published by O'Reilly and Associates.\n\n\n      LICENSE 2 (GNU GPL v2 or later):\n\n      This program is free software; you can redistribute it and/or modify\n      it under the terms of the GNU General Public License as published by\n      the Free Software Foundation; either version 2 of the License, or\n      (at your option) any later version.\n\n      This program is distributed in the hope that it will be useful,\n      but WITHOUT ANY WARRANTY; without even the implied warranty of\n      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n      GNU General Public License for more details.\n\n      You should have received a copy of the GNU General Public License\n      along with this program; if not, write to the Free Software Foundation,\n      Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:05 " typedefs, common macros, public prototypes "
2018/06/19 13:44:05 " return value = 0 for success, 1 for bad sig, 2 for bad IHDR, 4 for no mem "
2018/06/19 13:44:05 " possible color types:  P5 = grayscale (0), P6 = RGB (2), P8 = RGBA (6) "
2018/06/19 13:44:05 " if (ppmline[1] == '5') "
2018/06/19 13:44:05 " returns 0 if succeeds, 1 if fails due to no bKGD chunk, 2 if libpng error;\n * scales values to 8-bit if necessary "
2018/06/19 13:44:05 " display_exponent == LUT_exponent * CRT_exponent "
2018/06/19 13:44:05 " expand palette images to RGB, low-bit-depth grayscale images to 8 bits,\n     * transparency chunks to full alpha channel; strip 16-bit-per-sample\n     * images to 8 bits per sample; and convert grayscale to RGB[A] "
2018/06/19 13:44:05 " GRR WARNING:  grayscale needs to be expanded and channels reset! "
2018/06/19 13:44:05 " Guard against integer overflow "
2018/06/19 13:44:05 " now we can go ahead and just read the whole image "
2018/06/19 13:44:05 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/gregbook/readppm.c": 18.646752ms
2018/06/19 13:44:06 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/gregbook/readpng.h
2018/06/19 13:44:06 detected language: 4
2018/06/19 13:44:06 "---------------------------------------------------------------------------\n\n   rpng - simple PNG display program                              readpng.h\n\n  ---------------------------------------------------------------------------\n\n      Copyright (c) 1998-2007 Greg Roelofs.  All rights reserved.\n\n      This software is provided \"as is,\" without warranty of any kind,\n      express or implied.  In no event shall the author or contributors\n      be held liable for any damages arising in any way from the use of\n      this software.\n\n      The contents of this file are DUAL-LICENSED.  You may modify and/or\n      redistribute this software according to the terms of one of the\n      following two licenses (at your option):\n\n\n      LICENSE 1 (\"BSD-like with advertising clause\"):\n\n      Permission is granted to anyone to use this software for any purpose,\n      including commercial applications, and to alter it and redistribute\n      it freely, subject to the following restrictions:\n\n      1. Redistributions of source code must retain the above copyright\n         notice, disclaimer, and this list of conditions.\n      2. Redistributions in binary form must reproduce the above copyright\n         notice, disclaimer, and this list of conditions in the documenta-\n         tion and/or other materials provided with the distribution.\n      3. All advertising materials mentioning features or use of this\n         software must display the following acknowledgment:\n\n            This product includes software developed by Greg Roelofs\n            and contributors for the book, \"PNG: The Definitive Guide,\"\n            published by O'Reilly and Associates.\n\n\n      LICENSE 2 (GNU GPL v2 or later):\n\n      This program is free software; you can redistribute it and/or modify\n      it under the terms of the GNU General Public License as published by\n      the Free Software Foundation; either version 2 of the License, or\n      (at your option) any later version.\n\n      This program is distributed in the hope that it will be useful,\n      but WITHOUT ANY WARRANTY; without even the implied warranty of\n      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n      GNU General Public License for more details.\n\n      You should have received a copy of the GNU General Public License\n      along with this program; if not, write to the Free Software Foundation,\n      Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:06 " prototypes for public functions in readpng.c "
2018/06/19 13:44:06 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/gregbook/readpng.h": 16.674759ms
2018/06/19 13:44:07 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/gregbook/makevms.com
2018/06/19 13:44:07 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/gregbook/makevms.com": 5.905488ms
2018/06/19 13:44:07 Couldn't classify license(s)
2018/06/19 13:44:08 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/gregbook/readpng2.h
2018/06/19 13:44:08 detected language: 4
2018/06/19 13:44:08 "---------------------------------------------------------------------------\n\n   rpng2 - progressive-model PNG display program                 readpng2.h\n\n  ---------------------------------------------------------------------------\n\n      Copyright (c) 1998-2008 Greg Roelofs.  All rights reserved.\n\n      This software is provided \"as is,\" without warranty of any kind,\n      express or implied.  In no event shall the author or contributors\n      be held liable for any damages arising in any way from the use of\n      this software.\n\n      The contents of this file are DUAL-LICENSED.  You may modify and/or\n      redistribute this software according to the terms of one of the\n      following two licenses (at your option):\n\n\n      LICENSE 1 (\"BSD-like with advertising clause\"):\n\n      Permission is granted to anyone to use this software for any purpose,\n      including commercial applications, and to alter it and redistribute\n      it freely, subject to the following restrictions:\n\n      1. Redistributions of source code must retain the above copyright\n         notice, disclaimer, and this list of conditions.\n      2. Redistributions in binary form must reproduce the above copyright\n         notice, disclaimer, and this list of conditions in the documenta-\n         tion and/or other materials provided with the distribution.\n      3. All advertising materials mentioning features or use of this\n         software must display the following acknowledgment:\n\n            This product includes software developed by Greg Roelofs\n            and contributors for the book, \"PNG: The Definitive Guide,\"\n            published by O'Reilly and Associates.\n\n\n      LICENSE 2 (GNU GPL v2 or later):\n\n      This program is free software; you can redistribute it and/or modify\n      it under the terms of the GNU General Public License as published by\n      the Free Software Foundation; either version 2 of the License, or\n      (at your option) any later version.\n\n      This program is distributed in the hope that it will be useful,\n      but WITHOUT ANY WARRANTY; without even the implied warranty of\n      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n      GNU General Public License for more details.\n\n      You should have received a copy of the GNU General Public License\n      along with this program; if not, write to the Free Software Foundation,\n      Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:08 " not used "
2018/06/19 13:44:08 " prototypes for public functions in readpng2.c "
2018/06/19 13:44:08 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/gregbook/readpng2.h": 15.779698ms
2018/06/19 13:44:08 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/gregbook/COPYING
2018/06/19 13:44:09 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/gregbook/COPYING": 133.796586ms
2018/06/19 13:44:10 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/gregbook/readpng2.c
2018/06/19 13:44:10 detected language: 4
2018/06/19 13:44:10 "---------------------------------------------------------------------------\n\n   rpng2 - progressive-model PNG display program                 readpng2.c\n\n  ---------------------------------------------------------------------------\n\n      Copyright (c) 1998-2015 Greg Roelofs.  All rights reserved.\n\n      This software is provided \"as is,\" without warranty of any kind,\n      express or implied.  In no event shall the author or contributors\n      be held liable for any damages arising in any way from the use of\n      this software.\n\n      The contents of this file are DUAL-LICENSED.  You may modify and/or\n      redistribute this software according to the terms of one of the\n      following two licenses (at your option):\n\n\n      LICENSE 1 (\"BSD-like with advertising clause\"):\n\n      Permission is granted to anyone to use this software for any purpose,\n      including commercial applications, and to alter it and redistribute\n      it freely, subject to the following restrictions:\n\n      1. Redistributions of source code must retain the above copyright\n         notice, disclaimer, and this list of conditions.\n      2. Redistributions in binary form must reproduce the above copyright\n         notice, disclaimer, and this list of conditions in the documenta-\n         tion and/or other materials provided with the distribution.\n      3. All advertising materials mentioning features or use of this\n         software must display the following acknowledgment:\n\n            This product includes software developed by Greg Roelofs\n            and contributors for the book, \"PNG: The Definitive Guide,\"\n            published by O'Reilly and Associates.\n\n\n      LICENSE 2 (GNU GPL v2 or later):\n\n      This program is free software; you can redistribute it and/or modify\n      it under the terms of the GNU General Public License as published by\n      the Free Software Foundation; either version 2 of the License, or\n      (at your option) any later version.\n\n      This program is distributed in the hope that it will be useful,\n      but WITHOUT ANY WARRANTY; without even the implied warranty of\n      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n      GNU General Public License for more details.\n\n      You should have received a copy of the GNU General Public License\n      along with this program; if not, write to the Free Software Foundation,\n      Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n  ---------------------------------------------------------------------------\n\n   Changelog:\n     2015-11-12 - Check return value of png_get_bKGD() (Glenn R-P)\n     2017-04-22 - Guard against integer overflow (Glenn R-P)\n\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:10 " for exit() prototype "
2018/06/19 13:44:10 " libpng header from the local directory \n typedefs, common macros, public prototypes "
2018/06/19 13:44:10 " local prototypes "
2018/06/19 13:44:10 " returns 0 for success, 2 for libpng problem, 4 for out of memory "
2018/06/19 13:44:10 " note:  temporary variables! "
2018/06/19 13:44:10 " could also replace libpng warning-handler (final NULL), but no need: "
2018/06/19 13:44:10 " out of memory "
2018/06/19 13:44:10 " out of memory "
2018/06/19 13:44:10 " we could create a second info struct here (end_info), but it's only\n     * useful if we want to keep pre- and post-IDAT chunk info separated\n     * (mainly for PNG-aware image editors and converters) "
2018/06/19 13:44:10 " setjmp() must be called in every function that calls a PNG-reading\n     * libpng function, unless an alternate error handler was installed--\n     * but compatible error handlers must either use longjmp() themselves\n     * (as in this program) or exit immediately, so here we are: "
2018/06/19 13:44:10 " prepare the reader to ignore all recognized chunks whose data won't be\n     * used, i.e., all chunks recognized by libpng except for IHDR, PLTE, IDAT,\n     * IEND, tRNS, bKGD, gAMA, and sRGB (small performance improvement) "
2018/06/19 13:44:10 " These byte strings were copied from png.h.  If a future version\n         * of readpng2.c recognizes more chunks, add them to this list.\n         "
2018/06/19 13:44:10 " bKGD \n gAMA \n sRGB "
2018/06/19 13:44:10 " Ignore all chunks except for IHDR, PLTE, tRNS, IDAT, and IEND \n PNG_HANDLE_CHUNK_NEVER "
2018/06/19 13:44:10 " But do not ignore chunks in the \"chunks_to_process\" list "
2018/06/19 13:44:10 " PNG_HANDLE_CHUNK_AS_DEFAULT "
2018/06/19 13:44:10 " PNG_HANDLE_AS_UNKNOWN_SUPPORTED "
2018/06/19 13:44:10 " instead of doing png_init_io() here, now we set up our callback\n     * functions for progressive decoding "
2018/06/19 13:44:10 " make sure we save our pointers for use in readpng2_decode_data() "
2018/06/19 13:44:10 " and that's all there is to initialization "
2018/06/19 13:44:10 " returns 0 for success, 2 for libpng (longjmp) problem "
2018/06/19 13:44:10 " setjmp() must be called in every function that calls a PNG-reading\n     * libpng function "
2018/06/19 13:44:10 " hand off the next chunk of input data to libpng for decoding "
2018/06/19 13:44:10 " setjmp() doesn't make sense here, because we'd either have to exit(),\n     * longjmp() ourselves, or return control to libpng, which doesn't want\n     * to see us again.  By not doing anything here, libpng will instead jump\n     * to readpng2_decode_data(), which can return an error value to the main\n     * program. "
2018/06/19 13:44:10 " retrieve the pointer to our special-purpose struct, using the png_ptr\n     * that libpng passed back to us (i.e., not a global this time--there's\n     * no real difference for a single image, but for a multithreaded browser\n     * decoding several PNG images at the same time, one needs to avoid mixing\n     * up different images' structs) "
2018/06/19 13:44:10 " we be hosed "
2018/06/19 13:44:10 "\n         * Alternatively, we could call our error-handler just like libpng\n         * does, which would effectively terminate the program.  Since this\n         * can only happen if png_ptr gets redirected somewhere odd or the\n         * main PNG struct gets wiped, we're probably toast anyway.  (If\n         * png_ptr itself is NULL, we would not have been called.)\n         "
2018/06/19 13:44:10 " this is just like in the non-progressive case "
2018/06/19 13:44:10 " since we know we've read all of the PNG file's \"header\" (i.e., up\n     * to IDAT), we can check for a background color here "
2018/06/19 13:44:10 " it is not obvious from the libpng documentation, but this function\n         * takes a pointer to a pointer, and it always returns valid red,\n         * green and blue values, regardless of color_type: "
2018/06/19 13:44:10 " however, it always returns the raw bKGD data, regardless of any\n            * bit-depth transformations, so check depth and adjust if necessary\n            "
2018/06/19 13:44:10 " bit_depth == 4 "
2018/06/19 13:44:10 " as before, let libpng expand palette images to RGB, low-bit-depth\n     * grayscale images to 8 bits, transparency chunks to full alpha channel;\n     * strip 16-bit-per-sample images to 8 bits per sample; and convert\n     * grayscale to RGB[A] "
2018/06/19 13:44:10 " Unlike the basic viewer, which was designed to operate on local files,\n     * this program is intended to simulate a web browser--even though we\n     * actually read from a local file, too.  But because we are pretending\n     * that most of the images originate on the Internet, we follow the recom-\n     * mendation of the sRGB proposal and treat unlabelled images (no gAMA\n     * chunk) as existing in the sRGB color space.  That is, we assume that\n     * such images have a file gamma of 0.45455, which corresponds to a PC-like\n     * display system.  This change in assumptions will have no effect on a\n     * PC-like system, but on a Mac, SGI, NeXT or other system with a non-\n     * identity lookup table, it will darken unlabelled images, which effec-\n     * tively favors images from PC-like systems over those originating on\n     * the local platform.  Note that mainprog_ptr->display_exponent is the\n     * \"gamma\" value for the entire display system, i.e., the product of\n     * LUT_exponent and CRT_exponent. "
2018/06/19 13:44:10 " we'll let libpng expand interlaced images, too "
2018/06/19 13:44:10 " all transformations have been registered; now update info_ptr data and\n     * then get rowbytes and channels "
2018/06/19 13:44:10 " Call the main program to allocate memory for the image buffer and\n     * initialize windows and whatnot.  (The old-style function-pointer\n     * invocation is used for compatibility with a few supposedly ANSI\n     * compilers that nevertheless barf on \"fn_ptr()\"-style syntax.) "
2018/06/19 13:44:10 " and that takes care of initialization "
2018/06/19 13:44:10 " first check whether the row differs from the previous pass; if not,\n     * nothing to combine or display "
2018/06/19 13:44:10 " retrieve the pointer to our special-purpose struct so we can access\n     * the old rows and image-display callback function "
2018/06/19 13:44:10 " save the pass number for optional use by the front end "
2018/06/19 13:44:10 " have libpng either combine the new row data with the existing row data\n     * from previous passes (if interlaced) or else just copy the new row\n     * into the main program's image buffer "
2018/06/19 13:44:10 " finally, call the display routine in the main program with the number\n     * of the row we just updated "
2018/06/19 13:44:10 " and we're ready for more "
2018/06/19 13:44:10 " retrieve the pointer to our special-purpose struct "
2018/06/19 13:44:10 " let the main program know that it should flush any buffered image\n     * data to the display now and set a \"done\" flag or whatever, but note\n     * that it SHOULD NOT DESTROY THE PNG STRUCTS YET--in other words, do\n     * NOT call readpng2_cleanup() either here or in the finish_display()\n     * routine; wait until control returns to the main program via\n     * readpng2_decode_data() "
2018/06/19 13:44:10 " all done "
2018/06/19 13:44:10 " Unused "
2018/06/19 13:44:10 " Unused "
2018/06/19 13:44:10 " This function, aside from the extra step of retrieving the \"error\n     * pointer\" (below) and the fact that it exists within the application\n     * rather than within libpng, is essentially identical to libpng's\n     * default error handler.  The second point is critical:  since both\n     * setjmp() and longjmp() are called from the same code, they are\n     * guaranteed to have compatible notions of how big a jmp_buf is,\n     * regardless of whether _BSD_SOURCE or anything else has (or has not)\n     * been defined. "
2018/06/19 13:44:10 " we are completely hosed now "
2018/06/19 13:44:10 " Now we have our data structure we can use the information in it\n     * to return control to our own higher level code (all the points\n     * where 'setjmp' is called in this file.)  This will work with other\n     * error handling mechanisms as well - libpng always calls png_error\n     * when it can proceed no further, thus, so long as the error handler\n     * is intercepted, application code can do its own error recovery.\n     "
2018/06/19 13:44:10 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/gregbook/readpng2.c": 39.283242ms
2018/06/19 13:44:10 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/gregbook/readpng.c
2018/06/19 13:44:10 detected language: 4
2018/06/19 13:44:10 "---------------------------------------------------------------------------\n\n   rpng - simple PNG display program                              readpng.c\n\n  ---------------------------------------------------------------------------\n\n      Copyright (c) 1998-2007,2017 Greg Roelofs.  All rights reserved.\n\n      This software is provided \"as is,\" without warranty of any kind,\n      express or implied.  In no event shall the author or contributors\n      be held liable for any damages arising in any way from the use of\n      this software.\n\n      The contents of this file are DUAL-LICENSED.  You may modify and/or\n      redistribute this software according to the terms of one of the\n      following two licenses (at your option):\n\n\n      LICENSE 1 (\"BSD-like with advertising clause\"):\n\n      Permission is granted to anyone to use this software for any purpose,\n      including commercial applications, and to alter it and redistribute\n      it freely, subject to the following restrictions:\n\n      1. Redistributions of source code must retain the above copyright\n         notice, disclaimer, and this list of conditions.\n      2. Redistributions in binary form must reproduce the above copyright\n         notice, disclaimer, and this list of conditions in the documenta-\n         tion and/or other materials provided with the distribution.\n      3. All advertising materials mentioning features or use of this\n         software must display the following acknowledgment:\n\n            This product includes software developed by Greg Roelofs\n            and contributors for the book, \"PNG: The Definitive Guide,\"\n            published by O'Reilly and Associates.\n\n\n      LICENSE 2 (GNU GPL v2 or later):\n\n      This program is free software; you can redistribute it and/or modify\n      it under the terms of the GNU General Public License as published by\n      the Free Software Foundation; either version 2 of the License, or\n      (at your option) any later version.\n\n      This program is distributed in the hope that it will be useful,\n      but WITHOUT ANY WARRANTY; without even the implied warranty of\n      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n      GNU General Public License for more details.\n\n      You should have received a copy of the GNU General Public License\n      along with this program; if not, write to the Free Software Foundation,\n      Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:10 " libpng header \n typedefs, common macros, public prototypes "
2018/06/19 13:44:10 " future versions of libpng will provide this macro: "
2018/06/19 13:44:10 " return value = 0 for success, 1 for bad sig, 2 for bad IHDR, 4 for no mem "
2018/06/19 13:44:10 " first do a quick check that the file really is a PNG image; could\n     * have used slightly more general png_sig_cmp() function instead "
2018/06/19 13:44:10 " bad signature "
2018/06/19 13:44:10 " could pass pointers to user-defined error handlers instead of NULLs: "
2018/06/19 13:44:10 " out of memory "
2018/06/19 13:44:10 " out of memory "
2018/06/19 13:44:10 " we could create a second info struct here (end_info), but it's only\n     * useful if we want to keep pre- and post-IDAT chunk info separated\n     * (mainly for PNG-aware image editors and converters) "
2018/06/19 13:44:10 " setjmp() must be called in every function that calls a PNG-reading\n     * libpng function "
2018/06/19 13:44:10 " we already read the 8 signature bytes "
2018/06/19 13:44:10 " read all PNG info up to image data "
2018/06/19 13:44:10 " alternatively, could make separate calls to png_get_image_width(),\n     * etc., but want bit_depth and color_type for later [don't care about\n     * compression_type and filter_type => NULLs] "
2018/06/19 13:44:10 " OK, that's all we need for now; return happy "
2018/06/19 13:44:10 " returns 0 if succeeds, 1 if fails due to no bKGD chunk, 2 if libpng error;\n * scales values to 8-bit if necessary "
2018/06/19 13:44:10 " setjmp() must be called in every function that calls a PNG-reading\n     * libpng function "
2018/06/19 13:44:10 " it is not obvious from the libpng documentation, but this function\n     * takes a pointer to a pointer, and it always returns valid red, green\n     * and blue values, regardless of color_type: "
2018/06/19 13:44:10 " however, it always returns the raw bKGD data, regardless of any\n     * bit-depth transformations, so check depth and adjust if necessary "
2018/06/19 13:44:10 " bit_depth == 4 "
2018/06/19 13:44:10 " display_exponent == LUT_exponent * CRT_exponent "
2018/06/19 13:44:10 " setjmp() must be called in every function that calls a PNG-reading\n     * libpng function "
2018/06/19 13:44:10 " expand palette images to RGB, low-bit-depth grayscale images to 8 bits,\n     * transparency chunks to full alpha channel; strip 16-bit-per-sample\n     * images to 8 bits per sample; and convert grayscale to RGB[A] "
2018/06/19 13:44:10 " unlike the example in the libpng documentation, we have *no* idea where\n     * this file may have come from--so if it doesn't have a file gamma, don't\n     * do any correction (\"do no harm\") "
2018/06/19 13:44:10 " all transformations have been registered; now update info_ptr data,\n     * get rowbytes and channels, and allocate image memory "
2018/06/19 13:44:10 " Guard against integer overflow "
2018/06/19 13:44:10 " set the individual row_pointers to point at the correct offsets "
2018/06/19 13:44:10 " now we can go ahead and just read the whole image "
2018/06/19 13:44:10 " and we're done!  (png_read_end() can be omitted if no processing of\n     * post-IDAT text/time/etc. is desired) "
2018/06/19 13:44:10 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/gregbook/readpng.c": 27.462807ms
2018/06/19 13:44:11 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/gregbook/writepng.c
2018/06/19 13:44:11 detected language: 4
2018/06/19 13:44:11 "---------------------------------------------------------------------------\n\n   wpng - simple PNG-writing program                             writepng.c\n\n  ---------------------------------------------------------------------------\n\n      Copyright (c) 1998-2007, 2017 Greg Roelofs.  All rights reserved.\n\n      This software is provided \"as is,\" without warranty of any kind,\n      express or implied.  In no event shall the author or contributors\n      be held liable for any damages arising in any way from the use of\n      this software.\n\n      The contents of this file are DUAL-LICENSED.  You may modify and/or\n      redistribute this software according to the terms of one of the\n      following two licenses (at your option):\n\n\n      LICENSE 1 (\"BSD-like with advertising clause\"):\n\n      Permission is granted to anyone to use this software for any purpose,\n      including commercial applications, and to alter it and redistribute\n      it freely, subject to the following restrictions:\n\n      1. Redistributions of source code must retain the above copyright\n         notice, disclaimer, and this list of conditions.\n      2. Redistributions in binary form must reproduce the above copyright\n         notice, disclaimer, and this list of conditions in the documenta-\n         tion and/or other materials provided with the distribution.\n      3. All advertising materials mentioning features or use of this\n         software must display the following acknowledgment:\n\n            This product includes software developed by Greg Roelofs\n            and contributors for the book, \"PNG: The Definitive Guide,\"\n            published by O'Reilly and Associates.\n\n\n      LICENSE 2 (GNU GPL v2 or later):\n\n      This program is free software; you can redistribute it and/or modify\n      it under the terms of the GNU General Public License as published by\n      the Free Software Foundation; either version 2 of the License, or\n      (at your option) any later version.\n\n      This program is distributed in the hope that it will be useful,\n      but WITHOUT ANY WARRANTY; without even the implied warranty of\n      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n      GNU General Public License for more details.\n\n      You should have received a copy of the GNU General Public License\n      along with this program; if not, write to the Free Software Foundation,\n      Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:11 " for exit() prototype "
2018/06/19 13:44:11 " libpng header, includes setjmp.h \n typedefs, common macros, public prototypes "
2018/06/19 13:44:11 " local prototype "
2018/06/19 13:44:11 " returns 0 for success, 2 for libpng problem, 4 for out of memory, 11 for\n *  unexpected pnmtype; note that outfile might be stdout "
2018/06/19 13:44:11 " note:  temporary variables! "
2018/06/19 13:44:11 " could also replace libpng warning-handler (final NULL), but no need: "
2018/06/19 13:44:11 " out of memory "
2018/06/19 13:44:11 " out of memory "
2018/06/19 13:44:11 " setjmp() must be called in every function that calls a PNG-writing\n     * libpng function, unless an alternate error handler was installed--\n     * but compatible error handlers must either use longjmp() themselves\n     * (as in this program) or some other method to return control to\n     * application code, so here we go: "
2018/06/19 13:44:11 " make sure outfile is (re)opened in BINARY mode "
2018/06/19 13:44:11 " set the compression levels--in general, always want to leave filtering\n     * turned on (except for palette images) and allow all of the filters,\n     * which is the default; want 32K zlib window, unless entire image buffer\n     * is 16K or smaller (unknown here)--also the default; usually want max\n     * compression (NOT the default); and remaining compression flags should\n     * be left alone "
2018/06/19 13:44:11 "\n    >> this is default for no filtering; Z_FILTERED is default otherwise:\n    png_set_compression_strategy(png_ptr, Z_DEFAULT_STRATEGY);\n    >> these are all defaults:\n    png_set_compression_mem_level(png_ptr, 8);\n    png_set_compression_window_bits(png_ptr, 15);\n    png_set_compression_method(png_ptr, 8);\n "
2018/06/19 13:44:11 " set the image parameters appropriately "
2018/06/19 13:44:11 " we know it's RGBA, not gray+alpha "
2018/06/19 13:44:11 " write all chunks up to (but not including) first IDAT "
2018/06/19 13:44:11 " if we wanted to write any more text info *after* the image data, we\n     * would set up text struct(s) here and call png_set_text() again, with\n     * just the new data; png_set_tIME() could also go here, but it would\n     * have no effect since we already called it above (only one tIME chunk\n     * allowed) "
2018/06/19 13:44:11 " set up the transformations:  for now, just pack low-bit-depth pixels\n     * into bytes (one, two or four pixels per byte) "
2018/06/19 13:44:11 "  png_set_shift(png_ptr, &sig_bit);  to scale low-bit-depth values "
2018/06/19 13:44:11 " make sure we save our pointers for use in writepng_encode_image() "
2018/06/19 13:44:11 " OK, that's all we need to do for now; return happy "
2018/06/19 13:44:11 " returns 0 for success, 2 for libpng (longjmp) problem "
2018/06/19 13:44:11 " as always, setjmp() must be called in every function that calls a\n     * PNG-writing libpng function "
2018/06/19 13:44:11 " and now we just write the whole image; libpng takes care of interlacing\n     * for us "
2018/06/19 13:44:11 " since that's it, we also close out the end of the PNG file now--if we\n     * had any text or time info to write after the IDATs, second argument\n     * would be info_ptr, but we optimize slightly by sending NULL pointer: "
2018/06/19 13:44:11 " returns 0 if succeeds, 2 if libpng problem "
2018/06/19 13:44:11 " NON-interlaced only! "
2018/06/19 13:44:11 " as always, setjmp() must be called in every function that calls a\n     * PNG-writing libpng function "
2018/06/19 13:44:11 " image_data points at our one row of image data "
2018/06/19 13:44:11 " returns 0 if succeeds, 2 if libpng problem "
2018/06/19 13:44:11 " NON-interlaced! "
2018/06/19 13:44:11 " as always, setjmp() must be called in every function that calls a\n     * PNG-writing libpng function "
2018/06/19 13:44:11 " close out PNG file; if we had any text or time info to write after\n     * the IDATs, second argument would be info_ptr: "
2018/06/19 13:44:11 " This function, aside from the extra step of retrieving the \"error\n     * pointer\" (below) and the fact that it exists within the application\n     * rather than within libpng, is essentially identical to libpng's\n     * default error handler.  The second point is critical:  since both\n     * setjmp() and longjmp() are called from the same code, they are\n     * guaranteed to have compatible notions of how big a jmp_buf is,\n     * regardless of whether _BSD_SOURCE or anything else has (or has not)\n     * been defined. "
2018/06/19 13:44:11 " we are completely hosed now "
2018/06/19 13:44:11 " Now we have our data structure we can use the information in it\n     * to return control to our own higher level code (all the points\n     * where 'setjmp' is called in this file.)  This will work with other\n     * error handling mechanisms as well - libpng always calls png_error\n     * when it can proceed no further, thus, so long as the error handler\n     * is intercepted, application code can do its own error recovery.\n     "
2018/06/19 13:44:11 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/gregbook/writepng.c": 37.299784ms
2018/06/19 13:44:12 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/gregbook/rpng2-x.c
2018/06/19 13:44:12 detected language: 4
2018/06/19 13:44:12 "---------------------------------------------------------------------------\n\n   rpng2 - progressive-model PNG display program                  rpng2-x.c\n\n   This program decodes and displays PNG files progressively, as if it were\n   a web browser (though the front end is only set up to read from files).\n   It supports gamma correction, user-specified background colors, and user-\n   specified background patterns (for transparent images).  This version is\n   for the X Window System (tested by the author under Unix and by Martin\n   Zinser under OpenVMS; may work under OS/2 with a little tweaking).\n\n   Thanks to Adam Costello and Pieter S. van der Meulen for the \"diamond\"\n   and \"radial waves\" patterns, respectively.\n\n   to do (someday, maybe):\n    - fix expose/redraw code:  don't draw entire row if only part exposed\n    - 8-bit (colormapped) X support\n    - finish resizable checkerboard-gradient (sizes 4-128?)\n    - use %.1023s to simplify truncation of title-bar string?\n\n  ---------------------------------------------------------------------------\n\n   Changelog:\n    - 1.01:  initial public release\n    - 1.02:  modified to allow abbreviated options; fixed char/uchar mismatch\n    - 1.10:  added support for non-default visuals; fixed X pixel-conversion\n    - 1.11:  added -usleep option for demos; fixed command-line parsing bug\n    - 1.12:  added -pause option for demos and testing\n    - 1.20:  added runtime MMX-enabling/disabling and new -mmx* options\n    - 1.21:  fixed some small X memory leaks (thanks to Fran�ois Petitjean)\n    - 1.22:  fixed XFreeGC() crash bug (thanks to Patrick Welche)\n    - 1.23:  added -bgpat 0 mode (std white/gray checkerboard, 8x8 squares)\n    - 1.30:  added -loop option for -bgpat (ifdef FEATURE_LOOP); fixed bpp =\n              24; added support for X resources (thanks to Gerhard Niklasch)\n    - 1.31:  added code to skip unused chunks (thanks to Glenn Randers-Pehrson)\n    - 1.32:  added AMD64/EM64T support (__x86_64__); added basic expose/redraw\n              handling\n    - 2.00:  dual-licensed (added GNU GPL)\n    - 2.01:  fixed 64-bit typo in readpng2.c; fixed -pause usage description\n    - 2.02:  fixed improper display of usage screen on PNG error(s); fixed\n              unexpected-EOF and file-read-error cases; fixed Trace() cut-and-\n              paste bugs\n    - 2.03:  deleted runtime MMX-enabling/disabling and obsolete -mmx* options\n    - 2.04:  Added \"void(foo);\" statements to quiet pedantic compiler warnings\n             about unused variables (GR-P)\n    - 2.05:  Use nanosleep() instead of usleep(), which is deprecated (GR-P).\n    - 2.06:  check for integer overflow (Glenn R-P)\n  ---------------------------------------------------------------------------\n\n      Copyright (c) 1998-2010, 2014-2015, 2017 Greg Roelofs.  All rights\n      reserved.\n\n      This software is provided \"as is,\" without warranty of any kind,\n      express or implied.  In no event shall the author or contributors\n      be held liable for any damages arising in any way from the use of\n      this software.\n\n      The contents of this file are DUAL-LICENSED.  You may modify and/or\n      redistribute this software according to the terms of one of the\n      following two licenses (at your option):\n\n\n      LICENSE 1 (\"BSD-like with advertising clause\"):\n\n      Permission is granted to anyone to use this software for any purpose,\n      including commercial applications, and to alter it and redistribute\n      it freely, subject to the following restrictions:\n\n      1. Redistributions of source code must retain the above copyright\n         notice, disclaimer, and this list of conditions.\n      2. Redistributions in binary form must reproduce the above copyright\n         notice, disclaimer, and this list of conditions in the documenta-\n         tion and/or other materials provided with the distribution.\n      3. All advertising materials mentioning features or use of this\n         software must display the following acknowledgment:\n\n            This product includes software developed by Greg Roelofs\n            and contributors for the book, \"PNG: The Definitive Guide,\"\n            published by O'Reilly and Associates.\n\n\n      LICENSE 2 (GNU GPL v2 or later):\n\n      This program is free software; you can redistribute it and/or modify\n      it under the terms of the GNU General Public License as published by\n      the Free Software Foundation; either version 2 of the License, or\n      (at your option) any later version.\n\n      This program is distributed in the hope that it will be useful,\n      but WITHOUT ANY WARRANTY; without even the implied warranty of\n      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n      GNU General Public License for more details.\n\n      You should have received a copy of the GNU General Public License\n      along with this program; if not, write to the Free Software Foundation,\n      Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:12 " our X resource application name \n our X resource class name "
2018/06/19 13:44:12 " for jmpbuf declaration in readpng2.h "
2018/06/19 13:44:12 " only for PvdM background code "
2018/06/19 13:44:12 " defines XK_* macros "
2018/06/19 13:44:12 " have nanosleep() "
2018/06/19 13:44:12 " have neither nanosleep() nor usleep() "
2018/06/19 13:44:12 " all for PvdM background code: "
2018/06/19 13:44:12 " 8-bit pos. integer (uch) "
2018/06/19 13:44:12 "  v--- or 1 for shifted keys "
2018/06/19 13:44:12 " undef case not fully written--only for redisplay() "
2018/06/19 13:44:12 " #define DEBUG \n this enables the Trace() macros "
2018/06/19 13:44:12 " typedefs, common macros, readpng2 prototypes "
2018/06/19 13:44:12 " could just include png.h, but this macro is the only thing we need\n * (name and typedefs changed to local versions); note that side effects\n * only happen with alpha (which could easily be avoided with\n * \"ush acopy = (alpha);\") "
2018/06/19 13:44:12 " with pseudo-timing on (1 sec delay/block), this\n                          *  block size corresponds roughly to a download\n                          *  speed 10% faster than theoretical 33.6K maximum\n                          *  (assuming 8 data bits, 1 stop bit and no other\n                          *  overhead) "
2018/06/19 13:44:12 " local prototypes "
2018/06/19 13:44:12 " must be less than num_bgpat "
2018/06/19 13:44:12 "  0:  black \n  1:  white \n  2:  tan \n  3:  medium green \n  4:  gold \n  5:  yellow \n  6:  blue \n  7:  medium blue \n  8:  magenta \n  9:  dark magenta \n 10:  red \n 11:  dark red \n 12:  orange \n 13:  darker orange \n 14:  dark green-yellow \n 15:  ice blue \n 16:  Netscape/Mosaic gray "
2018/06/19 13:44:12 " not used for now, but should be for error-checking:\nstatic int num_rgb = sizeof(rgb) / sizeof(struct rgb_color);\n "
2018/06/19 13:44:12 "\n    This whole struct is a fairly cheesy way to keep the number of\n    command-line options to a minimum.  The radial-waves background\n    type is a particularly poor fit to the integer elements of the\n    struct...but a few macros and a little fixed-point math will do\n    wonders for ya.\n\n    type bits:\n       F E D C B A 9 8 7 6 5 4 3 2 1 0\n                             | | | | |\n                             | | +-+-+-- 0 = sharp-edged checkerboard\n                             | |         1 = soft diamonds\n                             | |         2 = radial waves\n                             | |       3-7 = undefined\n                             | +-- gradient #2 inverted?\n                             +-- alternating columns inverted?\n "
2018/06/19 13:44:12 " or bg_freq, bg_gray \n or bg_bsat, bg_brot (both scaled by 10)"
2018/06/19 13:44:12 " checkered:  white vs. light gray (basic) \n checkered:  tan/black vs. white/ice blue \n checkered:  tan/black vs. white/black \n checkered:  gold/yellow vs. black/tan \n checkered:  gold/yellow vs. black/blue \n checkered:  deep blue/black vs. magenta \n checkered:  orange/black vs. yellow \n checkered:  orange/black vs. red \n diamonds:  deep blue/black vs. magenta \n diamonds:  orange vs. dark red \n diamonds:  red vs. medium blue \n diamonds:  gold vs. yellow \n diamonds:  medium green vs. black \n radial:  ~hard radial color-beams \n radial:  soft, curved radial color-beams \n radial:  very tight spiral \n radial:  dipole-moire' (almost fractal) "
2018/06/19 13:44:12 " X-specific variables "
2018/06/19 13:44:12 " seconds (100,000 max) "
2018/06/19 13:44:12 " just the lookup table \n just the monitor \n whole display system "
2018/06/19 13:44:12 " First initialize a few things, just to be sure--memset takes care of\n     * default background color (black), booleans (FALSE), pointers (NULL),\n     * etc. "
2018/06/19 13:44:12 " Set the default value for our display-system exponent, i.e., the\n     * product of the CRT exponent and the exponent corresponding to\n     * the frame-buffer's lookup table (LUT), if any.  This is not an\n     * exhaustive list of LUT values (e.g., OpenStep has a lot of weird\n     * ones), but it should cover 99% of the current possibilities. "
2018/06/19 13:44:12 " third-party utilities can modify the default LUT exponent "
2018/06/19 13:44:12 "\n    if (some_next_function_that_returns_gamma(&next_gamma))\n        LUT_exponent = 1.0 / next_gamma;\n     "
2018/06/19 13:44:12 " there doesn't seem to be any documented function to\n     * get the \"gamma\" value, so we do it the hard way "
2018/06/19 13:44:12 "\n    if (some_mac_function_that_returns_gamma(&mac_gamma))\n        LUT_exponent = mac_gamma / 2.61;\n     "
2018/06/19 13:44:12 " assume no LUT:  most PCs "
2018/06/19 13:44:12 " the defaults above give 1.0, 1.3, 1.5 and 2.2, respectively: "
2018/06/19 13:44:12 " If the user has set the SCREEN_GAMMA environment variable as suggested\n     * (somewhat imprecisely) in the libpng documentation, use that; otherwise\n     * use the default value we just calculated.  Either way, the user may\n     * override this via a command-line option. "
2018/06/19 13:44:12 " Now parse the command line for options and the PNG filename. "
2018/06/19 13:44:12 " bit more than one day "
2018/06/19 13:44:12 " shouldn't be any more args after filename "
2018/06/19 13:44:12 " not expecting any other options "
2018/06/19 13:44:12 " print usage screen if any errors up to this point "
2018/06/19 13:44:12 " set the title-bar string, but make sure buffer doesn't overflow "
2018/06/19 13:44:12 " set some final rpng2_info variables before entering main data loop "
2018/06/19 13:44:12 " this approach quiets compiler warnings "
2018/06/19 13:44:12 " OK, this is the fun part:  call readpng2_decode_data() at the start of\n     * the loop to deal with our first buffer of data (read in above to verify\n     * that the file is a PNG image), then loop through the file and continue\n     * calling the same routine to handle each chunk of data.  It in turn\n     * passes the data to libpng, which will invoke one or more of our call-\n     * backs as decoded data become available.  We optionally call sleep() for\n     * one second per iteration to simulate downloading the image via an analog\n     * modem. "
2018/06/19 13:44:12 " if (error) \n will print error message below "
2018/06/19 13:44:12 " clean up PNG stuff and report any decoding errors "
2018/06/19 13:44:12 " get current time and add loop_interval to get target time "
2018/06/19 13:44:12 " do quick check for a quit event but don't wait for it \n GRR BUG:  should also check for Expose events and redraw... "
2018/06/19 13:44:12 " generate next background image "
2018/06/19 13:44:12 " wait for timeout, using whatever means are available "
2018/06/19 13:44:12 " GRR BUG:  also need to check for Expose (and redraw!) "
2018/06/19 13:44:12 " Y2038 BUG! "
2018/06/19 13:44:12 " basically chew up most of remaining loop-interval with\n                     *  calls to sleep(1) interleaved with checks for quit\n                     *  events, but also recalc time-to-go periodically; when\n                     *  done, clean up any remaining time with usleep() call\n                     *  (could also use SIGALRM, but signals are a pain...) "
2018/06/19 13:44:12 " GRR BUG:  need to check for Expose and redraw "
2018/06/19 13:44:12 " time to redo seconds_to_go meas. "
2018/06/19 13:44:12 " OK, more than 1000 seconds since last check:\n                         *  correct the time-to-go measurement for drift "
2018/06/19 13:44:12 " restore what we subtracted "
2018/06/19 13:44:12 " breaks outer do-loop, skips redisplay "
2018/06/19 13:44:12 " since difference between \"now\" and \"then\" is already\n                     *  eaten up to within a couple of seconds, don't need to\n                     *  worry about overflow--but might have overshot (neg.) "
2018/06/19 13:44:12 " composite image against new background and display (note that\n             *  we do not take into account the time spent doing this...) "
2018/06/19 13:44:12 " FALL THROUGH and do the normal thing "
2018/06/19 13:44:12 " FEATURE_LOOP "
2018/06/19 13:44:12 " wait for the user to tell us when to quit "
2018/06/19 13:44:12 " we're done:  clean up all image and X resources and go away "
2018/06/19 13:44:12 " Unused "
2018/06/19 13:44:12 " this function is called by readpng2_info_callback() in readpng2.c, which\n * in turn is called by libpng after all of the pre-IDAT chunks have been\n * read and processed--i.e., we now have enough info to finish initializing "
2018/06/19 13:44:12 " Guard against integer overflow "
2018/06/19 13:44:12 " do the basic X initialization stuff, make the window, and fill it with\n     * the user-specified, file-specified or default background color or\n     * pattern "
2018/06/19 13:44:12 " GRR TEMPORARY HACK:  this is fundamentally no different from cases\n         * above; libpng should call our error handler to longjmp() back to us\n         * when png_ptr goes away.  If we/it segfault instead, seems like a\n         * libpng bug... "
2018/06/19 13:44:12 " we're here via libpng callback, so if window fails, clean and bail "
2018/06/19 13:44:12 " 24-bit first "
2018/06/19 13:44:12 " GRR:  add 15-, 16- and 32-bit TrueColor visuals (also DirectColor?) "
2018/06/19 13:44:12 "\n        colormap_size = visual_list[0].colormap_size;\n        visual_class = visual->class;\n        visualID = XVisualIDFromVisual(visual);\n "
2018/06/19 13:44:12 " GRR:  add/check 8-bit support "
2018/06/19 13:44:12 " gradient just wastes palette entries "
2018/06/19 13:44:12 " these are right-shifts "
2018/06/19 13:44:12 " these are left-shifts "
2018/06/19 13:44:12 "---------------------------------------------------------------------------\n    Finally, create the window.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:12 " OK if either hints allocation fails; XSetWMProperties() allows NULLs "
2018/06/19 13:44:12 " window will not be resizable "
2018/06/19 13:44:12 " wm_hints->icon_pixmap = icon_pixmap; \n | IconPixmapHint "
2018/06/19 13:44:12 " various properties and hints no longer needed; free memory "
2018/06/19 13:44:12 "---------------------------------------------------------------------------\n    Allocate memory for the X- and display-specific version of the image.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:12 " depth == 8 "
2018/06/19 13:44:12 " to avoid testing the byte order every pixel (or doubling the size of\n     * the drawing routine with a giant if-test), we arbitrarily set the byte\n     * order to MSBFirst and let Xlib worry about inverting things on little-\n     * endian machines (e.g., Linux/x86, old VAXen, etc.)--this is not the\n     * most efficient approach (the giant if-test would be better), but in\n     * the interest of clarity, we'll take the easy way out... "
2018/06/19 13:44:12 "---------------------------------------------------------------------------\n    Fill window with the specified background color (default is black) or\n    faked \"background image\" (but latter is disabled if 8-bit; gradients\n    just waste palette entries).\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:12 " resets bg_image if fails "
2018/06/19 13:44:12 " depth == 8 "
2018/06/19 13:44:12 " GRR:  add 8-bit support "
2018/06/19 13:44:12 "---------------------------------------------------------------------------\n    Wait for first Expose event to do any drawing, then flush and return.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:12 " end function rpng2_x_create_window() "
2018/06/19 13:44:12 "---------------------------------------------------------------------------\n    Allocate buffer for fake background image to be used with transparent\n    images; if this fails, revert to plain background color.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:12 "---------------------------------------------------------------------------\n    Vertical gradients (ramps) in NxN squares, alternating direction and\n    colors (N == bgscale).\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:12 " gradient #1 "
2018/06/19 13:44:12 " gradient #2 "
2018/06/19 13:44:12 " not inverted or \n  doubly inverted "
2018/06/19 13:44:12 " singly inverted "
2018/06/19 13:44:12 "---------------------------------------------------------------------------\n    Soft gradient-diamonds with scale = bgscale.  Code contributed by Adam\n    M. Costello.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:12 " half the max weight of a color \n the max weight of a color "
2018/06/19 13:44:12 "---------------------------------------------------------------------------\n    Radial \"starburst\" with azimuthal sinusoids; [eventually number of sinu-\n    soids will equal bgscale?].  This one is slow but very cool.  Code con-\n    tributed by Pieter S. van der Meulen (originally in Smalltalk).\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:12 " variables for radial waves:\n         *   aoffset:  number of degrees to rotate hue [CURRENTLY NOT USED]\n         *   freq:  number of color beams originating from the center\n         *   grayspot:  size of the graying center area (anti-alias)\n         *   rotate:  rotation of the beams as a function of radius\n         *   saturate:  saturation of beams' shape azimuthally\n         "
2018/06/19 13:44:12 "---------------------------------------------------------------------------\n    Blast background image to display buffer before beginning PNG decode.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:12 " slightly optimized version "
2018/06/19 13:44:12 " recall that we set ximage->byte_order = MSBFirst above "
2018/06/19 13:44:12 " recall that we set ximage->byte_order = MSBFirst above \n GRR BUG?  this assumes bpp == 24 & bits are packed low \n           (probably need to use RShift, RMask, etc.) "
2018/06/19 13:44:12 " recall that we set ximage->byte_order = MSBFirst above "
2018/06/19 13:44:12 " depth == 8 "
2018/06/19 13:44:12 " GRR:  add 8-bit support "
2018/06/19 13:44:12 " end function rpng2_x_load_bg_image() "
2018/06/19 13:44:12 "---------------------------------------------------------------------------\n    rows and firstrow simply track how many rows (and which ones) have not\n    yet been displayed; alternatively, we could call XPutImage() for every\n    row and not bother with the records-keeping.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:12 " first row that is not yet displayed "
2018/06/19 13:44:12 " count of rows received but not yet displayed "
2018/06/19 13:44:12 "---------------------------------------------------------------------------\n    Aside from the use of the rpng2_info struct, the lack of an outer loop\n    (over rows) and moving the XPutImage() call outside the \"if (depth)\"\n    tests, this routine is identical to rpng_x_display_image() in the non-\n    progressive version of the program.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:12 " recall that we set ximage->byte_order = MSBFirst above "
2018/06/19 13:44:12 " GRR BUG?  this assumes bpp == 24 & bits are packed low \n           (probably need to use RShift, RMask, etc.) "
2018/06/19 13:44:12 " if (rpng2_info.channels == 4) "
2018/06/19 13:44:12 " this macro (from png.h) composites the foreground\n                     * and background values and puts the result into the\n                     * first argument "
2018/06/19 13:44:12 " recall that we set ximage->byte_order = MSBFirst above "
2018/06/19 13:44:12 " GRR BUG?  this assumes bpp == 24 & bits are packed low \n           (probably need to use RShift, RMask, etc.) "
2018/06/19 13:44:12 " recall that we set ximage->byte_order = MSBFirst above "
2018/06/19 13:44:12 " if (rpng2_info.channels == 4) "
2018/06/19 13:44:12 " this macro (from png.h) composites the foreground\n                     * and background values and puts the result back into\n                     * the first argument (== fg byte here:  safe) "
2018/06/19 13:44:12 " recall that we set ximage->byte_order = MSBFirst above "
2018/06/19 13:44:12 " depth == 8 "
2018/06/19 13:44:12 " GRR:  add 8-bit support "
2018/06/19 13:44:12 "---------------------------------------------------------------------------\n    Display after every 16 rows or when on one of last two rows.  (Region\n    may include previously displayed lines due to interlacing--i.e., not\n    contiguous.  Also, second-to-last row is final one in interlaced images\n    with odd number of rows.)  For demos, flush (and delay) after every 16th\n    row so \"sparse\" passes don't go twice as fast.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:12 " last row has already been displayed by rpng2_x_display_row(), so we\n     * have nothing to do here except set a flag and let the user know that\n     * the image is done "
2018/06/19 13:44:12 "---------------------------------------------------------------------------\n    Aside from the use of the rpng2_info struct and of src2 (for background\n    image), this routine is identical to rpng_x_display_image() in the non-\n    progressive version of the program--for the simple reason that redisplay\n    of the image against a new background happens after the image is fully\n    decoded and therefore is, by definition, non-progressive.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:12 " recall that we set ximage->byte_order = MSBFirst above "
2018/06/19 13:44:12 " this assumes bpp == 24 & bits are packed low \n (probably need to use RShift, RMask, etc.) "
2018/06/19 13:44:12 " recall that we set ximage->byte_order = MSBFirst above "
2018/06/19 13:44:12 " GRR BUG \n this assumes bpp == 24 & bits are packed low \n (probably need to use RShift/RMask/etc. here, too) "
2018/06/19 13:44:12 " if (rpng2_info.channels == 4) "
2018/06/19 13:44:12 " this macro (from png.h) composites the foreground\n                         * and background values and puts the result into the\n                         * first argument "
2018/06/19 13:44:12 " recall that we set ximage->byte_order = MSBFirst above "
2018/06/19 13:44:12 " this assumes bpp == 24 & bits are packed low \n (probably need to use RShift, RMask, etc.) "
2018/06/19 13:44:12 " recall that we set ximage->byte_order = MSBFirst above "
2018/06/19 13:44:12 " GRR BUG \n this assumes bpp == 24 & bits are packed low \n (probably need to use RShift/RMask/etc. here, too) "
2018/06/19 13:44:12 " display after every 16 lines "
2018/06/19 13:44:12 " recall that we set ximage->byte_order = MSBFirst above "
2018/06/19 13:44:12 " if (rpng2_info.channels == 4) "
2018/06/19 13:44:12 " this macro (from png.h) composites the foreground\n                         * and background values and puts the result back into\n                         * the first argument (== fg byte here:  safe) "
2018/06/19 13:44:12 " recall that we set ximage->byte_order = MSBFirst above "
2018/06/19 13:44:12 " display after every 16 lines "
2018/06/19 13:44:12 " depth == 8 "
2018/06/19 13:44:12 " GRR:  add 8-bit support "
2018/06/19 13:44:12 " end function rpng2_x_redisplay_image() "
2018/06/19 13:44:12 "---------------------------------------------------------------------------\n    Vertical gradients (ramps) in NxN squares, alternating direction and\n    colors (N == bgscale).\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:12 " gradient #1 "
2018/06/19 13:44:12 " gradient #2 "
2018/06/19 13:44:12 " not inverted or \n  doubly inverted "
2018/06/19 13:44:12 " singly inverted "
2018/06/19 13:44:12 "---------------------------------------------------------------------------\n    Soft gradient-diamonds with scale = bgscale.  Code contributed by Adam\n    M. Costello.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:12 " half the max weight of a color \n the max weight of a color "
2018/06/19 13:44:12 "---------------------------------------------------------------------------\n    Radial \"starburst\" with azimuthal sinusoids; [eventually number of sinu-\n    soids will equal bgscale?].  This one is slow but very cool.  Code con-\n    tributed by Pieter S. van der Meulen (originally in Smalltalk).\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:12 " variables for radial waves:\n         *   aoffset:  number of degrees to rotate hue [CURRENTLY NOT USED]\n         *   freq:  number of color beams originating from the center\n         *   grayspot:  size of the graying center area (anti-alias)\n         *   rotate:  rotation of the beams as a function of radius\n         *   saturate:  saturation of beams' shape azimuthally\n         "
2018/06/19 13:44:12 " end function rpng2_x_reload_bg_image() "
2018/06/19 13:44:12 " FEATURE_LOOP "
2018/06/19 13:44:12 " we allocated it, so we free it \n  instead of XDestroyImage() "
2018/06/19 13:44:12 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/gregbook/rpng2-x.c": 85.515088ms
2018/06/19 13:44:13 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/gregbook/rpng2-win.c
2018/06/19 13:44:13 detected language: 4
2018/06/19 13:44:13 "---------------------------------------------------------------------------\n\n   rpng2 - progressive-model PNG display program                rpng2-win.c\n\n   This program decodes and displays PNG files progressively, as if it were\n   a web browser (though the front end is only set up to read from files).\n   It supports gamma correction, user-specified background colors, and user-\n   specified background patterns (for transparent images).  This version is\n   for 32-bit Windows; it may compile under 16-bit Windows with a little\n   tweaking (or maybe not).  Thanks to Adam Costello and Pieter S. van der\n   Meulen for the \"diamond\" and \"radial waves\" patterns, respectively.\n\n   to do (someday, maybe):\n    - handle quoted command-line args (especially filenames with spaces)\n    - finish resizable checkerboard-gradient (sizes 4-128?)\n    - use %.1023s to simplify truncation of title-bar string?\n    - have minimum window width:  oh well\n\n  ---------------------------------------------------------------------------\n\n   Changelog:\n    - 1.01:  initial public release\n    - 1.02:  fixed cut-and-paste error in usage screen (oops...)\n    - 1.03:  modified to allow abbreviated options\n    - 1.04:  removed bogus extra argument from usage fprintf() [Glenn R-P?];\n              fixed command-line parsing bug\n    - 1.10:  enabled \"message window\"/console (thanks to David Geldreich)\n    - 1.20:  added runtime MMX-enabling/disabling and new -mmx* options\n    - 1.21:  made minor tweak to usage screen to fit within 25-line console\n    - 1.22:  added AMD64/EM64T support (__x86_64__)\n    - 2.00:  dual-licensed (added GNU GPL)\n    - 2.01:  fixed 64-bit typo in readpng2.c\n    - 2.02:  fixed improper display of usage screen on PNG error(s); fixed\n              unexpected-EOF and file-read-error cases\n    - 2.03:  removed runtime MMX-enabling/disabling and obsolete -mmx* options\n    - 2.04:  check for integer overflow (Glenn R-P)\n\n  ---------------------------------------------------------------------------\n\n      Copyright (c) 1998-2008, 2017 Greg Roelofs.  All rights reserved.\n\n      This software is provided \"as is,\" without warranty of any kind,\n      express or implied.  In no event shall the author or contributors\n      be held liable for any damages arising in any way from the use of\n      this software.\n\n      The contents of this file are DUAL-LICENSED.  You may modify and/or\n      redistribute this software according to the terms of one of the\n      following two licenses (at your option):\n\n\n      LICENSE 1 (\"BSD-like with advertising clause\"):\n\n      Permission is granted to anyone to use this software for any purpose,\n      including commercial applications, and to alter it and redistribute\n      it freely, subject to the following restrictions:\n\n      1. Redistributions of source code must retain the above copyright\n         notice, disclaimer, and this list of conditions.\n      2. Redistributions in binary form must reproduce the above copyright\n         notice, disclaimer, and this list of conditions in the documenta-\n         tion and/or other materials provided with the distribution.\n      3. All advertising materials mentioning features or use of this\n         software must display the following acknowledgment:\n\n            This product includes software developed by Greg Roelofs\n            and contributors for the book, \"PNG: The Definitive Guide,\"\n            published by O'Reilly and Associates.\n\n\n      LICENSE 2 (GNU GPL v2 or later):\n\n      This program is free software; you can redistribute it and/or modify\n      it under the terms of the GNU General Public License as published by\n      the Free Software Foundation; either version 2 of the License, or\n      (at your option) any later version.\n\n      This program is distributed in the hope that it will be useful,\n      but WITHOUT ANY WARRANTY; without even the implied warranty of\n      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n      GNU General Public License for more details.\n\n      You should have received a copy of the GNU General Public License\n      along with this program; if not, write to the Free Software Foundation,\n      Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:13 " for jmpbuf declaration in readpng2.h "
2018/06/19 13:44:13 " only for PvdM background code "
2018/06/19 13:44:13 " getch replacement. Turns out, we don't really need this,\n * but leave it here if we ever enable any of the uses of\n * _getch in the main code\n "
2018/06/19 13:44:13 " only for _getch() "
2018/06/19 13:44:13 " all for PvdM background code: "
2018/06/19 13:44:13 " 8-bit pos. integer (uch) "
2018/06/19 13:44:13 " #define DEBUG \n this enables the Trace() macros "
2018/06/19 13:44:13 " typedefs, common macros, readpng2 prototypes "
2018/06/19 13:44:13 " could just include png.h, but this macro is the only thing we need\n * (name and typedefs changed to local versions); note that side effects\n * only happen with alpha (which could easily be avoided with\n * \"ush acopy = (alpha);\") "
2018/06/19 13:44:13 " with pseudo-timing on (1 sec delay/block), this\n                          *  block size corresponds roughly to a download\n                          *  speed 10% faster than theoretical 33.6K maximum\n                          *  (assuming 8 data bits, 1 stop bit and no other\n                          *  overhead) "
2018/06/19 13:44:13 " local prototypes "
2018/06/19 13:44:13 " must be less than num_bgpat "
2018/06/19 13:44:13 "  0:  black \n  1:  white \n  2:  tan \n  3:  medium green \n  4:  gold \n  5:  yellow \n  6:  blue \n  7:  medium blue \n  8:  magenta \n  9:  dark magenta \n 10:  red \n 11:  dark red \n 12:  orange \n 13:  darker orange \n 14:  dark green-yellow \n 15:  ice blue "
2018/06/19 13:44:13 " not used for now, but should be for error-checking:\nstatic int num_rgb = sizeof(rgb) / sizeof(struct rgb_color);\n "
2018/06/19 13:44:13 "\n    This whole struct is a fairly cheesy way to keep the number of\n    command-line options to a minimum.  The radial-waves background\n    type is a particularly poor fit to the integer elements of the\n    struct...but a few macros and a little fixed-point math will do\n    wonders for ya.\n\n    type bits:\n       F E D C B A 9 8 7 6 5 4 3 2 1 0\n                             | | | | |\n                             | | +-+-+-- 0 = sharp-edged checkerboard\n                             | |         1 = soft diamonds\n                             | |         2 = radial waves\n                             | |       3-7 = undefined\n                             | +-- gradient #2 inverted?\n                             +-- alternating columns inverted?\n "
2018/06/19 13:44:13 " or bg_freq, bg_gray \n or bg_bsat, bg_brot (both scaled by 10)"
2018/06/19 13:44:13 " checkered:  tan/black vs. white/ice blue \n checkered:  tan/black vs. white/black \n checkered:  gold/yellow vs. black/tan \n checkered:  gold/yellow vs. black/blue \n checkered:  deep blue/black vs. magenta \n checkered:  orange/black vs. yellow \n checkered:  orange/black vs. red \n diamonds:  deep blue/black vs. magenta \n diamonds:  orange vs. dark red \n diamonds:  red vs. medium blue \n diamonds:  gold vs. yellow \n diamonds:  medium green vs. black \n radial:  ~hard radial color-beams \n radial:  soft, curved radial color-beams \n radial:  very tight spiral \n radial:  dipole-moire' (almost fractal) "
2018/06/19 13:44:13 " Windows-specific global variables (could go in struct, but messy...) "
2018/06/19 13:44:13 " arbitrary limit, but should suffice "
2018/06/19 13:44:13 " just the lookup table \n just the monitor \n whole display system "
2018/06/19 13:44:13 " First initialize a few things, just to be sure--memset takes care of\n     * default background color (black), booleans (FALSE), pointers (NULL),\n     * etc. "
2018/06/19 13:44:13 " Next reenable console output, which normally goes to the bit bucket\n     * for windowed apps.  Closing the console window will terminate the\n     * app.  Thanks to David.Geldreich at realviz.com for supplying the magical\n     * incantation. "
2018/06/19 13:44:13 " Set the default value for our display-system exponent, i.e., the\n     * product of the CRT exponent and the exponent corresponding to\n     * the frame-buffer's lookup table (LUT), if any.  This is not an\n     * exhaustive list of LUT values (e.g., OpenStep has a lot of weird\n     * ones), but it should cover 99% of the current possibilities.  And\n     * yes, these ifdefs are completely wasted in a Windows program... "
2018/06/19 13:44:13 " third-party utilities can modify the default LUT exponent "
2018/06/19 13:44:13 "\n    if (some_next_function_that_returns_gamma(&next_gamma))\n        LUT_exponent = 1.0 / next_gamma;\n     "
2018/06/19 13:44:13 " there doesn't seem to be any documented function to\n     * get the \"gamma\" value, so we do it the hard way "
2018/06/19 13:44:13 "\n    if (some_mac_function_that_returns_gamma(&mac_gamma))\n        LUT_exponent = mac_gamma / 2.61;\n     "
2018/06/19 13:44:13 " assume no LUT:  most PCs "
2018/06/19 13:44:13 " the defaults above give 1.0, 1.3, 1.5 and 2.2, respectively: "
2018/06/19 13:44:13 " If the user has set the SCREEN_GAMMA environment variable as suggested\n     * (somewhat imprecisely) in the libpng documentation, use that; otherwise\n     * use the default value we just calculated.  Either way, the user may\n     * override this via a command-line option. "
2018/06/19 13:44:13 " Windows really hates command lines, so we have to set up our own argv.\n     * Note that we do NOT bother with quoted arguments here, so don't use\n     * filenames with spaces in 'em! "
2018/06/19 13:44:13 " now p points at the first non-space after some spaces "
2018/06/19 13:44:13 " nothing after the spaces:  done "
2018/06/19 13:44:13 " now q points at a space or the end of the string "
2018/06/19 13:44:13 " last argv already terminated; quit \n change space to terminator "
2018/06/19 13:44:13 " terminate the argv array itself "
2018/06/19 13:44:13 " Now parse the command line for options and the PNG filename. "
2018/06/19 13:44:13 " shouldn't be any more args after filename "
2018/06/19 13:44:13 " not expecting any other options "
2018/06/19 13:44:13 " print usage screen if any errors up to this point "
2018/06/19 13:44:13 " set the title-bar string, but make sure buffer doesn't overflow "
2018/06/19 13:44:13 " set some final rpng2_info variables before entering main data loop "
2018/06/19 13:44:13 " this approach quiets compiler warnings "
2018/06/19 13:44:13 " OK, this is the fun part:  call readpng2_decode_data() at the start of\n     * the loop to deal with our first buffer of data (read in above to verify\n     * that the file is a PNG image), then loop through the file and continue\n     * calling the same routine to handle each chunk of data.  It in turn\n     * passes the data to libpng, which will invoke one or more of our call-\n     * backs as decoded data become available.  We optionally call Sleep() for\n     * one second per iteration to simulate downloading the image via an analog\n     * modem. "
2018/06/19 13:44:13 " if (error) \n will print error message below "
2018/06/19 13:44:13 " clean up PNG stuff and report any decoding errors "
2018/06/19 13:44:13 " wait for the user to tell us when to quit "
2018/06/19 13:44:13 " we're done:  clean up all image and Windows resources and go away "
2018/06/19 13:44:13 " this function is called by readpng2_info_callback() in readpng2.c, which\n * in turn is called by libpng after all of the pre-IDAT chunks have been\n * read and processed--i.e., we now have enough info to finish initializing "
2018/06/19 13:44:13 " Guard against integer overflow "
2018/06/19 13:44:13 "---------------------------------------------------------------------------\n    Do the basic Windows initialization stuff, make the window, and fill it\n    with the user-specified, file-specified or default background color.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:13 "---------------------------------------------------------------------------\n    Allocate memory for the display-specific version of the image (round up\n    to multiple of 4 for Windows DIB).\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:13 " fail "
2018/06/19 13:44:13 "---------------------------------------------------------------------------\n    Initialize the DIB.  Negative height means to use top-down BMP ordering\n    (must be uncompressed, but that's what we want).  Bit count of 1, 4 or 8\n    implies a colormap of RGBX quads, but 24-bit BMPs just use B,G,R values\n    directly => wimage_data begins immediately after BMP header.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:13 "---------------------------------------------------------------------------\n    Fill window with the specified background color (default is black), but\n    defer loading faked \"background image\" until window is displayed (may be\n    slow to compute).  Data are in BGR order.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:13 " just fill with black for now "
2018/06/19 13:44:13 "---------------------------------------------------------------------------\n    Set the window parameters.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:13 "---------------------------------------------------------------------------\n    Finally, create the window.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:13 "---------------------------------------------------------------------------\n    Now compute the background image and display it.  If it fails (memory\n    allocation), revert to a plain background color.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:13 " this can still begin out of bounds even if x is positive (???): "
2018/06/19 13:44:13 " resets bg_image if fails "
2018/06/19 13:44:13 " possibly off by one? \n possibly off by one? "
2018/06/19 13:44:13 " similar to XFlush() "
2018/06/19 13:44:13 " end function rpng2_win_create_window() "
2018/06/19 13:44:13 "---------------------------------------------------------------------------\n    Allocate buffer for fake background image to be used with transparent\n    images; if this fails, revert to plain background color.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:13 "---------------------------------------------------------------------------\n    Vertical gradients (ramps) in NxN squares, alternating direction and\n    colors (N == bgscale).\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:13 " gradient #1 "
2018/06/19 13:44:13 " gradient #2 "
2018/06/19 13:44:13 " not inverted or \n  doubly inverted "
2018/06/19 13:44:13 " singly inverted "
2018/06/19 13:44:13 "---------------------------------------------------------------------------\n    Soft gradient-diamonds with scale = bgscale.  Code contributed by Adam\n    M. Costello.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:13 " half the max weight of a color \n the max weight of a color "
2018/06/19 13:44:13 "---------------------------------------------------------------------------\n    Radial \"starburst\" with azimuthal sinusoids; [eventually number of sinu-\n    soids will equal bgscale?].  This one is slow but very cool.  Code con-\n    tributed by Pieter S. van der Meulen (originally in Smalltalk).\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:13 " variables for radial waves:\n         *   aoffset:  number of degrees to rotate hue [CURRENTLY NOT USED]\n         *   freq:  number of color beams originating from the center\n         *   grayspot:  size of the graying center area (anti-alias)\n         *   rotate:  rotation of the beams as a function of radius\n         *   saturate:  saturation of beams' shape azimuthally\n         "
2018/06/19 13:44:13 "---------------------------------------------------------------------------\n    Blast background image to display buffer before beginning PNG decode;\n    calling function will handle invalidation and UpdateWindow() call.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:13 " note reverse order "
2018/06/19 13:44:13 " end function rpng2_win_load_bg_image() "
2018/06/19 13:44:13 "---------------------------------------------------------------------------\n    rows and firstrow simply track how many rows (and which ones) have not\n    yet been displayed; alternatively, we could call InvalidateRect() for\n    every row and not bother with the records-keeping.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:13 " first row not yet displayed "
2018/06/19 13:44:13 " count of rows received but not yet displayed "
2018/06/19 13:44:13 "---------------------------------------------------------------------------\n    Aside from the use of the rpng2_info struct and the lack of an outer\n    loop (over rows), this routine is identical to rpng_win_display_image()\n    in the non-progressive version of the program.\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:13 " note reverse order "
2018/06/19 13:44:13 " if (rpng2_info.channels == 4) "
2018/06/19 13:44:13 " this macro (copied from png.h) composites the\n                 * foreground and background values and puts the\n                 * result into the first argument; there are no\n                 * side effects with the first argument "
2018/06/19 13:44:13 "---------------------------------------------------------------------------\n    Display after every 16 rows or when on last row.  (Region may include\n    previously displayed lines due to interlacing--i.e., not contiguous.)\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:13 " possibly off by one? \n possibly off by one? "
2018/06/19 13:44:13 " similar to XFlush() "
2018/06/19 13:44:13 " end function rpng2_win_display_row() "
2018/06/19 13:44:13 " last row has already been displayed by rpng2_win_display_row(), so\n     * we have nothing to do here except set a flag and let the user know\n     * that the image is done "
2018/06/19 13:44:13 " one-time processing here, if any "
2018/06/19 13:44:13 " wait for the user to tell us when to quit "
2018/06/19 13:44:13 " only need one, so ignore repeat count "
2018/06/19 13:44:13 " Esc key "
2018/06/19 13:44:13 " another way of quitting "
2018/06/19 13:44:13 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/gregbook/rpng2-win.c": 59.900709ms
2018/06/19 13:44:14 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/gregbook/README
2018/06/19 13:44:14 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/gregbook/README": 28.444144ms
2018/06/19 13:44:14 Couldn't classify license(s)
2018/06/19 13:44:15 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/gregbook/Makefile.w32
2018/06/19 13:44:15 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/gregbook/Makefile.w32": 6.557835ms
2018/06/19 13:44:15 Couldn't classify license(s)
2018/06/19 13:44:16 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/gregbook/toucan.png
2018/06/19 13:44:16 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/gregbook/toucan.png": 31.87362ms
2018/06/19 13:44:16 Couldn't classify license(s)
2018/06/19 13:44:17 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/gregbook/writepng.h
2018/06/19 13:44:17 detected language: 4
2018/06/19 13:44:17 "---------------------------------------------------------------------------\n\n   wpng - simple PNG-writing program                             writepng.h\n\n  ---------------------------------------------------------------------------\n\n      Copyright (c) 1998-2007 Greg Roelofs.  All rights reserved.\n\n      This software is provided \"as is,\" without warranty of any kind,\n      express or implied.  In no event shall the author or contributors\n      be held liable for any damages arising in any way from the use of\n      this software.\n\n      The contents of this file are DUAL-LICENSED.  You may modify and/or\n      redistribute this software according to the terms of one of the\n      following two licenses (at your option):\n\n\n      LICENSE 1 (\"BSD-like with advertising clause\"):\n\n      Permission is granted to anyone to use this software for any purpose,\n      including commercial applications, and to alter it and redistribute\n      it freely, subject to the following restrictions:\n\n      1. Redistributions of source code must retain the above copyright\n         notice, disclaimer, and this list of conditions.\n      2. Redistributions in binary form must reproduce the above copyright\n         notice, disclaimer, and this list of conditions in the documenta-\n         tion and/or other materials provided with the distribution.\n      3. All advertising materials mentioning features or use of this\n         software must display the following acknowledgment:\n\n            This product includes software developed by Greg Roelofs\n            and contributors for the book, \"PNG: The Definitive Guide,\"\n            published by O'Reilly and Associates.\n\n\n      LICENSE 2 (GNU GPL v2 or later):\n\n      This program is free software; you can redistribute it and/or modify\n      it under the terms of the GNU General Public License as published by\n      the Free Software Foundation; either version 2 of the License, or\n      (at your option) any later version.\n\n      This program is distributed in the hope that it will be useful,\n      but WITHOUT ANY WARRANTY; without even the implied warranty of\n      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n      GNU General Public License for more details.\n\n      You should have received a copy of the GNU General Public License\n      along with this program; if not, write to the Free Software Foundation,\n      Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n  ---------------------------------------------------------------------------"
2018/06/19 13:44:17 " command-line-filter flag, not PNG row filter! "
2018/06/19 13:44:17 " prototypes for public functions in writepng.c "
2018/06/19 13:44:17 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/gregbook/writepng.h": 15.426035ms
2018/06/19 13:44:18 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftbgn2c16.png
2018/06/19 13:44:18 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftbgn2c16.png": 5.916862ms
2018/06/19 13:44:18 Couldn't classify license(s)
2018/06/19 13:44:19 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn3p04.png
2018/06/19 13:44:19 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn3p04.png": 1.074668ms
2018/06/19 13:44:19 Couldn't classify license(s)
2018/06/19 13:44:20 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn2c08.png
2018/06/19 13:44:20 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn2c08.png": 661.033µs
2018/06/19 13:44:20 Couldn't classify license(s)
2018/06/19 13:44:20 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftbwn3p08.png
2018/06/19 13:44:20 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftbwn3p08.png": 3.649952ms
2018/06/19 13:44:20 Couldn't classify license(s)
2018/06/19 13:44:21 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftp0n3p08.png
2018/06/19 13:44:21 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftp0n3p08.png": 3.620201ms
2018/06/19 13:44:21 Couldn't classify license(s)
2018/06/19 13:44:22 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftbbn2c16.png
2018/06/19 13:44:22 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftbbn2c16.png": 6.398441ms
2018/06/19 13:44:22 Couldn't classify license(s)
2018/06/19 13:44:23 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftbbn3p08.png
2018/06/19 13:44:23 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftbbn3p08.png": 3.971279ms
2018/06/19 13:44:23 Couldn't classify license(s)
2018/06/19 13:44:24 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn4a08.png
2018/06/19 13:44:24 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn4a08.png": 1.395928ms
2018/06/19 13:44:24 Couldn't classify license(s)
2018/06/19 13:44:25 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn6a08.png
2018/06/19 13:44:25 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn6a08.png": 782.345µs
2018/06/19 13:44:25 Couldn't classify license(s)
2018/06/19 13:44:26 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftp0n2c08.png
2018/06/19 13:44:26 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftp0n2c08.png": 3.946653ms
2018/06/19 13:44:26 Couldn't classify license(s)
2018/06/19 13:44:27 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn4a16.png
2018/06/19 13:44:27 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn4a16.png": 5.765981ms
2018/06/19 13:44:27 Couldn't classify license(s)
2018/06/19 13:44:28 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftbbn0g04.png
2018/06/19 13:44:28 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftbbn0g04.png": 1.424022ms
2018/06/19 13:44:28 Couldn't classify license(s)
2018/06/19 13:44:28 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftbgn3p08.png
2018/06/19 13:44:28 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftbgn3p08.png": 4.151045ms
2018/06/19 13:44:28 Couldn't classify license(s)
2018/06/19 13:44:29 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn0g16.png
2018/06/19 13:44:29 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn0g16.png": 853.003µs
2018/06/19 13:44:29 Couldn't classify license(s)
2018/06/19 13:44:30 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftbwn0g16.png
2018/06/19 13:44:30 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftbwn0g16.png": 3.449021ms
2018/06/19 13:44:30 Couldn't classify license(s)
2018/06/19 13:44:31 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn0g02.png
2018/06/19 13:44:31 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn0g02.png": 796.949µs
2018/06/19 13:44:31 Couldn't classify license(s)
2018/06/19 13:44:32 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn3p01.png
2018/06/19 13:44:32 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn3p01.png": 537.372µs
2018/06/19 13:44:32 Couldn't classify license(s)
2018/06/19 13:44:33 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn2c16.png
2018/06/19 13:44:33 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn2c16.png": 1.041505ms
2018/06/19 13:44:33 Couldn't classify license(s)
2018/06/19 13:44:34 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn3p08.png
2018/06/19 13:44:34 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn3p08.png": 3.33765ms
2018/06/19 13:44:34 Couldn't classify license(s)
2018/06/19 13:44:35 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftp0n0g08.png
2018/06/19 13:44:35 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftp0n0g08.png": 2.01417ms
2018/06/19 13:44:35 Couldn't classify license(s)
2018/06/19 13:44:36 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn6a16.png
2018/06/19 13:44:36 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn6a16.png": 8.779564ms
2018/06/19 13:44:36 Couldn't classify license(s)
2018/06/19 13:44:36 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn0g08.png
2018/06/19 13:44:36 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn0g08.png": 1.009732ms
2018/06/19 13:44:36 Couldn't classify license(s)
2018/06/19 13:44:37 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftbbn0g01.png
2018/06/19 13:44:37 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftbbn0g01.png": 744.126µs
2018/06/19 13:44:37 Couldn't classify license(s)
2018/06/19 13:44:38 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn0g04.png
2018/06/19 13:44:38 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn0g04.png": 812.093µs
2018/06/19 13:44:38 Couldn't classify license(s)
2018/06/19 13:44:39 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftp1n3p08.png
2018/06/19 13:44:39 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftp1n3p08.png": 4.00672ms
2018/06/19 13:44:39 Couldn't classify license(s)
2018/06/19 13:44:40 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn3p02.png
2018/06/19 13:44:40 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn3p02.png": 798.685µs
2018/06/19 13:44:40 Couldn't classify license(s)
2018/06/19 13:44:41 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn0g01.png
2018/06/19 13:44:41 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/basn0g01.png": 1.007886ms
2018/06/19 13:44:41 Couldn't classify license(s)
2018/06/19 13:44:42 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftbrn2c08.png
2018/06/19 13:44:42 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftbrn2c08.png": 4.293939ms
2018/06/19 13:44:42 Couldn't classify license(s)
2018/06/19 13:44:43 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/README
2018/06/19 13:44:43 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/README": 17.846838ms
2018/06/19 13:44:43 Couldn't classify license(s)
2018/06/19 13:44:44 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftbbn0g02.png
2018/06/19 13:44:44 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftbbn0g02.png": 755.301µs
2018/06/19 13:44:44 Couldn't classify license(s)
2018/06/19 13:44:44 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftbyn3p08.png
2018/06/19 13:44:44 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngsuite/ftbyn3p08.png": 3.819007ms
2018/06/19 13:44:44 Couldn't classify license(s)
2018/06/19 13:44:45 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/arm-neon/android-ndk.c
2018/06/19 13:44:45 detected language: 4
2018/06/19 13:44:45 " contrib/arm-neon/android-ndk.c\n *\n * Copyright (c) 2014 Glenn Randers-Pehrson\n * Written by John Bowler, 2014.\n * Last changed in libpng 1.6.10 [March 6, 2014]\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * SEE contrib/arm-neon/README before reporting bugs\n *\n * STATUS: COMPILED, UNTESTED\n * BUG REPORTS: png-mng-implement@sourceforge.net\n *\n * png_have_neon implemented for the Android NDK, see:\n *\n * Documentation:\n *    http://www.kandroid.org/ndk/docs/CPU-ARM-NEON.html\n *    https://code.google.com/p/android/issues/detail?id=49065\n *\n * NOTE: this requires that libpng is built against the Android NDK and linked\n * with an implementation of the Android ARM 'cpu-features' library.  The code\n * has been compiled only, not linked: no version of the library has been found,\n * only the header files exist in the NDK.\n "
2018/06/19 13:44:45 " This is a whole lot easier than the linux code, however it is probably\n    * implemented as below, therefore it is better to cache the result (these\n    * function calls may be slow!)\n    "
2018/06/19 13:44:45 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/arm-neon/android-ndk.c": 10.989901ms
2018/06/19 13:44:45 Couldn't classify license(s)
2018/06/19 13:44:46 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/arm-neon/linux-auxv.c
2018/06/19 13:44:46 detected language: 4
2018/06/19 13:44:46 " contrib/arm-neon/linux-auxv.c\n *\n * Copyright (c) 2014 Glenn Randers-Pehrson\n * Written by Mans Rullgard, 2011.\n * Last changed in libpng 1.6.10 [March 6, 2014]\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * SEE contrib/arm-neon/README before reporting bugs\n *\n * STATUS: COMPILED, TESTED\n * BUG REPORTS: png-mng-implement@sourceforge.net\n *\n * png_have_neon implemented for Linux versions which allow access to\n * /proc/self/auxv.  This is probably faster, cleaner and safer than the code to\n * read /proc/cpuinfo in contrib/arm-neon/linux, however it is yet another piece\n * of potentially untested code and has more complex dependencies than the code\n * to read cpuinfo.\n *\n * This generic __linux__ implementation requires reading /proc/self/auxv and\n * looking at each element for one that records NEON capabilities.\n "
2018/06/19 13:44:46 " for POSIX 1003.1 \n for EINTR "
2018/06/19 13:44:46 " A read call may be interrupted, in which case it returns -1 and sets errno to\n * EINTR if nothing was done, otherwise (if something was done) a partial read\n * may result.\n "
2018/06/19 13:44:46 " Passing nread > INT_MAX to read is implementation defined in POSIX\n       * 1003.1, therefore despite the unsigned argument portable code must\n       * limit the value to INT_MAX!\n       "
2018/06/19 13:44:46 "SAFE"
2018/06/19 13:44:46 " This is the devil in the details, a read can terminate early with 0\n          * bytes read because of EINTR, yet it still returns -1 otherwise end\n          * of file cannot be distinguished.\n          "
2018/06/19 13:44:46 " I.e., a permanent failure "
2018/06/19 13:44:46 " Not a valid 'read' result: "
2018/06/19 13:44:46 " Continue reading until a permanent failure, or EOF "
2018/06/19 13:44:46 "SAFE\nSAFE"
2018/06/19 13:44:46 " nbytes == 0 "
2018/06/19 13:44:46 " Failsafe: failure to open means no NEON "
2018/06/19 13:44:46 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/arm-neon/linux-auxv.c": 13.962853ms
2018/06/19 13:44:46 Couldn't classify license(s)
2018/06/19 13:44:47 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/arm-neon/linux.c
2018/06/19 13:44:47 detected language: 4
2018/06/19 13:44:47 " contrib/arm-neon/linux.c\n *\n * Last changed in libpng 1.6.31 [July 27, 2017]\n * Copyright (c) 2014, 2017 Glenn Randers-Pehrson\n * Written by John Bowler, 2014, 2017.\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * SEE contrib/arm-neon/README before reporting bugs\n *\n * STATUS: SUPPORTED\n * BUG REPORTS: png-mng-implement@sourceforge.net\n *\n * png_have_neon implemented for Linux by reading the widely available\n * pseudo-file /proc/cpuinfo.\n *\n * This code is strict ANSI-C and is probably moderately portable; it does\n * however use <stdio.h> and it assumes that /proc/cpuinfo is never localized.\n "
2018/06/19 13:44:47 " This is a simple state machine which reads the input byte-by-byte until\n       * it gets a match on the 'neon' feature or reaches the end of the stream.\n       "
2018/06/19 13:44:47 " EOF means error or end-of-file, return false; neon at EOF is\n             * assumed to be a mistake.\n             "
2018/06/19 13:44:47 " Match spaces at the start of line \n skip control characters and space "
2018/06/19 13:44:47 " FALLTHROUGH "
2018/06/19 13:44:47 " Match 'FEATURE', ASCII case insensitive. "
2018/06/19 13:44:47 " did not match 'feature' "
2018/06/19 13:44:47 " FALLTHROUGH "
2018/06/19 13:44:47 " Skip everything until we see linefeed or carriage return "
2018/06/19 13:44:47 " Match any number of space or tab followed by ':' "
2018/06/19 13:44:47 " i.e. ':' "
2018/06/19 13:44:47 " Either a bad line format or a 'feature' prefix followed by\n                * other characters.\n                "
2018/06/19 13:44:47 " Skip space characters before a tag "
2018/06/19 13:44:47 " FALLTHROUGH "
2018/06/19 13:44:47 " Look for 'neon' tag "
2018/06/19 13:44:47 " FALLTHROUGH "
2018/06/19 13:44:47 " Skip non-space characters "
2018/06/19 13:44:47 " Have seen a 'neon' prefix, but there must be a space or new\n                * line character to terminate it.\n                "
2018/06/19 13:44:47 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/arm-neon/linux.c": 10.723018ms
2018/06/19 13:44:47 Couldn't classify license(s)
2018/06/19 13:44:48 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/arm-neon/README
2018/06/19 13:44:48 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/arm-neon/README": 17.102429ms
2018/06/19 13:44:48 Couldn't classify license(s)
2018/06/19 13:44:49 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/visupng/resource.h
2018/06/19 13:44:49 detected language: 4
2018/06/19 13:44:49 "{{NO_DEPENDENCIES}}\n Microsoft Developer Studio generated include file.\n Used by VisualPng.rc\n"
2018/06/19 13:44:49 " Next default values for new objects\n"
2018/06/19 13:44:49 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/visupng/resource.h": 947.373µs
2018/06/19 13:44:49 Couldn't classify license(s)
2018/06/19 13:44:50 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/visupng/PngFile.c
2018/06/19 13:44:50 detected language: 4
2018/06/19 13:44:50 "-------------------------------------\n *  PNGFILE.C -- Image File Functions\n *-------------------------------------\n *\n * Copyright 2000,2017 Willem van Schaik.\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:44:50 " cexcept interface "
2018/06/19 13:44:50 " Windows open-file functions "
2018/06/19 13:44:50 " Set in Open and Close functions "
2018/06/19 13:44:50 " Set in Open and Close functions "
2018/06/19 13:44:50 " Set in Open and Close functions "
2018/06/19 13:44:50 " PNG image handler functions "
2018/06/19 13:44:50 " open the PNG input file "
2018/06/19 13:44:50 " first check the eight byte PNG signature "
2018/06/19 13:44:50 " create the two png(-info) structures "
2018/06/19 13:44:50 " initialize the png structure "
2018/06/19 13:44:50 " read all PNG info up to image data "
2018/06/19 13:44:50 " get width, height, bit-depth and color-type "
2018/06/19 13:44:50 " expand images of all color-type and bit-depth to 3x8-bit RGB \n let the library process alpha, transparency, background, etc. "
2018/06/19 13:44:50 " set the background color to draw transparent and alpha images over "
2018/06/19 13:44:50 " if required set gamma conversion "
2018/06/19 13:44:50 " after the transformations are registered, update info_ptr data "
2018/06/19 13:44:50 " get again width, height and the new bit-depth and color-type "
2018/06/19 13:44:50 " row_bytes is the width x number of channels "
2018/06/19 13:44:50 " now we can allocate memory to store the image "
2018/06/19 13:44:50 " and allocate memory for an array of row-pointers "
2018/06/19 13:44:50 " set the individual row-pointers to point at the correct offsets "
2018/06/19 13:44:50 " now we can go ahead and just read the whole image "
2018/06/19 13:44:50 " read the additional chunks in the PNG file (not really needed) "
2018/06/19 13:44:50 " and we're done "
2018/06/19 13:44:50 " yepp, done "
2018/06/19 13:44:50 " open the PNG output file "
2018/06/19 13:44:50 " prepare the standard PNG structures "
2018/06/19 13:44:50 " initialize the png structure "
2018/06/19 13:44:50 " we're going to write a very simple 3x8-bit RGB image "
2018/06/19 13:44:50 " write the file header information "
2018/06/19 13:44:50 " swap the BGR pixels in the DiData structure to RGB "
2018/06/19 13:44:50 " row_bytes is the width x number of channels "
2018/06/19 13:44:50 " we can allocate memory for an array of row-pointers "
2018/06/19 13:44:50 " set the individual row-pointers to point at the correct offsets "
2018/06/19 13:44:50 " write out the entire image data in one call "
2018/06/19 13:44:50 " write the additional chunks to the PNG file (not really needed) "
2018/06/19 13:44:50 " and we're done "
2018/06/19 13:44:50 " clean up after the write, and free any memory allocated "
2018/06/19 13:44:50 " yepp, done "
2018/06/19 13:44:50 " fread() returns 0 on error, so it is OK to store this in a png_size_t\n    * instead of an int, which is what fread() actually returns.\n    "
2018/06/19 13:44:50 "-----------------\n *  end of source\n *-----------------\n "
2018/06/19 13:44:50 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/visupng/PngFile.c": 13.537346ms
2018/06/19 13:44:50 Couldn't classify license(s)
2018/06/19 13:44:51 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/visupng/VisualPng.png
2018/06/19 13:44:51 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/visupng/VisualPng.png": 885.031µs
2018/06/19 13:44:51 Couldn't classify license(s)
2018/06/19 13:44:51 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/visupng/VisualPng.c
2018/06/19 13:44:51 detected language: 4
2018/06/19 13:44:51 "------------------------------------\n *  VisualPng.C -- Shows a PNG image\n *------------------------------------\n *\n * Copyright 2000,2017 Willem van Schaik.\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n "
2018/06/19 13:44:51 " switches "
2018/06/19 13:44:51 " defines "
2018/06/19 13:44:51 " constants "
2018/06/19 13:44:51 " standard includes "
2018/06/19 13:44:51 " application includes "
2018/06/19 13:44:51 " macros "
2018/06/19 13:44:51 " function prototypes "
2018/06/19 13:44:51 " a few global variables "
2018/06/19 13:44:51 " MAIN routine "
2018/06/19 13:44:51 " (HBRUSH) GetStockObject (GRAY_BRUSH); "
2018/06/19 13:44:51 " if filename given on commandline, store it "
2018/06/19 13:44:51 " calculate size of window-borders "
2018/06/19 13:44:51 " WvS: don't ask me why?  "
2018/06/19 13:44:51 "      CW_USEDEFAULT, CW_USEDEFAULT, "
2018/06/19 13:44:51 " in case we process file given on command-line "
2018/06/19 13:44:51 " read the other png-files in the directory for later \n next/previous commands "
2018/06/19 13:44:51 " load the image from file "
2018/06/19 13:44:51 " invalidate the client area for later update "
2018/06/19 13:44:51 " display the PNG into the DIBitmap "
2018/06/19 13:44:51 " invalidate the client area for later update "
2018/06/19 13:44:51 " display the PNG into the DIBitmap "
2018/06/19 13:44:51 " show the File Open dialog box "
2018/06/19 13:44:51 " read the other png-files in the directory for later \n next/previous commands "
2018/06/19 13:44:51 " load the image from file "
2018/06/19 13:44:51 " invalidate the client area for later update "
2018/06/19 13:44:51 " display the PNG into the DIBitmap "
2018/06/19 13:44:51 " show the File Save dialog box "
2018/06/19 13:44:51 " save the PNG to a disk file "
2018/06/19 13:44:51 " read next entry in the directory "
2018/06/19 13:44:51 " load the image from file "
2018/06/19 13:44:51 " invalidate the client area for later update "
2018/06/19 13:44:51 " display the PNG into the DIBitmap "
2018/06/19 13:44:51 " read previous entry in the directory "
2018/06/19 13:44:51 " load the image from file "
2018/06/19 13:44:51 " invalidate the client area for later update "
2018/06/19 13:44:51 " display the PNG into the DIBitmap "
2018/06/19 13:44:51 " more cleanup needed... "
2018/06/19 13:44:51 " free image buffer "
2018/06/19 13:44:51 " free file-list "
2018/06/19 13:44:51 " let's go ... "
2018/06/19 13:44:51 " invalidate the client area for later update "
2018/06/19 13:44:51 " display the PNG into the DIBitmap "
2018/06/19 13:44:51 " end switch "
2018/06/19 13:44:51 "---------------\n *  CenterAbout\n *---------------\n "
2018/06/19 13:44:51 " Get the Height and Width of the child window "
2018/06/19 13:44:51 " Get the Height and Width of the parent window "
2018/06/19 13:44:51 " Get the limits of the 'workarea' "
2018/06/19 13:44:51 " system parameter to query or set "
2018/06/19 13:44:51 " Calculate new X position, then adjust for workarea "
2018/06/19 13:44:51 " Calculate new Y position, then adjust for workarea "
2018/06/19 13:44:51 " Set it, and return "
2018/06/19 13:44:51 "----------------\n *  BuildPngList\n *----------------\n "
2018/06/19 13:44:51 " free previous file-list "
2018/06/19 13:44:51 " extract foldername, filename and search-name "
2018/06/19 13:44:51 " first cycle: count number of files in directory for memory allocation "
2018/06/19 13:44:51 " allocation memory for file-list "
2018/06/19 13:44:51 " second cycle: read directory and store filenames in file-list "
2018/06/19 13:44:51 " finally we must sort the file-list "
2018/06/19 13:44:51 " check if this was the current image that we moved "
2018/06/19 13:44:51 "----------------\n *  SearchPngList\n *----------------\n "
2018/06/19 13:44:51 " get previous entry "
2018/06/19 13:44:51 " get next entry "
2018/06/19 13:44:51 "-----------------\n *  LoadImageFile\n *-----------------\n "
2018/06/19 13:44:51 " if there's an existing PNG, free the memory "
2018/06/19 13:44:51 " Load the entire PNG into memory "
2018/06/19 13:44:51 "----------------\n *  DisplayImage\n *----------------\n "
2018/06/19 13:44:51 " BITMAPFILEHEADER        *pbmfh; "
2018/06/19 13:44:51 " allocate memory for the Device Independant bitmap "
2018/06/19 13:44:51 " initialize the dib-structure "
2018/06/19 13:44:51 " first fill bitmap with gray and image border "
2018/06/19 13:44:51 " then fill bitmap with image "
2018/06/19 13:44:51 "--------------\n *  InitBitmap\n *--------------\n "
2018/06/19 13:44:51 " initialize the background with gray "
2018/06/19 13:44:51 " fill with GRAY "
2018/06/19 13:44:51 " rows start on 4 byte boundaries "
2018/06/19 13:44:51 "--------------\n *  FillBitmap\n *--------------\n "
2018/06/19 13:44:51 " stretch the image to it's window determined size "
2018/06/19 13:44:51 " the following two are mathematically the same, but the first\n         * has side-effects because of rounding\n         "
2018/06/19 13:44:51 "      if ((cyNewSize / cxNewSize) > (cyImgSize / cxImgSize)) "
2018/06/19 13:44:51 " calculate row-bytes "
2018/06/19 13:44:51 " copy image to screen "
2018/06/19 13:44:51 " note the reverse order  "
2018/06/19 13:44:51 " free memory "
2018/06/19 13:44:51 " process the image not-stretched "
2018/06/19 13:44:51 " calculate the central position "
2018/06/19 13:44:51 " check for image larger than window "
2018/06/19 13:44:51 " calculate both row-bytes "
2018/06/19 13:44:51 " copy image to screen "
2018/06/19 13:44:51 " note the reverse order  "
2018/06/19 13:44:51 "-----------------\n *  end of source\n *-----------------\n "
2018/06/19 13:44:51 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/visupng/VisualPng.c": 18.106413ms
2018/06/19 13:44:51 Couldn't classify license(s)
2018/06/19 13:44:52 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/visupng/cexcept.h
2018/06/19 13:44:52 detected language: 4
2018/06/19 13:44:52 "===\ncexcept.h 2.0.1 (2008-Jul-19-Sat)\nhttp://www.nicemice.net/cexcept/\nAdam M. Costello\nhttp://www.nicemice.net/amc/\n\nAn interface for exception-handling in ANSI C (C89 and subsequent ISO\nstandards), developed jointly with Cosmin Truta.\n\n    Copyright (c) 2000-2008 Adam M. Costello and Cosmin Truta.\n    This software may be modified only if its author and version\n    information is updated accurately, and may be redistributed\n    only if accompanied by this unaltered notice.  Subject to those\n    restrictions, permission is granted to anyone to do anything\n    with this software.  The copyright holders make no guarantees\n    regarding this software, and are not responsible for any damage\n    resulting from its use.\n\nThe cexcept interface is not compatible with and cannot interact\nwith system exceptions (like division by zero or memory segmentation\nviolation), compiler-generated exceptions (like C++ exceptions), or\nother exception-handling interfaces.\n\nWhen using this interface across multiple .c files, do not include\nthis header file directly.  Instead, create a wrapper header file that\nincludes this header file and then invokes the define_exception_type\nmacro (see below).  The .c files should then include that header file.\n\nThe interface consists of one type, one well-known name, and six macros.\n\n\ndefine_exception_type(type_name);\n\n    This macro is used like an external declaration.  It specifies\n    the type of object that gets copied from the exception thrower to\n    the exception catcher.  The type_name can be any type that can be\n    assigned to, that is, a non-constant arithmetic type, struct, union,\n    or pointer.  Examples:\n\n        define_exception_type(int);\n\n        enum exception { out_of_memory, bad_arguments, disk_full };\n        define_exception_type(enum exception);\n\n        struct exception { int code; const char *msg; };\n        define_exception_type(struct exception);\n\n    Because throwing an exception causes the object to be copied (not\n    just once, but twice), programmers may wish to consider size when\n    choosing the exception type.\n\n\nstruct exception_context;\n\n    This type may be used after the define_exception_type() macro has\n    been invoked.  A struct exception_context must be known to both\n    the thrower and the catcher.  It is expected that there be one\n    context for each thread that uses exceptions.  It would certainly\n    be dangerous for multiple threads to access the same context.\n    One thread can use multiple contexts, but that is likely to be\n    confusing and not typically useful.  The application can allocate\n    this structure in any way it pleases--automatic, static, or dynamic.\n    The application programmer should pretend not to know the structure\n    members, which are subject to change.\n\n\nstruct exception_context *the_exception_context;\n\n    The Try/Catch and Throw statements (described below) implicitly\n    refer to a context, using the name the_exception_context.  It is\n    the application's responsibility to make sure that this name yields\n    the address of a mutable (non-constant) struct exception_context\n    wherever those statements are used.  Subject to that constraint, the\n    application may declare a variable of this name anywhere it likes\n    (inside a function, in a parameter list, or externally), and may\n    use whatever storage class specifiers (static, extern, etc) or type\n    qualifiers (const, volatile, etc) it likes.  Examples:\n\n        static struct exception_context\n          * const the_exception_context = &foo;\n\n        { struct exception_context *the_exception_context = bar; ... }\n\n        int blah(struct exception_context *the_exception_context, ...);\n\n        extern struct exception_context the_exception_context[1];\n\n    The last example illustrates a trick that avoids creating a pointer\n    object separate from the structure object.\n\n    The name could even be a macro, for example:\n\n        struct exception_context ec_array[numthreads];\n        #define the_exception_context (ec_array + thread_id)\n\n    Be aware that the_exception_context is used several times by the\n    Try/Catch/Throw macros, so it shouldn't be expensive or have side\n    effects.  The expansion must be a drop-in replacement for an\n    identifier, so it's safest to put parentheses around it.\n\n\nvoid init_exception_context(struct exception_context *ec);\n\n    For context structures allocated statically (by an external\n    definition or using the \"static\" keyword), the implicit\n    initialization to all zeros is sufficient, but contexts allocated\n    by other means must be initialized using this macro before they\n    are used by a Try/Catch statement.  It does no harm to initialize\n    a context more than once (by using this macro on a statically\n    allocated context, or using this macro twice on the same context),\n    but a context must not be re-initialized after it has been used by a\n    Try/Catch statement.\n\n\nTry statement\nCatch (expression) statement\n\n    The Try/Catch/Throw macros are capitalized in order to avoid\n    confusion with the C++ keywords, which have subtly different\n    semantics.\n\n    A Try/Catch statement has a syntax similar to an if/else statement,\n    except that the parenthesized expression goes after the second\n    keyword rather than the first.  As with if/else, there are two\n    clauses, each of which may be a simple statement ending with a\n    semicolon or a brace-enclosed compound statement.  But whereas\n    the else clause is optional, the Catch clause is required.  The\n    expression must be a modifiable lvalue (something capable of being\n    assigned to) of the same type (disregarding type qualifiers) that\n    was passed to define_exception_type().\n\n    If a Throw that uses the same exception context as the Try/Catch is\n    executed within the Try clause (typically within a function called\n    by the Try clause), and the exception is not caught by a nested\n    Try/Catch statement, then a copy of the exception will be assigned\n    to the expression, and control will jump to the Catch clause.  If no\n    such Throw is executed, then the assignment is not performed, and\n    the Catch clause is not executed.\n\n    The expression is not evaluated unless and until the exception is\n    caught, which is significant if it has side effects, for example:\n\n        Try foo();\n        Catch (p[++i].e) { ... }\n\n    IMPORTANT: Jumping into or out of a Try clause (for example via\n    return, break, continue, goto, longjmp) is forbidden--the compiler\n    will not complain, but bad things will happen at run-time.  Jumping\n    into or out of a Catch clause is okay, and so is jumping around\n    inside a Try clause.  In many cases where one is tempted to return\n    from a Try clause, it will suffice to use Throw, and then return\n    from the Catch clause.  Another option is to set a flag variable and\n    use goto to jump to the end of the Try clause, then check the flag\n    after the Try/Catch statement.\n\n    IMPORTANT: The values of any non-volatile automatic variables\n    changed within the Try clause are undefined after an exception is\n    caught.  Therefore, variables modified inside the Try block whose\n    values are needed later outside the Try block must either use static\n    storage or be declared with the \"volatile\" type qualifier.\n\n\nThrow expression;\n\n    A Throw statement is very much like a return statement, except that\n    the expression is required.  Whereas return jumps back to the place\n    where the current function was called, Throw jumps back to the Catch\n    clause of the innermost enclosing Try clause.  The expression must\n    be compatible with the type passed to define_exception_type().  The\n    exception must be caught, otherwise the program may crash.\n\n    Slight limitation:  If the expression is a comma-expression, it must\n    be enclosed in parentheses.\n\n\nTry statement\nCatch_anonymous statement\n\n    When the value of the exception is not needed, a Try/Catch statement\n    can use Catch_anonymous instead of Catch (expression).\n\n\nEverything below this point is for the benefit of the compiler.  The\napplication programmer should pretend not to know any of it, because it\nis subject to change.\n\n==="
2018/06/19 13:44:52 " etmp must be volatile because the application might use automatic \n storage for the_exception_context, and etmp is modified between   \n the calls to setjmp() and longjmp().  A wrapper struct is used to \n avoid warnings about a duplicate volatile qualifier in case etype \n already includes it.                                              "
2018/06/19 13:44:52 " Try ends with do, and Catch begins with while(0) and ends with     \n else, to ensure that Try/Catch syntax is similar to if/else        \n syntax.                                                            \n                                                                    \n The 0 in while(0) is expressed as x=0,x in order to appease        \n compilers that warn about constant expressions inside while().     \n Most compilers should still recognize that the condition is always \n false and avoid generating code for it.                            "
2018/06/19 13:44:52 " CEXCEPT_H "
2018/06/19 13:44:52 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/visupng/cexcept.h": 37.494773ms
2018/06/19 13:44:52 Couldn't classify license(s)
2018/06/19 13:44:53 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/visupng/README.txt
2018/06/19 13:44:53 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/visupng/README.txt": 10.789114ms
2018/06/19 13:44:53 Couldn't classify license(s)
2018/06/19 13:44:54 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/visupng/VisualPng.dsw
2018/06/19 13:44:54 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/visupng/VisualPng.dsw": 6.448471ms
2018/06/19 13:44:54 Couldn't classify license(s)
2018/06/19 13:44:55 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/visupng/VisualPng.ico
2018/06/19 13:44:55 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/visupng/VisualPng.ico": 1.898585ms
2018/06/19 13:44:55 Couldn't classify license(s)
2018/06/19 13:44:56 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/visupng/VisualPng.rc
2018/06/19 13:44:56 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/visupng/VisualPng.rc": 15.803739ms
2018/06/19 13:44:56 Couldn't classify license(s)
2018/06/19 13:44:57 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/visupng/PngFile.h
2018/06/19 13:44:57 detected language: 4
2018/06/19 13:44:57 "------------------------------------------\n  PNGFILE.H -- Header File for pngfile.c\n------------------------------------------"
2018/06/19 13:44:57 " Copyright 2000, Willem van Schaik."
2018/06/19 13:44:57 " This code is released under the libpng license.\n For conditions of distribution and use, see the disclaimer\n and license in png.h"
2018/06/19 13:44:57 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/visupng/PngFile.h": 7.889949ms
2018/06/19 13:44:57 Couldn't classify license(s)
2018/06/19 13:44:58 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/visupng/VisualPng.dsp
2018/06/19 13:44:58 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/visupng/VisualPng.dsp": 24.791105ms
2018/06/19 13:44:58 Couldn't classify license(s)
2018/06/19 13:44:59 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/README.txt
2018/06/19 13:44:59 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/README.txt": 6.82744ms
2018/06/19 13:44:59 Couldn't classify license(s)
2018/06/19 13:45:00 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminim/encoder/makefile
2018/06/19 13:45:00 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminim/encoder/makefile": 20.453015ms
2018/06/19 13:45:00 Couldn't classify license(s)
2018/06/19 13:45:01 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminim/encoder/pngusr.dfa
2018/06/19 13:45:01 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminim/encoder/pngusr.dfa": 10.702972ms
2018/06/19 13:45:01 Couldn't classify license(s)
2018/06/19 13:45:02 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminim/encoder/pngusr.h
2018/06/19 13:45:02 detected language: 4
2018/06/19 13:45:02 " minwrpngconf.h: headers to make a minimal png-write-only library\n *\n * Copyright (c) 2007, 2010-2013 Glenn Randers-Pehrson\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * Derived from pngcrush.h, Copyright 1998-2007, Glenn Randers-Pehrson\n "
2018/06/19 13:45:02 " To include pngusr.h set -DPNG_USER_CONFIG in CPPFLAGS "
2018/06/19 13:45:02 " List options to turn off features of the build that do not\n * affect the API (so are not recorded in pnglibconf.h)\n "
2018/06/19 13:45:02 " MINWRPNGCONF_H "
2018/06/19 13:45:02 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminim/encoder/pngusr.h": 8.039335ms
2018/06/19 13:45:02 Couldn't classify license(s)
2018/06/19 13:45:02 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminim/encoder/README
2018/06/19 13:45:02 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminim/encoder/README": 967.133µs
2018/06/19 13:45:02 Couldn't classify license(s)
2018/06/19 13:45:03 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminim/decoder/makefile
2018/06/19 13:45:03 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminim/decoder/makefile": 15.578789ms
2018/06/19 13:45:03 Couldn't classify license(s)
2018/06/19 13:45:04 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminim/decoder/pngusr.dfa
2018/06/19 13:45:04 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminim/decoder/pngusr.dfa": 8.436822ms
2018/06/19 13:45:04 Couldn't classify license(s)
2018/06/19 13:45:05 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminim/decoder/pngusr.h
2018/06/19 13:45:05 detected language: 4
2018/06/19 13:45:05 " minrdpngconf.h: headers to make a minimal png-read-only library\n *\n * Copyright (c) 2007, 2010-2013 Glenn Randers-Pehrson\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * Derived from pngcrush.h, Copyright 1998-2007, Glenn Randers-Pehrson\n "
2018/06/19 13:45:05 " To include pngusr.h set -DPNG_USER_CONFIG in CPPFLAGS "
2018/06/19 13:45:05 " List options to turn off features of the build that do not\n * affect the API (so are not recorded in pnglibconf.h)\n "
2018/06/19 13:45:05 " MINRDPNGCONF_H "
2018/06/19 13:45:05 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminim/decoder/pngusr.h": 7.253725ms
2018/06/19 13:45:05 Couldn't classify license(s)
2018/06/19 13:45:06 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminim/decoder/README
2018/06/19 13:45:06 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminim/decoder/README": 998.153µs
2018/06/19 13:45:06 Couldn't classify license(s)
2018/06/19 13:45:07 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminim/preader/makefile
2018/06/19 13:45:07 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminim/preader/makefile": 18.265367ms
2018/06/19 13:45:07 Couldn't classify license(s)
2018/06/19 13:45:08 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminim/preader/pngusr.dfa
2018/06/19 13:45:08 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminim/preader/pngusr.dfa": 8.424662ms
2018/06/19 13:45:08 Couldn't classify license(s)
2018/06/19 13:45:09 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminim/preader/pngusr.h
2018/06/19 13:45:09 detected language: 4
2018/06/19 13:45:09 " minrdpngconf.h: headers to make a minimal png-read-only library\n *\n * Copyright (c) 2009, 2010-2013 Glenn Randers-Pehrson\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * Derived from pngcrush.h, Copyright 1998-2007, Glenn Randers-Pehrson\n "
2018/06/19 13:45:09 " To include pngusr.h set -DPNG_USER_CONFIG in CPPFLAGS "
2018/06/19 13:45:09 " List options to turn off features of the build that do not\n * affect the API (so are not recorded in pnglibconf.h)\n "
2018/06/19 13:45:09 " MINPRDPNGCONF_H "
2018/06/19 13:45:09 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminim/preader/pngusr.h": 7.164406ms
2018/06/19 13:45:09 Couldn't classify license(s)
2018/06/19 13:45:10 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminim/preader/README
2018/06/19 13:45:10 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminim/preader/README": 1.23984ms
2018/06/19 13:45:10 Couldn't classify license(s)
2018/06/19 13:45:11 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminim/README
2018/06/19 13:45:11 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminim/README": 958.882µs
2018/06/19 13:45:11 Couldn't classify license(s)
2018/06/19 13:45:11 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/mips-msa/linux.c
2018/06/19 13:45:11 detected language: 4
2018/06/19 13:45:11 " contrib/mips-msa/linux.c\n *\n * Copyright (c) 2016 Glenn Randers-Pehrson\n * Written by Mandar Sahastrabuddhe, 2016.\n * Last changed in libpng 1.6.25beta03 [August 29, 2016]\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * SEE contrib/mips-msa/README before reporting bugs\n *\n * STATUS: SUPPORTED\n * BUG REPORTS: png-mng-implement@sourceforge.net\n *\n * png_have_msa implemented for Linux by reading the widely available\n * pseudo-file /proc/cpuinfo.\n *\n * This code is strict ANSI-C and is probably moderately portable; it does\n * however use <stdio.h> and it assumes that /proc/cpuinfo is never localized.\n "
2018/06/19 13:45:11 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/mips-msa/linux.c": 8.230312ms
2018/06/19 13:45:11 Couldn't classify license(s)
2018/06/19 13:45:12 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/mips-msa/README
2018/06/19 13:45:12 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/mips-msa/README": 18.539172ms
2018/06/19 13:45:12 Couldn't classify license(s)
2018/06/19 13:45:13 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/powerpc-vsx/linux_aux.c
2018/06/19 13:45:13 detected language: 4
2018/06/19 13:45:13 " contrib/powerpc-vsx/linux_aux.c\n *\n * Copyright (c) 2017 Glenn Randers-Pehrson\n * Written by Vadim Barkov, 2017.\n * Last changed in libpng 1.6.29 [March 16, 2017]\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * STATUS: TESTED\n * BUG REPORTS: png-mng-implement@sourceforge.net\n *\n * png_have_vsx implemented for Linux by using the auxiliary vector mechanism.\n *\n * This code is strict ANSI-C and is probably moderately portable; it does\n * however use <stdio.h> and it assumes that /proc/cpuinfo is never localized.\n "
2018/06/19 13:45:13 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/powerpc-vsx/linux_aux.c": 7.567545ms
2018/06/19 13:45:13 Couldn't classify license(s)
2018/06/19 13:45:14 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/powerpc-vsx/linux.c
2018/06/19 13:45:14 detected language: 4
2018/06/19 13:45:14 " contrib/powerpc-vsx/linux.c\n *\n * Copyright (c) 2017 Glenn Randers-Pehrson\n * Written by Vadim Barkov, 2017.\n * Last changed in libpng 1.6.29 [March 16, 2017]\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * STATUS: TESTED\n * BUG REPORTS: png-mng-implement@sourceforge.net\n *\n * png_have_vsx implemented for Linux by reading the widely available\n * pseudo-file /proc/cpuinfo. \n *\n * This code is strict ANSI-C and is probably moderately portable; it does\n * however use <stdio.h> and it assumes that /proc/cpuinfo is never localized.\n "
2018/06/19 13:45:14 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/powerpc-vsx/linux.c": 7.329519ms
2018/06/19 13:45:14 Couldn't classify license(s)
2018/06/19 13:45:15 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/powerpc-vsx/README
2018/06/19 13:45:15 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/powerpc-vsx/README": 16.750727ms
2018/06/19 13:45:15 Couldn't classify license(s)
2018/06/19 13:45:16 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/oss-fuzz/libpng_read_fuzzer.cc
2018/06/19 13:45:16 detected language: 4
2018/06/19 13:45:16 " libpng_read_fuzzer.cc\n Copyright 2017 Glenn Randers-Pehrson\n Copyright 2015 The Chromium Authors. All rights reserved.\n Use of this source code is governed by a BSD-style license that may\n be found in the LICENSE file https://cs.chromium.org/chromium/src/LICENSE"
2018/06/19 13:45:16 " Last changed in libpng 1.6.32 [August 24, 2017]"
2018/06/19 13:45:16 " The modifications in 2017 by Glenn Randers-Pehrson include\n 1. addition of a PNG_CLEANUP macro,\n 2. setting the option to ignore ADLER32 checksums,\n 3. adding \"#include <string.h>\" which is needed on some platforms\n    to provide memcpy().\n 4. adding read_end_info() and creating an end_info structure."
2018/06/19 13:45:16 " Entry point for LibFuzzer.\n Roughly follows the libpng book example:\n http://www.libpng.org/pub/png/book/chapter13.html"
2018/06/19 13:45:16 " not a PNG."
2018/06/19 13:45:16 " Setting up reading from buffer."
2018/06/19 13:45:16 " Reading."
2018/06/19 13:45:16 " reset error handler to put png_deleter into scope."
2018/06/19 13:45:16 " This is going to be too slow."
2018/06/19 13:45:16 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/oss-fuzz/libpng_read_fuzzer.cc": 10.262701ms
2018/06/19 13:45:16 Couldn't classify license(s)
2018/06/19 13:45:17 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/oss-fuzz/libpng_read_fuzzer.options
2018/06/19 13:45:17 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/oss-fuzz/libpng_read_fuzzer.options": 664.63µs
2018/06/19 13:45:17 Couldn't classify license(s)
2018/06/19 13:45:18 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/oss-fuzz/README.txt
2018/06/19 13:45:18 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/oss-fuzz/README.txt": 10.196808ms
2018/06/19 13:45:18 Couldn't classify license(s)
2018/06/19 13:45:19 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/oss-fuzz/png.dict
2018/06/19 13:45:19 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/oss-fuzz/png.dict": 2.016631ms
2018/06/19 13:45:19 Couldn't classify license(s)
2018/06/19 13:45:20 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/oss-fuzz/build.sh
2018/06/19 13:45:20 detected language: 32
2018/06/19 13:45:20 "!/bin/bash -eu\n Copyright 2017 Glenn Randers-Pehrson\n Copyright 2016 Google Inc.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n Last changed in libpng 1.6.33 [September 28, 2017]\n\n Revisions by Glenn Randers-Pehson, 2017:\n 1. Build only the library, not the tools (changed \"make -j$(nproc) all\" to\n     \"make -j$(nproc) libpng16.la\").\n 2. Disabled WARNING and WRITE options in pnglibconf.dfa.\n###############################################################################"
2018/06/19 13:45:20 " Disable logging via library build configuration control."
2018/06/19 13:45:20 " build the library."
2018/06/19 13:45:20 " build libpng_read_fuzzer."
2018/06/19 13:45:20 " add seed corpus."
2018/06/19 13:45:20 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/oss-fuzz/build.sh": 11.307661ms
2018/06/19 13:45:21 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/oss-fuzz/newcc
2018/06/19 13:45:21 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/oss-fuzz/newcc": 23.813718ms
2018/06/19 13:45:21 Couldn't classify license(s)
2018/06/19 13:45:22 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/oss-fuzz/Dockerfile
2018/06/19 13:45:22 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/oss-fuzz/Dockerfile": 12.689148ms
2018/06/19 13:45:23 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminus/png2pnm.c
2018/06/19 13:45:23 detected language: 4
2018/06/19 13:45:23 "\n *  png2pnm.c --- conversion from PNG-file to PGM/PPM-file\n *  copyright (C) 1999,2017 by Willem van Schaik <willem at schaik.com>\n *\n *  version 1.0 - 1999.10.15 - First version.\n *          1.1 - 2017.04.22 - Add buffer-size check (Glenn Randers-Pehrson)\n *          1.2 - 2017.08.24 - Fix potential overflow in buffer-size check\n *                             (Glenn Randers-Pehrson)\n *          1.3 - 2017.08.28 - Add PNGMINUS_UNUSED (Christian Hesse)\n *\n *  Permission to use, copy, modify, and distribute this software and\n *  its documentation for any purpose and without fee is hereby granted,\n *  provided that the above copyright notice appear in all copies and\n *  that both that copyright notice and this permission notice appear in\n *  supporting documentation. This software is provided \"as is\" without\n *  express or implied warranty.\n "
2018/06/19 13:45:23 " to make png2pnm verbose so we can find problems (needs to be before png.h) "
2018/06/19 13:45:23 " Define png_jmpbuf() in case we are using a pre-1.0.6 version of libpng "
2018/06/19 13:45:23 " Unused formal parameter warnings are silenced using the following macro\n * which is expected to have no bad effects on performance (optimizing\n * compilers will probably remove it entirely).\n "
2018/06/19 13:45:23 " function prototypes "
2018/06/19 13:45:23 "\n *  main\n "
2018/06/19 13:45:23 " end switch "
2018/06/19 13:45:23 " end for "
2018/06/19 13:45:23 " set stdin/stdout if required to binary "
2018/06/19 13:45:23 " call the conversion program itself "
2018/06/19 13:45:23 " close input file "
2018/06/19 13:45:23 " close output file "
2018/06/19 13:45:23 " close alpha file "
2018/06/19 13:45:23 "\n *  usage\n "
2018/06/19 13:45:23 "\n *  png2pnm\n "
2018/06/19 13:45:23 " read and check signature in PNG file "
2018/06/19 13:45:23 " create png and info structures "
2018/06/19 13:45:23 " out of memory "
2018/06/19 13:45:23 " out of memory "
2018/06/19 13:45:23 " set up the input control for C streams "
2018/06/19 13:45:23 " we already read the 8 signature bytes "
2018/06/19 13:45:23 " read the file information "
2018/06/19 13:45:23 " get size and bit-depth of the PNG-image "
2018/06/19 13:45:23 " set-up the transformations "
2018/06/19 13:45:23 " transform paletted images into full-color rgb "
2018/06/19 13:45:23 " expand images to bit-depth 8 (only applicable for grayscale images) "
2018/06/19 13:45:23 " transform transparency maps into full alpha-channel "
2018/06/19 13:45:23 " downgrade 16-bit images to 8-bit "
2018/06/19 13:45:23 " transform grayscale images into full-color "
2018/06/19 13:45:23 " only if file has a file gamma, we do a correction "
2018/06/19 13:45:23 " all transformations have been registered; now update info_ptr data,\n   * get rowbytes and channels, and allocate image memory "
2018/06/19 13:45:23 " get the new color-type and bit-depth (after expansion/stripping) "
2018/06/19 13:45:23 " check for 16-bit files "
2018/06/19 13:45:23 " calculate new number of channels and store alpha-presence "
2018/06/19 13:45:23 " should never happen "
2018/06/19 13:45:23 " check if alpha is expected to be present in file "
2018/06/19 13:45:23 " row_bytes is the width x number of channels x (bit-depth / 8) "
2018/06/19 13:45:23 " too big "
2018/06/19 13:45:23 " set the individual row_pointers to point at the correct offsets "
2018/06/19 13:45:23 " now we can go ahead and just read the whole image "
2018/06/19 13:45:23 " read rest of file, and get additional chunks in info_ptr - REQUIRED "
2018/06/19 13:45:23 " clean up after the read, and free any memory allocated - REQUIRED "
2018/06/19 13:45:23 " write header of PNM file "
2018/06/19 13:45:23 " write header of PGM file with alpha channel "
2018/06/19 13:45:23 " write data to PNM file "
2018/06/19 13:45:23 " alpha "
2018/06/19 13:45:23 " output alpha-channel as pgm file "
2018/06/19 13:45:23 " if alpha_present "
2018/06/19 13:45:23 " end for col "
2018/06/19 13:45:23 " end for row "
2018/06/19 13:45:23 " to quiet a Coverity defect "
2018/06/19 13:45:23 " end of source "
2018/06/19 13:45:23 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminus/png2pnm.c": 17.229713ms
2018/06/19 13:45:23 Couldn't classify license(s)
2018/06/19 13:45:24 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminus/makefile.std
2018/06/19 13:45:24 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminus/makefile.std": 2.623227ms
2018/06/19 13:45:24 Couldn't classify license(s)
2018/06/19 13:45:24 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminus/pnm2png.sh
2018/06/19 13:45:24 detected language: 32
2018/06/19 13:45:24 "!/bin/sh\n -- grayscale"
2018/06/19 13:45:24 " -- full-color"
2018/06/19 13:45:24 " -- palletted"
2018/06/19 13:45:24 " -- gray with alpha-channel"
2018/06/19 13:45:24 " -- color with alpha-channel"
2018/06/19 13:45:24 " -- grayscale"
2018/06/19 13:45:24 " -- full-color"
2018/06/19 13:45:24 " -- palletted"
2018/06/19 13:45:24 " -- gray with alpha-channel"
2018/06/19 13:45:24 " -- color with alpha-channel"
2018/06/19 13:45:24 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminus/pnm2png.sh": 1.209261ms
2018/06/19 13:45:24 Couldn't classify license(s)
2018/06/19 13:45:25 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminus/png2pnm.bat
2018/06/19 13:45:25 detected language: 3
2018/06/19 13:45:25 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminus/png2pnm.bat": 208.776µs
2018/06/19 13:45:25 Couldn't classify license(s)
2018/06/19 13:45:26 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminus/makefile.tc3
2018/06/19 13:45:26 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminus/makefile.tc3": 1.756945ms
2018/06/19 13:45:26 Couldn't classify license(s)
2018/06/19 13:45:27 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminus/pngminus.sh
2018/06/19 13:45:27 detected language: 32
2018/06/19 13:45:27 "!/bin/sh"
2018/06/19 13:45:27 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminus/pngminus.sh": 557.008µs
2018/06/19 13:45:27 Couldn't classify license(s)
2018/06/19 13:45:28 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminus/makevms.com
2018/06/19 13:45:28 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminus/makevms.com": 4.238338ms
2018/06/19 13:45:28 Couldn't classify license(s)
2018/06/19 13:45:29 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminus/pnm2png.c
2018/06/19 13:45:29 detected language: 4
2018/06/19 13:45:29 "\n *  pnm2png.c --- conversion from PBM/PGM/PPM-file to PNG-file\n *  copyright (C) 1999,2015,2017 by Willem van Schaik <willem at schaik.com>\n *\n *  version 1.0 - 1999.10.15 - First version.\n *  version 1.1 - 2015.07.29 - Fixed leaks (Glenn Randers-Pehrson)\n *  version 1.2 - 2017.04.22 - Add buffer-size check\n *          1.3 - 2017.08.24 - Fix potential overflow in buffer-size check\n *                             (Glenn Randers-Pehrson)\n *          1.4 - 2017.08.28 - Add PNGMINUS_UNUSED (Christian Hesse)\n *\n *  Permission to use, copy, modify, and distribute this software and\n *  its documentation for any purpose and without fee is hereby granted,\n *  provided that the above copyright notice appear in all copies and\n *  that both that copyright notice and this permission notice appear in\n *  supporting documentation. This software is provided \"as is\" without\n *  express or implied warranty.\n "
2018/06/19 13:45:29 " to make pnm2png verbose so we can find problems (needs to be before png.h) "
2018/06/19 13:45:29 " Define png_jmpbuf() in case we are using a pre-1.0.6 version of libpng "
2018/06/19 13:45:29 " Unused formal parameter warnings are silenced using the following macro\n * which is expected to have no bad effects on performance (optimizing\n * compilers will probably remove it entirely).\n "
2018/06/19 13:45:29 " function prototypes "
2018/06/19 13:45:29 "\n *  main\n "
2018/06/19 13:45:29 " end switch "
2018/06/19 13:45:29 " end for "
2018/06/19 13:45:29 " set stdin/stdout to binary, we're reading the PNM always! in binary format "
2018/06/19 13:45:29 " call the conversion program itself "
2018/06/19 13:45:29 " close input file "
2018/06/19 13:45:29 " close output file "
2018/06/19 13:45:29 " close alpha file "
2018/06/19 13:45:29 "\n *  usage\n "
2018/06/19 13:45:29 "\n *  pnm2png\n "
2018/06/19 13:45:29 " read header of PNM file "
2018/06/19 13:45:29 " if (maxval <= 65535) "
2018/06/19 13:45:29 " if (maxval <= 65535) "
2018/06/19 13:45:29 " read header of PGM file with alpha channel "
2018/06/19 13:45:29 " if (maxval <= 65535) "
2018/06/19 13:45:29 " end if alpha "
2018/06/19 13:45:29 " calculate the number of channels and store alpha-presence "
2018/06/19 13:45:29 " cannot happen "
2018/06/19 13:45:29 " row data is as many bytes as can fit width x channels x bit_depth "
2018/06/19 13:45:29 " row_bytes is the width x number of channels x (bit-depth / 8) "
2018/06/19 13:45:29 " too big "
2018/06/19 13:45:29 " read data from PNM file "
2018/06/19 13:45:29 " png supports this format natively so no conversion is needed "
2018/06/19 13:45:29 " read alpha-channel from pgm file "
2018/06/19 13:45:29 " if alpha \n if packed_bitmap \n end for col \n end for row "
2018/06/19 13:45:29 " prepare the standard PNG structures "
2018/06/19 13:45:29 " setjmp() must be called in every function that calls a PNG-reading libpng function "
2018/06/19 13:45:29 " initialize the png structure "
2018/06/19 13:45:29 " we're going to write more or less the same PNG as the input file "
2018/06/19 13:45:29 " write the file header information "
2018/06/19 13:45:29 " if needed we will allocate memory for an new array of row-pointers "
2018/06/19 13:45:29 " set the individual row_pointers to point at the correct offsets "
2018/06/19 13:45:29 " write out the entire image data in one call "
2018/06/19 13:45:29 " write the additional chunks to the PNG file (not really needed) "
2018/06/19 13:45:29 " clean up after the write, and free any memory allocated "
2018/06/19 13:45:29 " Quiet a Coverity defect "
2018/06/19 13:45:29 " end of pnm2png "
2018/06/19 13:45:29 "\n * get_token() - gets the first string after whitespace\n "
2018/06/19 13:45:29 " remove white-space and comment lines "
2018/06/19 13:45:29 " the rest of this line is a comment "
2018/06/19 13:45:29 " read string "
2018/06/19 13:45:29 "\n * get_data() - takes first byte and converts into next pixel value,\n *        taking as much bits as defined by bit-depth and\n *        using the bit-depth to fill up a byte (0Ah -> AAh)\n "
2018/06/19 13:45:29 "\n * get_value() - takes first (numeric) string and converts into number,\n *         using the bit-depth to fill up a byte (0Ah -> AAh)\n "
2018/06/19 13:45:29 " end of source "
2018/06/19 13:45:29 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminus/pnm2png.c": 18.22204ms
2018/06/19 13:45:29 Couldn't classify license(s)
2018/06/19 13:45:30 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminus/png2pnm.sh
2018/06/19 13:45:30 detected language: 32
2018/06/19 13:45:30 "!/bin/sh\n -- grayscale"
2018/06/19 13:45:30 " -- full-color"
2018/06/19 13:45:30 " -- palletted"
2018/06/19 13:45:30 " -- gray with alpha-channel"
2018/06/19 13:45:30 " -- color with alpha-channel"
2018/06/19 13:45:30 " -- grayscale"
2018/06/19 13:45:30 " -- full-color"
2018/06/19 13:45:30 " -- palletted"
2018/06/19 13:45:30 " -- gray with alpha-channel"
2018/06/19 13:45:30 " -- color with alpha-channel"
2018/06/19 13:45:30 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminus/png2pnm.sh": 1.667334ms
2018/06/19 13:45:30 Couldn't classify license(s)
2018/06/19 13:45:31 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminus/pngminus.bat
2018/06/19 13:45:31 detected language: 3
2018/06/19 13:45:31 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminus/pngminus.bat": 20.943µs
2018/06/19 13:45:31 Couldn't classify license(s)
2018/06/19 13:45:31 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminus/README
2018/06/19 13:45:31 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminus/README": 24.559175ms
2018/06/19 13:45:31 Couldn't classify license(s)
2018/06/19 13:45:32 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/pngminus/pnm2png.bat
2018/06/19 13:45:32 detected language: 3
2018/06/19 13:45:32 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/pngminus/pnm2png.bat": 234.308µs
2018/06/19 13:45:32 Couldn't classify license(s)
2018/06/19 13:45:33 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/conftest/s_write.dfa
2018/06/19 13:45:33 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/conftest/s_write.dfa": 10.015552ms
2018/06/19 13:45:33 Couldn't classify license(s)
2018/06/19 13:45:34 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/conftest/write.dfa
2018/06/19 13:45:34 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/conftest/write.dfa": 12.10236ms
2018/06/19 13:45:34 Couldn't classify license(s)
2018/06/19 13:45:35 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/conftest/s_read.dfa
2018/06/19 13:45:35 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/conftest/s_read.dfa": 10.319542ms
2018/06/19 13:45:35 Couldn't classify license(s)
2018/06/19 13:45:36 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/conftest/simple.dfa
2018/06/19 13:45:36 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/conftest/simple.dfa": 12.131427ms
2018/06/19 13:45:36 Couldn't classify license(s)
2018/06/19 13:45:37 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/conftest/read.dfa
2018/06/19 13:45:37 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/conftest/read.dfa": 11.658372ms
2018/06/19 13:45:37 Couldn't classify license(s)
2018/06/19 13:45:38 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/conftest/pngcp.dfa
2018/06/19 13:45:38 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/conftest/pngcp.dfa": 11.679277ms
2018/06/19 13:45:38 Couldn't classify license(s)
2018/06/19 13:45:38 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/contrib/conftest/README
2018/06/19 13:45:38 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/contrib/conftest/README": 3.614497ms
2018/06/19 13:45:38 Couldn't classify license(s)
2018/06/19 13:45:39 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngtest.png
2018/06/19 13:45:39 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngtest.png": 21.769421ms
2018/06/19 13:45:39 Couldn't classify license(s)
2018/06/19 13:45:40 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/README
2018/06/19 13:45:40 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/README": 45.717658ms
2018/06/19 13:45:40 Couldn't classify license(s)
2018/06/19 13:45:41 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/aclocal.m4
2018/06/19 13:45:41 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/aclocal.m4": 202.896378ms
2018/06/19 13:45:41 Couldn't classify license(s)
2018/06/19 13:45:42 Classifying license(s): /libpng-1.6.34.tar.gz_extracted/pngtest.c
2018/06/19 13:45:42 detected language: 4
2018/06/19 13:45:42 " pngtest.c - a simple test program to test libpng\n *\n * Last changed in libpng 1.6.32 [August 24, 2017]\n * Copyright (c) 1998-2002,2004,2006-2017 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license.\n * For conditions of distribution and use, see the disclaimer\n * and license in png.h\n *\n * This program reads in a PNG image, writes it out again, and then\n * compares the two files.  If the files are identical, this shows that\n * the basic chunk handling, filtering, and (de)compression code is working\n * properly.  It does not currently test all of the transforms, although\n * it probably should.\n *\n * The program will report \"FAIL\" in certain legitimate cases:\n * 1) when the compression level or filter selection method is changed.\n * 2) when the maximum IDAT size (PNG_ZBUF_SIZE in pngconf.h) is not 8192.\n * 3) unknown unsafe-to-copy ancillary chunks or unknown critical chunks\n *    exist in the input file.\n * 4) others not listed here...\n * In these cases, it is best to check with another tool such as \"pngcheck\"\n * to see what the differences between the two files are.\n *\n * If a filename is given on the command-line, then this file is used\n * for the input, rather than the default \"pngtest.png\".  This allows\n * testing a wide variety of files easily.  You can also test a number\n * of files at once by typing \"pngtest -m file1.png file2.png ...\"\n "
2018/06/19 13:45:42 " Defined so I can write to a file on gui/windowing platforms \n  #define STDERR stderr  \n For DOS "
2018/06/19 13:45:42 " Known chunks that exist in pngtest.png must be supported or pngtest will fail\n * simply as a result of re-ordering them.  This may be fixed in 1.7\n *\n * pngtest allocates a single row buffer for each row and overwrites it,\n * therefore if the write side doesn't support the writing of interlaced images\n * nothing can be done for an interlaced image (and the code below will fail\n * horribly trying to write extra data after writing garbage).\n "
2018/06/19 13:45:42 " else nothing can be done "
2018/06/19 13:45:42 " defined by pnglibconf.h from 1.7 "
2018/06/19 13:45:42 " Copied from pngpriv.h but only used in error messages below. "
2018/06/19 13:45:42 " Makes pngtest verbose so we can find problems. "
2018/06/19 13:45:42 " Makes buffer overruns easier to nail "
2018/06/19 13:45:42 " Turn on CPU timing\n#define PNGTEST_TIMING\n"
2018/06/19 13:45:42 " older libpng "
2018/06/19 13:45:42 " chunk unsupported by libpng in input \n count calls to png_error \n count calls to png_warning "
2018/06/19 13:45:42 " Define png_jmpbuf() in case we are using a pre-1.0.6 version of libpng "
2018/06/19 13:45:42 " Defines for unknown chunk handling if required. "
2018/06/19 13:45:42 " Utility to save typing/errors, the argument must be a name "
2018/06/19 13:45:42 " Example of using row callbacks to make a simple progress meter "
2018/06/19 13:45:42 " Example of using a user transform callback (doesn't do anything at present).\n "
2018/06/19 13:45:42 " Example of using user transform callback (we don't transform anything,\n * but merely count the zero samples)\n "
2018/06/19 13:45:42 " Contents of row_info:\n    *  png_uint_32 width      width of row\n    *  png_uint_32 rowbytes   number of bytes in row\n    *  png_byte color_type    color type of pixels\n    *  png_byte bit_depth     bit depth of samples\n    *  png_byte channels      number of channels (1-4)\n    *  png_byte pixel_depth   bits per pixel (depth*channels)\n    "
2018/06/19 13:45:42 " Counts the number of zero samples (or zero pixels if color_type is 3 "
2018/06/19 13:45:42 " Other color types "
2018/06/19 13:45:42 " WRITE_USER_TRANSFORM "
2018/06/19 13:45:42 " START of code to validate stdio-free compilation \n These copies of the default read/write functions come from pngrio.c and\n * pngwio.c.  They allow \"don't include stdio\" testing of the library.\n * This is the function that does the actual reading of data.  If you are\n * not reading from a standard C stream, you should create a replacement\n * read_data function and use it at run time with png_set_read_fn(), rather\n * than changing the library.\n "
2018/06/19 13:45:42 " Check if the current operation (reading / writing) is as expected. "
2018/06/19 13:45:42 " Check if the buffer size specific to the current location\n    * (file signature / header / data / crc) is as expected.\n    "
2018/06/19 13:45:42 " no restrictions here "
2018/06/19 13:45:42 " uninitialized "
2018/06/19 13:45:42 " fread() returns 0 on error, so it is OK to store this in a png_size_t\n    * instead of an int, which is what fread() actually returns.\n    "
2018/06/19 13:45:42 " Do nothing; fflush() is said to be just a waste of energy. \n Stifle compiler warning "
2018/06/19 13:45:42 " This is the function that does the actual writing of data.  If you are\n * not writing to a standard C stream, you should create a replacement\n * write_data function and use it at run time with png_set_write_fn(), rather\n * than changing the library.\n "
2018/06/19 13:45:42 " !STDIO "
2018/06/19 13:45:42 " This function is called when there is a warning, but the library thinks\n * it can continue anyway.  Replacement functions don't have to do anything\n * here if you don't want to.  In the default configuration, png_ptr is\n * not used, but it is passed in case it may be useful.\n "
2018/06/19 13:45:42 " This is the default error handling function.  Note that replacements for\n * this function MUST NOT RETURN, or the program will likely crash.  This\n * function is used by default, or if the program supplies NULL for the\n * error function pointer in png_set_error_fn().\n "
2018/06/19 13:45:42 " We can return because png_error calls the default handler, which is\n    * actually OK in this case.\n    "
2018/06/19 13:45:42 " END of code to validate stdio-free compilation "
2018/06/19 13:45:42 " START of code to validate memory allocation and deallocation "
2018/06/19 13:45:42 " Allocate memory.  For reasonable files, size should never exceed\n * 64K.  However, zlib may allocate more than 64K if you don't tell\n * it not to.  See zconf.h and png.h for more information.  zlib does\n * need to allocate exactly 64K, so whatever you call here must\n * have the ability to do that.\n *\n * This piece of code can be compiled to validate max 64K allocations\n * by setting MAXSEG_64K in zlib zconf.h *or* PNG_MAX_MALLOC_64K.\n "
2018/06/19 13:45:42 " png_malloc has already tested for NULL; png_create_struct calls\n    * png_debug_malloc directly, with png_ptr == NULL which is OK\n    "
2018/06/19 13:45:42 " This calls the library allocator twice, once to get the requested\n      buffer and once to get a new free list entry. "
2018/06/19 13:45:42 " Disable malloc_fn and free_fn "
2018/06/19 13:45:42 " Restore malloc_fn and free_fn "
2018/06/19 13:45:42 " Make sure the caller isn't assuming zeroed memory. "
2018/06/19 13:45:42 " Free a pointer.  It is removed from the list at the same time. "
2018/06/19 13:45:42 " This happens all the time. "
2018/06/19 13:45:42 " Unlink the element from the list. "
2018/06/19 13:45:42 " We must free the list element too, but first kill\n               the memory that is to be freed. "
2018/06/19 13:45:42 " Finally free the data. "
2018/06/19 13:45:42 " USER_MEM && DEBUG \n END of code to test memory allocation/deallocation "
2018/06/19 13:45:42 " Demonstration of user chunk support of the sTER and vpAg chunks "
2018/06/19 13:45:42 " (sTER is a public chunk not yet known by libpng.  vpAg is a private\nchunk used in ImageMagick to store \"virtual page\" size).  "
2018/06/19 13:45:42 " Used for location and order; zero means nothing. "
2018/06/19 13:45:42 " already have one of these "
2018/06/19 13:45:42 " Find where we are (the code below zeroes info_ptr to indicate that the\n    * chunks before the first IDAT have been read.)\n    "
2018/06/19 13:45:42 " after IDAT "
2018/06/19 13:45:42 " handled "
2018/06/19 13:45:42 " Return one of the following:\n    *    return (-n);  chunk had an error\n    *    return (0);  did not recognize\n    *    return (n);  success\n    *\n    * The unknown chunk structure contains the chunk data:\n    * png_byte name[5];\n    * png_byte *data;\n    * png_size_t size;\n    *\n    * Note that libpng has already taken care of the CRC handling.\n    "
2018/06/19 13:45:42 " s  T \n E  R "
2018/06/19 13:45:42 " Found sTER chunk "
2018/06/19 13:45:42 " Error return "
2018/06/19 13:45:42 " Invalid mode "
2018/06/19 13:45:42 " duplicate sTER - give it to libpng "
2018/06/19 13:45:42 " v  p \n A  g \n Did not recognize "
2018/06/19 13:45:42 " Found ImageMagick vpAg chunk "
2018/06/19 13:45:42 " Error return "
2018/06/19 13:45:42 " duplicate vpAg "
2018/06/19 13:45:42 " Notice that this preserves the original chunk order, however chunks\n    * intercepted by the callback will be written *after* chunks passed to\n    * libpng.  This will actually reverse a pair of sTER chunks or a pair of\n    * vpAg chunks, resulting in an error later.  This is not worth worrying\n    * about - the chunks should not be duplicated!\n    "
2018/06/19 13:45:42 " WRITE \n !READ_USER_CHUNKS "
2018/06/19 13:45:42 " END of code to demonstrate user chunk support "
2018/06/19 13:45:42 " START of code to check that libpng has the required text support; this only\n * checks for the write support because if read support is missing the chunk\n * will simply not be reported back to pngtest.\n "
2018/06/19 13:45:42 " In libpng 1.7 this now does an app-error, so stop it: "
2018/06/19 13:45:42 " This is an error "
2018/06/19 13:45:42 " END of code to check that libpng has the required text support "
2018/06/19 13:45:42 " Test one file "
2018/06/19 13:45:42 " \"static\" prevents setjmp corruption "
2018/06/19 13:45:42 " WRITE_FILTER \n !WRITE "
2018/06/19 13:45:42 " !WRITE "
2018/06/19 13:45:42 " Treat png_benign_error() as errors on read "
2018/06/19 13:45:42 " Treat them as errors on write "
2018/06/19 13:45:42 " if strict is not set, then app warnings and errors are treated as\n       * warnings in release builds, but not in unstable builds; this can be\n       * changed with '--relaxed'.\n       "
2018/06/19 13:45:42 " Allow application (pngtest) errors and warnings to pass "
2018/06/19 13:45:42 " Turn off CRC checking while reading "
2018/06/19 13:45:42 " Turn off ADLER32 checking while reading "
2018/06/19 13:45:42 " BENIGN_ERRORS "
2018/06/19 13:45:42 " Preserve all the unknown chunks, if possible.  If this is disabled then,\n    * even if the png_{get,set}_unknown_chunks stuff is enabled, we can't use\n    * libpng to *save* the unknown chunks on read (because we can't switch the\n    * save option on!)\n    *\n    * Notice that if SET_UNKNOWN_CHUNKS is *not* supported read will discard all\n    * unknown chunks and write will write them all.\n    "
2018/06/19 13:45:42 " This is a bit of a hack; there is no obvious way in the callback function\n    * to determine that the chunks before the first IDAT have been read, so\n    * remove the info_ptr (which is only used to determine position relative to\n    * PLTE) here to indicate that we are after the IDAT.\n    "
2018/06/19 13:45:42 " num_passes may not be available below if interlace support is not\n          * provided by libpng for both read and write.\n          "
2018/06/19 13:45:42 "NOT REACHED"
2018/06/19 13:45:42 " Use floating point versions "
2018/06/19 13:45:42 " Floating point \n Fixed point "
2018/06/19 13:45:42 " TIME_RFC1123 "
2018/06/19 13:45:42 " libpng doesn't reject a tRNS chunk with out-of-range samples "
2018/06/19 13:45:42 " Copy the locations from the read_info_ptr.  The automatically\n          * generated locations in write_end_info_ptr are wrong prior to 1.6.0\n          * because they are reset from the write pointer (removed in 1.6.0).\n          "
2018/06/19 13:45:42 " Write the info in two steps so that if we write the 'unknown' chunks here\n    * they go to the correct place.\n    "
2018/06/19 13:45:42 " before PLTE "
2018/06/19 13:45:42 " after PLTE "
2018/06/19 13:45:42 " after IDAT "
2018/06/19 13:45:42 " Test the 'compatibility' setting here, if it is available. "
2018/06/19 13:45:42 " SINGLE_ROWBUF_ALLOC "
2018/06/19 13:45:42 " Both must be defined for libpng to be able to handle the interlace,\n    * otherwise it gets handled below by simply reading and writing the passes\n    * directly.\n    "
2018/06/19 13:45:42 " png_set_interlace_handling not called on either read or write "
2018/06/19 13:45:42 " not using libpng interlace handling "
2018/06/19 13:45:42 " interlaced "
2018/06/19 13:45:42 " not interlaced "
2018/06/19 13:45:42 " !SINGLE_ROWBUF_ALLOC "
2018/06/19 13:45:42 " WRITE "
2018/06/19 13:45:42 " !SINGLE_ROWBUF_ALLOC "
2018/06/19 13:45:42 " TIME_RFC1123 "
2018/06/19 13:45:42 " Copy the locations from the read_info_ptr.  The automatically\n          * generated locations in write_end_info_ptr are wrong prior to 1.6.0\n          * because they are reset from the write pointer (removed in 1.6.0).\n          "
2018/06/19 13:45:42 " Normally one would use Z_DEFAULT_STRATEGY for text compression.\n    * This is here just to make pngtest replicate the results from libpng\n    * versions prior to 1.5.4, and to test this new API.\n    "
2018/06/19 13:45:42 " When the unknown vpAg/sTER chunks are written by pngtest the only way to\n    * do it is to write them *before* calling png_write_end.  When unknown\n    * chunks are written by libpng, however, they are written just before IEND.\n    * There seems to be no way round this, however vpAg/sTER are not expected\n    * after IDAT.\n    "
2018/06/19 13:45:42 " SINGLE_ROWBUF_ALLOC "
2018/06/19 13:45:42 " Summarize any warnings or errors and in 'strict' mode fail the test.\n    * Unsupported chunks can result in warnings, in that case ignore the strict\n    * setting, otherwise fail the test on warnings as well as errors.\n    "
2018/06/19 13:45:42 " We don't really expect to get here because of the setjmp handling\n       * above, but this is safe.\n       "
2018/06/19 13:45:42 " If there is no write support nothing was written! "
2018/06/19 13:45:42 " else nothing was written "
2018/06/19 13:45:42 " else the files will be changed "
2018/06/19 13:45:42 " NOTE: the unsupported_chunks escape is permitted here because\n             * unsupported text chunk compression will result in the compression\n             * mode being changed (to NONE) yet, in the test case, the result\n             * can be exactly the same size!\n             "
2018/06/19 13:45:42 " WRITE && WRITE_FILTER "
2018/06/19 13:45:42 " Input and output filenames "
2018/06/19 13:45:42 " Show the version of libpng used in building the library "
2018/06/19 13:45:42 " Show the version of libpng used in building the application "
2018/06/19 13:45:42 " Do some consistency checking on the memory allocation settings, I'm\n    * not sure this matters, but it is nice to know, the first of these\n    * tests should be impossible because of the way the macros are set\n    * in pngconf.h\n    "
2018/06/19 13:45:42 " I think the following can happen. "
2018/06/19 13:45:42 " TIME_RFC1123 "
2018/06/19 13:45:42 " TIME_RFC1123 "
2018/06/19 13:45:42 " And skip this test "
2018/06/19 13:45:42 " Generate a compiler error if there is an old png.h in the search path. "
2018/06/19 13:45:42 Finished Classifying License "/libpng-1.6.34.tar.gz_extracted/pngtest.c": 71.688025ms
2018/06/19 13:45:42 Couldn't classify license(s)
