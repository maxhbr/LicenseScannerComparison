2018/06/19 19:51:10 Classifying license(s): /adol-c-v2.6.3.tar.gz/configure
2018/06/19 19:51:13 Finished Classifying License "/adol-c-v2.6.3.tar.gz/configure": 2.492902899s
2018/06/19 19:51:13 Couldn't classify license(s)
2018/06/19 19:51:14 Classifying license(s): /adol-c-v2.6.3.tar.gz/update_versions.sh
2018/06/19 19:51:14 detected language: 32
2018/06/19 19:51:14 "!/bin/bash"
2018/06/19 19:51:14 Finished Classifying License "/adol-c-v2.6.3.tar.gz/update_versions.sh": 526.132µs
2018/06/19 19:51:14 Couldn't classify license(s)
2018/06/19 19:51:15 Classifying license(s): /adol-c-v2.6.3.tar.gz/adolc.spec.in
2018/06/19 19:51:15 Finished Classifying License "/adol-c-v2.6.3.tar.gz/adolc.spec.in": 18.866021ms
2018/06/19 19:51:15 Couldn't classify license(s)
2018/06/19 19:51:15 Classifying license(s): /adol-c-v2.6.3.tar.gz/adolclib.pc.in
2018/06/19 19:51:15 Finished Classifying License "/adol-c-v2.6.3.tar.gz/adolclib.pc.in": 6.13832ms
2018/06/19 19:51:15 Couldn't classify license(s)
2018/06/19 19:51:16 Classifying license(s): /adol-c-v2.6.3.tar.gz/LICENSE
2018/06/19 19:51:16 Finished Classifying License "/adol-c-v2.6.3.tar.gz/LICENSE": 222.984257ms
2018/06/19 19:51:17 Classifying license(s): /adol-c-v2.6.3.tar.gz/BUGS
2018/06/19 19:51:17 Finished Classifying License "/adol-c-v2.6.3.tar.gz/BUGS": 1.207611ms
2018/06/19 19:51:17 Couldn't classify license(s)
2018/06/19 19:51:18 Classifying license(s): /adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/installer.sh
2018/06/19 19:51:18 detected language: 32
2018/06/19 19:51:18 "!/bin/bash -x"
2018/06/19 19:51:18 " < 1 ]]; then"
2018/06/19 19:51:18 " > 1 ]]; then "
2018/06/19 19:51:18 Finished Classifying License "/adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/installer.sh": 969.401µs
2018/06/19 19:51:18 Couldn't classify license(s)
2018/06/19 19:51:19 Classifying license(s): /adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/adolc.vcxproj
2018/06/19 19:51:19 Finished Classifying License "/adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/adolc.vcxproj": 50.806144ms
2018/06/19 19:51:19 Couldn't classify license(s)
2018/06/19 19:51:20 Classifying license(s): /adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/Readme_VC++.txt
2018/06/19 19:51:20 Finished Classifying License "/adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/Readme_VC++.txt": 2.25567ms
2018/06/19 19:51:20 Couldn't classify license(s)
2018/06/19 19:51:20 Classifying license(s): /adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/sparse/config.h.in
2018/06/19 19:51:21 Finished Classifying License "/adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/sparse/config.h.in": 20.822965ms
2018/06/19 19:51:21 Couldn't classify license(s)
2018/06/19 19:51:21 Classifying license(s): /adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/sparse/config.h
2018/06/19 19:51:21 detected language: 4
2018/06/19 19:51:21 " ADOL-C/src/config.h.  Generated from config.h.in by configure.  \n ADOL-C/src/config.h.in.  Generated from configure.ac by autoheader.  "
2018/06/19 19:51:21 " ADOL-C adouble late initialization mode \n #undef ADOLC_ADOUBLE_LATEINIT "
2018/06/19 19:51:21 " ADOL-C adouble zeroing mode "
2018/06/19 19:51:21 " defined if adjoinable MPI support is to be compiled in \n #undef ADOLC_AMPI_SUPPORT "
2018/06/19 19:51:21 " ADOL-C debug mode \n #undef ADOLC_DEBUG "
2018/06/19 19:51:21 " ADOL-C hard debug mode \n #undef ADOLC_HARDDEBUG "
2018/06/19 19:51:21 " ADOL-C Patchlevel "
2018/06/19 19:51:21 " ADOL-C Subversion "
2018/06/19 19:51:21 " ADOL-C tape_doc routine computes values "
2018/06/19 19:51:21 " ADOL-C thread save errno mode \n #undef ADOLC_THREADSAVE_ERRNO "
2018/06/19 19:51:21 " Use calloc instead of malloc for memory allocation "
2018/06/19 19:51:21 " ADOL-C Version "
2018/06/19 19:51:21 " Boost pool should not assume multithreading "
2018/06/19 19:51:21 " define if the Boost library is available "
2018/06/19 19:51:21 " Define to 1 if you have the <boost/pool/pool_alloc.hpp> header file. "
2018/06/19 19:51:21 " define if the Boost::System library is available "
2018/06/19 19:51:21 " Define if the compiler provides __builtin_expect "
2018/06/19 19:51:21 " define if the compiler supports basic C++11 syntax "
2018/06/19 19:51:21 " Define to 1 if you have the <dlfcn.h> header file. "
2018/06/19 19:51:21 " Define to 1 if you have the `floor' function. "
2018/06/19 19:51:21 " Define to 1 if you have the `fmax' function. "
2018/06/19 19:51:21 " Define to 1 if you have the `fmin' function. "
2018/06/19 19:51:21 " Define to 1 if you have the `ftime' function. "
2018/06/19 19:51:21 " Define to 1 if you have the <inttypes.h> header file. "
2018/06/19 19:51:21 " Define 1 if ColPack is available "
2018/06/19 19:51:21 " Define to 1 if your system has a GNU libc compatible `malloc' function, and\n   to 0 otherwise. "
2018/06/19 19:51:21 " Define to 1 if you have the <memory.h> header file. "
2018/06/19 19:51:21 " Define to 1 if you have the `pow' function. "
2018/06/19 19:51:21 " Define to 1 if your system has a GNU libc compatible `realloc' function,\n   and to 0 otherwise. "
2018/06/19 19:51:21 " Define to 1 if you have the `sqrt' function. "
2018/06/19 19:51:21 " Define to 1 if stdbool.h conforms to C99. "
2018/06/19 19:51:21 " Define to 1 if you have the <stddef.h> header file. "
2018/06/19 19:51:21 " Define to 1 if you have the <stdint.h> header file. "
2018/06/19 19:51:21 " Define to 1 if you have the <stdio.h> header file. "
2018/06/19 19:51:21 " Define to 1 if you have the <stdlib.h> header file. "
2018/06/19 19:51:21 " Define to 1 if you have the `strchr' function. "
2018/06/19 19:51:21 " Define to 1 if you have the <strings.h> header file. "
2018/06/19 19:51:21 " Define to 1 if you have the <string.h> header file. "
2018/06/19 19:51:21 " Define to 1 if you have the `strtol' function. "
2018/06/19 19:51:21 " Define to 1 if you have the <sys/stat.h> header file. "
2018/06/19 19:51:21 " Define to 1 if you have the <sys/timeb.h> header file. "
2018/06/19 19:51:21 " Define to 1 if you have the <sys/types.h> header file. "
2018/06/19 19:51:21 " Define to 1 if you have the `trunc' function. "
2018/06/19 19:51:21 " Define to 1 if you have the <unistd.h> header file. \n #undef HAVE_UNISTD_H "
2018/06/19 19:51:21 " Define to 1 if the system has the type `_Bool'. "
2018/06/19 19:51:21 " Define to the sub-directory in which libtool stores uninstalled libraries.\n   "
2018/06/19 19:51:21 " Name of package "
2018/06/19 19:51:21 " Define to the address where bug reports for this package should be sent. "
2018/06/19 19:51:21 " Define to the full name of this package. "
2018/06/19 19:51:21 " Define to the full name and version of this package. "
2018/06/19 19:51:21 " Define to the one symbol short name of this package. "
2018/06/19 19:51:21 " Define to the home page for this package. "
2018/06/19 19:51:21 " Define to the version of this package. "
2018/06/19 19:51:21 " The size of `void *', as computed by sizeof. "
2018/06/19 19:51:21 " Define 1 if sparse derivative propagation is to be enabled "
2018/06/19 19:51:21 " Define to 1 if you have the ANSI C header files. "
2018/06/19 19:51:21 " Define to 1 if you can safely include both <sys/time.h> and <time.h>. "
2018/06/19 19:51:21 " Define to 1 if your <sys/time.h> declares `struct tm'. \n #undef TM_IN_SYS_TIME "
2018/06/19 19:51:21 " Version number of package "
2018/06/19 19:51:21 " Define to rpl_calloc if the replacement function should be used. \n #define calloc rpl_calloc "
2018/06/19 19:51:21 " Define to empty if `const' does not conform to ANSI C. \n #undef const "
2018/06/19 19:51:21 " Define to `__inline__' or `__inline' if that's what the C compiler\n   calls it, or to nothing if 'inline' is not supported under any name.  "
2018/06/19 19:51:21 " #undef inline "
2018/06/19 19:51:21 " Define to rpl_malloc if the replacement function should be used. \n #define malloc rpl_malloc "
2018/06/19 19:51:21 " Define to rpl_realloc if the replacement function should be used. \n #define realloc rpl_realloc "
2018/06/19 19:51:21 " Define to `unsigned int' if <sys/types.h> does not define. \n #undef size_t "
2018/06/19 19:51:21 Finished Classifying License "/adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/sparse/config.h": 18.922394ms
2018/06/19 19:51:21 Couldn't classify license(s)
2018/06/19 19:51:22 Classifying license(s): /adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/nosparse/config.h.in
2018/06/19 19:51:22 Finished Classifying License "/adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/nosparse/config.h.in": 21.208196ms
2018/06/19 19:51:22 Couldn't classify license(s)
2018/06/19 19:51:23 Classifying license(s): /adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/nosparse/config.h
2018/06/19 19:51:23 detected language: 4
2018/06/19 19:51:23 " ADOL-C/src/config.h.  Generated from config.h.in by configure.  \n ADOL-C/src/config.h.in.  Generated from configure.ac by autoheader.  "
2018/06/19 19:51:23 " ADOL-C adouble late initialization mode \n #undef ADOLC_ADOUBLE_LATEINIT "
2018/06/19 19:51:23 " ADOL-C adouble zeroing mode "
2018/06/19 19:51:23 " defined if adjoinable MPI support is to be compiled in \n #undef ADOLC_AMPI_SUPPORT "
2018/06/19 19:51:23 " ADOL-C debug mode \n #undef ADOLC_DEBUG "
2018/06/19 19:51:23 " ADOL-C hard debug mode \n #undef ADOLC_HARDDEBUG "
2018/06/19 19:51:23 " ADOL-C Patchlevel "
2018/06/19 19:51:23 " ADOL-C Subversion "
2018/06/19 19:51:23 " ADOL-C tape_doc routine computes values "
2018/06/19 19:51:23 " ADOL-C thread save errno mode \n #undef ADOLC_THREADSAVE_ERRNO "
2018/06/19 19:51:23 " Use calloc instead of malloc for memory allocation "
2018/06/19 19:51:23 " ADOL-C Version "
2018/06/19 19:51:23 " Boost pool should not assume multithreading "
2018/06/19 19:51:23 " define if the Boost library is available "
2018/06/19 19:51:23 " Define to 1 if you have the <boost/pool/pool_alloc.hpp> header file. "
2018/06/19 19:51:23 " define if the Boost::System library is available "
2018/06/19 19:51:23 " Define if the compiler provides __builtin_expect "
2018/06/19 19:51:23 " define if the compiler supports basic C++11 syntax "
2018/06/19 19:51:23 " Define to 1 if you have the <dlfcn.h> header file. "
2018/06/19 19:51:23 " Define to 1 if you have the `floor' function. "
2018/06/19 19:51:23 " Define to 1 if you have the `fmax' function. "
2018/06/19 19:51:23 " Define to 1 if you have the `fmin' function. "
2018/06/19 19:51:23 " Define to 1 if you have the `ftime' function. "
2018/06/19 19:51:23 " Define to 1 if you have the <inttypes.h> header file. "
2018/06/19 19:51:23 " Define 1 if ColPack is available \n #undef HAVE_LIBCOLPACK "
2018/06/19 19:51:23 " Define to 1 if your system has a GNU libc compatible `malloc' function, and\n   to 0 otherwise. "
2018/06/19 19:51:23 " Define to 1 if you have the <memory.h> header file. "
2018/06/19 19:51:23 " Define to 1 if you have the `pow' function. "
2018/06/19 19:51:23 " Define to 1 if your system has a GNU libc compatible `realloc' function,\n   and to 0 otherwise. "
2018/06/19 19:51:23 " Define to 1 if you have the `sqrt' function. "
2018/06/19 19:51:23 " Define to 1 if stdbool.h conforms to C99. "
2018/06/19 19:51:23 " Define to 1 if you have the <stddef.h> header file. "
2018/06/19 19:51:23 " Define to 1 if you have the <stdint.h> header file. "
2018/06/19 19:51:23 " Define to 1 if you have the <stdio.h> header file. "
2018/06/19 19:51:23 " Define to 1 if you have the <stdlib.h> header file. "
2018/06/19 19:51:23 " Define to 1 if you have the `strchr' function. "
2018/06/19 19:51:23 " Define to 1 if you have the <strings.h> header file. "
2018/06/19 19:51:23 " Define to 1 if you have the <string.h> header file. "
2018/06/19 19:51:23 " Define to 1 if you have the `strtol' function. "
2018/06/19 19:51:23 " Define to 1 if you have the <sys/stat.h> header file. "
2018/06/19 19:51:23 " Define to 1 if you have the <sys/timeb.h> header file. "
2018/06/19 19:51:23 " Define to 1 if you have the <sys/types.h> header file. "
2018/06/19 19:51:23 " Define to 1 if you have the `trunc' function. "
2018/06/19 19:51:23 " Define to 1 if you have the <unistd.h> header file. \n #undef HAVE_UNISTD_H "
2018/06/19 19:51:23 " Define to 1 if the system has the type `_Bool'. "
2018/06/19 19:51:23 " Define to the sub-directory in which libtool stores uninstalled libraries.\n   "
2018/06/19 19:51:23 " Name of package "
2018/06/19 19:51:23 " Define to the address where bug reports for this package should be sent. "
2018/06/19 19:51:23 " Define to the full name of this package. "
2018/06/19 19:51:23 " Define to the full name and version of this package. "
2018/06/19 19:51:23 " Define to the one symbol short name of this package. "
2018/06/19 19:51:23 " Define to the home page for this package. "
2018/06/19 19:51:23 " Define to the version of this package. "
2018/06/19 19:51:23 " The size of `void *', as computed by sizeof. "
2018/06/19 19:51:23 " Define 1 if sparse derivative propagation is to be enabled \n #undef SPARSE "
2018/06/19 19:51:23 " Define to 1 if you have the ANSI C header files. "
2018/06/19 19:51:23 " Define to 1 if you can safely include both <sys/time.h> and <time.h>. "
2018/06/19 19:51:23 " Define to 1 if your <sys/time.h> declares `struct tm'. \n #undef TM_IN_SYS_TIME "
2018/06/19 19:51:23 " Version number of package "
2018/06/19 19:51:23 " Define to rpl_calloc if the replacement function should be used. \n #define calloc rpl_calloc "
2018/06/19 19:51:23 " Define to empty if `const' does not conform to ANSI C. \n #undef const "
2018/06/19 19:51:23 " Define to `__inline__' or `__inline' if that's what the C compiler\n   calls it, or to nothing if 'inline' is not supported under any name.  "
2018/06/19 19:51:23 " #undef inline "
2018/06/19 19:51:23 " Define to rpl_malloc if the replacement function should be used. \n #define malloc rpl_malloc "
2018/06/19 19:51:23 " Define to rpl_realloc if the replacement function should be used. \n #define realloc rpl_realloc "
2018/06/19 19:51:23 " Define to `unsigned int' if <sys/types.h> does not define. \n #undef size_t "
2018/06/19 19:51:23 Finished Classifying License "/adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/nosparse/config.h": 18.018777ms
2018/06/19 19:51:23 Couldn't classify license(s)
2018/06/19 19:51:24 Classifying license(s): /adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/adolc.sln
2018/06/19 19:51:24 Finished Classifying License "/adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/adolc.sln": 11.350649ms
2018/06/19 19:51:24 Couldn't classify license(s)
2018/06/19 19:51:24 Classifying license(s): /adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/ColPack.vcxproj
2018/06/19 19:51:25 Finished Classifying License "/adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/ColPack.vcxproj": 34.737175ms
2018/06/19 19:51:25 Couldn't classify license(s)
2018/06/19 19:51:25 Classifying license(s): /adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/x64/sparse/config.h.in
2018/06/19 19:51:25 Finished Classifying License "/adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/x64/sparse/config.h.in": 22.412555ms
2018/06/19 19:51:25 Couldn't classify license(s)
2018/06/19 19:51:26 Classifying license(s): /adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/x64/sparse/config.h
2018/06/19 19:51:26 detected language: 4
2018/06/19 19:51:26 " ADOL-C/src/config.h.  Generated from config.h.in by configure.  \n ADOL-C/src/config.h.in.  Generated from configure.ac by autoheader.  "
2018/06/19 19:51:26 " ADOL-C adouble late initialization mode \n #undef ADOLC_ADOUBLE_LATEINIT "
2018/06/19 19:51:26 " ADOL-C adouble zeroing mode "
2018/06/19 19:51:26 " defined if adjoinable MPI support is to be compiled in \n #undef ADOLC_AMPI_SUPPORT "
2018/06/19 19:51:26 " ADOL-C debug mode \n #undef ADOLC_DEBUG "
2018/06/19 19:51:26 " ADOL-C hard debug mode \n #undef ADOLC_HARDDEBUG "
2018/06/19 19:51:26 " ADOL-C Patchlevel "
2018/06/19 19:51:26 " ADOL-C Subversion "
2018/06/19 19:51:26 " ADOL-C tape_doc routine computes values "
2018/06/19 19:51:26 " ADOL-C thread save errno mode \n #undef ADOLC_THREADSAVE_ERRNO "
2018/06/19 19:51:26 " Use calloc instead of malloc for memory allocation "
2018/06/19 19:51:26 " ADOL-C Version "
2018/06/19 19:51:26 " Boost pool should not assume multithreading "
2018/06/19 19:51:26 " define if the Boost library is available "
2018/06/19 19:51:26 " Define to 1 if you have the <boost/pool/pool_alloc.hpp> header file. "
2018/06/19 19:51:26 " define if the Boost::System library is available "
2018/06/19 19:51:26 " Define if the compiler provides __builtin_expect "
2018/06/19 19:51:26 " define if the compiler supports basic C++11 syntax "
2018/06/19 19:51:26 " Define to 1 if you have the <dlfcn.h> header file. "
2018/06/19 19:51:26 " Define to 1 if you have the `floor' function. "
2018/06/19 19:51:26 " Define to 1 if you have the `fmax' function. "
2018/06/19 19:51:26 " Define to 1 if you have the `fmin' function. "
2018/06/19 19:51:26 " Define to 1 if you have the `ftime' function. "
2018/06/19 19:51:26 " Define to 1 if you have the <inttypes.h> header file. "
2018/06/19 19:51:26 " Define 1 if ColPack is available "
2018/06/19 19:51:26 " Define to 1 if your system has a GNU libc compatible `malloc' function, and\n   to 0 otherwise. "
2018/06/19 19:51:26 " Define to 1 if you have the <memory.h> header file. "
2018/06/19 19:51:26 " Define to 1 if you have the `pow' function. "
2018/06/19 19:51:26 " Define to 1 if your system has a GNU libc compatible `realloc' function,\n   and to 0 otherwise. "
2018/06/19 19:51:26 " Define to 1 if you have the `sqrt' function. "
2018/06/19 19:51:26 " Define to 1 if stdbool.h conforms to C99. "
2018/06/19 19:51:26 " Define to 1 if you have the <stddef.h> header file. "
2018/06/19 19:51:26 " Define to 1 if you have the <stdint.h> header file. "
2018/06/19 19:51:26 " Define to 1 if you have the <stdio.h> header file. "
2018/06/19 19:51:26 " Define to 1 if you have the <stdlib.h> header file. "
2018/06/19 19:51:26 " Define to 1 if you have the `strchr' function. "
2018/06/19 19:51:26 " Define to 1 if you have the <strings.h> header file. "
2018/06/19 19:51:26 " Define to 1 if you have the <string.h> header file. "
2018/06/19 19:51:26 " Define to 1 if you have the `strtol' function. "
2018/06/19 19:51:26 " Define to 1 if you have the <sys/stat.h> header file. "
2018/06/19 19:51:26 " Define to 1 if you have the <sys/timeb.h> header file. "
2018/06/19 19:51:26 " Define to 1 if you have the <sys/types.h> header file. "
2018/06/19 19:51:26 " Define to 1 if you have the `trunc' function. "
2018/06/19 19:51:26 " Define to 1 if you have the <unistd.h> header file. \n #undef HAVE_UNISTD_H "
2018/06/19 19:51:26 " Define to 1 if the system has the type `_Bool'. "
2018/06/19 19:51:26 " Define to the sub-directory in which libtool stores uninstalled libraries.\n   "
2018/06/19 19:51:26 " Name of package "
2018/06/19 19:51:26 " Define to the address where bug reports for this package should be sent. "
2018/06/19 19:51:26 " Define to the full name of this package. "
2018/06/19 19:51:26 " Define to the full name and version of this package. "
2018/06/19 19:51:26 " Define to the one symbol short name of this package. "
2018/06/19 19:51:26 " Define to the home page for this package. "
2018/06/19 19:51:26 " Define to the version of this package. "
2018/06/19 19:51:26 " The size of `void *', as computed by sizeof. "
2018/06/19 19:51:26 " Define 1 if sparse derivative propagation is to be enabled "
2018/06/19 19:51:26 " Define to 1 if you have the ANSI C header files. "
2018/06/19 19:51:26 " Define to 1 if you can safely include both <sys/time.h> and <time.h>. "
2018/06/19 19:51:26 " Define to 1 if your <sys/time.h> declares `struct tm'. \n #undef TM_IN_SYS_TIME "
2018/06/19 19:51:26 " Version number of package "
2018/06/19 19:51:26 " Define to rpl_calloc if the replacement function should be used. \n #define calloc rpl_calloc "
2018/06/19 19:51:26 " Define to empty if `const' does not conform to ANSI C. \n #undef const "
2018/06/19 19:51:26 " Define to `__inline__' or `__inline' if that's what the C compiler\n   calls it, or to nothing if 'inline' is not supported under any name.  "
2018/06/19 19:51:26 " #undef inline "
2018/06/19 19:51:26 " Define to rpl_malloc if the replacement function should be used. \n #define malloc rpl_malloc "
2018/06/19 19:51:26 " Define to rpl_realloc if the replacement function should be used. \n #define realloc rpl_realloc "
2018/06/19 19:51:26 " Define to `unsigned int' if <sys/types.h> does not define. \n #undef size_t "
2018/06/19 19:51:26 Finished Classifying License "/adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/x64/sparse/config.h": 18.492453ms
2018/06/19 19:51:26 Couldn't classify license(s)
2018/06/19 19:51:27 Classifying license(s): /adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/x64/nosparse/config.h.in
2018/06/19 19:51:27 Finished Classifying License "/adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/x64/nosparse/config.h.in": 21.300407ms
2018/06/19 19:51:27 Couldn't classify license(s)
2018/06/19 19:51:28 Classifying license(s): /adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/x64/nosparse/config.h
2018/06/19 19:51:28 detected language: 4
2018/06/19 19:51:28 " ADOL-C/src/config.h.  Generated from config.h.in by configure.  \n ADOL-C/src/config.h.in.  Generated from configure.ac by autoheader.  "
2018/06/19 19:51:28 " ADOL-C adouble late initialization mode \n #undef ADOLC_ADOUBLE_LATEINIT "
2018/06/19 19:51:28 " ADOL-C adouble zeroing mode "
2018/06/19 19:51:28 " defined if adjoinable MPI support is to be compiled in \n #undef ADOLC_AMPI_SUPPORT "
2018/06/19 19:51:28 " ADOL-C debug mode \n #undef ADOLC_DEBUG "
2018/06/19 19:51:28 " ADOL-C hard debug mode \n #undef ADOLC_HARDDEBUG "
2018/06/19 19:51:28 " ADOL-C Patchlevel "
2018/06/19 19:51:28 " ADOL-C Subversion "
2018/06/19 19:51:28 " ADOL-C tape_doc routine computes values "
2018/06/19 19:51:28 " ADOL-C thread save errno mode \n #undef ADOLC_THREADSAVE_ERRNO "
2018/06/19 19:51:28 " Use calloc instead of malloc for memory allocation "
2018/06/19 19:51:28 " ADOL-C Version "
2018/06/19 19:51:28 " Boost pool should not assume multithreading "
2018/06/19 19:51:28 " define if the Boost library is available "
2018/06/19 19:51:28 " Define to 1 if you have the <boost/pool/pool_alloc.hpp> header file. "
2018/06/19 19:51:28 " define if the Boost::System library is available "
2018/06/19 19:51:28 " Define if the compiler provides __builtin_expect "
2018/06/19 19:51:28 " define if the compiler supports basic C++11 syntax "
2018/06/19 19:51:28 " Define to 1 if you have the <dlfcn.h> header file. "
2018/06/19 19:51:28 " Define to 1 if you have the `floor' function. "
2018/06/19 19:51:28 " Define to 1 if you have the `fmax' function. "
2018/06/19 19:51:28 " Define to 1 if you have the `fmin' function. "
2018/06/19 19:51:28 " Define to 1 if you have the `ftime' function. "
2018/06/19 19:51:28 " Define to 1 if you have the <inttypes.h> header file. "
2018/06/19 19:51:28 " Define 1 if ColPack is available \n #undef HAVE_LIBCOLPACK "
2018/06/19 19:51:28 " Define to 1 if your system has a GNU libc compatible `malloc' function, and\n   to 0 otherwise. "
2018/06/19 19:51:28 " Define to 1 if you have the <memory.h> header file. "
2018/06/19 19:51:28 " Define to 1 if you have the `pow' function. "
2018/06/19 19:51:28 " Define to 1 if your system has a GNU libc compatible `realloc' function,\n   and to 0 otherwise. "
2018/06/19 19:51:28 " Define to 1 if you have the `sqrt' function. "
2018/06/19 19:51:28 " Define to 1 if stdbool.h conforms to C99. "
2018/06/19 19:51:28 " Define to 1 if you have the <stddef.h> header file. "
2018/06/19 19:51:28 " Define to 1 if you have the <stdint.h> header file. "
2018/06/19 19:51:28 " Define to 1 if you have the <stdio.h> header file. "
2018/06/19 19:51:28 " Define to 1 if you have the <stdlib.h> header file. "
2018/06/19 19:51:28 " Define to 1 if you have the `strchr' function. "
2018/06/19 19:51:28 " Define to 1 if you have the <strings.h> header file. "
2018/06/19 19:51:28 " Define to 1 if you have the <string.h> header file. "
2018/06/19 19:51:28 " Define to 1 if you have the `strtol' function. "
2018/06/19 19:51:28 " Define to 1 if you have the <sys/stat.h> header file. "
2018/06/19 19:51:28 " Define to 1 if you have the <sys/timeb.h> header file. "
2018/06/19 19:51:28 " Define to 1 if you have the <sys/types.h> header file. "
2018/06/19 19:51:28 " Define to 1 if you have the `trunc' function. "
2018/06/19 19:51:28 " Define to 1 if you have the <unistd.h> header file. \n #undef HAVE_UNISTD_H "
2018/06/19 19:51:28 " Define to 1 if the system has the type `_Bool'. "
2018/06/19 19:51:28 " Define to the sub-directory in which libtool stores uninstalled libraries.\n   "
2018/06/19 19:51:28 " Name of package "
2018/06/19 19:51:28 " Define to the address where bug reports for this package should be sent. "
2018/06/19 19:51:28 " Define to the full name of this package. "
2018/06/19 19:51:28 " Define to the full name and version of this package. "
2018/06/19 19:51:28 " Define to the one symbol short name of this package. "
2018/06/19 19:51:28 " Define to the home page for this package. "
2018/06/19 19:51:28 " Define to the version of this package. "
2018/06/19 19:51:28 " The size of `void *', as computed by sizeof. "
2018/06/19 19:51:28 " Define 1 if sparse derivative propagation is to be enabled \n #undef SPARSE "
2018/06/19 19:51:28 " Define to 1 if you have the ANSI C header files. "
2018/06/19 19:51:28 " Define to 1 if you can safely include both <sys/time.h> and <time.h>. "
2018/06/19 19:51:28 " Define to 1 if your <sys/time.h> declares `struct tm'. \n #undef TM_IN_SYS_TIME "
2018/06/19 19:51:28 " Version number of package "
2018/06/19 19:51:28 " Define to rpl_calloc if the replacement function should be used. \n #define calloc rpl_calloc "
2018/06/19 19:51:28 " Define to empty if `const' does not conform to ANSI C. \n #undef const "
2018/06/19 19:51:28 " Define to `__inline__' or `__inline' if that's what the C compiler\n   calls it, or to nothing if 'inline' is not supported under any name.  "
2018/06/19 19:51:28 " #undef inline "
2018/06/19 19:51:28 " Define to rpl_malloc if the replacement function should be used. \n #define malloc rpl_malloc "
2018/06/19 19:51:28 " Define to rpl_realloc if the replacement function should be used. \n #define realloc rpl_realloc "
2018/06/19 19:51:28 " Define to `unsigned int' if <sys/types.h> does not define. \n #undef size_t "
2018/06/19 19:51:28 Finished Classifying License "/adol-c-v2.6.3.tar.gz/MSVisualStudio/v14/x64/nosparse/config.h": 18.6791ms
2018/06/19 19:51:28 Couldn't classify license(s)
2018/06/19 19:51:28 Classifying license(s): /adol-c-v2.6.3.tar.gz/INSTALL
2018/06/19 19:51:29 Finished Classifying License "/adol-c-v2.6.3.tar.gz/INSTALL": 41.763575ms
2018/06/19 19:51:29 Couldn't classify license(s)
2018/06/19 19:51:29 Classifying license(s): /adol-c-v2.6.3.tar.gz/Makefile.am
2018/06/19 19:51:29 Finished Classifying License "/adol-c-v2.6.3.tar.gz/Makefile.am": 10.633844ms
2018/06/19 19:51:29 Couldn't classify license(s)
2018/06/19 19:51:30 Classifying license(s): /adol-c-v2.6.3.tar.gz/AUTHORS
2018/06/19 19:51:30 Finished Classifying License "/adol-c-v2.6.3.tar.gz/AUTHORS": 1.960754ms
2018/06/19 19:51:30 Couldn't classify license(s)
2018/06/19 19:51:31 Classifying license(s): /adol-c-v2.6.3.tar.gz/configure.ac
2018/06/19 19:51:31 Finished Classifying License "/adol-c-v2.6.3.tar.gz/configure.ac": 68.174174ms
2018/06/19 19:51:31 Couldn't classify license(s)
2018/06/19 19:51:32 Classifying license(s): /adol-c-v2.6.3.tar.gz/autoconf/ltsugar.m4
2018/06/19 19:51:32 Finished Classifying License "/adol-c-v2.6.3.tar.gz/autoconf/ltsugar.m4": 14.969847ms
2018/06/19 19:51:32 Couldn't classify license(s)
2018/06/19 19:51:33 Classifying license(s): /adol-c-v2.6.3.tar.gz/autoconf/install-sh
2018/06/19 19:51:33 Finished Classifying License "/adol-c-v2.6.3.tar.gz/autoconf/install-sh": 42.107851ms
2018/06/19 19:51:33 Classifying license(s): /adol-c-v2.6.3.tar.gz/autoconf/libtool.m4
2018/06/19 19:51:34 Finished Classifying License "/adol-c-v2.6.3.tar.gz/autoconf/libtool.m4": 1.073431649s
2018/06/19 19:51:34 Couldn't classify license(s)
2018/06/19 19:51:35 Classifying license(s): /adol-c-v2.6.3.tar.gz/autoconf/colpack.m4
2018/06/19 19:51:35 Finished Classifying License "/adol-c-v2.6.3.tar.gz/autoconf/colpack.m4": 3.061505ms
2018/06/19 19:51:35 Couldn't classify license(s)
2018/06/19 19:51:36 Classifying license(s): /adol-c-v2.6.3.tar.gz/autoconf/mpi.m4
2018/06/19 19:51:36 Finished Classifying License "/adol-c-v2.6.3.tar.gz/autoconf/mpi.m4": 3.715744ms
2018/06/19 19:51:36 Couldn't classify license(s)
2018/06/19 19:51:37 Classifying license(s): /adol-c-v2.6.3.tar.gz/autoconf/config.sub
2018/06/19 19:51:37 Finished Classifying License "/adol-c-v2.6.3.tar.gz/autoconf/config.sub": 118.333535ms
2018/06/19 19:51:38 Classifying license(s): /adol-c-v2.6.3.tar.gz/autoconf/missing
2018/06/19 19:51:38 Finished Classifying License "/adol-c-v2.6.3.tar.gz/autoconf/missing": 24.822989ms
2018/06/19 19:51:38 Classifying license(s): /adol-c-v2.6.3.tar.gz/autoconf/stdcxx_11.m4
2018/06/19 19:51:39 Finished Classifying License "/adol-c-v2.6.3.tar.gz/autoconf/stdcxx_11.m4": 17.631284ms
2018/06/19 19:51:39 Couldn't classify license(s)
2018/06/19 19:51:39 Classifying license(s): /adol-c-v2.6.3.tar.gz/autoconf/ampi.m4
2018/06/19 19:51:39 Finished Classifying License "/adol-c-v2.6.3.tar.gz/autoconf/ampi.m4": 2.143435ms
2018/06/19 19:51:39 Couldn't classify license(s)
2018/06/19 19:51:40 Classifying license(s): /adol-c-v2.6.3.tar.gz/autoconf/config.guess
2018/06/19 19:51:40 Finished Classifying License "/adol-c-v2.6.3.tar.gz/autoconf/config.guess": 162.918071ms
2018/06/19 19:51:41 Classifying license(s): /adol-c-v2.6.3.tar.gz/autoconf/ltversion.m4
2018/06/19 19:51:41 Finished Classifying License "/adol-c-v2.6.3.tar.gz/autoconf/ltversion.m4": 6.968342ms
2018/06/19 19:51:41 Couldn't classify license(s)
2018/06/19 19:51:42 Classifying license(s): /adol-c-v2.6.3.tar.gz/autoconf/ax_boost_base.m4
2018/06/19 19:51:42 Finished Classifying License "/adol-c-v2.6.3.tar.gz/autoconf/ax_boost_base.m4": 32.234238ms
2018/06/19 19:51:42 Couldn't classify license(s)
2018/06/19 19:51:43 Classifying license(s): /adol-c-v2.6.3.tar.gz/autoconf/acx_builtin.m4
2018/06/19 19:51:43 Finished Classifying License "/adol-c-v2.6.3.tar.gz/autoconf/acx_builtin.m4": 1.148659ms
2018/06/19 19:51:43 Couldn't classify license(s)
2018/06/19 19:51:43 Classifying license(s): /adol-c-v2.6.3.tar.gz/autoconf/ltmain.sh
2018/06/19 19:51:43 detected language: 32
2018/06/19 19:51:43 " libtool (GNU libtool) 2.4.2\n Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996"
2018/06/19 19:51:43 " Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006,\n 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
2018/06/19 19:51:43 " GNU Libtool is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2 of the License, or\n (at your option) any later version.\n\n As a special exception to the GNU General Public License,\n if you distribute this file as part of a program or library that\n is built using GNU Libtool, you may include this file under the\n same distribution terms that you use for the rest of that program.\n\n GNU Libtool is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with GNU Libtool; see the file COPYING.  If not, a copy\n can be downloaded from http://www.gnu.org/licenses/gpl.html,\n or obtained by writing to the Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA."
2018/06/19 19:51:43 " Usage: $progname [OPTION]... [MODE-ARG]...\n\n Provide generalized library-building support services.\n\n       --config             show all configuration variables\n       --debug              enable verbose shell tracing\n   -n, --dry-run            display commands without modifying any files\n       --features           display basic configuration information and exit\n       --mode=MODE          use operation mode MODE\n       --preserve-dup-deps  don't remove duplicate dependency libraries\n       --quiet, --silent    don't print informational messages\n       --no-quiet, --no-silent\n                            print informational messages (default)\n       --no-warn            don't display warning messages\n       --tag=TAG            use configuration variables from tag TAG\n   -v, --verbose            print more informational messages than default\n       --no-verbose         don't print the extra informational messages\n       --version            print version information\n   -h, --help, --help-all   print short, long, or detailed help message\n\n MODE must be one of the following:\n\n         clean              remove files from the build directory\n         compile            compile a source file into a libtool object\n         execute            automatically set library path, then run a program\n         finish             complete the installation of libtool libraries\n         install            install libraries or executables\n         link               create a library or an executable\n         uninstall          remove libraries from an installed directory\n\n MODE-ARGS vary depending on the MODE.  When passed as first option,\n `--mode=MODE' may be abbreviated as `MODE' or a unique abbreviation of that.\n Try `$progname --help --mode=MODE' for a more detailed description of MODE.\n\n When reporting a bug, please describe a test case to reproduce it and\n include the following information:\n\n         host-triplet:\t$host\n         shell:\t\t$SHELL\n         compiler:\t\t$LTCC\n         compiler flags:\t\t$LTCFLAGS\n         linker:\t\t$LD (gnu? $with_gnu_ld)\n         $progname:\t(GNU libtool) 2.4.2\n         automake:\t$automake_version\n         autoconf:\t$autoconf_version\n\n Report bugs to <bug-libtool@gnu.org>.\n GNU libtool home page: <http://www.gnu.org/software/libtool/>.\n General help using GNU software: <http://www.gnu.org/gethelp/>."
2018/06/19 19:51:43 " Be Bourne compatible"
2018/06/19 19:51:43 " Zsh 3.x and 4.x performs word splitting on ${1+\"$@\"}, which\n is contrary to our usage.  Disable this feature."
2018/06/19 19:51:43 " for Tru64\n for MKS sh"
2018/06/19 19:51:43 " A function that is used when there is no print builtin or printf."
2018/06/19 19:51:43 " NLS nuisances: We save the old values to restore during execute mode."
2018/06/19 19:51:43 " Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n is ksh but when the shell is invoked as \"sh\" and the current value of\n the _XPG environment variable is not equal to 1 (one), the special\n positional parameter $0, within a function call, is the name of the\n function."
2018/06/19 19:51:43 " Global variables:"
2018/06/19 19:51:43 " $? = 63 is used to indicate version mismatch to missing.\n $? = 77 is used to indicate a skipped test to automake."
2018/06/19 19:51:43 " Make sure IFS has a sensible default"
2018/06/19 19:51:43 " func_dirname file append nondir_replacement\n Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n otherwise set result to NONDIR_REPLACEMENT."
2018/06/19 19:51:43 " func_dirname may be replaced by extended shell implementation"
2018/06/19 19:51:43 " func_basename file"
2018/06/19 19:51:43 " func_basename may be replaced by extended shell implementation"
2018/06/19 19:51:43 " func_dirname_and_basename file append nondir_replacement\n perform func_basename and func_dirname in a single function\n call:\n   dirname:  Compute the dirname of FILE.  If nonempty,\n             add APPEND to the result, otherwise set result\n             to NONDIR_REPLACEMENT.\n             value returned in \"$func_dirname_result\"\n   basename: Compute filename of FILE.\n             value retuned in \"$func_basename_result\"\n Implementation must be kept synchronized with func_dirname\n and func_basename. For efficiency, we do not delegate to\n those functions but instead duplicate the functionality here."
2018/06/19 19:51:43 " Extract subdirectory from the argument."
2018/06/19 19:51:43 " func_dirname_and_basename may be replaced by extended shell implementation"
2018/06/19 19:51:43 " func_stripname prefix suffix name\n strip PREFIX and SUFFIX off of NAME.\n PREFIX and SUFFIX must not contain globbing or regex special\n characters, hashes, percent signs, but SUFFIX may contain a leading\n dot (in which case that matches only a dot).\n func_strip_suffix prefix name"
2018/06/19 19:51:43 " func_stripname may be replaced by extended shell implementation"
2018/06/19 19:51:43 " These SED scripts presuppose an absolute path with a trailing slash."
2018/06/19 19:51:43 " func_normal_abspath PATH\n Remove doubled-up and trailing slashes, \".\" path components,\n and cancel out any \"..\" path components in PATH after making\n it an absolute path.\n             value returned in \"$func_normal_abspath_result\""
2018/06/19 19:51:43 " Start from root dir and reassemble the path."
2018/06/19 19:51:43 " Empty path, that just means $cwd."
2018/06/19 19:51:43 " The next three entries are used to spot a run of precisely\n two leading slashes without using negated character classes;\n we take advantage of case's first-match behaviour."
2018/06/19 19:51:43 " Unusual form of absolute path, do nothing."
2018/06/19 19:51:43 " Not necessarily an ordinary path; POSIX reserves leading '//'\n and for example Cygwin uses it to access remote file shares\n over CIFS/SMB, so we conserve a leading double slash if found."
2018/06/19 19:51:43 " Absolute path, do nothing."
2018/06/19 19:51:43 " Relative path, prepend $cwd."
2018/06/19 19:51:43 " Cancel out all the simple stuff to save iterations.  We also want\n the path to end with a slash for ease of parsing, so make sure\n there is one (and only one) here."
2018/06/19 19:51:43 " Processed it all yet?"
2018/06/19 19:51:43 " If we ascended to the root using \"..\" the result may be empty now."
2018/06/19 19:51:43 " Figure out what to do with it"
2018/06/19 19:51:43 " Trailing empty path component, ignore it."
2018/06/19 19:51:43 " Parent dir; strip last assembled component from result."
2018/06/19 19:51:43 " Actual path component, append it."
2018/06/19 19:51:43 " Restore leading double-slash if one was found on entry."
2018/06/19 19:51:43 " func_relative_path SRCDIR DSTDIR\n generates a relative path from SRCDIR to DSTDIR, with a trailing\n slash if non-empty, suitable for immediately appending a filename\n without needing to append a separator.\n             value returned in \"$func_relative_path_result\""
2018/06/19 19:51:43 " Ascend the tree starting from libdir"
2018/06/19 19:51:43 " check if we have found a prefix of bindir"
2018/06/19 19:51:43 " found an exact match"
2018/06/19 19:51:43 " found a matching prefix"
2018/06/19 19:51:43 " Have to descend all the way to the root!"
2018/06/19 19:51:43 " Now calculate path; take care to avoid doubling-up slashes."
2018/06/19 19:51:43 " Normalisation. If bindir is libdir, return empty string,\n else relative path ending with a slash; either way, target\n file name can be directly appended."
2018/06/19 19:51:43 " The name of this program:"
2018/06/19 19:51:43 " Make sure we have an absolute path for reexecution:"
2018/06/19 19:51:43 " Sed substitution that helps us do robust quoting.  It backslashifies\n metacharacters that are still active within double-quoted strings."
2018/06/19 19:51:43 " libtool processes, and avoids race conditions if possible.  If\n given, STRING is the basename for that directory."
2018/06/19 19:51:43 " Return a directory name, but don't create it in dry-run mode"
2018/06/19 19:51:43 " If mktemp works, use that first and foremost"
2018/06/19 19:51:43 " Failing that, at least try and use $RANDOM to avoid a race"
2018/06/19 19:51:43 " If we're not in dry-run mode, bomb out on failure"
2018/06/19 19:51:43 " func_quote_for_eval arg\n Aesthetically quote ARG to be evaled later.\n This function returns two values: FUNC_QUOTE_FOR_EVAL_RESULT\n is double-quoted, suitable for a subsequent eval, whereas\n FUNC_QUOTE_FOR_EVAL_UNQUOTED_RESULT has merely all characters\n which are still active within double quotes backslashified."
2018/06/19 19:51:43 " func_quote_for_expand arg\n Aesthetically quote ARG to be evaled later; same as above,\n but do not quote variable references."
2018/06/19 19:51:43 " func_show_eval cmd [fail_exp]\n Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is\n not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n is given, then evaluate it."
2018/06/19 19:51:43 " func_show_eval_locale cmd [fail_exp]\n Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is\n not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n is given, then evaluate it.  Use the saved locale for evaluation."
2018/06/19 19:51:43 " func_tr_sh\n Turn $1 into a string suitable for a shell variable name.\n Result is stored in $func_tr_sh_result.  All characters\n not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n if $1 begins with a digit, a '_' is prepended as well."
2018/06/19 19:51:43 " func_version\n Echo version message to standard output and exit."
2018/06/19 19:51:43 " func_usage\n Echo short help message to standard output and exit."
2018/06/19 19:51:43 " func_help [NOEXIT]\n Echo long help message to standard output and exit,\n unless 'noexit' is passed as argument."
2018/06/19 19:51:43 " ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\""
2018/06/19 19:51:43 " Validate tagname."
2018/06/19 19:51:43 " Don't test for the \"default\" C tag, as we know it's\n there but not specially marked."
2018/06/19 19:51:43 " Evaluate the configuration.  Be careful to quote the path\n and the sed script, to avoid splitting on whitespace, but\n also don't use non-portable quotes within backquotes within\n quotes we have to do it in 2 steps:"
2018/06/19 19:51:43 " func_check_version_match\n Ensure that we are using m4 macros, and libtool script from the same\n release of libtool."
2018/06/19 19:51:43 " Shorthand for --mode=foo, only valid as the first argument"
2018/06/19 19:51:43 " Option defaults:"
2018/06/19 19:51:43 " Parse options once, thoroughly.  This comes as soon as possible in the\n script to make things like `--version' happen as quickly as we can."
2018/06/19 19:51:43 " this just eases exit handling\n -gt 0; do"
2018/06/19 19:51:43 " = 0 && func_missing_arg $opt && break"
2018/06/19 19:51:43 " Valid mode arguments:"
2018/06/19 19:51:43 " Catch anything else as an error"
2018/06/19 19:51:43 " = 0 && func_missing_arg $opt && break"
2018/06/19 19:51:43 " Separate optargs to long options:"
2018/06/19 19:51:43 " Separate non-argument short options:"
2018/06/19 19:51:43 " Validate options:"
2018/06/19 19:51:43 " save first non-option argument"
2018/06/19 19:51:43 " preserve --debug"
2018/06/19 19:51:43 " don't eliminate duplications in $postdeps and $predeps"
2018/06/19 19:51:43 " Sanity checks first:"
2018/06/19 19:51:43 " Darwin sucks"
2018/06/19 19:51:43 " Generated by .*$PACKAGE\" > /dev/null 2>&1"
2018/06/19 19:51:43 " func_lalib_unsafe_p file\n True iff FILE is a libtool `.la' library or `.lo' object file.\n This function implements the same check as func_lalib_p without\n resorting to external programs.  To this end, it redirects stdin and\n closes it afterwards, without saving the original file descriptor.\n As a safety measure, use it only where a negative result would be\n fatal anyway.  Works if `file' does not exist."
2018/06/19 19:51:43 "\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;"
2018/06/19 19:51:43 " func_ltwrapper_script_p file\n True iff FILE is a libtool wrapper script\n This function is only a basic sanity check; it will hardly flush out\n determined imposters."
2018/06/19 19:51:43 " func_ltwrapper_executable_p file\n True iff FILE is a libtool wrapper executable\n This function is only a basic sanity check; it will hardly flush out\n determined imposters."
2018/06/19 19:51:43 " func_ltwrapper_scriptname file\n Assumes file is an ltwrapper_executable\n uses $file to determine the appropriate filename for a\n temporary ltwrapper_script."
2018/06/19 19:51:43 " func_ltwrapper_p file\n True iff FILE is a libtool wrapper script or wrapper executable\n This function is only a basic sanity check; it will hardly flush out\n determined imposters."
2018/06/19 19:51:43 " func_execute_cmds commands fail_cmd\n Execute tilde-delimited COMMANDS.\n If FAIL_CMD is given, eval that upon failure.\n FAIL_CMD may read-access the current command in variable CMD!"
2018/06/19 19:51:43 " ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n Evaluate the configuration."
2018/06/19 19:51:43 " Double-quote args containing other shell metacharacters."
2018/06/19 19:51:43 " The compiler in the base compile command matches\n the one in the tagged configuration.\n Assume this is the tagged configuration we want."
2018/06/19 19:51:43 " If $tagname still isn't set, then no tagged configuration\n was found and let the user know that the \"--tag\" command\n line option must be used."
2018/06/19 19:51:43 "\telse\n\t  func_verbose \"using $tagname tagged configuration\""
2018/06/19 19:51:43 " func_write_libtool_object output_name pic_name nonpic_name\n Create a libtool object file (analogous to a \".la\" file),\n but don't create it if we're doing a dry run."
2018/06/19 19:51:43 "\n ARG is the $build file name to be converted to w32 format.\n Result is available in $func_convert_core_file_wine_to_w32_result, and will\n be empty on error (or when ARG is empty)"
2018/06/19 19:51:43 " Unfortunately, winepath does not exit with a non-zero error code, so we\n are forced to check the contents of stdout. On the other hand, if the\n command is not found, the shell will set an exit code of 127 and print\n *an error message* to stdout. So we must check for both error code of\n zero AND non-empty stdout, which explains the odd construction:"
2018/06/19 19:51:43 " end: func_convert_core_file_wine_to_w32"
2018/06/19 19:51:43 " func_convert_core_path_wine_to_w32 ARG\n Helper function used by path conversion functions when $build is *nix, and\n $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n configured wine environment available, with the winepath program in $build's\n $PATH. Assumes ARG has no leading or trailing path separator characters.\n\n ARG is path to be converted from $build format to win32.\n Result is available in $func_convert_core_path_wine_to_w32_result.\n Unconvertible file (directory) names in ARG are skipped; if no directory names\n are convertible, then the result may be empty."
2018/06/19 19:51:43 " unfortunately, winepath doesn't convert paths, only file names"
2018/06/19 19:51:43 " end: func_convert_core_path_wine_to_w32"
2018/06/19 19:51:43 " func_cygpath ARGS...\n Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n (2), returns the Cygwin file name or path in func_cygpath_result (input\n file name or path is assumed to be in w32 format, as previously converted\n from $build's *nix or MSYS format). In case (3), returns the w32 file name\n or path in func_cygpath_result (input file name or path is assumed to be in\n Cygwin format). Returns an empty string on error.\n\n ARGS are passed to cygpath, with the last one being the file name or path to\n be converted.\n\n Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n environment variable; do not put it in $PATH."
2018/06/19 19:51:43 " on failure, ensure result is empty"
2018/06/19 19:51:43 "end: func_cygpath"
2018/06/19 19:51:43 " func_convert_core_msys_to_w32 ARG\n Convert file name or path ARG from MSYS format to w32 format.  Return\n result in func_convert_core_msys_to_w32_result."
2018/06/19 19:51:43 " awkward: cmd appends spaces to result"
2018/06/19 19:51:43 "end: func_convert_core_msys_to_w32"
2018/06/19 19:51:43 " func_convert_file_check ARG1 ARG2\n Verify that ARG1 (a file name in $build format) was converted to $host\n format in ARG2. Otherwise, emit an error message, but continue (resetting\n func_to_host_file_result to ARG1)."
2018/06/19 19:51:43 " Fallback:"
2018/06/19 19:51:43 " end func_convert_file_check"
2018/06/19 19:51:43 " func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n Verify that FROM_PATH (a path in $build format) was converted to $host\n format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n func_to_host_file_result to a simplistic fallback value (see below)."
2018/06/19 19:51:43 " Fallback.  This is a deliberately simplistic \"conversion\" and\n should not be \"improved\".  See libtool.info."
2018/06/19 19:51:43 " end func_convert_path_check"
2018/06/19 19:51:43 " func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n and appending REPL if ORIG matches BACKPAT."
2018/06/19 19:51:43 " end func_convert_path_front_back_pathsep"
2018/06/19 19:51:43 "#################################################\n $build to $host FILE NAME CONVERSION FUNCTIONS #\n#################################################\n invoked via `$to_host_file_cmd ARG'\n\n In each case, ARG is the path to be converted from $build to $host format.\n Result will be available in $func_to_host_file_result."
2018/06/19 19:51:43 " func_to_host_file ARG\n Converts the file name ARG from $build format to $host format. Return result\n in func_to_host_file_result."
2018/06/19 19:51:43 " end func_to_host_file"
2018/06/19 19:51:43 " func_to_tool_file ARG LAZY\n converts the file name ARG from $build format to toolchain format. Return\n result in func_to_tool_file_result.  If the conversion in use is listed\n in (the comma separated) LAZY, no conversion takes place."
2018/06/19 19:51:43 " end func_to_tool_file"
2018/06/19 19:51:43 " func_convert_file_noop ARG\n Copy ARG to func_to_host_file_result."
2018/06/19 19:51:43 " end func_convert_file_noop"
2018/06/19 19:51:43 " func_convert_file_msys_to_w32 ARG\n Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n conversion to w32 is not available inside the cwrapper.  Returns result in\n func_to_host_file_result."
2018/06/19 19:51:43 " end func_convert_file_msys_to_w32"
2018/06/19 19:51:43 " func_convert_file_cygwin_to_w32 ARG\n Convert file name ARG from Cygwin to w32 format.  Returns result in\n func_to_host_file_result."
2018/06/19 19:51:43 " because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n LT_CYGPATH in this case."
2018/06/19 19:51:43 " end func_convert_file_cygwin_to_w32"
2018/06/19 19:51:43 " func_convert_file_nix_to_w32 ARG\n Convert file name ARG from *nix to w32 format.  Requires a wine environment\n and a working winepath. Returns result in func_to_host_file_result."
2018/06/19 19:51:43 " end func_convert_file_nix_to_w32"
2018/06/19 19:51:43 " func_convert_file_msys_to_cygwin ARG\n Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n Returns result in func_to_host_file_result."
2018/06/19 19:51:43 " end func_convert_file_msys_to_cygwin"
2018/06/19 19:51:43 " func_convert_file_nix_to_cygwin ARG\n Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n in func_to_host_file_result."
2018/06/19 19:51:43 " convert from *nix to w32, then use cygpath to convert from w32 to cygwin."
2018/06/19 19:51:43 " end func_convert_file_nix_to_cygwin"
2018/06/19 19:51:43 "############################################\n $build to $host PATH CONVERSION FUNCTIONS #\n############################################\n invoked via `$to_host_path_cmd ARG'\n\n In each case, ARG is the path to be converted from $build to $host format.\n The result will be available in $func_to_host_path_result.\n\n Path separators are also converted from $build format to $host format.  If\n ARG begins or ends with a path separator character, it is preserved (but\n converted to $host format) on output.\n\n All path conversion functions are named using the following convention:\n   file name conversion function    : func_convert_file_X_to_Y ()\n   path conversion function         : func_convert_path_X_to_Y ()\n where, for any given $build/$host combination the 'X_to_Y' value is the\n same.  If conversion functions are added for new $build/$host combinations,\n the two new functions must follow this pattern, or func_init_to_host_path_cmd\n will break."
2018/06/19 19:51:43 " func_init_to_host_path_cmd\n Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n appropriate value, based on the value of $to_host_file_cmd."
2018/06/19 19:51:43 " func_to_host_path ARG\n Converts the path ARG from $build format to $host format. Return result\n in func_to_host_path_result."
2018/06/19 19:51:43 " end func_to_host_path"
2018/06/19 19:51:43 " func_convert_path_noop ARG\n Copy ARG to func_to_host_path_result."
2018/06/19 19:51:43 " end func_convert_path_noop"
2018/06/19 19:51:43 " func_convert_path_msys_to_w32 ARG\n Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n conversion to w32 is not available inside the cwrapper.  Returns result in\n func_to_host_path_result."
2018/06/19 19:51:43 " Remove leading and trailing path separator characters from ARG.  MSYS\n behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n and winepath ignores them completely."
2018/06/19 19:51:43 " end func_convert_path_msys_to_w32"
2018/06/19 19:51:43 " func_convert_path_cygwin_to_w32 ARG\n Convert path ARG from Cygwin to w32 format.  Returns result in\n func_to_host_file_result."
2018/06/19 19:51:43 " See func_convert_path_msys_to_w32:"
2018/06/19 19:51:43 " end func_convert_path_cygwin_to_w32"
2018/06/19 19:51:43 " func_convert_path_nix_to_w32 ARG\n Convert path ARG from *nix to w32 format.  Requires a wine environment and\n a working winepath.  Returns result in func_to_host_file_result."
2018/06/19 19:51:43 " See func_convert_path_msys_to_w32:"
2018/06/19 19:51:43 " end func_convert_path_nix_to_w32"
2018/06/19 19:51:43 " func_convert_path_msys_to_cygwin ARG\n Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n Returns result in func_to_host_file_result."
2018/06/19 19:51:43 " See func_convert_path_msys_to_w32:"
2018/06/19 19:51:43 " end func_convert_path_msys_to_cygwin"
2018/06/19 19:51:43 " func_convert_path_nix_to_cygwin ARG\n Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n func_to_host_file_result."
2018/06/19 19:51:43 " Remove leading and trailing path separator characters from\n ARG. msys behavior is inconsistent here, cygpath turns them\n into '.;' and ';.', and winepath ignores them completely."
2018/06/19 19:51:43 " end func_convert_path_nix_to_cygwin"
2018/06/19 19:51:43 " func_mode_compile arg..."
2018/06/19 19:51:43 " Get the compilation command and the source file."
2018/06/19 19:51:43 "  always keep a non-empty value in \"srcfile\""
2018/06/19 19:51:43 " do not \"continue\".  Instead, add this to base_compile"
2018/06/19 19:51:43 " Accept any command-line options."
2018/06/19 19:51:43 "  the next one goes into the \"base_compile\" arg list\n  The current \"srcfile\" will either be retained or\n  replaced later.  I would guess that would be a bug."
2018/06/19 19:51:43 " Add the arguments to base_compile."
2018/06/19 19:51:43 " Accept the current argument as the source file.\n The previous \"srcfile\" becomes the current argument.\n"
2018/06/19 19:51:43 "  case $arg"
2018/06/19 19:51:43 "  case $arg_mode"
2018/06/19 19:51:43 " Aesthetically quote the previous argument."
2018/06/19 19:51:43 " for arg"
2018/06/19 19:51:43 " Get the name of the library object."
2018/06/19 19:51:43 " Recognize several different file suffixes.\n If the user specifies -o file.o, it is replaced with file.lo"
2018/06/19 19:51:43 " Delete any leftover library objects."
2018/06/19 19:51:43 " On Cygwin there's no \"real\" PIC flag so we must build both object types"
2018/06/19 19:51:43 " non-PIC code in shared libraries is not supported"
2018/06/19 19:51:43 " Calculate the filename of the output object if compiler does\n not support -o with -c"
2018/06/19 19:51:43 " Lock this critical section if it is needed\n We use this script file to make the link, it avoids creating a new file"
2018/06/19 19:51:43 " Only build a PIC object if we are building libtool libraries."
2018/06/19 19:51:43 " Without this assignment, base_compile gets emptied."
2018/06/19 19:51:43 " Don't build PIC code"
2018/06/19 19:51:43 " Place PIC objects in $objdir"
2018/06/19 19:51:43 " Just move the object if needed, then go on to compile the next one"
2018/06/19 19:51:43 " Allow error messages only from the first compilation."
2018/06/19 19:51:43 " Only build a position-dependent object if we build old libraries."
2018/06/19 19:51:43 " Don't build PIC code"
2018/06/19 19:51:43 " Suppress compiler output if we already did a PIC compilation."
2018/06/19 19:51:43 " Just move the object if needed"
2018/06/19 19:51:43 " Unlock the critical section if it was locked"
2018/06/19 19:51:43 " We need to display help for each of the modes."
2018/06/19 19:51:43 " Generic help is extracted from the usage comments\n at the start of this file."
2018/06/19 19:51:43 " Now that we've collected a possible --mode arg, show help if necessary"
2018/06/19 19:51:43 " func_mode_execute arg..."
2018/06/19 19:51:43 " The first argument is the command name."
2018/06/19 19:51:43 " Handle -dlopen flags immediately."
2018/06/19 19:51:43 " Check to see that this really is a libtool archive."
2018/06/19 19:51:43 " Read the libtool library."
2018/06/19 19:51:43 " Skip this library if it cannot be dlopened."
2018/06/19 19:51:43 " Warn if it was a shared library."
2018/06/19 19:51:43 " Just add the directory containing the .lo file."
2018/06/19 19:51:43 " Get the absolute pathname."
2018/06/19 19:51:43 " Now add the directory to shlibpath_var."
2018/06/19 19:51:43 " This variable tells wrapper scripts just to set shlibpath_var\n rather than running their programs."
2018/06/19 19:51:43 " Check if any of the arguments is a wrapper script."
2018/06/19 19:51:43 " Do a test to see if this is really a libtool program."
2018/06/19 19:51:43 " Transform arg to wrapped name."
2018/06/19 19:51:43 " Transform arg to wrapped name."
2018/06/19 19:51:43 " Quote arguments (to preserve shell metacharacters)."
2018/06/19 19:51:43 " Export the shlibpath_var."
2018/06/19 19:51:43 " Restore saved environment variables"
2018/06/19 19:51:43 " Now prepare to actually exec the command."
2018/06/19 19:51:43 " Display what would be done."
2018/06/19 19:51:43 " func_mode_finish arg..."
2018/06/19 19:51:43 " Remove sysroot references"
2018/06/19 19:51:43 " Do each command in the finish commands."
2018/06/19 19:51:43 " Do the single finish_eval."
2018/06/19 19:51:43 " Aesthetically quote it."
2018/06/19 19:51:43 " The real first argument should be the name of the installation program.\n Aesthetically quote it."
2018/06/19 19:51:43 " We need to accept at least all the BSD install flags."
2018/06/19 19:51:43 " If the previous option needed an argument, then skip it."
2018/06/19 19:51:43 " Aesthetically quote the argument."
2018/06/19 19:51:43 " Strip any trailing slash from the destination."
2018/06/19 19:51:43 " Check to see that the destination is a directory."
2018/06/19 19:51:43 " Not a directory, so check to see that there is only one file specified."
2018/06/19 19:51:43 " This variable tells wrapper scripts just to set variables rather\n than running their programs."
2018/06/19 19:51:43 " Do each installation."
2018/06/19 19:51:43 " Do the static libraries later."
2018/06/19 19:51:43 " Check to see that this really is a libtool archive."
2018/06/19 19:51:43 " Add the libdir to current_libdirs if it is the destination."
2018/06/19 19:51:43 " Note the libdir as a future libdir."
2018/06/19 19:51:43 " Determine the prefix the user has applied to our future dir."
2018/06/19 19:51:43 " Don't allow the user to place us outside of our expected\n location b/c this prevents finding dependent libraries that\n are installed to the same prefix.\n At present, this check doesn't affect windows .dll's that\n are installed into $libdir/../bin (currently, that works fine)\n but it's something to keep an eye on."
2018/06/19 19:51:43 " Stick the inst_prefix_dir data into the link command."
2018/06/19 19:51:43 " Delete the old symlinks, and create new ones.\n Try `ln -sf' first, because the `ln' binary might depend on\n the symlink we replace!  Solaris /bin/ln does not understand -f,\n so we also need to try rm && ln -s."
2018/06/19 19:51:43 " Do each command in the postinstall commands."
2018/06/19 19:51:43 " Install the pseudo-library for information purposes."
2018/06/19 19:51:43 " Maybe install the static library, too."
2018/06/19 19:51:43 " Install (i.e. copy) a libtool object."
2018/06/19 19:51:43 " Figure out destination file name, if it wasn't already specified."
2018/06/19 19:51:43 " Deduce the name of the destination old-style object file."
2018/06/19 19:51:43 " Install the libtool object if requested."
2018/06/19 19:51:43 " Install the old object if enabled."
2018/06/19 19:51:43 " Deduce the name of the old-style object file."
2018/06/19 19:51:43 " Figure out destination file name, if it wasn't already specified."
2018/06/19 19:51:43 " If the file is missing, and there is a .exe on the end, strip it\n because it is most likely a libtool script we actually want to\n install"
2018/06/19 19:51:43 " Do a test to see if this is really a libtool program."
2018/06/19 19:51:43 " Check the variables that should have been set."
2018/06/19 19:51:43 " Check to see that each library is installed."
2018/06/19 19:51:43 "## testsuite: skip nested quoting test"
2018/06/19 19:51:43 " Replace the output file specification."
2018/06/19 19:51:43 " Install the binary that we compiled earlier."
2018/06/19 19:51:43 " remove .exe since cygwin /usr/bin/install will append another\n one anyway"
2018/06/19 19:51:43 " this is ok"
2018/06/19 19:51:43 " Set up the ranlib parameters."
2018/06/19 19:51:43 " Do each command in the postinstall commands."
2018/06/19 19:51:43 " Maybe just do a dry run."
2018/06/19 19:51:43 " func_generate_dlsyms outputname originator pic_p\n Extract symbols from dlprefiles and create ${outputname}S.o with\n a dlpreopen symbol table."
2018/06/19 19:51:43 " Discover the nlist of each of the dlfiles."
2018/06/19 19:51:43 " Parse the name list into a source file."
2018/06/19 19:51:43 " Add our own program objects to the symbol list."
2018/06/19 19:51:43 " Prepare the list of exported symbols"
2018/06/19 19:51:43 " if an import library, we need to obtain dlname"
2018/06/19 19:51:43 " Use subshell, to avoid clobbering current variable values"
2018/06/19 19:51:43 " no lafile. user explicitly requested -dlpreopen <import library>."
2018/06/19 19:51:43 " not an import lib"
2018/06/19 19:51:43 " Make sure we have at least an empty file."
2018/06/19 19:51:43 " Try sorting and uniquifying the output."
2018/06/19 19:51:43 " !$opt_dry_run"
2018/06/19 19:51:43 " compiling the symbol table file with pic_flag works around\n a FreeBSD bug that causes programs to crash when -lm is\n linked before any other PIC object.  But we must not use\n pic_flag when linking with -static.  The problem exists in\n FreeBSD 2.2.6 and is fixed in FreeBSD 3.1."
2018/06/19 19:51:43 " Now compile the dynamic symbol file."
2018/06/19 19:51:43 " Clean up the generated files."
2018/06/19 19:51:43 " Transform the symbol file into the correct name."
2018/06/19 19:51:43 " We keep going just in case the user didn't refer to\n lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n really was required."
2018/06/19 19:51:43 " Nullify the symbol file."
2018/06/19 19:51:43 " func_win32_libid arg\n return the library type of file 'arg'\n\n Need a lot of goo to handle *both* DLLs and import libs\n Has to be a shell function in order to 'eat' the argument\n that is supplied when $file_magic_command is called.\n Despite the name, also deal with 64 bit binaries."
2018/06/19 19:51:43 " definitely import"
2018/06/19 19:51:43 " could be an import, or static\n Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD."
2018/06/19 19:51:43 " func_extract_an_archive dir oldlib"
2018/06/19 19:51:43 " func_extract_archives gentop oldlib ..."
2018/06/19 19:51:43 " Extract the objects."
2018/06/19 19:51:43 " Do not bother doing anything if just a dry run"
2018/06/19 19:51:43 " $darwin_arches\n# Okay now we've a bunch of thin objects, gotta fatten them up :)"
2018/06/19 19:51:43 " $darwin_filelist"
2018/06/19 19:51:43 " $darwin_arches\n !$opt_dry_run"
2018/06/19 19:51:43 " func_emit_wrapper [arg=no]\n\n Emit a libtool wrapper script on stdout.\n Don't directly open a file because we may want to\n incorporate the script contents within a cygwin/mingw\n wrapper executable.  Must ONLY be called from within\n func_mode_link because it depends on a number of variables\n set therein.\n\n ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n variable will take.  If 'yes', then the emitted script\n will assume that the directory in which it is stored is\n the $objdir directory.  This is a cygwin/mingw-specific\n behavior."
2018/06/19 19:51:43 " Backslashes separate directories on plain windows"
2018/06/19 19:51:43 " fixup the dll searchpath if we need to.\n\n Fix the DLL searchpath if we need to.  Do this before prepending\n to shlibpath, because on Windows, both are PATH and uninstalled\n libraries must come first."
2018/06/19 19:51:43 " Export our shlibpath_var if we have one."
2018/06/19 19:51:43 " func_emit_cwrapperexe_src\n emit the source code for a wrapper executable on stdout\n Must ONLY be called from within func_mode_link because\n it depends on a number of variable set therein."
2018/06/19 19:51:43 "ifdef _MSC_VER\n define _CRT_SECURE_NO_DEPRECATE 1\nendif\ninclude <stdio.h>\ninclude <stdlib.h>\nifdef _MSC_VER\n include <direct.h>\n include <process.h>\n include <io.h>\nelse\n include <unistd.h>\n include <stdint.h>\n ifdef __CYGWIN__\n  include <io.h>\n endif\nendif\ninclude <malloc.h>\ninclude <stdarg.h>\ninclude <assert.h>\ninclude <string.h>\ninclude <ctype.h>\ninclude <errno.h>\ninclude <fcntl.h>\ninclude <sys/stat.h>"
2018/06/19 19:51:43 "if defined(__MINGW32__)\n ifdef __STRICT_ANSI__"
2018/06/19 19:51:43 " endif\nelif defined(__CYGWIN__)\n ifdef __STRICT_ANSI__"
2018/06/19 19:51:43 " endif\nelif defined (other platforms) ... */\nendif"
2018/06/19 19:51:43 "if defined(_MSC_VER)\n define setmode _setmode\n define stat    _stat\n define chmod   _chmod\n define getcwd  _getcwd\n define putenv  _putenv\n define S_IXUSR _S_IEXEC\n ifndef _INTPTR_T_DEFINED\n  define _INTPTR_T_DEFINED\n  define intptr_t int\n endif\nelif defined(__MINGW32__)\n define setmode _setmode\n define stat    _stat\n define chmod   _chmod\n define getcwd  _getcwd\n define putenv  _putenv\nelif defined(__CYGWIN__)\n define HAVE_SETENV\n define FOPEN_WB \"wb\"\nelif defined (other platforms) ... */\nendif"
2018/06/19 19:51:43 "if defined(PATH_MAX)\n define LT_PATHMAX PATH_MAX\nelif defined(MAXPATHLEN)\n define LT_PATHMAX MAXPATHLEN\nelse\n define LT_PATHMAX 1024\nendif"
2018/06/19 19:51:43 "ifndef S_IXOTH\n define S_IXOTH 0\nendif\nifndef S_IXGRP\n define S_IXGRP 0\nendif"
2018/06/19 19:51:43 "ifndef DIR_SEPARATOR\n define DIR_SEPARATOR '/'\n define PATH_SEPARATOR ':'\nendif"
2018/06/19 19:51:43 "if defined (_WIN32) || defined (__MSDOS__) || defined (__DJGPP__) || \\"
2018/06/19 19:51:43 " define HAVE_DOS_BASED_FILE_SYSTEM\n define FOPEN_WB \"wb\"\n ifndef DIR_SEPARATOR_2\n  define DIR_SEPARATOR_2 '\\\\'\n endif\n ifndef PATH_SEPARATOR_2\n  define PATH_SEPARATOR_2 ';'\n endif\nendif"
2018/06/19 19:51:43 "ifndef DIR_SEPARATOR_2\n define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\nelse /* DIR_SEPARATOR_2 */\n define IS_DIR_SEPARATOR(ch) \\"
2018/06/19 19:51:43 "endif /* DIR_SEPARATOR_2 */"
2018/06/19 19:51:43 "ifndef PATH_SEPARATOR_2\n define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\nelse /* PATH_SEPARATOR_2 */\n define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\nendif /* PATH_SEPARATOR_2 */"
2018/06/19 19:51:43 "ifndef FOPEN_WB\n define FOPEN_WB \"w\"\nendif\nifndef _O_BINARY\n define _O_BINARY 0\nendif"
2018/06/19 19:51:43 "define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\ndefine XFREE(stale) do { \\"
2018/06/19 19:51:43 "if defined(LT_DEBUGWRAPPER)"
2018/06/19 19:51:43 "else"
2018/06/19 19:51:43 "endif"
2018/06/19 19:51:43 "define LTWRAPPER_OPTION_PREFIX         \"--lt-\""
2018/06/19 19:51:43 "if defined (HAVE_DOS_BASED_FILE_SYSTEM)"
2018/06/19 19:51:43 "endif"
2018/06/19 19:51:43 "if defined (HAVE_DOS_BASED_FILE_SYSTEM)"
2018/06/19 19:51:43 "endif"
2018/06/19 19:51:43 "if defined (HAVE_DOS_BASED_FILE_SYSTEM)"
2018/06/19 19:51:43 "endif"
2018/06/19 19:51:43 "ifndef S_ISLNK"
2018/06/19 19:51:43 "else"
2018/06/19 19:51:43 "endif"
2018/06/19 19:51:43 "ifdef HAVE_SETENV"
2018/06/19 19:51:43 "else"
2018/06/19 19:51:43 "endif"
2018/06/19 19:51:43 "define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\ndefine SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\""
2018/06/19 19:51:43 " end: func_emit_cwrapperexe_src"
2018/06/19 19:51:43 " func_win32_import_lib_p ARG\n True if ARG is an import lib, as indicated by $file_magic_cmd"
2018/06/19 19:51:43 "\" -gt 0; do"
2018/06/19 19:51:43 " If the previous option needs an argument, assign it."
2018/06/19 19:51:43 " Add the symbol object into the linking commands."
2018/06/19 19:51:43 " We handle these cases below."
2018/06/19 19:51:43 " this is fixed later"
2018/06/19 19:51:43 "\t      func_append moreargs \" $fil\""
2018/06/19 19:51:43 " A libtool-controlled object."
2018/06/19 19:51:43 " Check to see that this really is a libtool object."
2018/06/19 19:51:43 " Read the .lo file"
2018/06/19 19:51:43 " Extract subdirectory from the argument."
2018/06/19 19:51:43 " Prepend the subdirectory the object is found in."
2018/06/19 19:51:43 " If libtool objects are unsupported, then we need to preload."
2018/06/19 19:51:43 " CHECK ME:  I think I busted this.  -Ossama"
2018/06/19 19:51:43 " Preload the old-style object."
2018/06/19 19:51:43 " A PIC object."
2018/06/19 19:51:43 " Non-PIC object."
2018/06/19 19:51:43 " Prepend the subdirectory the object is found in."
2018/06/19 19:51:43 " A standard non-PIC object"
2018/06/19 19:51:43 " If the PIC object exists, use it instead.\n $xdir was prepended to $pic_object above."
2018/06/19 19:51:43 " Only an error if not doing a dry-run."
2018/06/19 19:51:43 " Extract subdirectory from the argument."
2018/06/19 19:51:43 " We need an absolute path."
2018/06/19 19:51:43 " test -n \"$prev\""
2018/06/19 19:51:43 " See comment for -static flag below, for more details."
2018/06/19 19:51:43 " FIXME: remove this flag sometime in the future."
2018/06/19 19:51:43 " The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n so, if we see these flags be careful not to treat them like -L"
2018/06/19 19:51:43 " We need an absolute path."
2018/06/19 19:51:43 " Will only happen for absolute or sysroot arguments"
2018/06/19 19:51:43 " Preserve sysroot, but never include relative directories"
2018/06/19 19:51:43 " These systems don't actually have a C or math library (as such)"
2018/06/19 19:51:43 " These systems don't actually have a C library (as such)"
2018/06/19 19:51:43 " Do not include libc due to us having libc/libc_r."
2018/06/19 19:51:43 " Rhapsody C and math libraries are in the System framework"
2018/06/19 19:51:43 " Causes problems with __ctype"
2018/06/19 19:51:43 " Compiler inserts libc in the correct place for threads to work"
2018/06/19 19:51:44 " Do not include libc_r directly, use -pthread flag."
2018/06/19 19:51:44 " Tru64 UNIX uses -model [arg] to determine the layout of C++\n classes, name mangling, and exception handling.\n Darwin uses the -arch flag to determine output architecture."
2018/06/19 19:51:44 " The PATH hackery in wrapper scripts is required on Windows\n and Darwin in order for the loader to find any dlls it needs."
2018/06/19 19:51:44 " We need an absolute path."
2018/06/19 19:51:44 " The effects of -shared are defined in a previous loop."
2018/06/19 19:51:44 " The effects of -static are defined in a previous loop.\n We used to do the same as -all-static on platforms that\n didn't have a PIC flag, but the assumption that the effects\n would be equivalent was wrong.  It would break on at least\n Digital Unix and AIX."
2018/06/19 19:51:44 " -msg_* for osf cc"
2018/06/19 19:51:44 " Flags to be passed through unchanged, with rationale:\n -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n -r[0-9][0-9]*        specify processor for the SGI compiler\n -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n +DA*, +DD*           enable 64-bit mode for the HP compiler\n -q*                  compiler args for the IBM compiler\n -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n -F/path              path to uninstalled frameworks, gcc on darwin\n -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n @file                GCC response files\n -tp=*                Portland pgcc target processor selection\n --sysroot=*          for sysroot support\n -O*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization"
2018/06/19 19:51:44 " Some other compiler flag."
2018/06/19 19:51:44 " A standard object."
2018/06/19 19:51:44 " A libtool-controlled object."
2018/06/19 19:51:44 " Check to see that this really is a libtool object."
2018/06/19 19:51:44 " Read the .lo file"
2018/06/19 19:51:44 " Extract subdirectory from the argument."
2018/06/19 19:51:44 " Prepend the subdirectory the object is found in."
2018/06/19 19:51:44 " If libtool objects are unsupported, then we need to preload."
2018/06/19 19:51:44 " CHECK ME:  I think I busted this.  -Ossama"
2018/06/19 19:51:44 " Preload the old-style object."
2018/06/19 19:51:44 " A PIC object."
2018/06/19 19:51:44 " Non-PIC object."
2018/06/19 19:51:44 " Prepend the subdirectory the object is found in."
2018/06/19 19:51:44 " A standard non-PIC object"
2018/06/19 19:51:44 " If the PIC object exists, use it instead.\n $xdir was prepended to $pic_object above."
2018/06/19 19:51:44 " Only an error if not doing a dry-run."
2018/06/19 19:51:44 " Extract subdirectory from the argument."
2018/06/19 19:51:44 " An archive."
2018/06/19 19:51:44 " A libtool-controlled library."
2018/06/19 19:51:44 " This library was specified with -dlopen."
2018/06/19 19:51:44 " The library was specified with -dlpreopen."
2018/06/19 19:51:44 " Some other compiler argument."
2018/06/19 19:51:44 " Unknown arguments in both finalize_command and compile_command need\n to be aesthetically quoted because they are evaled later."
2018/06/19 19:51:44 " arg"
2018/06/19 19:51:44 " Now actually substitute the argument into the commands."
2018/06/19 19:51:44 " argument parsing loop"
2018/06/19 19:51:44 " Create the object directory."
2018/06/19 19:51:44 " Determine the type of output"
2018/06/19 19:51:44 " Anything else should be a program."
2018/06/19 19:51:44 " Find all interdependent deplibs by searching for libraries\n that are linked more than once (e.g. -la -lb -la)"
2018/06/19 19:51:44 " Compute libraries that are listed more than once in $predeps\n $postdeps and mark them as special (i.e., whose duplicates are\n not to be eliminated)."
2018/06/19 19:51:44 " whether we're linking any uninstalled libtool libraries\n not-installed libtool libraries\n paths that contain not-installed libtool libraries"
2018/06/19 19:51:44 " The preopen pass in lib mode reverses $deplibs; put it back here\n so that -L comes before libs that need it for instance..."
2018/06/19 19:51:44 "# FIXME: Find the place where the list is rebuilt in the wrong\n#        order, and fix it there properly"
2018/06/19 19:51:44 " Collect and forward deplibs of preopened libtool libs"
2018/06/19 19:51:44 " Ignore non-libtool-libs"
2018/06/19 19:51:44 " Collect preopened libtool deplibs, except any this library\n has declared as weak libs"
2018/06/19 19:51:44 " Collect dlpreopened libraries"
2018/06/19 19:51:44 " Search the libtool library"
2018/06/19 19:51:44 " deplib doesn't seem to be a libtool library"
2018/06/19 19:51:44 " deplib is a libtool library\n If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n We need to do some special things here, and not later."
2018/06/19 19:51:44 " only static version available"
2018/06/19 19:51:44 " -l"
2018/06/19 19:51:44 " linkmode"
2018/06/19 19:51:44 " -L"
2018/06/19 19:51:44 " Make sure the xrpath contains only unique directories."
2018/06/19 19:51:44 " Linking convenience modules into shared libraries is allowed,\n but linking other static libraries is non-portable."
2018/06/19 19:51:44 " linkmode\n *.$libext"
2018/06/19 19:51:44 " If there is no dlopen support or we're linking statically,\n we need to preload."
2018/06/19 19:51:44 " case $deplib"
2018/06/19 19:51:44 " Check to see that this really is a libtool archive."
2018/06/19 19:51:44 " If the library was installed with an old release of libtool,\n it will not redefine variables installed, or shouldnotlink"
2018/06/19 19:51:44 " Read the .la file"
2018/06/19 19:51:44 " Convert \"-framework foo\" to \"foo.ltframework\""
2018/06/19 19:51:44 " Only check for convenience libraries"
2018/06/19 19:51:44 " It is a libtool convenience library, so add in its objects."
2018/06/19 19:51:44 " $pass = conv"
2018/06/19 19:51:44 " Get the name of the library we link against."
2018/06/19 19:51:44 " This library was specified with -dlopen."
2018/06/19 19:51:44 " If there is no dlname, no dlopen support or we're linking\n statically, we need to preload.  We also need to preload any\n dependent libraries so libltdl's deplib preloader doesn't\n bomb out in the load deplibs phase."
2018/06/19 19:51:44 " $pass = dlopen"
2018/06/19 19:51:44 " We need an absolute path."
2018/06/19 19:51:44 " Find the relevant object directory and library name."
2018/06/19 19:51:44 " Remove this search path later"
2018/06/19 19:51:44 " Remove this search path later"
2018/06/19 19:51:44 " $installed = yes"
2018/06/19 19:51:44 " This library was specified with -dlpreopen."
2018/06/19 19:51:44 " special handling for platforms with PE-DLLs."
2018/06/19 19:51:44 " Linker will automatically link against shared library if both\n static and shared are present.  Therefore, ensure we extract\n symbols from the import library if a shared library is present\n (otherwise, the dlopen module name will be incorrect).  We do\n this by putting the import library name into $newdlprefiles.\n We recover the dlopen module name by 'saving' the la file\n name in a special purpose variable, and (later) extracting the\n dlname from the la file."
2018/06/19 19:51:44 " Keep a list of preopened convenience libraries to check\n that they are being used correctly in the link pass."
2018/06/19 19:51:44 " Prefer using a static library (so that no silly _DYNAMIC symbols\n are required to link)."
2018/06/19 19:51:44 " Keep a list of preopened convenience libraries to check\n that they are being used correctly in the link pass."
2018/06/19 19:51:44 " Otherwise, use the dlname, so that lt_dlopen finds it."
2018/06/19 19:51:44 " $pass = dlpreopen"
2018/06/19 19:51:44 " Link the convenience library"
2018/06/19 19:51:44 " used for prog,scan pass"
2018/06/19 19:51:44 " Need to link against all dependency_libs?"
2018/06/19 19:51:44 " Need to hardcode shared library paths\n or/and link against static libraries"
2018/06/19 19:51:44 " for deplib"
2018/06/19 19:51:44 " $linkmode = prog..."
2018/06/19 19:51:44 " We need to hardcode the library path"
2018/06/19 19:51:44 " Make sure the rpath contains only unique directories."
2018/06/19 19:51:44 " Hardcode the library path.\n Skip directories that are in the system default run-time\n search path."
2018/06/19 19:51:44 " $linkmode,$pass = prog,link..."
2018/06/19 19:51:44 " We only need to search for static libraries"
2018/06/19 19:51:44 " Whether the deplib will be linked statically"
2018/06/19 19:51:44 " No point in relinking DLLs because paths are not encoded"
2018/06/19 19:51:44 " This is a shared library"
2018/06/19 19:51:44 " Warn about portability, can't link against -module's on some\n systems (darwin).  Don't bleat about dlopened modules though!"
2018/06/19 19:51:44 " Hardcode the library path.\n Skip directories that are in the system default run-time\n search path."
2018/06/19 19:51:44 " figure out the soname"
2018/06/19 19:51:44 " use dlname if we got it. it's perfectly good, no?"
2018/06/19 19:51:44 " bleh windows"
2018/06/19 19:51:44 " make sure the library variables are pointing to the new library"
2018/06/19 19:51:44 " test -n \"$old_archive_from_expsyms_cmds\""
2018/06/19 19:51:44 " if the lib is a (non-dlopened) module then we can not\n link against it, someone is ignoring the earlier warnings"
2018/06/19 19:51:44 " Try looking first in the location we're being installed to."
2018/06/19 19:51:44 " Finalize command for both is simple: just hardcode it."
2018/06/19 19:51:44 " We cannot seem to hardcode it, guess we'll fake it."
2018/06/19 19:51:44 " Try looking first in the location we're being installed to."
2018/06/19 19:51:44 " Here we assume that one of hardcode_direct or hardcode_minus_L\n is not unsupported.  This is valid on all known static and\n shared platforms."
2018/06/19 19:51:44 " Not a shared library"
2018/06/19 19:51:44 " We're trying link a shared library against a static one\n but the system doesn't support it."
2018/06/19 19:51:44 " Just print a warning and add the library to dependency_libs so\n that the program can be linked against the static library."
2018/06/19 19:51:44 " link shared/static library?"
2018/06/19 19:51:44 " Extract -R from dependency_libs"
2018/06/19 19:51:44 " Link against this library"
2018/06/19 19:51:44 " ... and its dependency_libs"
2018/06/19 19:51:44 " Add the search paths of all dependency libraries"
2018/06/19 19:51:44 " We need an absolute path."
2018/06/19 19:51:44 " link_all_deplibs != no\n linkmode = lib\n for deplib in $libs"
2018/06/19 19:51:44 " Link the dlpreopened libraries before other libraries"
2018/06/19 19:51:44 " Make sure lib_search_path contains only unique directories."
2018/06/19 19:51:44 " Add libraries to $var in reverse order"
2018/06/19 19:51:44 " for pass"
2018/06/19 19:51:44 " Now set the variables for building old libraries."
2018/06/19 19:51:44 " Make sure we only generate libraries of the form `libNAME.la'."
2018/06/19 19:51:44 " Add the \"lib\" prefix for modules if required"
2018/06/19 19:51:44 "\" -gt 1 && \\"
2018/06/19 19:51:44 " Building a libtool convenience library.\n Some compilers have problems with a `.al' extension so\n convenience libraries should have the same extension an\n archive normally would."
2018/06/19 19:51:44 " Parse the version information argument."
2018/06/19 19:51:44 " convert absolute version numbers to libtool ages\n this retains compatibility with .la files and attempts\n to make the code below a bit more comprehensible"
2018/06/19 19:51:44 "\n There are really only two kinds -- those that\n use the current revision as the major version\n and those that subtract age and use age as\n a minor version.  But, then there is irix\n which has an extra 1 added just for fun\n"
2018/06/19 19:51:44 " correct linux to gnu/linux during the next big refactor"
2018/06/19 19:51:44 " Check that each of the things are valid numbers."
2018/06/19 19:51:44 " Calculate the version variables."
2018/06/19 19:51:44 " Like Linux, but with the current version available in\n verstring for coding it into the library header"
2018/06/19 19:51:44 " Darwin ld doesn't like 0 for these options..."
2018/06/19 19:51:44 " Add in all the interfaces that we are compatible with."
2018/06/19 19:51:44 " Before this point, $major must not contain `.'."
2018/06/19 19:51:44 " correct to gnu/linux during the next big refactor"
2018/06/19 19:51:44 " Add in all the interfaces that we are compatible with."
2018/06/19 19:51:44 " Make executables depend on our current version."
2018/06/19 19:51:44 " Use '-' rather than '.', since we only want one\n extension on DOS 8.3 filesystems."
2018/06/19 19:51:44 " Clear the version info if we defaulted, and they specified a release."
2018/06/19 19:51:44 " we can't check for \"0.0\" in archive_cmds due to quoting\n problems, so we reset it completely"
2018/06/19 19:51:44 " Remove version info from name if versioning should be avoided"
2018/06/19 19:51:44 " Check to see if the archive will have undefined symbols."
2018/06/19 19:51:44 " Don't allow undefined symbols."
2018/06/19 19:51:44 " Remove our outputs, but don't remove object files since they\n may have been created when compiling PIC objects."
2018/06/19 19:51:44 " Now set the variables for building old libraries."
2018/06/19 19:51:44 " Transform .lo files to .o files."
2018/06/19 19:51:44 " Eliminate all temporary directories.\nfor path in $notinst_path; do\n\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\ndone"
2018/06/19 19:51:44 " If the user specified any rpath flags, then add them."
2018/06/19 19:51:44 " Make sure dlfiles contains only unique files that won't be dlpreopened"
2018/06/19 19:51:44 " Make sure dlprefiles contains only unique files"
2018/06/19 19:51:44 " these systems don't actually have a c library (as such)!"
2018/06/19 19:51:44 " Rhapsody C library is in the System framework"
2018/06/19 19:51:44 " Don't link with libc until the a.out ld.so is fixed."
2018/06/19 19:51:44 " Do not include libc due to us having libc/libc_r."
2018/06/19 19:51:44 " Causes problems with __ctype"
2018/06/19 19:51:44 " Compiler inserts libc in the correct place for threads to work"
2018/06/19 19:51:44 " Add libc to deplibs on all other systems if necessary."
2018/06/19 19:51:44 " Transform deplibs into only deplibs that can be linked in shared."
2018/06/19 19:51:44 " I'm not sure if I'm treating the release correctly.  I think\n release should show up in the -l (ie -lgmp5) so we don't want to\n add it in twice.  Is that correct?"
2018/06/19 19:51:44 " Don't check for shared/static.  Everything works.\n This might be a little naive.  We might want to check\n whether the library exists or not.  But this is on\n osf3 & osf4 and I'm not really sure... Just\n implementing what was already the behavior."
2018/06/19 19:51:44 " This code stresses the \"libraries are programs\" paradigm to its\n limits. Maybe even breaks it.  We compile a program, linking it\n against the deplibs as a proxy for the library.  Then we can check\n whether they linked in statically or dynamically with ldd."
2018/06/19 19:51:44 " Error occurred in the first compile.  Let's try to salvage\n the situation: Compile a separate program for each library."
2018/06/19 19:51:44 " Follow soft links."
2018/06/19 19:51:44 " The statement above tries to avoid entering an\n endless loop below, in case of cyclic links.\n We might still enter an endless loop, since a link\n loop can be closed while we follow links,\n but so what?"
2018/06/19 19:51:44 " Add a -L argument."
2018/06/19 19:51:44 " Gone through all deplibs."
2018/06/19 19:51:44 " see symlink-check above in file_magic test"
2018/06/19 19:51:44 " Add a -L argument."
2018/06/19 19:51:44 " Gone through all deplibs."
2018/06/19 19:51:44 " can't use Xsed below, because $i might contain '/'"
2018/06/19 19:51:44 " On Rhapsody replace the C library with the System framework"
2018/06/19 19:51:44 " Done checking deplibs!"
2018/06/19 19:51:44 " Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\""
2018/06/19 19:51:44 " move library search paths that coincide with paths to not yet\n installed libraries to the beginning of the library search list"
2018/06/19 19:51:44 " All the library-specific variables (install_libdir is set above)."
2018/06/19 19:51:44 " Test again, we may have decided not to build it any more"
2018/06/19 19:51:44 " Remove ${wl} instances when linking with ld.\n FIXME: should test the right _cmds variable."
2018/06/19 19:51:44 " Hardcode the library paths"
2018/06/19 19:51:44 " Just accumulate the unique libdirs."
2018/06/19 19:51:44 " We should set the runpath_var."
2018/06/19 19:51:44 " Get the real and link names of the library."
2018/06/19 19:51:44 " the list of exported symbols\" if statement, so the\n include_expsyms logic still works."
2018/06/19 19:51:44 " Prepare the list of exported symbols"
2018/06/19 19:51:44 " Take the normal branch if the nm_file_list_spec branch\n doesn't work or if tool conversion is not needed."
2018/06/19 19:51:44 " extract the archives, so we have objects to list.\n TODO: could optimize this to just extract one archive."
2018/06/19 19:51:44 " The given exports_symbols file has to be filtered, so filter it."
2018/06/19 19:51:44 " FIXME: $output_objdir/$libname.filter potentially contains lots of\n 's' commands which not all seds can handle. GNU sed should be fine\n though. Also, the filter scales superlinearly with the number of\n global variables. join(1) would be nice here, but unfortunately\n isn't a blessed tool."
2018/06/19 19:51:44 " Restore the value of output."
2018/06/19 19:51:44 " But is supposedly fixed on 10.4 or later (yay!)."
2018/06/19 19:51:44 " Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\""
2018/06/19 19:51:44 " move library search paths that coincide with paths to not yet\n installed libraries to the beginning of the library search list"
2018/06/19 19:51:44 " If the user specified any rpath flags, then add them."
2018/06/19 19:51:44 " This is the magic to use -rpath."
2018/06/19 19:51:44 " Now hardcode the library paths"
2018/06/19 19:51:44 " Just accumulate the unique libdirs."
2018/06/19 19:51:44 " We should set the runpath_var."
2018/06/19 19:51:44 " We should set the runpath_var."
2018/06/19 19:51:44 " We don't need to create a wrapper script."
2018/06/19 19:51:44 " Replace the output file specification."
2018/06/19 19:51:44 " test for cygwin because mv fails w/o .exe extensions"
2018/06/19 19:51:44 " The wrapper executable is built using the $host compiler,\n because it contains $host paths and files. If cross-\n compiling, it, like the target executable, must be\n executed on the $host or under an emulation environment."
2018/06/19 19:51:44 " Now, create the wrapper script for func_source use:"
2018/06/19 19:51:44 " note: this script will not be executed, so do not chmod."
2018/06/19 19:51:44 " See if we need to build an old-fashioned archive."
2018/06/19 19:51:44 " Do each command in the archive commands."
2018/06/19 19:51:44 " Add any objects from preloaded convenience libraries"
2018/06/19 19:51:44 " POSIX demands no paths to be encoded in archives.  We have\n to avoid creating archives with duplicate basenames if we\n might have to extract them afterwards, e.g., when creating a\n static archive out of a convenience library, or when linking\n the entirety of a libtool archive into another (currently\n not supported by libtool)."
2018/06/19 19:51:44 " Make sure we don't pick an alternate name that also\n overlaps."
2018/06/19 19:51:44 " Quote the link command for shipping."
2018/06/19 19:51:44 " Only create the output if not a dry run."
2018/06/19 19:51:44 " Replace all uninstalled libtool libraries with the installed ones"
2018/06/19 19:51:44 " Only pass preopened files to the pseudo-archive (for\n eventual linking with the app. that links it) if we\n didn't already link the preopened objects directly into\n the library:"
2018/06/19 19:51:44 " place dlname in correct position for cygwin\n In fact, it would be nice if we could use this code for all target\n systems that can't hard-code library paths into their executables\n and that have no shared library path variable independent of PATH,\n but it turns out we can't easily determine that from inspecting\n libtool variables, so we have to hard-code the OSs to which it\n applies here; at the moment, that means platforms that use the PE\n object format with DLL files.  See the long comment at the top of\n tests/bindir.at for full details."
2018/06/19 19:51:44 " If a -bindir argument was supplied, place the dll there."
2018/06/19 19:51:44 " Otherwise fall back on heuristic."
2018/06/19 19:51:44 " Do a symbolic link so that the libtool archive can be found in\n LD_LIBRARY_PATH before the program is installed."
2018/06/19 19:51:44 " func_mode_uninstall arg..."
2018/06/19 19:51:44 " This variable tells wrapper scripts just to set variables rather\n than running their programs."
2018/06/19 19:51:44 " Remember odir for removal later, being careful to avoid duplicates"
2018/06/19 19:51:44 " Don't error if the file doesn't exist and rm -f was used."
2018/06/19 19:51:44 " Possibly a libtool archive, so verify it."
2018/06/19 19:51:44 " Delete the libtool libraries and symlinks."
2018/06/19 19:51:44 " Do each command in the postuninstall commands."
2018/06/19 19:51:44 " Do each command in the old_postuninstall commands."
2018/06/19 19:51:44 " FIXME: should reinstall the best remaining shared library."
2018/06/19 19:51:44 " Possibly a libtool object, so verify it."
2018/06/19 19:51:44 " Read the .lo file"
2018/06/19 19:51:44 " Add PIC object to the list of files to remove."
2018/06/19 19:51:44 " Add non-PIC object to the list of files to remove."
2018/06/19 19:51:44 " $file with .exe has already been added to rmfiles,\n add $file without .exe"
2018/06/19 19:51:44 " Do a test to see if this is a libtool program."
2018/06/19 19:51:44 " note $name still contains .exe if it was in $file originally\n as does the version of $file that was added into $rmfiles"
2018/06/19 19:51:44 " Try to remove the ${objdir}s in the directories where we deleted files"
2018/06/19 19:51:44 " The TAGs below are defined such that we never get into a situation\n in which we disable both kinds of libraries.  Given conflicting\n choices, we go for a static library, that is the most portable,\n since we can't tell whether shared libraries were disabled because\n the user asked for that or because the platform doesn't support\n them.  This is particularly important on AIX, because we don't\n support having both static and shared libraries enabled at the same\n time on that platform, so we default to a shared-only configuration.\n If a disable-shared tag is given, we'll fallback to a static-only\n configuration.  But we'll never go from static-only to shared-only."
2018/06/19 19:51:44 " ### BEGIN LIBTOOL TAG CONFIG: disable-shared"
2018/06/19 19:51:44 " ### END LIBTOOL TAG CONFIG: disable-shared"
2018/06/19 19:51:44 " ### BEGIN LIBTOOL TAG CONFIG: disable-static"
2018/06/19 19:51:44 " ### END LIBTOOL TAG CONFIG: disable-static"
2018/06/19 19:51:44 " Local Variables:\n mode:shell-script\n sh-indentation:2\n End:\n vi:sw=2"
2018/06/19 19:51:44 Finished Classifying License "/adol-c-v2.6.3.tar.gz/autoconf/ltmain.sh": 187.133679ms
2018/06/19 19:51:44 Couldn't classify license(s)
2018/06/19 19:51:44 Classifying license(s): /adol-c-v2.6.3.tar.gz/autoconf/depcomp
2018/06/19 19:51:44 Finished Classifying License "/adol-c-v2.6.3.tar.gz/autoconf/depcomp": 69.768092ms
2018/06/19 19:51:45 Classifying license(s): /adol-c-v2.6.3.tar.gz/autoconf/ltoptions.m4
2018/06/19 19:51:45 Finished Classifying License "/adol-c-v2.6.3.tar.gz/autoconf/ltoptions.m4": 34.945337ms
2018/06/19 19:51:45 Couldn't classify license(s)
2018/06/19 19:51:46 Classifying license(s): /adol-c-v2.6.3.tar.gz/autoconf/lt~obsolete.m4
2018/06/19 19:51:46 Finished Classifying License "/adol-c-v2.6.3.tar.gz/autoconf/lt~obsolete.m4": 22.87935ms
2018/06/19 19:51:46 Couldn't classify license(s)
2018/06/19 19:51:47 Classifying license(s): /adol-c-v2.6.3.tar.gz/autoconf/ax_boost_system.m4
2018/06/19 19:51:47 Finished Classifying License "/adol-c-v2.6.3.tar.gz/autoconf/ax_boost_system.m4": 14.613374ms
2018/06/19 19:51:47 Couldn't classify license(s)
2018/06/19 19:51:48 Classifying license(s): /adol-c-v2.6.3.tar.gz/NEWS
2018/06/19 19:51:48 Finished Classifying License "/adol-c-v2.6.3.tar.gz/NEWS": 528.876µs
2018/06/19 19:51:48 Couldn't classify license(s)
2018/06/19 19:51:48 Classifying license(s): /adol-c-v2.6.3.tar.gz/Makefile.in
2018/06/19 19:51:49 Finished Classifying License "/adol-c-v2.6.3.tar.gz/Makefile.in": 95.785613ms
2018/06/19 19:51:49 Couldn't classify license(s)
2018/06/19 19:51:49 Classifying license(s): /adol-c-v2.6.3.tar.gz/adolc.spec
2018/06/19 19:51:49 Finished Classifying License "/adol-c-v2.6.3.tar.gz/adolc.spec": 17.918219ms
2018/06/19 19:51:49 Couldn't classify license(s)
2018/06/19 19:51:50 Classifying license(s): /adol-c-v2.6.3.tar.gz/TODO
2018/06/19 19:51:50 Finished Classifying License "/adol-c-v2.6.3.tar.gz/TODO": 6.413299ms
2018/06/19 19:51:50 Couldn't classify license(s)
2018/06/19 19:51:51 Classifying license(s): /adol-c-v2.6.3.tar.gz/ChangeLog
2018/06/19 19:51:51 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ChangeLog": 22.648122ms
2018/06/19 19:51:51 Couldn't classify license(s)
2018/06/19 19:51:52 Classifying license(s): /adol-c-v2.6.3.tar.gz/README
2018/06/19 19:51:52 Finished Classifying License "/adol-c-v2.6.3.tar.gz/README": 15.07802ms
2018/06/19 19:51:52 Couldn't classify license(s)
2018/06/19 19:51:52 Classifying license(s): /adol-c-v2.6.3.tar.gz/aclocal.m4
2018/06/19 19:51:53 Finished Classifying License "/adol-c-v2.6.3.tar.gz/aclocal.m4": 147.048012ms
2018/06/19 19:51:53 Couldn't classify license(s)
2018/06/19 19:51:53 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/powexam.cpp
2018/06/19 19:51:53 detected language: 4
2018/06/19 19:51:53 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     powexam.cpp\n Revision: $Id$\n Contents: computation of n-th power, described in the manual\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel \n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:51:53 "**************************************************************************\n                                                                 INCLUDES \n use of ALL ADOL-C interfaces "
2018/06/19 19:51:53 "**************************************************************************\n                                                          ADOUBLE ROUTINE "
2018/06/19 19:51:53 " Recursion and branches \n that do not depend on  \n adoubles are fine !!!! "
2018/06/19 19:51:53 " end if "
2018/06/19 19:51:53 " The local adouble z dies \n as it goes out of scope. "
2018/06/19 19:51:53 " end else \n end power "
2018/06/19 19:51:53 "**************************************************************************\n                                                             MAIN PROGRAM "
2018/06/19 19:51:53 " input the desired degree "
2018/06/19 19:51:53 " allocations and initializations "
2018/06/19 19:51:53 " function value = 0. coefficient \n first derivative = 1. coefficient "
2018/06/19 19:51:53 " further coefficients \n used for checking consistency \n between forward and reverse "
2018/06/19 19:51:53 " declare active variables \n beginning of active section \n tag = 1 and keep = 0 \n only one independent var \n actual function call \n only one dependent adouble \n no global adouble has died \n end of active section \n weighting vector \n for reverse call \n note that keep = i+1 in call \n evaluate the i-the derivative "
2018/06/19 19:51:53 " scale derivative to Taylorcoeff. "
2018/06/19 19:51:53 " evaluate the (i+1)-st deriv. \n end for "
2018/06/19 19:51:53 " end main "
2018/06/19 19:51:53 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/powexam.cpp": 8.896307ms
2018/06/19 19:51:53 Couldn't classify license(s)
2018/06/19 19:51:54 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/tapeless_vector.cpp
2018/06/19 19:51:54 detected language: 4
2018/06/19 19:51:54 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     tapeless_vector.cpp\n Revision: $Id$\n Contents: computation of coordinate transform, \n           vector tapeless forward mode\n           described in the manual\n\n Copyright (c) Andrea Walther, Andreas Kowarz\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:51:54 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:51:54 " Initialize x_i"
2018/06/19 19:51:54 " \"use\" the derivative"
2018/06/19 19:51:54 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/tapeless_vector.cpp": 7.143488ms
2018/06/19 19:51:54 Couldn't classify license(s)
2018/06/19 19:51:55 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/odexam.cpp
2018/06/19 19:51:55 detected language: 4
2018/06/19 19:51:55 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     odexam.cpp\n Revision: $Id$\n Contents: Nonlinear ordinary differential equation based on the\n           Robertson test problem, described in the manual\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel \n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:51:55 "**************************************************************************\n                                                                 INCLUDES \n use of active double\n use of \"Easy To Use\" ODE drivers\n use of ADOL-C allocation utilities\n use of taping"
2018/06/19 19:51:55 " NOTICE: If one wants to include all ADOL-C interfaces without\n         getting in trouble to find out the right header files\n\n         #include \"adolc/adolc.h\"\n\n         will do the right work."
2018/06/19 19:51:55 "**************************************************************************\n                                                          ADOUBLE ROUTINE "
2018/06/19 19:51:55 " we left the parameters passive"
2018/06/19 19:51:55 " initialize and mark independents"
2018/06/19 19:51:55 " mark and pass dependents\n write tape array onto a file\n end tracerhs"
2018/06/19 19:51:55 "**************************************************************************\n                                                             MAIN PROGRAM "
2018/06/19 19:51:55 " Initialize the base point\n and the Taylor coefficient;\n set up sparsity array\n end for"
2018/06/19 19:51:55 " trace RHS with tag = 1"
2018/06/19 19:51:55 " compute deg coefficients\n U defaults to the identity"
2018/06/19 19:51:55 " end for"
2018/06/19 19:51:55 " end main"
2018/06/19 19:51:55 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/odexam.cpp": 11.723489ms
2018/06/19 19:51:55 Couldn't classify license(s)
2018/06/19 19:51:56 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/winpackage.sh
2018/06/19 19:51:56 detected language: 32
2018/06/19 19:51:56 " < 1 ]]; then"
2018/06/19 19:51:56 " > 1 ]]; then"
2018/06/19 19:51:56 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/winpackage.sh": 636.727µs
2018/06/19 19:51:56 Couldn't classify license(s)
2018/06/19 19:51:56 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/odexam.vcxproj
2018/06/19 19:51:56 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/odexam.vcxproj": 26.52182ms
2018/06/19 19:51:56 Couldn't classify license(s)
2018/06/19 19:51:57 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/tapeless_scalar.cpp
2018/06/19 19:51:57 detected language: 4
2018/06/19 19:51:57 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     tapeless_scalar.cpp\n Revision: $Id$\n Contents: computation of coordinate transform, \n           scalar tapeless forward mode\n           described in the manual\n\n Copyright (c) Andrea Walther, Andreas Kowarz\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:51:57 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:51:57 " Initialize x_i"
2018/06/19 19:51:57 " derivative of y with respect to x0"
2018/06/19 19:51:57 " \"use\" the derivative"
2018/06/19 19:51:57 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/tapeless_scalar.cpp": 7.101024ms
2018/06/19 19:51:57 Couldn't classify license(s)
2018/06/19 19:51:58 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/speelpenning.vcxproj
2018/06/19 19:51:58 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/speelpenning.vcxproj": 25.53875ms
2018/06/19 19:51:58 Couldn't classify license(s)
2018/06/19 19:51:59 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/Readme_VC++.txt
2018/06/19 19:51:59 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/Readme_VC++.txt": 901.297µs
2018/06/19 19:51:59 Couldn't classify license(s)
2018/06/19 19:52:00 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/tapeless_vector.vcxproj
2018/06/19 19:52:00 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/tapeless_vector.vcxproj": 25.808958ms
2018/06/19 19:52:00 Couldn't classify license(s)
2018/06/19 19:52:00 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/Makefile.am
2018/06/19 19:52:00 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/Makefile.am": 8.943084ms
2018/06/19 19:52:00 Couldn't classify license(s)
2018/06/19 19:52:01 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/Makefile.in
2018/06/19 19:52:01 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/Makefile.in": 84.706841ms
2018/06/19 19:52:01 Couldn't classify license(s)
2018/06/19 19:52:02 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/detexam.cpp
2018/06/19 19:52:02 detected language: 4
2018/06/19 19:52:02 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     detexam.cpp\n Revision: $Id$\n Contents: computation of determinants, described in the manual\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel \n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:02 "**************************************************************************\n                                                                 INCLUDES \n use of active doubles\n use of basic forward/reverse\n interfaces of ADOL-C\n use of taping"
2018/06/19 19:52:02 "**************************************************************************\n                                                          ADOUBLE ROUTINE "
2018/06/19 19:52:02 " A is an n x n matrix"
2018/06/19 19:52:02 " k <= n is the order of the submatrix\n its column indices"
2018/06/19 19:52:02 " are encoded in m"
2018/06/19 19:52:02 " recursive call to det"
2018/06/19 19:52:02 " recursive call to det"
2018/06/19 19:52:02 "**************************************************************************\n                                                             MAIN PROGRAM "
2018/06/19 19:52:02 " select matrix size"
2018/06/19 19:52:02 " tag=1=keep\n here keep the intermediates for\n the subsequent call to reverse"
2018/06/19 19:52:02 " make all elements of A independent\n value(adouble) converts to double"
2018/06/19 19:52:02 " actual function call."
2018/06/19 19:52:02 " call reverse to calculate the gradient"
2018/06/19 19:52:02 " the matrix A times the first n\n components of the gradient B\n must be a Cartesian basis vector"
2018/06/19 19:52:02 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/detexam.cpp": 9.746027ms
2018/06/19 19:52:02 Couldn't classify license(s)
2018/06/19 19:52:03 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/eutrophexam.ctrl
2018/06/19 19:52:03 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/eutrophexam.ctrl": 1.715833ms
2018/06/19 19:52:03 Couldn't classify license(s)
2018/06/19 19:52:04 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/ficexam.ctrl
2018/06/19 19:52:04 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/ficexam.ctrl": 1.817927ms
2018/06/19 19:52:04 Couldn't classify license(s)
2018/06/19 19:52:04 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/griewankexam.ctrl
2018/06/19 19:52:04 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/griewankexam.ctrl": 1.821953ms
2018/06/19 19:52:04 Couldn't classify license(s)
2018/06/19 19:52:05 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/vfunc_pargear.cpp
2018/06/19 19:52:05 detected language: 4
2018/06/19 19:52:05 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     vfunc_pargear.cpp\n Revision: $Id$\n Contents: Example of function module containing the machine tool example\n           of gearing (parametrized version)\n \n   Each << function module >> contains:\n          \n     (1) const char* const controlFileName \n     (2) int indepDim; \n     (3) int depDim; \n     (4) void initProblemParameters( void )\n     (5) void initIndependents( double* indeps )\n     (6) void originalVectorFunction( double* indeps, double* deps )\n     (7) void tapingVectorFunction( int tag, double* indeps, double* deps )   \n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel \n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:05 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:52:05 "**************************************************************************\n                                                         GLOBAL VARIABLES "
2018/06/19 19:52:05 "--------------------------------------------------------------------------\n                                                        Control file name "
2018/06/19 19:52:05 "--------------------------------------------------------------------------\n                                                               Dimensions "
2018/06/19 19:52:05 "--------------------------------------------------------------------------\n                                        important machine tool parameters \n example bet06-23 convex pinion flank"
2018/06/19 19:52:05 " konvexe oder konkave Flanke\n Zaehnezahl"
2018/06/19 19:52:05 " Messerversatz\n MK-Versatz\n Kopfspanwinkel\n Flankenspanwinkel\n Messerschwenkwinkel\n Spitzenradius, Flugkreisr.\n MK-Exzentrizitaet\n Exzentrizitaetswinkel\n Messerkopfschwenkung\n Messerkopfneigung\n MK-x\n MK-y\n MK-z\n Wiegenwinkel=Waelztrommelwinkel\n Erzeugungs-Achsversatz\n Verschiebung Werkradachse\n Kegelwinkel"
2018/06/19 19:52:05 " Kopfradius\n Sphaerikradius\n Sphaerik-Mitte-Y\n Sphaerik-Mitte-Z"
2018/06/19 19:52:05 "--------------------------------------------------------------------------\n                                       Other problem dependent parameters \nstatic unsigned short int dx[3]; /* variable needed by erand48(.) */"
2018/06/19 19:52:05 "**************************************************************************\n                                                  INIT PROBLEM PARAMETERS "
2018/06/19 19:52:05 " number of indeps & deps "
2018/06/19 19:52:05 " Init erand48(); "
2018/06/19 19:52:05 "  dx[0]=rand();\n      dx[1]=rand();\n      dx[2]=rand();"
2018/06/19 19:52:05 "**************************************************************************\n                                                        INITIALIZE INDEPs "
2018/06/19 19:52:05 "**************************************************************************\n                                                 ORIGINAL SCALAR FUNCTION "
2018/06/19 19:52:05 "--------------------------------------------------------------------------\n                                                       The model function "
2018/06/19 19:52:05 "--------------------------------------------------------------------------\n parametrized cutting edge"
2018/06/19 19:52:05 " jetzt kommen die Parameter\n Kopfradius\n Sphaerikradius\n Sphaerik-Mitte-Y\n Sphaerik-Mitte-Z"
2018/06/19 19:52:05 "--------------------------------------------------------------------------\n the main function"
2018/06/19 19:52:05 " (u,v,t) Parametrisierung der Bewegung der Messerschneide\n (x,y,z) Bewegte Messerschneide\n jetzt kommen die ganzen Parameter\n Messerversatz\n MK-Versatz\n Kopfspanwinkel\n Flankenspanwinkel\n Messerschwenkwinkel\n Flugkreisradius\n Exzentrizitaet\n Exzentrizitaetswinkel\n Messerkopfschwenkung\n Messerkopfneigung\n MK-x\n MK-y\n MK-z\n Wiegenwinkel\n Achsversatz\n Verschiebung Werkradachse\n Teilkegeloeffnungswinkel\n"
2018/06/19 19:52:05 " Kopfradius\n Sphaerikradius\n Sphaerik-Mitte-Y\n Sphaerik-Mitte-Z\n jetzt die Zusatzbewegungen"
2018/06/19 19:52:05 " Hilfswert"
2018/06/19 19:52:05 " Definition der Schneide"
2018/06/19 19:52:05 " Position der Schneide am Messerkopf\n (jetzt die Ber\"ucksichtigung von hgKopSpW, hgFlaSpW, hgMeSchW)\n Messerschwenkwinkel Theta_M\n Flankenspanwinkel Theta_F\n Kopfspanwinkel Theta_K\n Position der Schneide am Messerkopf\n Flugkreisradius\n Messerversatz"
2018/06/19 19:52:05 " Messerkopfrotation mit Parameter v"
2018/06/19 19:52:05 " Lage des Messerkopfs auf der Wiege"
2018/06/19 19:52:05 " Beruecksichtigung der Messerkopf-Exzentrizitaet"
2018/06/19 19:52:05 " Eindrehen in Orientierung der Wiege"
2018/06/19 19:52:05 " Beruecksichtigung von Messerkopf-Schwenkwinkel hgThetaS\n und der Messerkopfneigung hgThetaN\n Einschwenken in die Neigungsachse\n Neigung um x-Achse\n Rueckschwenken aus der Neigungsachse"
2018/06/19 19:52:05 " Verschiebung\n FLB1-x-Achse zeigt nach oben     -> (-xNeu)\n FLB1-z-Achse zeigt nach rechts   ->  (yNeu)\n FLB1-y-Achse zeigt aus der Wiege ->  (zNeu)"
2018/06/19 19:52:05 " Wiegenwinkel thetaW, entspricht dem wert t=0"
2018/06/19 19:52:05 " ZUSATZBEWEGUNG Radial motion"
2018/06/19 19:52:05 " radiale Verschiebung des Messerkopfes"
2018/06/19 19:52:05 " Wiegenbewegung mit Parameter t"
2018/06/19 19:52:05 " ZUSATZBEWEGUNG Vertical motion"
2018/06/19 19:52:05 " Achsversatz in positive x-Richtung"
2018/06/19 19:52:05 " originaler Achsversatz"
2018/06/19 19:52:05 " ZUSATZBEWEGUNG Horizontal motion"
2018/06/19 19:52:05 " Achsversatz in positive y-Richtung"
2018/06/19 19:52:05 " ZUSATZBEWEGUNG Helical motion"
2018/06/19 19:52:05 " Tiefenposition in negative z-Richtung"
2018/06/19 19:52:05 " Eindrehen in Orientierung des Werkrades"
2018/06/19 19:52:05 " ZUSATZBEWEGUNG Angular motion"
2018/06/19 19:52:05 " umgekehrte Drehung um die x-Achse"
2018/06/19 19:52:05 " Teilkegeloeffnungswinkel delta - y-Achsen entgegengesetzt"
2018/06/19 19:52:05 " neue Verschiebung der Werkradachse\n z-Achse zeigt zu Spitze"
2018/06/19 19:52:05 " ZUSATZBEWEGUNG Modified roll"
2018/06/19 19:52:05 " c*v + omega * t\n gekoppelte Werkraddrehung in Abhaengigkeit von t und v"
2018/06/19 19:52:05 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:05 " jetzt kommen die ganzen Parameter\n Messerversatz\n MK-Versatz\n Kopfspanwinkel\n Flankenspanwinkel\n Messerschwenkwinkel\n Flugkreisradius\n Exzentrizitaet\n Exzentrizitaetswinkel\n Messerkopfschwenkung\n Messerkopfneigung\n MK-x\n MK-y\n MK-z\n Wiegenwinkel\n Achsversatz\n Verschiebung Werkradachse\n Teilkegeloeffnungswinkel\n"
2018/06/19 19:52:05 " Kopfradius\n Sphaerikradius\n Sphaerik-Mitte-Y\n Sphaerik-Mitte-Z\n jetzt die Zusatzbewegungen"
2018/06/19 19:52:05 "**************************************************************************\n                                                   TAPING SCALAR FUNCTION "
2018/06/19 19:52:05 "--------------------------------------------------------------------------\n                                                       The model function "
2018/06/19 19:52:05 "--------------------------------------------------------------------------\n parametrized cutting edge"
2018/06/19 19:52:05 " jetzt kommen die Parameter\n Kopfradius\n Sphaerikradius\n Sphaerik-Mitte-Y\n Sphaerik-Mitte-Z"
2018/06/19 19:52:05 "--------------------------------------------------------------------------\n the main function"
2018/06/19 19:52:05 " (u,v,t) Parametrisierung der Bewegung der Messerschneide\n (x,y,z) Bewegte Messerschneide\n jetzt kommen die ganzen Parameter\n Messerversatz\n MK-Versatz\n Kopfspanwinkel\n Flankenspanwinkel\n Messerschwenkwinkel\n Flugkreisradius\n Exzentrizitaet\n Exzentrizitaetswinkel\n Messerkopfschwenkung\n Messerkopfneigung\n MK-x\n MK-y\n MK-z\n Wiegenwinkel\n Achsversatz\n Verschiebung Werkradachse\n Teilkegeloeffnungswinkel\n"
2018/06/19 19:52:05 " Kopfradius\n Sphaerikradius\n Sphaerik-Mitte-Y\n Sphaerik-Mitte-Z\n jetzt die Zusatzbewegungen"
2018/06/19 19:52:05 " Definition der Schneide"
2018/06/19 19:52:05 " Position der Schneide am Messerkopf\n (jetzt die Ber\"ucksichtigung von hgKopSpW, hgFlaSpW, hgMeSchW)\n Messerschwenkwinkel Theta_M\n Flankenspanwinkel Theta_F\n Kopfspanwinkel Theta_K\n Position der Schneide am Messerkopf\n Flugkreisradius\n Messerversatz"
2018/06/19 19:52:05 " Messerkopfrotation mit Parameter v"
2018/06/19 19:52:05 " Lage des Messerkopfs auf der Wiege"
2018/06/19 19:52:05 " Beruecksichtigung der Messerkopf-Exzentrizitaet"
2018/06/19 19:52:05 " Eindrehen in Orientierung der Wiege"
2018/06/19 19:52:05 " Beruecksichtigung von Messerkopf-Schwenkwinkel hgThetaS\n und der Messerkopfneigung hgThetaN\n Einschwenken in die Neigungsachse\n Neigung um x-Achse\n Rueckschwenken aus der Neigungsachse"
2018/06/19 19:52:05 " Verschiebung\n FLB1-x-Achse zeigt nach oben     -> (-xNeu)\n FLB1-z-Achse zeigt nach rechts   ->  (yNeu)\n FLB1-y-Achse zeigt aus der Wiege ->  (zNeu)"
2018/06/19 19:52:05 " Wiegenwinkel thetaW, entspricht dem wert t=0"
2018/06/19 19:52:05 " ZUSATZBEWEGUNG Radial motion"
2018/06/19 19:52:05 " radiale Verschiebung des Messerkopfes"
2018/06/19 19:52:05 " Wiegenbewegung mit Parameter t"
2018/06/19 19:52:05 " ZUSATZBEWEGUNG Vertical motion"
2018/06/19 19:52:05 " Achsversatz in positive x-Richtung"
2018/06/19 19:52:05 " originaler Achsversatz"
2018/06/19 19:52:05 " ZUSATZBEWEGUNG Horizontal motion"
2018/06/19 19:52:05 " Achsversatz in positive y-Richtung"
2018/06/19 19:52:05 " ZUSATZBEWEGUNG Helical motion"
2018/06/19 19:52:05 " Tiefenposition in negative z-Richtung"
2018/06/19 19:52:05 " Eindrehen in Orientierung des Werkrades"
2018/06/19 19:52:05 " ZUSATZBEWEGUNG Angular motion"
2018/06/19 19:52:05 " umgekehrte Drehung um die x-Achse"
2018/06/19 19:52:05 " Teilkegeloeffnungswinkel delta - y-Achsen entgegengesetzt"
2018/06/19 19:52:05 " neue Verschiebung der Werkradachse\n z-Achse zeigt zu Spitze"
2018/06/19 19:52:05 " ZUSATZBEWEGUNG Modified roll"
2018/06/19 19:52:05 " c*v + omega * t\n gekoppelte Werkraddrehung in Abhaengigkeit von t und v"
2018/06/19 19:52:05 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:05 " jetzt kommen die ganzen Parameter\n Messerversatz\n MK-Versatz\n Kopfspanwinkel\n Flankenspanwinkel\n Messerschwenkwinkel\n Flugkreisradius\n Exzentrizitaet\n Exzentrizitaetswinkel\n Messerkopfschwenkung\n Messerkopfneigung\n MK-x\n MK-y\n MK-z\n Wiegenwinkel\n Achsversatz\n Verschiebung Werkradachse\n Teilkegeloeffnungswinkel\n"
2018/06/19 19:52:05 " Kopfradius\n Sphaerikradius\n Sphaerik-Mitte-Y\n Sphaerik-Mitte-Z\n jetzt die Zusatzbewegungen"
2018/06/19 19:52:05 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/vfunc_pargear.cpp": 25.53195ms
2018/06/19 19:52:05 Couldn't classify license(s)
2018/06/19 19:52:06 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/shuttlexam.ctrl
2018/06/19 19:52:06 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/shuttlexam.ctrl": 1.847768ms
2018/06/19 19:52:06 Couldn't classify license(s)
2018/06/19 19:52:07 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/sfunc_determinant.cpp
2018/06/19 19:52:07 detected language: 4
2018/06/19 19:52:07 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     sfunc_determinant.cpp\n Revision: $Id$\n Contents: function module containing the determinant example\n \n   Each << function module >> contains:\n          \n     (1) const char* const controlFileName \n     (2) int indepDim; \n     (3) void initProblemParameters( void )\n     (4) void initIndependents( double* indeps )\n     (5) double originalScalarFunction( double* indeps )\n     (6) double tapingScalarFunction( int tag, double* indeps )   \n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:07 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:52:07 "**************************************************************************\n                                                         GLOBAL VARIABLES "
2018/06/19 19:52:07 "--------------------------------------------------------------------------\n                                                        Control file name "
2018/06/19 19:52:07 "--------------------------------------------------------------------------\n                                                               Dimensions "
2018/06/19 19:52:07 "--------------------------------------------------------------------------\n                                       Other problem dependent parameters "
2018/06/19 19:52:07 "**************************************************************************\n                                                  INIT PROBLEM PARAMETERS "
2018/06/19 19:52:07 "**************************************************************************\n                                                        INITIALIZE INDEPs "
2018/06/19 19:52:07 "**************************************************************************\n                                                 ORIGINAL SCALAR FUNCTION "
2018/06/19 19:52:07 "--------------------------------------------------------------------------\n                                       The recursive determinant function "
2018/06/19 19:52:07 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:07 "**************************************************************************\n                                                   TAPING SCALAR FUNCTION "
2018/06/19 19:52:07 "--------------------------------------------------------------------------\n                                       The recursive determinant function "
2018/06/19 19:52:07 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:07 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/sfunc_determinant.cpp": 11.972948ms
2018/06/19 19:52:07 Couldn't classify license(s)
2018/06/19 19:52:08 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/helmholtzexam.ctrl
2018/06/19 19:52:08 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/helmholtzexam.ctrl": 1.855354ms
2018/06/19 19:52:08 Couldn't classify license(s)
2018/06/19 19:52:08 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/gearexam.ctrl
2018/06/19 19:52:08 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/gearexam.ctrl": 1.944601ms
2018/06/19 19:52:08 Couldn't classify license(s)
2018/06/19 19:52:09 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/sfunc_experimental.cpp
2018/06/19 19:52:09 detected language: 4
2018/06/19 19:52:09 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     sfunc_experimental.cpp\n Revision: $Id$\n Contents: function module containing an experimental function\n \n   Each << function module >> contains:\n          \n     (1) const char* const controlFileName \n     (2) int indepDim; \n     (3) void initProblemParameters( void )\n     (4) void initIndependents( double* indeps )\n     (5) double originalScalarFunction( double* indeps )\n     (6) double tapingScalarFunction( int tag, double* indeps )   \n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:09 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:52:09 "**************************************************************************\n                                                         GLOBAL VARIABLES "
2018/06/19 19:52:09 "--------------------------------------------------------------------------\n                                                        Control file name "
2018/06/19 19:52:09 "--------------------------------------------------------------------------\n                                                               Dimensions "
2018/06/19 19:52:09 "--------------------------------------------------------------------------\n                                       Other problem dependent parameters \n#define CODE sqrt(indeps[i])"
2018/06/19 19:52:09 "#define CODE indeps[i]*indeps[i]"
2018/06/19 19:52:09 "**************************************************************************\n                                                  INIT PROBLEM PARAMETERS "
2018/06/19 19:52:09 "**************************************************************************\n                                                        INITIALIZE INDEPs "
2018/06/19 19:52:09 "**************************************************************************\n                                                 ORIGINAL SCALAR FUNCTION "
2018/06/19 19:52:09 "--------------------------------------------------------------------------\n                                                    experimental function "
2018/06/19 19:52:09 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:09 "**************************************************************************\n                                                   TAPING SCALAR FUNCTION "
2018/06/19 19:52:09 "--------------------------------------------------------------------------\n                                             active experimental function "
2018/06/19 19:52:09 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:09 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/sfunc_experimental.cpp": 14.555832ms
2018/06/19 19:52:09 Couldn't classify license(s)
2018/06/19 19:52:10 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/sfunc_helmholtz.cpp
2018/06/19 19:52:10 detected language: 4
2018/06/19 19:52:10 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     sfunc_helmholtz.cpp\n Revision: $Id$\n Contents: function module containing Helmholtz energy function\n\n   Each << function module >> contains:\n          \n     (1) const char* const controlFileName \n     (2) int indepDim; \n     (3) void initProblemParameters( void )\n     (4) void initIndependents( double* indeps )\n     (5) double originalScalarFunction( double* indeps )\n     (6) double tapingScalarFunction( int tag, double* indeps )   \n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:10 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:52:10 "**************************************************************************\n                                                         GLOBAL VARIABLES "
2018/06/19 19:52:10 "--------------------------------------------------------------------------\n                                                        Control file name "
2018/06/19 19:52:10 "--------------------------------------------------------------------------\n                                                               Dimensions "
2018/06/19 19:52:10 "--------------------------------------------------------------------------\n                                       Other problem dependent parameters "
2018/06/19 19:52:10 " originally 0.0 "
2018/06/19 19:52:10 "**************************************************************************\n                                                  INIT PROBLEM PARAMETERS "
2018/06/19 19:52:10 "**************************************************************************\n                                                        INITIALIZE INDEPs "
2018/06/19 19:52:10 "**************************************************************************\n                                                 ORIGINAL SCALAR FUNCTION "
2018/06/19 19:52:10 "--------------------------------------------------------------------------\n                                                         Helmholtz energy "
2018/06/19 19:52:10 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:10 "**************************************************************************\n                                                   TAPING SCALAR FUNCTION "
2018/06/19 19:52:10 "--------------------------------------------------------------------------\n                                                  active Helmholtz energy "
2018/06/19 19:52:10 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:10 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/sfunc_helmholtz.cpp": 12.029359ms
2018/06/19 19:52:10 Couldn't classify license(s)
2018/06/19 19:52:11 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/experimental.ctrl
2018/06/19 19:52:11 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/experimental.ctrl": 1.879383ms
2018/06/19 19:52:11 Couldn't classify license(s)
2018/06/19 19:52:11 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/vgenmain.cpp
2018/06/19 19:52:11 detected language: 4
2018/06/19 19:52:11 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     vgenmain.cpp\n Revision: $Id$\n Contents: Vector Generic Main File: \n       for use with function modules containing several vector\n       function examples \n       (e.g. the sinple example in vfunc_simplevec.cpp)\n\n   Each << function module >> contains:\n          \n     (1) const char* const controlFileName \n     (2) int indepDim; \n     (3) int depDim; \n     (4) void initProblemParameters( void )\n     (5) void initIndependents( double* indeps )\n     (6) void originalVectorFunction( double* indeps, double* deps )\n     (7) void tapingVectorFunction( int tag, double* indeps, double* deps )   \n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel \n   \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:11 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:52:11 "**************************************************************************\n                                                                   MACROS "
2018/06/19 19:52:11 "**************************************************************************\n                                      EXTERNAL STUFF FROM FUNCTION MODULES"
2018/06/19 19:52:11 "--------------------------------------------------------------------------\n                                                        Control file name "
2018/06/19 19:52:11 "--------------------------------------------------------------------------\n                                                               Dimensions "
2018/06/19 19:52:11 "--------------------------------------------------------------------------\n                                                  Init Problem Parameters "
2018/06/19 19:52:11 "--------------------------------------------------------------------------\n                                                        Initialize indeps "
2018/06/19 19:52:11 "--------------------------------------------------------------------------\n                                                 Original scalar function "
2018/06/19 19:52:11 "--------------------------------------------------------------------------\n                                                   Taping scalar function "
2018/06/19 19:52:11 "**************************************************************************\n                                                            CONTROL STUFF "
2018/06/19 19:52:11 "**************************************************************************\n                                                     PROVIDE RANDOM INITs \nunsigned short int dx[3]; /* variable needed by erand48(.) */"
2018/06/19 19:52:11 " a function to initialize dx using actual time "
2018/06/19 19:52:11 "  dx[0]=rand();\n      dx[1]=rand();\n      dx[2]=rand();"
2018/06/19 19:52:11 "**************************************************************************\n                                                             MAIN PROGRAM "
2018/06/19 19:52:11 " tape tag "
2018/06/19 19:52:11 " forward/reverse parameters \n # of evaluations "
2018/06/19 19:52:11 "**************************************************************************\n                                        READ CONTROL PARAMETERS FROM FILE "
2018/06/19 19:52:11 "------------------------------------------------------------------------\n                                                      open file to read "
2018/06/19 19:52:11 "------------------------------------------------------------------------\n                                                        read all values "
2018/06/19 19:52:11 "------------------------------------------------------------------------\n                                                     close control file "
2018/06/19 19:52:11 "**************************************************************************\n                                               VARIABLES & INITIALIZATION "
2018/06/19 19:52:11 "------------------------------------------------------------------------\n Initialize all problem parameters (including  dimension) "
2018/06/19 19:52:11 "------------------------------------------------------------------------\n Initialize the independent variables "
2018/06/19 19:52:11 "------------------------------------------------------------------------\n Check main parameters "
2018/06/19 19:52:11 "------------------------------------------------------------------------\n Necessary variable "
2018/06/19 19:52:11 " return value \n time values "
2018/06/19 19:52:11 "**************************************************************************\n                                          0. ORIGINAL FUNCTION EVALUATION \n                                             ---> always                  "
2018/06/19 19:52:11 "**************************************************************************\n                                                   1. TAPING THE FUNCTION \n                                                      ---> always         "
2018/06/19 19:52:11 " NOTE: taping will be performed ONCE only "
2018/06/19 19:52:11 "**************************************************************************\n                                                           2. ZOS_FORWARD "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n NO KEEP "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n KEEP "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:11 "**************************************************************************\n                                                           3. FOS_FORWARD "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n NO KEEP "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n KEEP "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:11 "**************************************************************************\n                                                           4. HOS_FORWARD "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n NO KEEP "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n KEEP "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:11 "**************************************************************************\n                                                           5. FOV_FORWARD "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n always NO KEEP "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:11 "**************************************************************************\n                                                           6. HOV_FORWARD "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n always NO KEEP "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:11 "**************************************************************************\n                                                           7. FOS_REVERSE "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Forward with keep"
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Reverse "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:11 "**************************************************************************\n                                                           8. HOS_REVERSE "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Forward with keep"
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Reverse "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:11 "**************************************************************************\n                                                           9. FOV_REVERSE "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Forward with keep"
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Reverse "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:11 "**************************************************************************\n                                                          10. HOV_REVERSE "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Forward with keep"
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Reverse  without nonzero pattern"
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Reverse  with nonzero pattern"
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:11 "**************************************************************************\n                                                             11. FUNCTION "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Function evaluation "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:11 "**************************************************************************\n                                                             12. JACOBIAN "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Gradient evaluation "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:11 "**************************************************************************\n                                                               13. VECJAC "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Evaluation without repeat "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Evaluation with repeat "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:11 "**************************************************************************\n                                                               14. JACVEC "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Evaluation "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:11 "**************************************************************************\n                                                           15. LAGHESSVEC "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Evaluation "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:11 "**************************************************************************\n                                                               16. TENSOR "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n tensor evaluation "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:11 "**************************************************************************\n                                                       17. INVERSE TENSOR "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n tensor evaluation "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:11 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:11 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/vgenmain.cpp": 24.946734ms
2018/06/19 19:52:11 Couldn't classify license(s)
2018/06/19 19:52:12 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/rotations.cpp
2018/06/19 19:52:12 detected language: 4
2018/06/19 19:52:12 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     rotations.cpp\n Revision: $Id$\n Contents: \n\n   ... contains elementary rotations used by the machine tool \n       example of gearing (vfunc_pargear.C)\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:12 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:52:12 "**************************************************************************\n                                                     ELEMENTARY ROTATIONS "
2018/06/19 19:52:12 "--------------------------------------------------------------------------"
2018/06/19 19:52:12 "--------------------------------------------------------------------------"
2018/06/19 19:52:12 "--------------------------------------------------------------------------"
2018/06/19 19:52:12 "**************************************************************************\n                                           ACTIVATED ELEMENTARY ROTATIONS "
2018/06/19 19:52:12 "--------------------------------------------------------------------------"
2018/06/19 19:52:12 "--------------------------------------------------------------------------"
2018/06/19 19:52:12 "--------------------------------------------------------------------------"
2018/06/19 19:52:12 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/rotations.cpp": 11.231979ms
2018/06/19 19:52:12 Couldn't classify license(s)
2018/06/19 19:52:13 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/pargearexam.ctrl
2018/06/19 19:52:13 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/pargearexam.ctrl": 1.709426ms
2018/06/19 19:52:13 Couldn't classify license(s)
2018/06/19 19:52:14 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/rosenbrockexam.ctrl
2018/06/19 19:52:14 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/rosenbrockexam.ctrl": 1.929373ms
2018/06/19 19:52:14 Couldn't classify license(s)
2018/06/19 19:52:15 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/rotations.h
2018/06/19 19:52:15 detected language: 4
2018/06/19 19:52:15 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     rotations.h\n Revision: $Id$\n Contents: \n\n   ... contains elementary rotations used by the machine tool \n       example of gearing (vfunc_pargear.C)\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel \n    \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:15 "**************************************************************************\n                                                     ELEMENTARY ROTATIONS "
2018/06/19 19:52:15 "--------------------------------------------------------------------------"
2018/06/19 19:52:15 "--------------------------------------------------------------------------"
2018/06/19 19:52:15 "--------------------------------------------------------------------------"
2018/06/19 19:52:15 "**************************************************************************\n                                           ACTIVATED ELEMENTARY ROTATIONS "
2018/06/19 19:52:15 "--------------------------------------------------------------------------"
2018/06/19 19:52:15 "--------------------------------------------------------------------------"
2018/06/19 19:52:15 "--------------------------------------------------------------------------"
2018/06/19 19:52:15 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/rotations.h": 7.733127ms
2018/06/19 19:52:15 Couldn't classify license(s)
2018/06/19 19:52:15 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/michalewitzexam.ctrl
2018/06/19 19:52:15 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/michalewitzexam.ctrl": 1.8071ms
2018/06/19 19:52:15 Couldn't classify license(s)
2018/06/19 19:52:16 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/Makefile.am
2018/06/19 19:52:16 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/Makefile.am": 12.299082ms
2018/06/19 19:52:16 Couldn't classify license(s)
2018/06/19 19:52:17 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/sfunc_rosenbrock.cpp
2018/06/19 19:52:17 detected language: 4
2018/06/19 19:52:17 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     sfunc_rosenbrock.cpp\n Revision: $Id$\n Contents: function module containing  Rosenbrock's function\n\n   Each << function module >> contains:\n          \n     (1) const char* const controlFileName \n     (2) int indepDim; \n     (3) void initProblemParameters( void )\n     (4) void initIndependents( double* indeps )\n     (5) double originalScalarFunction( double* indeps )\n     (6) double tapingScalarFunction( int tag, double* indeps )   \n \n Copyright (c) Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:17 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:52:17 "**************************************************************************\n                                                         GLOBAL VARIABLES "
2018/06/19 19:52:17 "--------------------------------------------------------------------------\n                                                        Control file name "
2018/06/19 19:52:17 "--------------------------------------------------------------------------\n                                                               Dimensions "
2018/06/19 19:52:17 "--------------------------------------------------------------------------\n                                       Other problem dependent parameters "
2018/06/19 19:52:17 "**************************************************************************\n                                                  INIT PROBLEM PARAMETERS "
2018/06/19 19:52:17 "**************************************************************************\n                                                        INITIALIZE INDEPs "
2018/06/19 19:52:17 "**************************************************************************\n                                                 ORIGINAL SCALAR FUNCTION "
2018/06/19 19:52:17 "--------------------------------------------------------------------------\n                                                       Griewanks function "
2018/06/19 19:52:17 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:17 "**************************************************************************\n                                                   TAPING SCALAR FUNCTION "
2018/06/19 19:52:17 "--------------------------------------------------------------------------\n                                                active Griewnaks function "
2018/06/19 19:52:17 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:17 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/sfunc_rosenbrock.cpp": 11.6623ms
2018/06/19 19:52:17 Couldn't classify license(s)
2018/06/19 19:52:18 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/vfunc_simplevec.cpp
2018/06/19 19:52:18 detected language: 4
2018/06/19 19:52:18 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     vfunc_simplevec.cpp\n Revision: $Id$\n Contents: Example of function module containing a simple vector example\n\n   Each << function module >> contains:\n          \n     (1) const char* const controlFileName \n     (2) int indepDim; \n     (3) int depDim; \n     (4) void initProblemParameters( void )\n     (5) void initIndependents( double* indeps )\n     (6) void originalVectorFunction( double* indeps, double* deps )\n     (7) void tapingVectorFunction( int tag, double* indeps, double* deps )   \n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel \n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:18 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:52:18 "**************************************************************************\n                                                         GLOBAL VARIABLES "
2018/06/19 19:52:18 "--------------------------------------------------------------------------\n                                                        Control file name "
2018/06/19 19:52:18 "--------------------------------------------------------------------------\n                                                               Dimensions "
2018/06/19 19:52:18 "--------------------------------------------------------------------------\n                                       Other problem dependent parameters \nstatic unsigned short int dx[3]; /* variable needed by erand48(.) */"
2018/06/19 19:52:18 "**************************************************************************\n                                                  INIT PROBLEM PARAMETERS "
2018/06/19 19:52:18 " number of indeps & deps "
2018/06/19 19:52:18 " Init erand48(); "
2018/06/19 19:52:18 "  dx[0]=rand();\n      dx[1]=rand();\n      dx[2]=rand();"
2018/06/19 19:52:18 "**************************************************************************\n                                                        INITIALIZE INDEPs "
2018/06/19 19:52:18 "**************************************************************************\n                                                 ORIGINAL SCALAR FUNCTION "
2018/06/19 19:52:18 "--------------------------------------------------------------------------\n                                               The simple vector function "
2018/06/19 19:52:18 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:18 "**************************************************************************\n                                                   TAPING SCALAR FUNCTION "
2018/06/19 19:52:18 "--------------------------------------------------------------------------\n                                       The simple adouble vector function "
2018/06/19 19:52:18 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:18 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/vfunc_simplevec.cpp": 12.323722ms
2018/06/19 19:52:18 Couldn't classify license(s)
2018/06/19 19:52:18 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/speelpenning.ctrl
2018/06/19 19:52:18 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/speelpenning.ctrl": 1.80835ms
2018/06/19 19:52:18 Couldn't classify license(s)
2018/06/19 19:52:19 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/Makefile.in
2018/06/19 19:52:19 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/Makefile.in": 93.484995ms
2018/06/19 19:52:19 Couldn't classify license(s)
2018/06/19 19:52:20 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/detexam.ctrl
2018/06/19 19:52:20 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/detexam.ctrl": 1.858506ms
2018/06/19 19:52:20 Couldn't classify license(s)
2018/06/19 19:52:21 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/sfunc_speelpenning.cpp
2018/06/19 19:52:21 detected language: 4
2018/06/19 19:52:21 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     sfunc_speelpenning.cpp\n Revision: $Id$\n Contents: function module containing Speepennings product\n\n   Each << function module >> contains:\n          \n     (1) const char* const controlFileName \n     (2) int indepDim; \n     (3) void initProblemParameters( void )\n     (4) void initIndependents( double* indeps )\n     (5) double originalScalarFunction( double* indeps )\n     (6) double tapingScalarFunction( int tag, double* indeps )   \n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:21 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:52:21 "**************************************************************************\n                                                         GLOBAL VARIABLES "
2018/06/19 19:52:21 "--------------------------------------------------------------------------\n                                                        Control file name "
2018/06/19 19:52:21 "--------------------------------------------------------------------------\n                                                               Dimensions "
2018/06/19 19:52:21 "--------------------------------------------------------------------------\n                                       Other problem dependent parameters "
2018/06/19 19:52:21 "**************************************************************************\n                                                  INIT PROBLEM PARAMETERS "
2018/06/19 19:52:21 "**************************************************************************\n                                                        INITIALIZE INDEPs "
2018/06/19 19:52:21 "**************************************************************************\n                                                 ORIGINAL SCALAR FUNCTION "
2018/06/19 19:52:21 "--------------------------------------------------------------------------\n                                                    Speelpennings product "
2018/06/19 19:52:21 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:21 "**************************************************************************\n                                                   TAPING SCALAR FUNCTION "
2018/06/19 19:52:21 "--------------------------------------------------------------------------\n                                             active Speelpennings product "
2018/06/19 19:52:21 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:21 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/sfunc_speelpenning.cpp": 11.979729ms
2018/06/19 19:52:21 Couldn't classify license(s)
2018/06/19 19:52:22 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/sfunc_power.cpp
2018/06/19 19:52:22 detected language: 4
2018/06/19 19:52:22 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     sfunc_power.cpp\n Revision: $Id$\n Contents: function module containing the power example\n\n   Each << function module >> contains:\n          \n     (1) const char* const controlFileName \n     (2) int indepDim; \n     (3) void initProblemParameters( void )\n     (4) void initIndependents( double* indeps )\n     (5) double originalScalarFunction( double* indeps )\n     (6) double tapingScalarFunction( int tag, double* indeps )   \n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:22 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:52:22 "**************************************************************************\n                                                         GLOBAL VARIABLES "
2018/06/19 19:52:22 "--------------------------------------------------------------------------\n                                                        Control file name "
2018/06/19 19:52:22 "--------------------------------------------------------------------------\n                                                               Dimensions "
2018/06/19 19:52:22 "--------------------------------------------------------------------------\n                                       Other problem dependent parameters "
2018/06/19 19:52:22 "static unsigned short int dx[3]; /* variable needed by erand48(.) */"
2018/06/19 19:52:22 "**************************************************************************\n                                                  INIT PROBLEM PARAMETERS "
2018/06/19 19:52:22 " Init erand48(); "
2018/06/19 19:52:22 "  dx[0]=rand();\n      dx[1]=rand();\n      dx[2]=rand();"
2018/06/19 19:52:22 "**************************************************************************\n                                                        INITIALIZE INDEPs "
2018/06/19 19:52:22 "**************************************************************************\n                                                 ORIGINAL SCALAR FUNCTION "
2018/06/19 19:52:22 "--------------------------------------------------------------------------\n                                       The recursive determinant function "
2018/06/19 19:52:22 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:22 "**************************************************************************\n                                                   TAPING SCALAR FUNCTION "
2018/06/19 19:52:22 "--------------------------------------------------------------------------\n                                             The recursive power function "
2018/06/19 19:52:22 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:22 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/sfunc_power.cpp": 12.090407ms
2018/06/19 19:52:22 Couldn't classify license(s)
2018/06/19 19:52:22 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/vfunc_gear.cpp
2018/06/19 19:52:22 detected language: 4
2018/06/19 19:52:22 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     vfunc_gear.cpp\n Revision: $Id$\n Contents: Example of function module containing the machine tool example\n            of gearing\n \n   Each << function module >> contains:\n          \n     (1) const char* const controlFileName \n     (2) int indepDim; \n     (3) int depDim; \n     (4) void initProblemParameters( void )\n     (5) void initIndependents( double* indeps )\n     (6) void originalVectorFunction( double* indeps, double* deps )\n     (7) void tapingVectorFunction( int tag, double* indeps, double* deps )   \n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel \n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:22 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:52:22 "**************************************************************************\n                                                         GLOBAL VARIABLES "
2018/06/19 19:52:22 "--------------------------------------------------------------------------\n                                                        Control file name "
2018/06/19 19:52:22 "--------------------------------------------------------------------------\n                                                               Dimensions "
2018/06/19 19:52:22 "--------------------------------------------------------------------------\n                                       Other problem dependent parameters \nstatic unsigned short int dx[3]; /* variable needed by erand48(.) */"
2018/06/19 19:52:22 "**************************************************************************\n                                                  INIT PROBLEM PARAMETERS "
2018/06/19 19:52:22 " number of indeps & deps "
2018/06/19 19:52:22 " Init erand48(); "
2018/06/19 19:52:22 "  dx[0]=rand();\n      dx[1]=rand();\n      dx[2]=rand();"
2018/06/19 19:52:22 "**************************************************************************\n                                                        INITIALIZE INDEPs "
2018/06/19 19:52:22 "**************************************************************************\n                                                 ORIGINAL SCALAR FUNCTION "
2018/06/19 19:52:22 "--------------------------------------------------------------------------\n                                                       The model function "
2018/06/19 19:52:22 "--------------------------------------------------------------------------\n important machine tool parameters"
2018/06/19 19:52:22 " konvexe oder konkave Flanke"
2018/06/19 19:52:22 " Zaehnezahl\n Kegelwinkel\n Verschiebung Teilkegelspitze"
2018/06/19 19:52:22 " MK-x\n MK-y\n MK-z\n Erzeugungs-Achsversatz\n Reitstockeinstellung\n Waelztrommelwinkel"
2018/06/19 19:52:22 " Messerversatz\n MK-Gangzahl\n MK-Versatz"
2018/06/19 19:52:22 " Spitzenradius, Flugkreisr.\n Kopfradius\n Sphaerikradius\n Sphaerik-Mitte-Y\n Sphaerik-Mitte-Z"
2018/06/19 19:52:22 "--------------------------------------------------------------------------\n elementary rotations"
2018/06/19 19:52:22 "--------------------------------------------------------------------------\n parametrized cutting edge"
2018/06/19 19:52:22 "--------------------------------------------------------------------------\n the main function"
2018/06/19 19:52:22 " Position der Schneide am Messerkopf"
2018/06/19 19:52:22 " Messerkopfrotation mit Parameter v"
2018/06/19 19:52:22 " Lage des Messerkopfs auf der Wiege"
2018/06/19 19:52:22 " Eindrehen in Orientierung der Wiege"
2018/06/19 19:52:22 " Verschiebung"
2018/06/19 19:52:22 " Wiegenwinkel thetaW, entspricht dem wert t=0\n + Wiegenbewegung mit Parameter t"
2018/06/19 19:52:22 " Achsversatz"
2018/06/19 19:52:22 " Eindrehen in Orientierung des Werkrades"
2018/06/19 19:52:22 " Teilkegeloeffnungswinkel delta, y-Achsen entgegengesetzt"
2018/06/19 19:52:22 " neue Verschiebung der Werkradachse"
2018/06/19 19:52:22 " gekoppelte Werkraddrehung in Abhaengigkeit von t und v"
2018/06/19 19:52:22 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:22 "**************************************************************************\n                                                   TAPING SCALAR FUNCTION "
2018/06/19 19:52:22 "--------------------------------------------------------------------------\n                                                       The model function "
2018/06/19 19:52:22 " Position der Schneide am Messerkopf"
2018/06/19 19:52:22 " Messerkopfrotation mit Parameter v"
2018/06/19 19:52:22 " Lage des Messerkopfs auf der Wiege"
2018/06/19 19:52:22 " Eindrehen in Orientierung der Wiege"
2018/06/19 19:52:22 " Verschiebung"
2018/06/19 19:52:22 " Wiegenwinkel thetaW, entspricht dem wert t=0\n + Wiegenbewegung mit Parameter t"
2018/06/19 19:52:22 " Achsversatz"
2018/06/19 19:52:22 " Eindrehen in Orientierung des Werkrades"
2018/06/19 19:52:22 " Teilkegeloeffnungswinkel delta, y-Achsen entgegengesetzt"
2018/06/19 19:52:22 " neue Verschiebung der Werkradachse"
2018/06/19 19:52:22 " gekoppelte Werkraddrehung in Abhaengigkeit von t und v"
2018/06/19 19:52:22 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:22 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/vfunc_gear.cpp": 15.911597ms
2018/06/19 19:52:22 Couldn't classify license(s)
2018/06/19 19:52:23 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/sfunc_griewank.cpp
2018/06/19 19:52:23 detected language: 4
2018/06/19 19:52:23 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     sfunc_griewank.cpp\n Revision: $Id$\n Contents: function module containing  Griewanks function\n\n   Each << function module >> contains:\n          \n     (1) const char* const controlFileName \n     (2) int indepDim; \n     (3) void initProblemParameters( void )\n     (4) void initIndependents( double* indeps )\n     (5) double originalScalarFunction( double* indeps )\n     (6) double tapingScalarFunction( int tag, double* indeps )   \n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:23 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:52:23 "**************************************************************************\n                                                         GLOBAL VARIABLES "
2018/06/19 19:52:23 "--------------------------------------------------------------------------\n                                                        Control file name "
2018/06/19 19:52:23 "--------------------------------------------------------------------------\n                                                               Dimensions "
2018/06/19 19:52:23 "--------------------------------------------------------------------------\n                                       Other problem dependent parameters "
2018/06/19 19:52:23 "**************************************************************************\n                                                  INIT PROBLEM PARAMETERS "
2018/06/19 19:52:23 "**************************************************************************\n                                                        INITIALIZE INDEPs "
2018/06/19 19:52:23 "**************************************************************************\n                                                 ORIGINAL SCALAR FUNCTION "
2018/06/19 19:52:23 "--------------------------------------------------------------------------\n                                                       Griewanks function "
2018/06/19 19:52:23 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:23 "**************************************************************************\n                                                   TAPING SCALAR FUNCTION "
2018/06/19 19:52:23 "--------------------------------------------------------------------------\n                                                active Griewnaks function "
2018/06/19 19:52:23 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:23 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/sfunc_griewank.cpp": 11.745119ms
2018/06/19 19:52:23 Couldn't classify license(s)
2018/06/19 19:52:24 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/sgenmain.cpp
2018/06/19 19:52:24 detected language: 4
2018/06/19 19:52:24 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     sgenmain.cpp\n Revision: $Id$\n Contents: Scalar Generic Main File: \n       for use with function modules containing several scalar\n       examples \n       (e.g. the determinant example in sfunc_determinant.cpp)\n\n   Each << function module >> contains:\n          \n     (1) const char* const controlFileName \n     (2) int indepDim; \n     (3) void initProblemParameters( void )\n     (4) void initIndependents( double* indeps )\n     (5) double originalScalarFunction( double* indeps )\n     (6) double tapingScalarFunction( int tag, double* indeps )   \n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:24 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:52:24 "**************************************************************************\n                                                                   MACROS "
2018/06/19 19:52:24 "**************************************************************************\n                                      EXTERNAL STUFF FROM FUNCTION MODULES"
2018/06/19 19:52:24 "--------------------------------------------------------------------------\n                                                        Control file name "
2018/06/19 19:52:24 "--------------------------------------------------------------------------\n                                                               Dimensions "
2018/06/19 19:52:24 "--------------------------------------------------------------------------\n                                                  Init Problem Parameters "
2018/06/19 19:52:24 "--------------------------------------------------------------------------\n                                                        Initialize indeps "
2018/06/19 19:52:24 "--------------------------------------------------------------------------\n                                                 Original scalar function "
2018/06/19 19:52:24 "--------------------------------------------------------------------------\n                                                   Taping scalar function "
2018/06/19 19:52:24 "**************************************************************************\n                                                            CONTROL STUFF "
2018/06/19 19:52:24 "**************************************************************************\n                                                     PROVIDE RANDOM INITs \nunsigned short int dx[3]; /* variable needed by erand48(.) */"
2018/06/19 19:52:24 " a function to initialize dx using actual time "
2018/06/19 19:52:24 "  dx[0]=rand();\n      dx[1]=rand();\n      dx[2]=rand();"
2018/06/19 19:52:24 "**************************************************************************\n                                                             MAIN PROGRAM "
2018/06/19 19:52:24 " tape tag "
2018/06/19 19:52:24 " forward/reverse parameters \n # of evaluations "
2018/06/19 19:52:24 "**************************************************************************\n                                        READ CONTROL PARAMETERS FROM FILE "
2018/06/19 19:52:24 "------------------------------------------------------------------------\n                                                      open file to read "
2018/06/19 19:52:24 "------------------------------------------------------------------------\n                                                        read all values "
2018/06/19 19:52:24 "------------------------------------------------------------------------\n                                                     close control file "
2018/06/19 19:52:24 "**************************************************************************\n                                               VARIABLES & INITIALIZATION "
2018/06/19 19:52:24 "------------------------------------------------------------------------\n Initialize all problem parameters (including  dimension) "
2018/06/19 19:52:24 "------------------------------------------------------------------------\n Initialize the independent variables "
2018/06/19 19:52:24 "------------------------------------------------------------------------\n Check main parameters "
2018/06/19 19:52:24 "------------------------------------------------------------------------\n Necessary variable \n function value "
2018/06/19 19:52:24 " return value \n time values "
2018/06/19 19:52:24 "**************************************************************************\n                                                          NORMALIZE TIMER "
2018/06/19 19:52:24 "**************************************************************************\n                                          0. ORIGINAL FUNCTION EVALUATION \n                                             ---> always                  "
2018/06/19 19:52:24 "**************************************************************************\n                                                   1. TAPING THE FUNCTION \n                                                      ---> always         "
2018/06/19 19:52:24 " NOTE: taping will be performed ONCE only "
2018/06/19 19:52:24 "**************************************************************************\n                                                           2. ZOS_FORWARD "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n NO KEEP "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n KEEP "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:24 "**************************************************************************\n                                                           3. FOS_FORWARD "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n NO KEEP "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n KEEP "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:24 "**************************************************************************\n                                                           4. HOS_FORWARD "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n NO KEEP "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n KEEP "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:24 "**************************************************************************\n                                                           5. FOV_FORWARD "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n always NO KEEP "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:24 "**************************************************************************\n                                                           6. HOV_FORWARD "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n always NO KEEP "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:24 "**************************************************************************\n                                                           7. FOS_REVERSE "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Forward with keep"
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Reverse "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:24 "**************************************************************************\n                                                           8. HOS_REVERSE "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Forward with keep"
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Reverse "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:24 "**************************************************************************\n                                                           9. FOV_REVERSE "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Forward with keep"
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Reverse "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:24 "**************************************************************************\n                                                          10. HOV_REVERSE "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Forward with keep"
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Reverse  without nonzero pattern"
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Reverse  with nonzero pattern"
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:24 "**************************************************************************\n                                                             11. FUNCTION "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Function evaluation "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:24 "**************************************************************************\n                                                             12. JACOBIAN "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Gradient evaluation "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:24 "**************************************************************************\n                                                               13. VECJAC "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Evaluation without repeat "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Evaluation with repeat "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:24 "**************************************************************************\n                                                               14. JACVEC "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Evaluation "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:24 "**************************************************************************\n                                                              15. HESSIAN "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Evaluation "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:24 "**************************************************************************\n                                                              16. HESSVEC "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Evaluation "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:24 "**************************************************************************\n                                                           17. LAGHESSVEC "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Evaluation "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:24 "**************************************************************************\n                                                               18. TENSOR "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n tensor evaluation "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:24 "**************************************************************************\n                                                       19. INVERSE TENSOR "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Allocation & initialisation of tensors "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n tensor evaluation "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Debug infos "
2018/06/19 19:52:24 "----------------------------------------------------------------------\n Free tensors "
2018/06/19 19:52:24 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/sgenmain.cpp": 27.395797ms
2018/06/19 19:52:24 Couldn't classify license(s)
2018/06/19 19:52:25 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/robertsonexam.ctrl
2018/06/19 19:52:25 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/robertsonexam.ctrl": 1.786611ms
2018/06/19 19:52:25 Couldn't classify license(s)
2018/06/19 19:52:25 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/simplevec.ctrl
2018/06/19 19:52:25 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/simplevec.ctrl": 1.822609ms
2018/06/19 19:52:25 Couldn't classify license(s)
2018/06/19 19:52:26 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/powexam.ctrl
2018/06/19 19:52:26 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/powexam.ctrl": 1.884723ms
2018/06/19 19:52:26 Couldn't classify license(s)
2018/06/19 19:52:27 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/sfunc_michalewitz.cpp
2018/06/19 19:52:27 detected language: 4
2018/06/19 19:52:27 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     sfunc_michalewitz.cpp\n Revision: $Id$\n Contents: function module containing Michalewitz' function\n\n   Each << function module >> contains:\n          \n     (1) const char* const controlFileName \n     (2) int indepDim; \n     (3) void initProblemParameters( void )\n     (4) void initIndependents( double* indeps )\n     (5) double originalScalarFunction( double* indeps )\n     (6) double tapingScalarFunction( int tag, double* indeps )   \n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:27 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:52:27 "**************************************************************************\n                                                         GLOBAL VARIABLES "
2018/06/19 19:52:27 "--------------------------------------------------------------------------\n                                                        Control file name "
2018/06/19 19:52:27 "--------------------------------------------------------------------------\n                                                               Dimensions "
2018/06/19 19:52:27 "--------------------------------------------------------------------------\n                                       Other problem dependent parameters "
2018/06/19 19:52:27 "**************************************************************************\n                                                  INIT PROBLEM PARAMETERS "
2018/06/19 19:52:27 "**************************************************************************\n                                                        INITIALIZE INDEPs "
2018/06/19 19:52:27 "**************************************************************************\n                                                 ORIGINAL SCALAR FUNCTION "
2018/06/19 19:52:27 "--------------------------------------------------------------------------\n                                                    Michalewitz' function "
2018/06/19 19:52:27 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:27 "**************************************************************************\n                                                   TAPING SCALAR FUNCTION "
2018/06/19 19:52:27 "--------------------------------------------------------------------------\n                                             active Michalewitz' function "
2018/06/19 19:52:27 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:27 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/sfunc_michalewitz.cpp": 12.378881ms
2018/06/19 19:52:27 Couldn't classify license(s)
2018/06/19 19:52:28 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/README
2018/06/19 19:52:28 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/README": 14.670899ms
2018/06/19 19:52:28 Couldn't classify license(s)
2018/06/19 19:52:29 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/vfunc_shuttle.cpp
2018/06/19 19:52:29 detected language: 4
2018/06/19 19:52:29 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     vfunc_shuttle.cpp\n Revision: $Id$\n Contents: Example of function module containing the shuttle example\n            (based on shuttlexam.c of version 1.7) \n \n   Each << function module >> contains:\n          \n     (1) const char* const controlFileName \n     (2) int indepDim; \n     (3) int depDim; \n     (4) void initProblemParameters( void )\n     (5) void initIndependents( double* indeps )\n     (6) void originalVectorFunction( double* indeps, double* deps )\n     (7) void tapingVectorFunction( int tag, double* indeps, double* deps )   \n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel \n   \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:29 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:52:29 "**************************************************************************\n                                                         GLOBAL VARIABLES "
2018/06/19 19:52:29 "--------------------------------------------------------------------------\n                                                        Control file name "
2018/06/19 19:52:29 "--------------------------------------------------------------------------\n                                                               Dimensions "
2018/06/19 19:52:29 "--------------------------------------------------------------------------\n                                       Other problem dependent parameters "
2018/06/19 19:52:29 "**************************************************************************\n                                                  INIT PROBLEM PARAMETERS "
2018/06/19 19:52:29 " number of indeps & deps "
2018/06/19 19:52:29 "**************************************************************************\n                                                        INITIALIZE INDEPs "
2018/06/19 19:52:29 " H \n x \n l \n V \n g \n A \n b \n Hp \n xp \n lp \n Vp \n gp \n Ap \n bp "
2018/06/19 19:52:29 "**************************************************************************\n                                                 ORIGINAL SCALAR FUNCTION "
2018/06/19 19:52:29 "--------------------------------------------------------------------------\n                                                     The shuttle function "
2018/06/19 19:52:29 " evaluate the dynamic equations ..."
2018/06/19 19:52:29 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:29 "**************************************************************************\n                                                   TAPING SCALAR FUNCTION "
2018/06/19 19:52:29 "--------------------------------------------------------------------------\n                                              The active shuttle function "
2018/06/19 19:52:29 " evaluate the dynamic equations ..."
2018/06/19 19:52:29 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:52:29 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/timing/vfunc_shuttle.cpp": 12.17198ms
2018/06/19 19:52:29 Couldn't classify license(s)
2018/06/19 19:52:29 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/hessmat/Makefile.am
2018/06/19 19:52:29 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/hessmat/Makefile.am": 7.050614ms
2018/06/19 19:52:29 Couldn't classify license(s)
2018/06/19 19:52:30 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/hessmat/Makefile.in
2018/06/19 19:52:30 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/hessmat/Makefile.in": 56.053591ms
2018/06/19 19:52:30 Couldn't classify license(s)
2018/06/19 19:52:31 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/hessmat/hessmat.cpp
2018/06/19 19:52:31 detected language: 4
2018/06/19 19:52:31 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     hessmat.cpp\n Revision: $Id$\n Contents: example for testing the routines: \n           hov_wk_forward    ( = Higher Order Vector forward With Keep )\n           hos_ov_reverse    ( = Higher Order Scalar reverse over vectors)\n\n Copyright (c) Andrea Walther, Andreas Kowarz, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:31 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:52:31 "**************************************************************************\n                                                                     MAIN "
2018/06/19 19:52:31 "--------------------------------------------------------------------------\n inputs "
2018/06/19 19:52:31 "--------------------------------------------------------------------------\n allocations and inits "
2018/06/19 19:52:31 " passive indeps        \n passive depends       "
2018/06/19 19:52:31 " vector x Hessian x matrix = Upp x H x XPPP "
2018/06/19 19:52:31 " vector on left-hand side                \n vector on left-hand side                \n matrix on right-hand side             \n result of Up x H x XPPP             "
2018/06/19 19:52:31 " results of needed hos_wk_forward      "
2018/06/19 19:52:31 " check results with usual lagra-Hess-vec  "
2018/06/19 19:52:31 " inits "
2018/06/19 19:52:31 " first everything is set to zero "
2018/06/19 19:52:31 " now carthesian directions as choosen as    \n matrix on right-hand side of Up x H x XPPP "
2018/06/19 19:52:31 " vector on left-hand side of Up x H x XPPP  \n is initialised with 1's                    "
2018/06/19 19:52:31 " first everything is set to zero "
2018/06/19 19:52:31 " now one carthesian direction as choosen \n as vector for lagra-Hess-vec            "
2018/06/19 19:52:31 " inits of passive indeps "
2018/06/19 19:52:31 "--------------------------------------------------------------------------\n tracing the function "
2018/06/19 19:52:31 " active indeps         \n active depends        "
2018/06/19 19:52:31 "--------------------------------------------------------------------------\n work on the tape "
2018/06/19 19:52:31 " compute results of lagra_hess_vec \n the following is equal to calls inside of lagra_hess_vec(..) \n direct calls to the basic routines hos_forward and hos_reverse \n seem to be faster than call of lagra_hess_vec(..) \n at least in some of our test cases "
2018/06/19 19:52:31 " The new drivers. First, hov_wk_forward(..) is called.\n       So far, it was impossible to store the results of \n       a higher-order-vector (=hov) forward in order to perform\n       a corresponding reverse sweep (for no particular reason.\n       Now we have hov with keep (=wk) and the results needed on\n       the way back are stored in a specific tape "
2018/06/19 19:52:31 " The corresponding reverse sweep\n       So far we had only a higher-order-scalar (=hos, scalar because\n       only one vector on the left-hand-side) for a scalar forward\n       call.\n       Now, we use the stored vector information (= hos vector)\n       to compute multiple lagra_hess_vec at once "
2018/06/19 19:52:31 "**************************************************************************\n                                                               THAT'S ALL "
2018/06/19 19:52:31 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/hessmat/hessmat.cpp": 13.3691ms
2018/06/19 19:52:31 Couldn't classify license(s)
2018/06/19 19:52:32 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/hessmat/README
2018/06/19 19:52:32 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/hessmat/README": 6.239544ms
2018/06/19 19:52:32 Couldn't classify license(s)
2018/06/19 19:52:33 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lie/Makefile.am
2018/06/19 19:52:33 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lie/Makefile.am": 7.083254ms
2018/06/19 19:52:33 Couldn't classify license(s)
2018/06/19 19:52:33 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lie/GantryCrane.cpp
2018/06/19 19:52:33 detected language: 4
2018/06/19 19:52:33 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     GantryCrane.cpp\n Revision: $Id$\n Contents: example for calculation of Lie derivatives\n  \n  \n Copyright (c) Siquian Wang, Klaus Röbenack, Jan Winkler, Mirko Franke\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:33 "* By the example of the gantry crane (as shown in Röbenack, Winkler and \n *  Wang. 'LIEDRIVERS - A Toolbox for the Efficient Computation of Lie \n *  Derivatives Based on the Object-Oriented Algorithmic Differentiation \n *  Package ADOL-C') the usage of the drivers of the Lie Toolbox is \n *  illustrated. \n *  Beside Lie derivatives of scalar fields and their gradients also Lie\n *  brackets are computed.\n "
2018/06/19 19:52:33 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:52:33 "**************************************************************************\n                                                   NAMESPACES AND DEFINES "
2018/06/19 19:52:33 "**************************************************************************\n                                                             MAIN PROGRAM "
2018/06/19 19:52:33 "***************************\n\t * Trace for vector field f *\n\t ***************************"
2018/06/19 19:52:33 "***************************\n\t * Trace for vector field g *\n\t ***************************"
2018/06/19 19:52:33 "*********************************\n\t * Trace for scalar fields h1, h2 *\n\t *********************************"
2018/06/19 19:52:33 "**************************************************\n\t * calculation of Lie derivatives of scalar fields *\n\t **************************************************"
2018/06/19 19:52:33 " calculate Lie derivatives using Lie drivers"
2018/06/19 19:52:33 "***************************************************************\n\t * calculation of gradients of Lie derivatives of scalar fields *\n\t ***************************************************************"
2018/06/19 19:52:33 " calculate gradients of Lie derivatives using Lie drivers"
2018/06/19 19:52:33 "******************************\n\t * calculation of Lie brackets *\n\t ******************************"
2018/06/19 19:52:33 " calculate Lie brackets using Lie drivers"
2018/06/19 19:52:33 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lie/GantryCrane.cpp": 9.626118ms
2018/06/19 19:52:33 Couldn't classify license(s)
2018/06/19 19:52:34 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lie/Makefile.in
2018/06/19 19:52:34 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lie/Makefile.in": 60.31992ms
2018/06/19 19:52:34 Couldn't classify license(s)
2018/06/19 19:52:35 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ext_diff_func/ext_diff_func.cpp
2018/06/19 19:52:35 detected language: 4
2018/06/19 19:52:35 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     ext_diff_func.cpp\n Revision: $Id$\n Contents: example for external differentiated functions\n\n Copyright (c) Andrea Walther\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:35 " time step function\n double version "
2018/06/19 19:52:35 " adouble version "
2018/06/19 19:52:35 " versions for usage as external differentiated function"
2018/06/19 19:52:35 " time interval"
2018/06/19 19:52:35 " state, double and adouble version"
2018/06/19 19:52:35 " control, double and adouble version"
2018/06/19 19:52:35 " target value;"
2018/06/19 19:52:35 "variables for derivative caluclation"
2018/06/19 19:52:35 " tape identifiers"
2018/06/19 19:52:35 " two input variables for external differentiated function"
2018/06/19 19:52:35 " two output variables for external differentiated function"
2018/06/19 19:52:35 " time interval"
2018/06/19 19:52:35 "control"
2018/06/19 19:52:35 " Now using external function facilities"
2018/06/19 19:52:35 " tape external differentiated function"
2018/06/19 19:52:35 " register external function"
2018/06/19 19:52:35 " information for Zero-Order-Scalar (=zos) forward\n   yp = new double[2];\n   ynewp = new double[2];"
2018/06/19 19:52:35 " information for First-Order-Scalar (=fos) reverse"
2018/06/19 19:52:35 " Euler step, adouble version"
2018/06/19 19:52:35 " Euler step, double version"
2018/06/19 19:52:35 " unused \nunused"
2018/06/19 19:52:35 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ext_diff_func/ext_diff_func.cpp": 17.151037ms
2018/06/19 19:52:35 Couldn't classify license(s)
2018/06/19 19:52:36 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ext_diff_func/Makefile.am
2018/06/19 19:52:36 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ext_diff_func/Makefile.am": 7.163778ms
2018/06/19 19:52:36 Couldn't classify license(s)
2018/06/19 19:52:37 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ext_diff_func/Makefile.in
2018/06/19 19:52:37 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ext_diff_func/Makefile.in": 56.572376ms
2018/06/19 19:52:37 Couldn't classify license(s)
2018/06/19 19:52:37 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ext_diff_func/README
2018/06/19 19:52:37 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ext_diff_func/README": 6.381808ms
2018/06/19 19:52:37 Couldn't classify license(s)
2018/06/19 19:52:38 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/clock/myclock.h
2018/06/19 19:52:38 detected language: 4
2018/06/19 19:52:38 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     myclock.h\n Revision: $Id$\n Contents: timing utilities\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:38 "**************************************************************************\n                                                        CLOCKS PER SECOND "
2018/06/19 19:52:38 "**************************************************************************\n                                                                    CLOCK "
2018/06/19 19:52:38 "**************************************************************************\n                                                          NORMALIZE CLOCK "
2018/06/19 19:52:38 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/clock/myclock.h": 7.217371ms
2018/06/19 19:52:38 Couldn't classify license(s)
2018/06/19 19:52:39 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/clock/myclock.cpp
2018/06/19 19:52:39 detected language: 4
2018/06/19 19:52:39 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     myclock.cpp\n Revision: $Id$\n Contents: timing utilities\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel \n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:39 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:52:39 "**************************************************************************\n                                                          CLOCK UTILITIES "
2018/06/19 19:52:39 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/clock/myclock.cpp": 7.016108ms
2018/06/19 19:52:39 Couldn't classify license(s)
2018/06/19 19:52:40 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/clock/Makefile.am
2018/06/19 19:52:40 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/clock/Makefile.am": 6.39328ms
2018/06/19 19:52:40 Couldn't classify license(s)
2018/06/19 19:52:41 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/clock/Makefile.in
2018/06/19 19:52:41 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/clock/Makefile.in": 60.788384ms
2018/06/19 19:52:41 Couldn't classify license(s)
2018/06/19 19:52:41 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/MittelmannDistCntrlNeumA_sparse/ADOL-C_sparseNLP.cpp
2018/06/19 19:52:41 detected language: 4
2018/06/19 19:52:41 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     ADOL-C_sparseNLP.cpp\n Revision: $$\n Contents: class myADOLC_sparseNPL for interfacing with Ipopt\n \n Copyright (c) Andrea Walther\n   \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n This code is based on the file  MyNLP.cpp contained in the Ipopt package\n with the authors:  Carl Laird, Andreas Waechter   \n----------------------------------------------------------------------------"
2018/06/19 19:52:41 "* C++ Example NLP for interfacing a problem with IPOPT and ADOL-C.\n *  MyADOL-C_sparseNLP implements a C++ example showing how to interface \n *  with IPOPT and ADOL-C through the TNLP interface. This class \n *  implements a distributed control problem with homogeneous\n *  Neumann boundary conditions, as formulated by Hans Mittelmann as\n *  Examples 4-6 in \"Optimization Techniques for Solving Elliptic\n *  Control Problems with Control and State Constraints. Part 2:\n *  Distributed Control\" taking sparsity into account.\n *\n *  exploitation of sparsity !!\n *\n "
2018/06/19 19:52:41 " Constructor. "
2018/06/19 19:52:41 " use the C style indexing (0-based)"
2018/06/19 19:52:41 " none of the variables have bounds"
2018/06/19 19:52:41 " Set the bounds for the constraints"
2018/06/19 19:52:41 " Here, we assume we only have starting values for x, if you code\n your own NLP, you can provide starting values for the others if\n you wish."
2018/06/19 19:52:41 " set all y's to the perfect match with y_d"
2018/06/19 19:52:41 "x[y_index(i,j)] += h_*x1_grid(i) + 2*h_*x2_grid(j);"
2018/06/19 19:52:41 " Set the initial (constant) value for the u's"
2018/06/19 19:52:41 " return the value of the objective function"
2018/06/19 19:52:41 " compute the discretized PDE for each interior grid point"
2018/06/19 19:52:41 " Start with the discretized Laplacian operator"
2018/06/19 19:52:41 " Add the forcing term (including the step size here)"
2018/06/19 19:52:41 " set up the Neumann boundary conditions"
2018/06/19 19:52:41 "*************************************************************************\n\n\n         Nothing has to be changed below this point !!\n\n\n*************************************************************************"
2018/06/19 19:52:41 " return the structure of the jacobian"
2018/06/19 19:52:41 " return the values of the jacobian of the constraints"
2018/06/19 19:52:41 " return the structure. This is a symmetric matrix, fill the lower left\n triangle only."
2018/06/19 19:52:41 " return the values. This is a symmetric matrix, fill the lower left\n triangle only"
2018/06/19 19:52:41 " memory deallocation of ADOL-C variables"
2018/06/19 19:52:41 "***************    ADOL-C part ***********************************"
2018/06/19 19:52:41 " sparsity pattern by index domains (default) \n                         safe mode (default) "
2018/06/19 19:52:41 "                column compression (default) "
2018/06/19 19:52:41 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/MittelmannDistCntrlNeumA_sparse/ADOL-C_sparseNLP.cpp": 14.048155ms
2018/06/19 19:52:41 Couldn't classify license(s)
2018/06/19 19:52:42 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/MittelmannDistCntrlNeumA_sparse/cpp_example.cpp
2018/06/19 19:52:42 detected language: 4
2018/06/19 19:52:42 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     cpp_example.cpp\n Revision: $$\n Contents: example for class myADOLC_sparseNPL for interfacing with Ipopt\n \n Copyright (c) Andrea Walther\n   \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n This code is based on the file corresponding file cpp_example.cpp contained \n in the Ipopt package with the authors:  Carl Laird, Andreas Waechter   \n----------------------------------------------------------------------------"
2018/06/19 19:52:42 "*************************************************************************\n\n\n         Nothing has to be changed in this file !!\n\n\n*************************************************************************"
2018/06/19 19:52:42 " Create an instance of your nlp..."
2018/06/19 19:52:42 " Create an instance of the IpoptApplication"
2018/06/19 19:52:42 " Initialize the IpoptApplication and process the options"
2018/06/19 19:52:42 " Retrieve some statistics about the solve"
2018/06/19 19:52:42 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/MittelmannDistCntrlNeumA_sparse/cpp_example.cpp": 7.354888ms
2018/06/19 19:52:42 Couldn't classify license(s)
2018/06/19 19:52:43 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/MittelmannDistCntrlNeumA_sparse/ADOL-C_sparseNLP.hpp
2018/06/19 19:52:43 detected language: 4
2018/06/19 19:52:43 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     ADOL-C_sparseNLP.hpp\n Revision: $$\n Contents:  class myADOL-C_sparseNPL for interfacing with Ipopt\n \n Copyright (c) Andrea Walther\n   \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n This code is based on the file  MyNLP.hpp contained in the Ipopt package\n with the authors:  Carl Laird, Andreas Waechter   \n----------------------------------------------------------------------------"
2018/06/19 19:52:43 "*************************************************************************\n\n\n         Nothing has to be changed in this file !!\n\n\n*************************************************************************"
2018/06/19 19:52:43 "* default constructor "
2018/06/19 19:52:43 "* default destructor "
2018/06/19 19:52:43 "*@name Overloaded from TNLP \n@{\n* Method to return some info about the nlp "
2018/06/19 19:52:43 "* Method to return the bounds for my problem "
2018/06/19 19:52:43 "* Method to return the starting point for the algorithm "
2018/06/19 19:52:43 "* Template to return the objective value "
2018/06/19 19:52:43 "* Template to compute contraints "
2018/06/19 19:52:43 "* Original method from Ipopt to return the objective value \n* remains unchanged "
2018/06/19 19:52:43 "* Original method from Ipopt to return the gradient of the objective \n* remains unchanged "
2018/06/19 19:52:43 "*  Original method from Ipopt to return the constraint residuals \n* remains unchanged "
2018/06/19 19:52:43 "* Original method from Ipopt to return:\n   *   1) The structure of the jacobian (if \"values\" is NULL)\n   *   2) The values of the jacobian (if \"values\" is not NULL)\n   "
2018/06/19 19:52:43 "* remains unchanged "
2018/06/19 19:52:43 "* Original method from Ipopt to return:\n   *   1) The structure of the hessian of the lagrangian (if \"values\" is NULL)\n   *   2) The values of the hessian of the lagrangian (if \"values\" is not NULL)\n   "
2018/06/19 19:52:43 "* remains unchanged "
2018/06/19 19:52:43 "@}"
2018/06/19 19:52:43 "* @name Solution Methods \n@{\n* This method is called when the algorithm is complete so the TNLP can store/write the solution "
2018/06/19 19:52:43 "@}"
2018/06/19 19:52:43 "***************    start ADOL-C part ***********************************"
2018/06/19 19:52:43 "* Method to generate the required tapes "
2018/06/19 19:52:43 "***************    end   ADOL-C part ***********************************"
2018/06/19 19:52:43 "*@name Methods to block default compiler methods.\n   * The compiler automatically generates the following three methods.\n   *  Since the default compiler implementation is generally not what\n   *  you want (for all but the most simple classes), we usually \n   *  put the declarations of these methods in the private section\n   *  and never implement them. This prevents the compiler from\n   *  implementing an incorrect \"default\" behavior without us\n   *  knowing. (See Scott Meyers book, \"Effective C++\")\n   *  \n   "
2018/06/19 19:52:43 "@{\n  MyADOLC_sparseNLP();"
2018/06/19 19:52:43 "@}"
2018/06/19 19:52:43 "@{"
2018/06/19 19:52:43 "** variables for sparsity exploitation\n row indices    \n column indices \n values         \n row indices    \n column indices \n values "
2018/06/19 19:52:43 "@}"
2018/06/19 19:52:43 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/MittelmannDistCntrlNeumA_sparse/ADOL-C_sparseNLP.hpp": 22.411017ms
2018/06/19 19:52:43 Couldn't classify license(s)
2018/06/19 19:52:44 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/MittelmannDistCntrlNeumA_sparse/Makefile
2018/06/19 19:52:44 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/MittelmannDistCntrlNeumA_sparse/Makefile": 10.146076ms
2018/06/19 19:52:44 Couldn't classify license(s)
2018/06/19 19:52:45 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/MittelmannDistCntrlNeumA/ADOL-C_NLP.hpp
2018/06/19 19:52:45 detected language: 4
2018/06/19 19:52:45 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     ADOL-C_NLP.hpp\n Revision: $$\n Contents:  class myADOL-C_NPL for interfacing with Ipopt\n \n Copyright (c) Andrea Walther\n   \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n This code is based on the file  MyNLP.hpp contained in the Ipopt package\n with the authors:  Carl Laird, Andreas Waechter   \n----------------------------------------------------------------------------"
2018/06/19 19:52:45 "*************************************************************************\n\n\n         Nothing has to be changed in this file !!\n\n\n*************************************************************************"
2018/06/19 19:52:45 "* default constructor "
2018/06/19 19:52:45 "* default destructor "
2018/06/19 19:52:45 "*@name Overloaded from TNLP \n@{\n* Method to return some info about the nlp "
2018/06/19 19:52:45 "* Method to return the bounds for my problem "
2018/06/19 19:52:45 "* Method to return the starting point for the algorithm "
2018/06/19 19:52:45 "* Template to return the objective value "
2018/06/19 19:52:45 "* Template to compute contraints "
2018/06/19 19:52:45 "* Original method from Ipopt to return the objective value \n* remains unchanged "
2018/06/19 19:52:45 "* Original method from Ipopt to return the gradient of the objective \n* remains unchanged "
2018/06/19 19:52:45 "*  Original method from Ipopt to return the constraint residuals \n* remains unchanged "
2018/06/19 19:52:45 "* Original method from Ipopt to return:\n   *   1) The structure of the jacobian (if \"values\" is NULL)\n   *   2) The values of the jacobian (if \"values\" is not NULL)\n   "
2018/06/19 19:52:45 "* remains unchanged "
2018/06/19 19:52:45 "* Original method from Ipopt to return:\n   *   1) The structure of the hessian of the lagrangian (if \"values\" is NULL)\n   *   2) The values of the hessian of the lagrangian (if \"values\" is not NULL)\n   "
2018/06/19 19:52:45 "* remains unchanged "
2018/06/19 19:52:45 "@}"
2018/06/19 19:52:45 "* @name Solution Methods \n@{\n* This method is called when the algorithm is complete so the TNLP can store/write the solution "
2018/06/19 19:52:45 "@}"
2018/06/19 19:52:45 "***************    start ADOL-C part ***********************************"
2018/06/19 19:52:45 "* Method to generate the required tapes "
2018/06/19 19:52:45 "***************    end   ADOL-C part ***********************************"
2018/06/19 19:52:45 "*@name Methods to block default compiler methods.\n   * The compiler automatically generates the following three methods.\n   *  Since the default compiler implementation is generally not what\n   *  you want (for all but the most simple classes), we usually \n   *  put the declarations of these methods in the private section\n   *  and never implement them. This prevents the compiler from\n   *  implementing an incorrect \"default\" behavior without us\n   *  knowing. (See Scott Meyers book, \"Effective C++\")\n   *  \n   "
2018/06/19 19:52:45 "@{\n  MyADOLC_NLP();"
2018/06/19 19:52:45 "@}"
2018/06/19 19:52:45 "@{"
2018/06/19 19:52:45 "@}"
2018/06/19 19:52:45 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/MittelmannDistCntrlNeumA/ADOL-C_NLP.hpp": 21.719434ms
2018/06/19 19:52:45 Couldn't classify license(s)
2018/06/19 19:52:45 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/MittelmannDistCntrlNeumA/ADOL-C_NLP.cpp
2018/06/19 19:52:45 detected language: 4
2018/06/19 19:52:45 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     ADOL-C_NLP.cpp\n Revision: $$\n Contents: class myADOLC_NPL for interfacing with Ipopt\n \n Copyright (c) Andrea Walther\n   \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n This code is based on the file  MyNLP.cpp contained in the Ipopt package\n with the authors:  Carl Laird, Andreas Waechter   \n----------------------------------------------------------------------------"
2018/06/19 19:52:45 "* C++ Example NLP for interfacing a problem with IPOPT and ADOL-C.\n *  MyADOL-C_NLP implements a C++ example showing how to interface \n *  with IPOPT and ADOL-C through the TNLP interface. This class \n *  implements a distributed control problem with homogeneous\n *  Neumann boundary conditions, as formulated by Hans Mittelmann as\n *  Examples 4-6 in \"Optimization Techniques for Solving Elliptic\n *  Control Problems with Control and State Constraints. Part 2:\n *  Distributed Control\" ignoring sparsity.\n *\n *  no exploitation of sparsity !!\n *\n "
2018/06/19 19:52:45 " Constructor. "
2018/06/19 19:52:45 " in this example the jacobian is dense. Hence, it contains n*m nonzeros"
2018/06/19 19:52:45 " the hessian is also dense and has n*n total nonzeros, but we\n only need the lower left corner (since it is symmetric)"
2018/06/19 19:52:45 " use the C style indexing (0-based)"
2018/06/19 19:52:45 " none of the variables have bounds"
2018/06/19 19:52:45 " Set the bounds for the constraints"
2018/06/19 19:52:45 " Here, we assume we only have starting values for x, if you code\n your own NLP, you can provide starting values for the others if\n you wish."
2018/06/19 19:52:45 " set all y's to the perfect match with y_d"
2018/06/19 19:52:45 "x[y_index(i,j)] += h_*x1_grid(i) + 2*h_*x2_grid(j);"
2018/06/19 19:52:45 " Set the initial (constant) value for the u's"
2018/06/19 19:52:45 " return the value of the objective function"
2018/06/19 19:52:45 " compute the discretized PDE for each interior grid point"
2018/06/19 19:52:45 " Start with the discretized Laplacian operator"
2018/06/19 19:52:45 " Add the forcing term (including the step size here)"
2018/06/19 19:52:45 " set up the Neumann boundary conditions"
2018/06/19 19:52:45 "*************************************************************************\n\n\n         Nothing has to be changed below this point !!\n\n\n*************************************************************************"
2018/06/19 19:52:45 " return the structure of the jacobian, \n assuming that the Jacobian is dense"
2018/06/19 19:52:45 " return the values of the jacobian of the constraints"
2018/06/19 19:52:45 " return the structure. This is a symmetric matrix, fill the lower left\n triangle only."
2018/06/19 19:52:45 " the hessian for this problem is actually dense"
2018/06/19 19:52:45 " return the values. This is a symmetric matrix, fill the lower left\n triangle only"
2018/06/19 19:52:45 " Memory deallocation for ADOL-C variables"
2018/06/19 19:52:45 "***************    ADOL-C part ***********************************"
2018/06/19 19:52:45 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/MittelmannDistCntrlNeumA/ADOL-C_NLP.cpp": 14.187084ms
2018/06/19 19:52:45 Couldn't classify license(s)
2018/06/19 19:52:46 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/MittelmannDistCntrlNeumA/cpp_example.cpp
2018/06/19 19:52:46 detected language: 4
2018/06/19 19:52:46 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     cpp_example.cpp\n Revision: $$\n Contents: example for class myADOLC_NPL for interfacing with Ipopt\n \n Copyright (c) Andrea Walther\n   \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n This code is based on the file corresponding file cpp_example.cpp contained \n in the Ipopt package with the authors:  Carl Laird, Andreas Waechter   \n----------------------------------------------------------------------------"
2018/06/19 19:52:46 "*************************************************************************\n\n\n         Nothing has to be changed in this file !!\n\n\n*************************************************************************"
2018/06/19 19:52:46 " Create an instance of your nlp..."
2018/06/19 19:52:46 " Create an instance of the IpoptApplication"
2018/06/19 19:52:46 " Initialize the IpoptApplication and process the options"
2018/06/19 19:52:46 " Retrieve some statistics about the solve"
2018/06/19 19:52:46 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/MittelmannDistCntrlNeumA/cpp_example.cpp": 7.625756ms
2018/06/19 19:52:46 Couldn't classify license(s)
2018/06/19 19:52:47 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/MittelmannDistCntrlNeumA/Makefile
2018/06/19 19:52:47 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/MittelmannDistCntrlNeumA/Makefile": 9.718293ms
2018/06/19 19:52:47 Couldn't classify license(s)
2018/06/19 19:52:48 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/LuksanVlcek1_sparse/ADOL-C_sparseNLP.cpp
2018/06/19 19:52:48 detected language: 4
2018/06/19 19:52:48 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     ADOL-C_sparseNLP.cpp\n Revision: $$\n Contents: class myADOLC_sparseNPL for interfacing with Ipopt\n \n Copyright (c) Andrea Walther\n   \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n This code is based on the file  MyNLP.cpp contained in the Ipopt package\n with the authors:  Carl Laird, Andreas Waechter   \n----------------------------------------------------------------------------"
2018/06/19 19:52:48 "* C++ Example NLP for interfacing a problem with IPOPT and ADOL-C.\n *  MyADOLC_sparseNLP implements a C++ example showing how to interface \n *  with IPOPT and ADOL-C through the TNLP interface. This class \n *  implements the Example 5.1 from \"Sparse and Parially Separable\n *  Test Problems for Unconstrained and Equality Constrained\n *  Optimization\" by L. Luksan and J. Vlcek taking sparsity\n *  into account.\n *\n *  exploitation of sparsity !!\n *\n "
2018/06/19 19:52:48 " Constructor. "
2018/06/19 19:52:48 " use the C style indexing (0-based)"
2018/06/19 19:52:48 " none of the variables have bounds"
2018/06/19 19:52:48 " Set the bounds for the constraints"
2018/06/19 19:52:48 " Here, we assume we only have starting values for x, if you code\n your own NLP, you can provide starting values for the others if\n you wish."
2018/06/19 19:52:48 " set the starting point"
2018/06/19 19:52:48 "*************************************************************************\n\n\n         Nothing has to be changed below this point !!\n\n\n*************************************************************************"
2018/06/19 19:52:48 " return the structure of the jacobian"
2018/06/19 19:52:48 " return the values of the jacobian of the constraints"
2018/06/19 19:52:48 " return the structure. This is a symmetric matrix, fill the lower left\n triangle only."
2018/06/19 19:52:48 " return the values. This is a symmetric matrix, fill the lower left\n triangle only"
2018/06/19 19:52:48 " memory deallocation of ADOL-C variables"
2018/06/19 19:52:48 "***************    ADOL-C part ***********************************"
2018/06/19 19:52:48 " sparsity pattern by index domains (default) \n                         safe mode (default) "
2018/06/19 19:52:48 "                column compression (default) "
2018/06/19 19:52:48 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/LuksanVlcek1_sparse/ADOL-C_sparseNLP.cpp": 12.571442ms
2018/06/19 19:52:48 Couldn't classify license(s)
2018/06/19 19:52:48 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/LuksanVlcek1_sparse/cpp_example.cpp
2018/06/19 19:52:48 detected language: 4
2018/06/19 19:52:48 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     cpp_example.cpp\n Revision: $$\n Contents: example for class myADOLC_sparseNPL for interfacing with Ipopt\n \n Copyright (c) Andrea Walther\n   \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n This code is based on the file corresponding file cpp_example.cpp contained \n in the Ipopt package with the authors:  Carl Laird, Andreas Waechter   \n----------------------------------------------------------------------------"
2018/06/19 19:52:48 "*************************************************************************\n\n\n         Nothing has to be changed in this file !!\n\n\n*************************************************************************"
2018/06/19 19:52:48 " Create an instance of your nlp..."
2018/06/19 19:52:48 " Create an instance of the IpoptApplication"
2018/06/19 19:52:48 " Initialize the IpoptApplication and process the options"
2018/06/19 19:52:48 " Retrieve some statistics about the solve"
2018/06/19 19:52:48 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/LuksanVlcek1_sparse/cpp_example.cpp": 7.638632ms
2018/06/19 19:52:48 Couldn't classify license(s)
2018/06/19 19:52:49 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/LuksanVlcek1_sparse/ADOL-C_sparseNLP.hpp
2018/06/19 19:52:49 detected language: 4
2018/06/19 19:52:49 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     ADOL-C_sparseNLP.hpp\n Revision: $$\n Contents:  class myADOL-C_sparseNPL for interfacing with Ipopt\n \n Copyright (c) Andrea Walther\n   \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n This code is based on the file  MyNLP.hpp contained in the Ipopt package\n with the authors:  Carl Laird, Andreas Waechter   \n----------------------------------------------------------------------------"
2018/06/19 19:52:49 "*************************************************************************\n\n\n         Nothing has to be changed in this file !!\n\n\n*************************************************************************"
2018/06/19 19:52:49 "* default constructor "
2018/06/19 19:52:49 "* default destructor "
2018/06/19 19:52:49 "*@name Overloaded from TNLP \n@{\n* Method to return some info about the nlp "
2018/06/19 19:52:49 "* Method to return the bounds for my problem "
2018/06/19 19:52:49 "* Method to return the starting point for the algorithm "
2018/06/19 19:52:49 "* Template to return the objective value "
2018/06/19 19:52:49 "* Template to compute contraints "
2018/06/19 19:52:49 "* Original method from Ipopt to return the objective value \n* remains unchanged "
2018/06/19 19:52:49 "* Original method from Ipopt to return the gradient of the objective \n* remains unchanged "
2018/06/19 19:52:49 "*  Original method from Ipopt to return the constraint residuals \n* remains unchanged "
2018/06/19 19:52:49 "* Original method from Ipopt to return:\n   *   1) The structure of the jacobian (if \"values\" is NULL)\n   *   2) The values of the jacobian (if \"values\" is not NULL)\n   "
2018/06/19 19:52:49 "* remains unchanged "
2018/06/19 19:52:49 "* Original method from Ipopt to return:\n   *   1) The structure of the hessian of the lagrangian (if \"values\" is NULL)\n   *   2) The values of the hessian of the lagrangian (if \"values\" is not NULL)\n   "
2018/06/19 19:52:49 "* remains unchanged "
2018/06/19 19:52:49 "@}"
2018/06/19 19:52:49 "* @name Solution Methods \n@{\n* This method is called when the algorithm is complete so the TNLP can store/write the solution "
2018/06/19 19:52:49 "@}"
2018/06/19 19:52:49 "***************    start ADOL-C part ***********************************"
2018/06/19 19:52:49 "* Method to generate the required tapes "
2018/06/19 19:52:49 "***************    end   ADOL-C part ***********************************"
2018/06/19 19:52:49 "*@name Methods to block default compiler methods.\n   * The compiler automatically generates the following three methods.\n   *  Since the default compiler implementation is generally not what\n   *  you want (for all but the most simple classes), we usually \n   *  put the declarations of these methods in the private section\n   *  and never implement them. This prevents the compiler from\n   *  implementing an incorrect \"default\" behavior without us\n   *  knowing. (See Scott Meyers book, \"Effective C++\")\n   *  \n   "
2018/06/19 19:52:49 "@{\n  MyADOLC_sparseNLP();"
2018/06/19 19:52:49 "@}"
2018/06/19 19:52:49 "@{"
2018/06/19 19:52:49 "** variables for sparsity exploitation\n row indices    \n column indices \n values         \n row indices    \n column indices \n values "
2018/06/19 19:52:49 "@}"
2018/06/19 19:52:49 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/LuksanVlcek1_sparse/ADOL-C_sparseNLP.hpp": 25.462679ms
2018/06/19 19:52:49 Couldn't classify license(s)
2018/06/19 19:52:50 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/LuksanVlcek1_sparse/Makefile
2018/06/19 19:52:50 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/LuksanVlcek1_sparse/Makefile": 9.899053ms
2018/06/19 19:52:50 Couldn't classify license(s)
2018/06/19 19:52:51 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/LuksanVlcek1/ADOL-C_NLP.hpp
2018/06/19 19:52:51 detected language: 4
2018/06/19 19:52:51 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     ADOL-C_NLP.hpp\n Revision: $$\n Contents:  class myADOL-C_NPL for interfacing with Ipopt\n \n Copyright (c) Andrea Walther\n   \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n This code is based on the file  MyNLP.hpp contained in the Ipopt package\n with the authors:  Carl Laird, Andreas Waechter   \n----------------------------------------------------------------------------"
2018/06/19 19:52:51 "*************************************************************************\n\n\n         Nothing has to be changed in this file !!\n\n\n*************************************************************************"
2018/06/19 19:52:51 "* default constructor "
2018/06/19 19:52:51 "* default destructor "
2018/06/19 19:52:51 "*@name Overloaded from TNLP \n@{\n* Method to return some info about the nlp "
2018/06/19 19:52:51 "* Method to return the bounds for my problem "
2018/06/19 19:52:51 "* Method to return the starting point for the algorithm "
2018/06/19 19:52:51 "* Template to return the objective value "
2018/06/19 19:52:51 "* Template to compute contraints "
2018/06/19 19:52:51 "* Original method from Ipopt to return the objective value \n* remains unchanged "
2018/06/19 19:52:51 "* Original method from Ipopt to return the gradient of the objective \n* remains unchanged "
2018/06/19 19:52:51 "*  Original method from Ipopt to return the constraint residuals \n* remains unchanged "
2018/06/19 19:52:51 "* Original method from Ipopt to return:\n   *   1) The structure of the jacobian (if \"values\" is NULL)\n   *   2) The values of the jacobian (if \"values\" is not NULL)\n   "
2018/06/19 19:52:51 "* remains unchanged "
2018/06/19 19:52:51 "* Original method from Ipopt to return:\n   *   1) The structure of the hessian of the lagrangian (if \"values\" is NULL)\n   *   2) The values of the hessian of the lagrangian (if \"values\" is not NULL)\n   "
2018/06/19 19:52:51 "* remains unchanged "
2018/06/19 19:52:51 "@}"
2018/06/19 19:52:51 "* @name Solution Methods \n@{\n* This method is called when the algorithm is complete so the TNLP can store/write the solution "
2018/06/19 19:52:51 "@}"
2018/06/19 19:52:51 "***************    start ADOL-C part ***********************************"
2018/06/19 19:52:51 "* Method to generate the required tapes "
2018/06/19 19:52:51 "***************    end   ADOL-C part ***********************************"
2018/06/19 19:52:51 "*@name Methods to block default compiler methods.\n   * The compiler automatically generates the following three methods.\n   *  Since the default compiler implementation is generally not what\n   *  you want (for all but the most simple classes), we usually \n   *  put the declarations of these methods in the private section\n   *  and never implement them. This prevents the compiler from\n   *  implementing an incorrect \"default\" behavior without us\n   *  knowing. (See Scott Meyers book, \"Effective C++\")\n   *  \n   "
2018/06/19 19:52:51 "@{\n  MyADOLC_NLP();"
2018/06/19 19:52:51 "@}"
2018/06/19 19:52:51 "@{"
2018/06/19 19:52:51 "@}"
2018/06/19 19:52:51 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/LuksanVlcek1/ADOL-C_NLP.hpp": 22.78951ms
2018/06/19 19:52:51 Couldn't classify license(s)
2018/06/19 19:52:52 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/LuksanVlcek1/ADOL-C_NLP.cpp
2018/06/19 19:52:52 detected language: 4
2018/06/19 19:52:52 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     ADOL-C_NLP.cpp\n Revision: $$\n Contents: class myADOLC_NPL for interfacing with Ipopt\n \n Copyright (c) Andrea Walther\n   \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n This code is based on the file  MyNLP.cpp contained in the Ipopt package\n with the authors:  Carl Laird, Andreas Waechter   \n----------------------------------------------------------------------------"
2018/06/19 19:52:52 "* C++ Example NLP for interfacing a problem with IPOPT and ADOL-C.\n *  MyADOL-C_NLP implements a C++ example showing how to interface \n *  with IPOPT and ADOL-C through the TNLP interface. This class \n *  implements the Example 5.1 from \"Sparse and Parially Separable\n *  Test Problems for Unconstrained and Equality Constrained\n *  Optimization\" by L. Luksan and J. Vlcek ignoring sparsity.\n *\n *  no exploitation of sparsity !!\n *\n "
2018/06/19 19:52:52 " Constructor. "
2018/06/19 19:52:52 " in this example the jacobian is dense. Hence, it contains n*m nonzeros"
2018/06/19 19:52:52 " the hessian is also dense and has n*n total nonzeros, but we\n only need the lower left corner (since it is symmetric)"
2018/06/19 19:52:52 " use the C style indexing (0-based)"
2018/06/19 19:52:52 " none of the variables have bounds"
2018/06/19 19:52:52 " Set the bounds for the constraints"
2018/06/19 19:52:52 " Here, we assume we only have starting values for x, if you code\n your own NLP, you can provide starting values for the others if\n you wish."
2018/06/19 19:52:52 " set the starting point"
2018/06/19 19:52:52 "*************************************************************************\n\n\n         Nothing has to be changed below this point !!\n\n\n*************************************************************************"
2018/06/19 19:52:52 " return the structure of the jacobian, \n assuming that the Jacobian is dense"
2018/06/19 19:52:52 " return the values of the jacobian of the constraints"
2018/06/19 19:52:52 " return the structure. This is a symmetric matrix, fill the lower left\n triangle only."
2018/06/19 19:52:52 " the hessian for this problem is actually dense"
2018/06/19 19:52:52 " return the values. This is a symmetric matrix, fill the lower left\n triangle only"
2018/06/19 19:52:52 " Memory deallocation for ADOL-C variables"
2018/06/19 19:52:52 "***************    ADOL-C part ***********************************"
2018/06/19 19:52:52 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/LuksanVlcek1/ADOL-C_NLP.cpp": 13.921594ms
2018/06/19 19:52:52 Couldn't classify license(s)
2018/06/19 19:52:52 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/LuksanVlcek1/cpp_example.cpp
2018/06/19 19:52:52 detected language: 4
2018/06/19 19:52:52 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     cpp_example.cpp\n Revision: $$\n Contents: example for class myADOLC_NPL for interfacing with Ipopt\n \n Copyright (c) Andrea Walther\n   \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n This code is based on the file corresponding file cpp_example.cpp contained \n in the Ipopt package with the authors:  Carl Laird, Andreas Waechter   \n----------------------------------------------------------------------------"
2018/06/19 19:52:52 "*************************************************************************\n\n\n         Nothing has to be changed in this file !!\n\n\n*************************************************************************"
2018/06/19 19:52:52 " Create an instance of your nlp..."
2018/06/19 19:52:52 " Create an instance of the IpoptApplication"
2018/06/19 19:52:52 " Initialize the IpoptApplication and process the options"
2018/06/19 19:52:52 " Retrieve some statistics about the solve"
2018/06/19 19:52:52 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/LuksanVlcek1/cpp_example.cpp": 8.684948ms
2018/06/19 19:52:52 Couldn't classify license(s)
2018/06/19 19:52:53 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/LuksanVlcek1/Makefile
2018/06/19 19:52:53 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/LuksanVlcek1/Makefile": 10.119251ms
2018/06/19 19:52:53 Couldn't classify license(s)
2018/06/19 19:52:54 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/README
2018/06/19 19:52:54 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ipopt/README": 8.307643ms
2018/06/19 19:52:54 Couldn't classify license(s)
2018/06/19 19:52:55 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/tapesave/useTape.cpp
2018/06/19 19:52:55 detected language: 4
2018/06/19 19:52:55 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     createTape.cpp\n Revision: $Id$\n Contents:\n\n   How to use a tape with ADOL-C\n   =============================\n   \n   Application of ADOL-C to the example function of Tony Wong\n   to use a tape, which was previously saved on HD\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:55 "**************************************************************************\n                                                                 INCLUDES \n use of ALL ADOL-C interfaces "
2018/06/19 19:52:55 "**************************************************************************\n                                                USING THE EVALUATION TAPE "
2018/06/19 19:52:55 " variables "
2018/06/19 19:52:55 " initialize any values "
2018/06/19 19:52:55 " USING THE TAPE FOR DERIVATIVE COMPUTATION "
2018/06/19 19:52:55 " the tape identifier 1 (tag) \n number of dependent variables\n                                                                             = dimension of f "
2018/06/19 19:52:55 " number of independent variables\n                                                                             = dimension of xyz "
2018/06/19 19:52:55 " the point where the function has\n                                                                             to be differentiated "
2018/06/19 19:52:55 " contains the function value (after\n                                                  calling 'function(..)') "
2018/06/19 19:52:55 " the tape identifier 1 (tag) \n number of independent variables\n                                                                             = dimension of xyz "
2018/06/19 19:52:55 " the point where the function has\n                                                                             to be differentiated "
2018/06/19 19:52:55 " contains the gradient (after\n                                                  calling 'gradient(..)') "
2018/06/19 19:52:55 " print the results "
2018/06/19 19:52:55 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/tapesave/useTape.cpp": 9.932147ms
2018/06/19 19:52:55 Couldn't classify license(s)
2018/06/19 19:52:56 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/tapesave/createTape.cpp
2018/06/19 19:52:56 detected language: 4
2018/06/19 19:52:56 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     createTape.cpp\n Revision: $Id$\n Contents:\n\n   How to create a tape with ADOL-C\n   ================================\n   \n   Application of ADOL-C to the example function of Tony Wong\n   to obtain the tape, which will be saved on HD for future use\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:56 "**************************************************************************\n                                                                 INCLUDES \n use of ALL ADOL-C interfaces "
2018/06/19 19:52:56 "**************************************************************************\n                                                     ACTIVATING FUNCTIONS "
2018/06/19 19:52:56 " Example of a C function "
2018/06/19 19:52:56 " Example of the corresponding 'active' C function "
2018/06/19 19:52:56 "**************************************************************************\n                                           GENERATING THE EVALUATION TAPE "
2018/06/19 19:52:56 " variables \n active varaibles "
2018/06/19 19:52:56 " initialize any values "
2018/06/19 19:52:56 " TRACING THE EVALUATION TAPE \n start tracing of an evaluation\n                                                  tape with the identifier 1 "
2018/06/19 19:52:56 " marking independent variables "
2018/06/19 19:52:56 " calling the 'active' version of\n                                                  the function to be differentiated\n                                                  to generate a tape of the evaluation\n                                                  process;\n                                                  NOTE: Instead of calling a\n                                                  C function the whole evaluation code\n                                                  can be placed here (see example file\n                                                  DEX/powerexam.C) "
2018/06/19 19:52:56 " marking the only one dependent\n                                                  variable "
2018/06/19 19:52:56 " stop tracing "
2018/06/19 19:52:56 " NOTE: trace_off(..) is called with the value 1 (for the optional\n       !     argument). This forces ADOL-C to save the generated tapes\n       !     on harddisc. In particular these are the files\n       !\n       !        _adol-op_tape.1      (operations  = opcodes)\n       !        _adol-in_tape.1      (integers    = locations)\n       !        _adol-rl_tape.1      (real values = doubles)\n       !\n       !     The appendix '1' is determined by the used tape\n       !     identifier, which was passed to trace_on(..).\n    "
2018/06/19 19:52:56 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/tapesave/createTape.cpp": 13.806593ms
2018/06/19 19:52:56 Couldn't classify license(s)
2018/06/19 19:52:56 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/tapesave/Makefile.am
2018/06/19 19:52:56 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/tapesave/Makefile.am": 7.514945ms
2018/06/19 19:52:56 Couldn't classify license(s)
2018/06/19 19:52:57 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/tapesave/Makefile.in
2018/06/19 19:52:57 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/tapesave/Makefile.in": 59.307154ms
2018/06/19 19:52:57 Couldn't classify license(s)
2018/06/19 19:52:58 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/tapesave/README
2018/06/19 19:52:58 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/tapesave/README": 7.603283ms
2018/06/19 19:52:58 Couldn't classify license(s)
2018/06/19 19:52:59 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/taylor/accessexam.cpp
2018/06/19 19:52:59 detected language: 4
2018/06/19 19:52:59 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     accessexam.cpp\n Revision: $Id$\n Contents: Test driver 'tensor_value(..)' and access of higher order tensors \n           by void pointer strategy\n \n Copyright (c) Andrea Walther, Andreas Griewank\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:52:59 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:52:59 "**************************************************************************\n                                                                     MAIN "
2018/06/19 19:52:59 "--------------------------------------------------------------------------\n inputs "
2018/06/19 19:52:59 "--------------------------------------------------------------------------\n allocations and inits "
2018/06/19 19:52:59 "--------------------------------------------------------------------------\n tracing the function "
2018/06/19 19:52:59 "--------------------------------------------------------------------------\n tensor_eval "
2018/06/19 19:52:59 "--------------------------------------------------------------------------\n access "
2018/06/19 19:52:59 "--------------------------------------------------------------------------"
2018/06/19 19:52:59 "--------------------------------------------------------------------------"
2018/06/19 19:52:59 "--------------------------------------------------------------------------"
2018/06/19 19:52:59 "--------------------------------------------------------------------------"
2018/06/19 19:52:59 "**************************************************************************\n                                                               THAT'S ALL "
2018/06/19 19:52:59 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/taylor/accessexam.cpp": 8.122829ms
2018/06/19 19:52:59 Couldn't classify license(s)
2018/06/19 19:53:00 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/taylor/trigger.cpp
2018/06/19 19:53:00 detected language: 4
2018/06/19 19:53:00 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     trigger.cpp\n Revision: $Id$\n Contents:  Test driver 'inverse_tensor_eval(..)' that allows to \n            compute higher order derivatives of inverse functions\n           \n            Function model: trigger circuit\n \n Copyright (c) Andrea Walther, Andreas Griewank\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:00 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:53:00 "**************************************************************************\n                                                                     MAIN "
2018/06/19 19:53:00 "--------------------------------------------------------------------------\n inputs "
2018/06/19 19:53:00 "--------------------------------------------------------------------------\n allocations and inits "
2018/06/19 19:53:00 "--------------------------------------------------------------------------\n tracing the function "
2018/06/19 19:53:00 "--------------------------------------------------------------------------\n inverse_tensor_eval "
2018/06/19 19:53:00 "**************************************************************************\n                                                               THAT'S ALL "
2018/06/19 19:53:00 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/taylor/trigger.cpp": 8.430706ms
2018/06/19 19:53:00 Couldn't classify license(s)
2018/06/19 19:53:01 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/taylor/coordinates.cpp
2018/06/19 19:53:01 detected language: 4
2018/06/19 19:53:01 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     coordinates.cpp\n Revision: $Id$\n Contents: Test driver 'inverse_tensor_eval' using transformation between \n           Cartesian coordinates and polar coordinates\n \n Copyright (c) Andrea Walther, Andreas Griewank\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:01 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:53:01 "**************************************************************************\n                                                                     MAIN "
2018/06/19 19:53:01 "--------------------------------------------------------------------------\n inputs "
2018/06/19 19:53:01 "--------------------------------------------------------------------------\n allocations and inits "
2018/06/19 19:53:01 "--------------------------------------------------------------------------\n tracing the function "
2018/06/19 19:53:01 "--------------------------------------------------------------------------\n inverse_tensor_eval "
2018/06/19 19:53:01 "**************************************************************************\n                                                               THAT'S ALL "
2018/06/19 19:53:01 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/taylor/coordinates.cpp": 7.944282ms
2018/06/19 19:53:01 Couldn't classify license(s)
2018/06/19 19:53:01 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/taylor/Makefile.am
2018/06/19 19:53:01 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/taylor/Makefile.am": 7.647762ms
2018/06/19 19:53:01 Couldn't classify license(s)
2018/06/19 19:53:02 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/taylor/taylorexam.cpp
2018/06/19 19:53:02 detected language: 4
2018/06/19 19:53:02 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     taylorexam.cpp\n Revision: $Id$\n Contents: Test driver 'tensor_eval(..)' to compute\n           higher order derivatives\n\n Copyright (c) Andrea Walther, Andreas Griewank\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:02 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:53:02 "**************************************************************************\n                                                                     MAIN "
2018/06/19 19:53:02 "--------------------------------------------------------------------------\n inputs "
2018/06/19 19:53:02 "--------------------------------------------------------------------------\n allocations and inits "
2018/06/19 19:53:02 "--------------------------------------------------------------------------\n tracing the function \n adouble* x = new adouble[n];\n adouble* y = new adouble[m];"
2018/06/19 19:53:02 "--------------------------------------------------------------------------\n 1. tensor_eval "
2018/06/19 19:53:02 "--------------------------------------------------------------------------\n 2. tensor_eval "
2018/06/19 19:53:02 "--------------------------------------------------------------------------\n 3. tensor_eval "
2018/06/19 19:53:02 "--------------------------------------------------------------------------\n 4. tensor_eval "
2018/06/19 19:53:02 "--------------------------------------------------------------------------\n 5. tensor_eval "
2018/06/19 19:53:02 "**************************************************************************\n                                                               THAT'S ALL "
2018/06/19 19:53:02 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/taylor/taylorexam.cpp": 8.255641ms
2018/06/19 19:53:02 Couldn't classify license(s)
2018/06/19 19:53:03 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/taylor/inversexam.cpp
2018/06/19 19:53:03 detected language: 4
2018/06/19 19:53:03 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     inversexam.cpp\n Revision: $Id$\n Contents: Test driver 'inverse_tensor_eval(..)' allows to \n           compute higher order derivatives of inverse\n           functions\n\n Copyright (c) Andrea Walther, Andreas Griewank\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:03 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:53:03 "**************************************************************************\n                                                                     MAIN "
2018/06/19 19:53:03 "--------------------------------------------------------------------------\n inputs "
2018/06/19 19:53:03 " number of dependents = number of independents !!"
2018/06/19 19:53:03 "--------------------------------------------------------------------------\n allocations and inits "
2018/06/19 19:53:03 "--------------------------------------------------------------------------\n tracing the function "
2018/06/19 19:53:03 "--------------------------------------------------------------------------\n 1. inverse_tensor_eval "
2018/06/19 19:53:03 "--------------------------------------------------------------------------\n 2. inverse_tensor_eval "
2018/06/19 19:53:03 "--------------------------------------------------------------------------\n 3. inverse_tensor_eval "
2018/06/19 19:53:03 "--------------------------------------------------------------------------\n 4. inverse_tensor_eval "
2018/06/19 19:53:03 "--------------------------------------------------------------------------\n 5. inverse_tensor_eval "
2018/06/19 19:53:03 "**************************************************************************\n                                                               THAT'S ALL "
2018/06/19 19:53:03 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/taylor/inversexam.cpp": 8.48618ms
2018/06/19 19:53:03 Couldn't classify license(s)
2018/06/19 19:53:04 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/taylor/Makefile.in
2018/06/19 19:53:04 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/taylor/Makefile.in": 63.746912ms
2018/06/19 19:53:04 Couldn't classify license(s)
2018/06/19 19:53:04 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/taylor/README
2018/06/19 19:53:04 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/taylor/README": 8.292978ms
2018/06/19 19:53:04 Couldn't classify license(s)
2018/06/19 19:53:05 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/helm/helm-diff-exam.cpp
2018/06/19 19:53:05 detected language: 4
2018/06/19 19:53:05 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     helm-diff-exam.cpp\n Revision: $Id$\n Contents: example for  Helmholtz energy example \n           Computes gradient using divide differences\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:05 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:53:05 "**************************************************************************\n                                                    CONSTANTS & VARIABLES "
2018/06/19 19:53:05 "**************************************************************************\n                                                         HELMHOLTZ ENERGY "
2018/06/19 19:53:05 "**************************************************************************\n                                                                     MAIN \n\n   This program computes first order directional derivatives \n   for the helmholtz energy function "
2018/06/19 19:53:05 "--------------------------------------------------------------------------\n Initilizations "
2018/06/19 19:53:05 "--------------------------------------------------------------------------\n basepoint "
2018/06/19 19:53:05 "--------------------------------------------------------------------------\n directional derivatives "
2018/06/19 19:53:05 "**************************************************************************\n                                                               THAT'S ALL "
2018/06/19 19:53:05 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/helm/helm-diff-exam.cpp": 7.910334ms
2018/06/19 19:53:05 Couldn't classify license(s)
2018/06/19 19:53:06 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/helm/helm-auto-exam.cpp
2018/06/19 19:53:06 detected language: 4
2018/06/19 19:53:06 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     helm-auto-exam.cpp\n Revision: $Id$\n Contents: example for  Helmholtz energy example \n           Computes gradient using AD driver reverse(..)\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel \n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:06 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:53:06 "**************************************************************************\n                                                    CONSTANTS & VARIABLES \n originally 0.0 "
2018/06/19 19:53:06 "**************************************************************************\n                                                         HELMHOLTZ ENERGY "
2018/06/19 19:53:06 "**************************************************************************\n                                                                     MAIN \n This program computes first order directional derivatives\n   for the helmholtz energy function "
2018/06/19 19:53:06 "--------------------------------------------------------------------------\n Initilizations "
2018/06/19 19:53:06 "--------------------------------------------------------------------------\n Tracing with keep "
2018/06/19 19:53:06 "--------------------------------------------------------------------------\n reverse computation of gradient "
2018/06/19 19:53:06 "--------------------------------------------------------------------------\n results "
2018/06/19 19:53:06 "**************************************************************************\n                                                               THAT'S ALL "
2018/06/19 19:53:06 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/helm/helm-auto-exam.cpp": 8.447225ms
2018/06/19 19:53:06 Couldn't classify license(s)
2018/06/19 19:53:07 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/helm/Makefile.am
2018/06/19 19:53:07 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/helm/Makefile.am": 7.465897ms
2018/06/19 19:53:07 Couldn't classify license(s)
2018/06/19 19:53:08 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/helm/Makefile.in
2018/06/19 19:53:08 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/helm/Makefile.in": 56.932839ms
2018/06/19 19:53:08 Couldn't classify license(s)
2018/06/19 19:53:08 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/helm/README
2018/06/19 19:53:08 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/helm/README": 7.532474ms
2018/06/19 19:53:08 Couldn't classify license(s)
2018/06/19 19:53:09 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/sparse/sparse_jacobian.cpp
2018/06/19 19:53:09 detected language: 4
2018/06/19 19:53:09 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     sparse_jacobian.cpp\n Revision: $Id$\n Contents: example for computation of sparse jacobians\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:09 "**************************************************************************\n******                function evaluation                   **************\n**************************************************************************"
2018/06/19 19:53:09 " Tracing of function c(x) "
2018/06/19 19:53:09 "**************************************************************************\n*******           For comparisons: Full Jacobian                   *******\n**************************************************************************"
2018/06/19 19:53:09 "**************************************************************************\n******       sparse Jacobians, complete driver              **************\n**************************************************************************"
2018/06/19 19:53:09 " coordinate format for Jacobian \n row indices    \n column indices \n values         "
2018/06/19 19:53:09 " sparsity pattern by index domains (default) \n                         safe mode (default) \n              not required if options[0] = 0 \n                column compression (default) "
2018/06/19 19:53:09 "--------------------------------------------------------------------------\n  same approach but using row compression                                 \n--------------------------------------------------------------------------"
2018/06/19 19:53:09 "   row compression => reverse mode, \n sometimes better than forward mode \n due to sparsity structure          "
2018/06/19 19:53:09 "--------------------------------------------------------------------------\n  change value of x, but not the sparsity pattern                         \n--------------------------------------------------------------------------"
2018/06/19 19:53:09 "  For comparisons: Full Jacobian                                          "
2018/06/19 19:53:09 "  repeated call of sparse_jac with same sparsity pattern => repeat = 1 "
2018/06/19 19:53:09 "--------------------------------------------------------------------------\n  same approach but using row compression                                 \n--------------------------------------------------------------------------"
2018/06/19 19:53:09 "   row compression => reverse mode, \n sometimes better than forward mode \n due to sparsity structure          "
2018/06/19 19:53:09 "**************************************************************************\n******       sparse Jacobians, separate drivers             **************\n**************************************************************************"
2018/06/19 19:53:09 "--------------------------------------------------------------------------\n                                                sparsity pattern Jacobian \n--------------------------------------------------------------------------"
2018/06/19 19:53:09 " compressed block row storage "
2018/06/19 19:53:09 "--------------------------------------------------------------------------\n                                                              seed matrix \n--------------------------------------------------------------------------"
2018/06/19 19:53:09 " option = 0 column compression (default), \n       option = 1 rom compression                "
2018/06/19 19:53:09 "--------------------------------------------------------------------------\n                                                      compressed Jacobian \n--------------------------------------------------------------------------"
2018/06/19 19:53:09 "--------------------------------------------------------------------------\n  change value of x, but not the sparsity pattern                         \n--------------------------------------------------------------------------"
2018/06/19 19:53:09 "  For comparisons: Full Jacobian                                          "
2018/06/19 19:53:09 "*************************************************************************"
2018/06/19 19:53:09 "*************************************************************************"
2018/06/19 19:53:09 "*************************************************************************"
2018/06/19 19:53:09 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/sparse/sparse_jacobian.cpp": 11.233544ms
2018/06/19 19:53:09 Couldn't classify license(s)
2018/06/19 19:53:10 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/sparse/sparse_hessian.cpp
2018/06/19 19:53:10 detected language: 4
2018/06/19 19:53:10 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     sparse_hessian.cpp\n Revision: $Id$\n Contents: example for computation of sparse hessians\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:10 "**************************************************************************\n******                function evaluation                   **************\n**************************************************************************"
2018/06/19 19:53:10 " Tracing of function f(x) "
2018/06/19 19:53:10 "**************************************************************************\n*******           For comparisons: Full Hessian                    *******\n**************************************************************************"
2018/06/19 19:53:10 "**************************************************************************\n******       sparse Hessians, complete driver              **************\n**************************************************************************"
2018/06/19 19:53:10 " coordinate format for Hessian "
2018/06/19 19:53:10 "                               safe mode (default) \n                       indirect recovery (default) "
2018/06/19 19:53:10 "                               safe mode (default) \n                                   direct recovery "
2018/06/19 19:53:10 "--------------------------------------------------------------------------\n  change value of x, but not the sparsity pattern                         \n--------------------------------------------------------------------------"
2018/06/19 19:53:10 "  For comparisons: Full Hessian:                                         "
2018/06/19 19:53:10 "  repeated call of sparse_hess with same sparsity pattern => repeat = 1 "
2018/06/19 19:53:10 "**************************************************************************\n******        sparse Hessians, separate drivers             **************\n**************************************************************************"
2018/06/19 19:53:10 "--------------------------------------------------------------------------\n                                                 sparsity pattern Hessian \n--------------------------------------------------------------------------"
2018/06/19 19:53:10 " compressed block row storage "
2018/06/19 19:53:10 "--------------------------------------------------------------------------\n                                                              seed matrix \n--------------------------------------------------------------------------"
2018/06/19 19:53:10 " option = 0  indirect recovery (default), \n       option = 1  direct recovery                       "
2018/06/19 19:53:10 "--------------------------------------------------------------------------\n                                                       compressed Hessian \n--------------------------------------------------------------------------"
2018/06/19 19:53:10 "--------------------------------------------------------------------------\n  change value of x, but not the sparsity pattern                         \n--------------------------------------------------------------------------"
2018/06/19 19:53:10 "  For comparisons: Full Hessian                                           "
2018/06/19 19:53:10 "*************************************************************************"
2018/06/19 19:53:10 "*************************************************************************"
2018/06/19 19:53:10 "*************************************************************************"
2018/06/19 19:53:10 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/sparse/sparse_hessian.cpp": 10.636947ms
2018/06/19 19:53:10 Couldn't classify license(s)
2018/06/19 19:53:11 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/sparse/Makefile.am
2018/06/19 19:53:11 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/sparse/Makefile.am": 8.036096ms
2018/06/19 19:53:11 Couldn't classify license(s)
2018/06/19 19:53:11 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/sparse/Makefile.in
2018/06/19 19:53:12 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/sparse/Makefile.in": 62.983395ms
2018/06/19 19:53:12 Couldn't classify license(s)
2018/06/19 19:53:12 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/sparse/jacpatexam.cpp
2018/06/19 19:53:12 detected language: 4
2018/06/19 19:53:12 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     jacpatexam.cpp\n Revision: $Id$\n Contents: example for computation of jacobian sparsity pattern\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:12 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:53:12 "**************************************************************************\n                                                                  DEFINES "
2018/06/19 19:53:12 "**************************************************************************\n                                                     EVALUATION FUNCTIONS "
2018/06/19 19:53:12 "--------------------------------------------------------------------------"
2018/06/19 19:53:12 " force a numbered tape file to be written"
2018/06/19 19:53:12 "--------------------------------------------------------------------------\n PQ_STRIPMINE_MAX * 8*sizeof(unsigned long int) + 1"
2018/06/19 19:53:12 " dense diagonal and dense last column"
2018/06/19 19:53:12 " dense last row "
2018/06/19 19:53:12 " force a numbered tape file to be written"
2018/06/19 19:53:12 "**************************************************************************\n                                                             MAIN PROGRAM "
2018/06/19 19:53:12 "--------------------------------------------------------------------------\n                    variables needed for the Jacobian pattern exploration "
2018/06/19 19:53:12 " compressed row storage"
2018/06/19 19:53:12 "--------------------------------------------------------------------------"
2018/06/19 19:53:12 " Take function in the \"eval(...)\" routines -------------"
2018/06/19 19:53:12 " ( choice == -4 ) -----------------------------------------------"
2018/06/19 19:53:12 " Reading of tape statistics "
2018/06/19 19:53:12 " ( choice >= 0 ) : Take a written tape ------------------------------"
2018/06/19 19:53:12 " write a tape into a tex-file"
2018/06/19 19:53:12 "--------------------------------------------------------------------------\n                                 Jacobian pattern by index domains, safe "
2018/06/19 19:53:12 " index domain propagation\n automatic mode choice (ignored here)\n safe"
2018/06/19 19:53:12 "--------------------------------------------------------------------------\n                                 Jacobian pattern by index domains, tight "
2018/06/19 19:53:12 " index domain propagation\n forward (ignored here)\n tight"
2018/06/19 19:53:12 "--------------------------------------------------------------------------\n                          Jacobian pattern by bit pattern, forward, tight "
2018/06/19 19:53:12 " bit pattern propagation\n forward\n tight"
2018/06/19 19:53:12 "--------------------------------------------------------------------------\n                           Jacobian pattern by bit pattern, forward, safe "
2018/06/19 19:53:12 " bit pattern propagation\n forward\n safe"
2018/06/19 19:53:12 "--------------------------------------------------------------------------\n                          Jacobian pattern by bit pattern, reverse, tight "
2018/06/19 19:53:12 " bit pattern propagation\n reverse\n tight"
2018/06/19 19:53:12 "--------------------------------------------------------------------------\n                           Jacobian pattern by bit pattern, reverse, safe "
2018/06/19 19:53:12 " bit pattern propagation \n reverse\n safe"
2018/06/19 19:53:12 " full Jacobian evaluation -----------------------------------------------"
2018/06/19 19:53:12 "---------------------------------------------------------------------\n                        variables needed for the evaluation routines "
2018/06/19 19:53:12 "---------------------------------------------------------------------\n                full Jacobian evaluation by forward, no strip-mining "
2018/06/19 19:53:12 "---------------------------------------------------------------------\n    full Jacobian evaluation by the jacobian driver, no strip-mining "
2018/06/19 19:53:12 "--------------------------------------------------------------------------\n output of timings "
2018/06/19 19:53:12 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/sparse/jacpatexam.cpp": 12.772424ms
2018/06/19 19:53:12 Couldn't classify license(s)
2018/06/19 19:53:13 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/sparse/README
2018/06/19 19:53:13 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/sparse/README": 8.775997ms
2018/06/19 19:53:13 Couldn't classify license(s)
2018/06/19 19:53:14 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/detexam/Makefile.am
2018/06/19 19:53:14 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/detexam/Makefile.am": 7.584117ms
2018/06/19 19:53:14 Couldn't classify license(s)
2018/06/19 19:53:15 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/detexam/Makefile.in
2018/06/19 19:53:15 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/detexam/Makefile.in": 56.799923ms
2018/06/19 19:53:15 Couldn't classify license(s)
2018/06/19 19:53:16 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/detexam/detexam.cpp
2018/06/19 19:53:16 detected language: 4
2018/06/19 19:53:16 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     detexam.cpp\n Revision: $Id$\n Contents: modified computation of determinants\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel \n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:16 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:53:16 "**************************************************************************\n                                                           DOUBLE ROUTINE "
2018/06/19 19:53:16 "**************************************************************************\n                                                          ADOUBLE ROUTINE "
2018/06/19 19:53:16 "**************************************************************************\n                                                             MAIN PROGRAM "
2018/06/19 19:53:16 "--------------------------------------------------------------------------\n Preparation "
2018/06/19 19:53:16 " val corrected to value 2/23/91"
2018/06/19 19:53:16 "--------------------------------------------------------------------------\n 0. time (taping) "
2018/06/19 19:53:16 "--------------------------------------------------------------------------"
2018/06/19 19:53:16 "--------------------------------------------------------------------------"
2018/06/19 19:53:16 "--------------------------------------------------------------------------\n 1. time (original) "
2018/06/19 19:53:16 "--------------------------------------------------------------------------\n 4. time (forward no keep) "
2018/06/19 19:53:16 "--------------------------------------------------------------------------\n 2. time (forward+keep) "
2018/06/19 19:53:16 " fprintf(stdout,\"\\n %f =? %f should be the same \\n\",detout,*detaut);"
2018/06/19 19:53:16 "--------------------------------------------------------------------------\n 3. time (reverse) "
2018/06/19 19:53:16 "--------------------------------------------------------------------------\n output of results \n optional generation of tape_doc.tex\n tape_doc(tag,1,n2,a,detaut);"
2018/06/19 19:53:16 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/detexam/detexam.cpp": 11.360619ms
2018/06/19 19:53:16 Couldn't classify license(s)
2018/06/19 19:53:16 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/detexam/detexam-old.cpp
2018/06/19 19:53:16 detected language: 4
2018/06/19 19:53:16 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     detexam-old.cpp\n Revision: $Id$\n Contents: computation of determinants\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel \n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:16 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:53:16 "**************************************************************************\n                                                           DOUBLE ROUTINE "
2018/06/19 19:53:16 "**************************************************************************\n                                                          ADOUBLE ROUTINE "
2018/06/19 19:53:16 "**************************************************************************\n                                                             MAIN PROGRAM "
2018/06/19 19:53:16 "--------------------------------------------------------------------------\n Input "
2018/06/19 19:53:16 "--------------------------------------------------------------------------\n Preparation "
2018/06/19 19:53:16 " val corrected to value 2/23/91"
2018/06/19 19:53:16 "--------------------------------------------------------------------------\n 0. time (taping) "
2018/06/19 19:53:16 "--------------------------------------------------------------------------"
2018/06/19 19:53:16 "--------------------------------------------------------------------------"
2018/06/19 19:53:16 "--------------------------------------------------------------------------\n 1. time (original) "
2018/06/19 19:53:16 "--------------------------------------------------------------------------\n 4. time (forward no keep) "
2018/06/19 19:53:16 "--------------------------------------------------------------------------\n 2. time (forward+keep) "
2018/06/19 19:53:16 "--------------------------------------------------------------------------\n 3. time (reverse) "
2018/06/19 19:53:16 "--------------------------------------------------------------------------\n output of results \n optional generation of tape_doc.tex\n tape_doc(tag,1,n2,a,detaut);"
2018/06/19 19:53:16 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/detexam/detexam-old.cpp": 9.612583ms
2018/06/19 19:53:16 Couldn't classify license(s)
2018/06/19 19:53:17 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/detexam/README
2018/06/19 19:53:17 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/detexam/README": 7.401046ms
2018/06/19 19:53:17 Couldn't classify license(s)
2018/06/19 19:53:18 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/pow/powexam.cpp
2018/06/19 19:53:18 detected language: 4
2018/06/19 19:53:18 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     powexam.cpp\n Revision: $Id$\n Contents: example for computation of n-th power\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:18 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:53:18 " use of ALL ADOL-C interfaces"
2018/06/19 19:53:18 "**************************************************************************\n                                                             MAIN PROGRAM "
2018/06/19 19:53:18 " input the desired degree"
2018/06/19 19:53:18 " allocations and initializations"
2018/06/19 19:53:18 " function value = 0. coefficient\n first derivative = 1. coefficient\n second derivative = 2. coefficient"
2018/06/19 19:53:18 " further coefficients\n used for checking consistency\n between forward and reverse"
2018/06/19 19:53:18 " declare active variables\n beginning of active section\n tag = 1 and keep = 0\n only one independent var"
2018/06/19 19:53:18 " actual function call\n only one dependent adouble\n no global adouble has died\n end of active section */\n weighting vector\n for reverse call\n note that keep = i+1 in call\n evaluate the i-the derivative"
2018/06/19 19:53:18 " scale derivative to Taylorcoeff."
2018/06/19 19:53:18 " evaluate the (i+1)-st deriv.\n end for"
2018/06/19 19:53:18 " tag = 1 and keep = 0\n only one independent var\n actual function call\n only one dependent adouble\n no global adouble has died\n end of active section */\n for reverse call\n note that keep = i+1 in call\n evaluate the i-the derivative"
2018/06/19 19:53:18 " scale derivative to Taylorcoeff."
2018/06/19 19:53:18 " evaluate the (i+1)-st deriv.\n end for"
2018/06/19 19:53:18 " end main"
2018/06/19 19:53:18 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/pow/powexam.cpp": 10.129361ms
2018/06/19 19:53:18 Couldn't classify license(s)
2018/06/19 19:53:19 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/pow/Makefile.am
2018/06/19 19:53:19 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/pow/Makefile.am": 7.016255ms
2018/06/19 19:53:19 Couldn't classify license(s)
2018/06/19 19:53:19 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/pow/Makefile.in
2018/06/19 19:53:20 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/pow/Makefile.in": 58.198986ms
2018/06/19 19:53:20 Couldn't classify license(s)
2018/06/19 19:53:20 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/pow/README
2018/06/19 19:53:20 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/pow/README": 6.78132ms
2018/06/19 19:53:20 Couldn't classify license(s)
2018/06/19 19:53:21 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lufact/LUdet.cpp
2018/06/19 19:53:21 detected language: 4
2018/06/19 19:53:21 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     LUdet.cpp\n Revision: $Id$\n Contents: example for\n             * Computation of the determinant of a matrix\n               by LU-decomposition of the system matrix without pivoting \n             * application of tapedoc to observe taping of\n               the new op_codes for the elementary operations\n                  \n                     y += x1 * x2;\n                     y -= x1 * x2;           \n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:21 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:53:21 "**************************************************************************\n                                                             MAIN PROGRAM \n------------------------------------------------------------------------\n variables \n tape tag\n system size\n # of indeps\n # of deps"
2018/06/19 19:53:21 " passive variables\n active variables\n arguments\n the gradient\n the hessian"
2018/06/19 19:53:21 "------------------------------------------------------------------------\n Info "
2018/06/19 19:53:21 "------------------------------------------------------------------------\n Allcoation und initialization of the system matrix "
2018/06/19 19:53:21 "------------------------------------------------------------------------\n Taping the computation of the determinant "
2018/06/19 19:53:21 " marking indeps "
2018/06/19 19:53:21 " indep. vars\n LU-factorization and computation of determinant "
2018/06/19 19:53:21 " marking deps "
2018/06/19 19:53:21 "------------------------------------------------------------------------\n Recomputation of determinant "
2018/06/19 19:53:21 "------------------------------------------------------------------------\n Computation of gradient "
2018/06/19 19:53:21 "------------------------------------------------------------------------\n Computation of hessian "
2018/06/19 19:53:21 "------------------------------------------------------------------------\n Tape-documentation "
2018/06/19 19:53:21 "------------------------------------------------------------------------\n Tape statistics "
2018/06/19 19:53:21 "------------------------------------------------------------------------\n That's it "
2018/06/19 19:53:21 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lufact/LUdet.cpp": 9.530683ms
2018/06/19 19:53:21 Couldn't classify license(s)
2018/06/19 19:53:22 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lufact/LUsolve.cpp
2018/06/19 19:53:22 detected language: 4
2018/06/19 19:53:22 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     LUsolve.cpp\n Revision: $Id$\n Contents: example for\n             * Computation of the determinant of a matrix\n               by LU-decomposition of the system matrix without pivoting \n             * application of tapedoc to observe taping of\n               the new op_codes for the elementary operations\n                  \n                     y += x1 * x2;\n                     y -= x1 * x2;           \n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:22 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:53:22 "**************************************************************************\n                                                             MAIN PROGRAM \n------------------------------------------------------------------------\n variables \n tape tag\n system size\n # of indeps\n # of deps"
2018/06/19 19:53:22 " passive variables"
2018/06/19 19:53:22 " active variables\n arguments\n the Jacobian\n Hessian-vector product"
2018/06/19 19:53:22 "------------------------------------------------------------------------\n Info "
2018/06/19 19:53:22 "------------------------------------------------------------------------\n Allocation und initialization of the system matrix "
2018/06/19 19:53:22 "------------------------------------------------------------------------\n Taping the computation of the determinant "
2018/06/19 19:53:22 " marking indeps "
2018/06/19 19:53:22 " LU-factorization and computation of solution "
2018/06/19 19:53:22 " marking deps "
2018/06/19 19:53:22 "------------------------------------------------------------------------\n Recomputation  "
2018/06/19 19:53:22 "------------------------------------------------------------------------\n Computation of Jacobian "
2018/06/19 19:53:22 "------------------------------------------------------------------------\n Computation of Lagrange-Hessian-vector product "
2018/06/19 19:53:22 "------------------------------------------------------------------------\n Tape-documentation "
2018/06/19 19:53:22 "------------------------------------------------------------------------\n Tape statistics "
2018/06/19 19:53:22 "------------------------------------------------------------------------\n That's it "
2018/06/19 19:53:22 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lufact/LUsolve.cpp": 9.857527ms
2018/06/19 19:53:22 Couldn't classify license(s)
2018/06/19 19:53:23 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lufact/Makefile.am
2018/06/19 19:53:23 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lufact/Makefile.am": 7.402024ms
2018/06/19 19:53:23 Couldn't classify license(s)
2018/06/19 19:53:23 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lufact/Makefile.in
2018/06/19 19:53:24 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lufact/Makefile.in": 56.957815ms
2018/06/19 19:53:24 Couldn't classify license(s)
2018/06/19 19:53:24 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lufact/LU.h
2018/06/19 19:53:24 detected language: 4
2018/06/19 19:53:24 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     LU.h\n Revision: $Id$\n Contents: example for 'active' LU-decomposition and according solver\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n   \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:24 "**************************************************************************\n                                                                 INCLUDES \n use of ALL ADOL-C interfaces"
2018/06/19 19:53:24 "**************************************************************************\n Simple LU-factorization according to Crout's algorithm without pivoting "
2018/06/19 19:53:24 "**************************************************************************\n Solution of A*x=b by forward and backward substitution "
2018/06/19 19:53:24 "**************************************************************************\n                                                              END OF FILE "
2018/06/19 19:53:24 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lufact/LU.h": 7.387483ms
2018/06/19 19:53:24 Couldn't classify license(s)
2018/06/19 19:53:25 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lufact/LU.cpp
2018/06/19 19:53:25 detected language: 4
2018/06/19 19:53:25 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     LU.cpp\n Revision: $Id$\n Contents: example for 'active' LU-decomposition and according solver\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:25 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:53:25 "**************************************************************************\n                                                          ADOUBLE ROUTINE \n Simple LU-factorization according to Crout's algorithm without pivoting "
2018/06/19 19:53:25 " L-part "
2018/06/19 19:53:25 " U-part "
2018/06/19 19:53:25 "**************************************************************************\n                                                          ADOUBLE ROUTINE \n Solution of A*x=b by forward and backward substitution "
2018/06/19 19:53:25 " forward substitution "
2018/06/19 19:53:25 " backward substitution "
2018/06/19 19:53:25 "**************************************************************************\n                                                              END OF FILE "
2018/06/19 19:53:25 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lufact/LU.cpp": 8.101476ms
2018/06/19 19:53:25 Couldn't classify license(s)
2018/06/19 19:53:26 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lufact/README
2018/06/19 19:53:26 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lufact/README": 7.70464ms
2018/06/19 19:53:26 Couldn't classify license(s)
2018/06/19 19:53:27 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/scal/Makefile.am
2018/06/19 19:53:27 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/scal/Makefile.am": 7.360256ms
2018/06/19 19:53:27 Couldn't classify license(s)
2018/06/19 19:53:27 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/scal/Makefile.in
2018/06/19 19:53:27 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/scal/Makefile.in": 57.822965ms
2018/06/19 19:53:27 Couldn't classify license(s)
2018/06/19 19:53:28 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/scal/scalexam.cpp
2018/06/19 19:53:28 detected language: 4
2018/06/19 19:53:28 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     scalexam.cpp\n Revision: $Id$\n Contents:\n          This program can be used to verify the consistency and \n          correctness of derivatives computed by ADOL-C in its forward \n          and reverse mode.  \n          Ther use is required to select one integer input id. \n          For positive n = id the monomial x^n is evaluated recursively \n          at x=0.5 and all its nonzero Taylor coeffcients at this point \n          are evaluated in the forward and reverse mode. \n          A negative choice of id >= -9 leads to one of nine\n          identities, whose derivatives should be trivial. These identities\n          may be used to check the correctness of particular code segments\n          in the ADOL-C sources uni5_.c and *o_rev.c. No timings are\n          performed in this example program.\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:28 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:53:28 "**************************************************************************\n                                                                    POWER \n The monomial evaluation routine which has been obtained from\n   the original version by retyping all `doubles' as `adoubles' "
2018/06/19 19:53:28 "**************************************************************************\n                                                                     MAIN "
2018/06/19 19:53:28 "--------------------------------------------------------------------------"
2018/06/19 19:53:28 "--------------------------------------------------------------------------"
2018/06/19 19:53:28 " Begin taping all calculations with 'adoubles'"
2018/06/19 19:53:28 " The (partial) execution trace is completed."
2018/06/19 19:53:28 "--------------------------------------------------------------------------"
2018/06/19 19:53:28 "--------------------------------------------------------------------------"
2018/06/19 19:53:28 "--------------------------------------------------------------------------"
2018/06/19 19:53:28 " tape_doc(tag,depen,indep,*xpoint,*respoint);"
2018/06/19 19:53:28 " call higher order scalar reverse"
2018/06/19 19:53:28 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/scal/scalexam.cpp": 12.511593ms
2018/06/19 19:53:28 Couldn't classify license(s)
2018/06/19 19:53:29 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/scal/README
2018/06/19 19:53:29 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/scal/README": 6.903665ms
2018/06/19 19:53:29 Couldn't classify license(s)
2018/06/19 19:53:30 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/speelpenning/Makefile.am
2018/06/19 19:53:30 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/speelpenning/Makefile.am": 7.196113ms
2018/06/19 19:53:30 Couldn't classify license(s)
2018/06/19 19:53:31 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/speelpenning/Makefile.in
2018/06/19 19:53:31 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/speelpenning/Makefile.in": 57.679554ms
2018/06/19 19:53:31 Couldn't classify license(s)
2018/06/19 19:53:31 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/speelpenning/speelpenning.cpp
2018/06/19 19:53:31 detected language: 4
2018/06/19 19:53:31 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     speelpenning.cpp\n Revision: $Id$\n Contents: example for computation of sparse hessians\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n   \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:31 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:53:31 "**************************************************************************\n                                                                   MACROS "
2018/06/19 19:53:31 "**************************************************************************\n                                                             MAIN PROGRAM "
2018/06/19 19:53:31 "--------------------------------------------------------------------------\n Input "
2018/06/19 19:53:31 "--------------------------------------------------------------------------\n 0. time  (undifferentiated double code) "
2018/06/19 19:53:31 " Init "
2018/06/19 19:53:31 "--------------------------------------------------------------------------\n 1. time (tracing ! no keep) "
2018/06/19 19:53:31 "--------------------------------------------------------------------------"
2018/06/19 19:53:31 "--------------------------------------------------------------------------"
2018/06/19 19:53:31 "--------------------------------------------------------------------------\n 6. time (forward no keep) "
2018/06/19 19:53:31 "--------------------------------------------------------------------------\n 2. time (forward+keep) "
2018/06/19 19:53:31 "--------------------------------------------------------------------------\n 3. time (reverse) "
2018/06/19 19:53:31 " Compare with deleted product"
2018/06/19 19:53:31 "--------------------------------------------------------------------------\n 4. time (gradient) "
2018/06/19 19:53:31 "last argument lagrange is ommitted"
2018/06/19 19:53:31 " Compare with previous numerical result"
2018/06/19 19:53:31 "--------------------------------------------------------------------------\n 5. time (first row of Hessian) "
2018/06/19 19:53:31 " Computes Hessian times direction tan."
2018/06/19 19:53:31 "Compare with doubly deleted product"
2018/06/19 19:53:31 "--------------------------------------------------------------------------\n Check for symmetry "
2018/06/19 19:53:31 " Computes Hessian times direction tan."
2018/06/19 19:53:31 "--------------------------------------------------------------------------\n output of results "
2018/06/19 19:53:31 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/speelpenning/speelpenning.cpp": 10.377627ms
2018/06/19 19:53:31 Couldn't classify license(s)
2018/06/19 19:53:32 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/speelpenning/README
2018/06/19 19:53:32 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/speelpenning/README": 6.645484ms
2018/06/19 19:53:32 Couldn't classify license(s)
2018/06/19 19:53:33 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/Makefile.am
2018/06/19 19:53:33 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/Makefile.am": 7.744477ms
2018/06/19 19:53:33 Couldn't classify license(s)
2018/06/19 19:53:34 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/checkpointing/Makefile.am
2018/06/19 19:53:34 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/checkpointing/Makefile.am": 7.066528ms
2018/06/19 19:53:34 Couldn't classify license(s)
2018/06/19 19:53:35 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/checkpointing/Makefile.in
2018/06/19 19:53:35 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/checkpointing/Makefile.in": 59.320104ms
2018/06/19 19:53:35 Couldn't classify license(s)
2018/06/19 19:53:35 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/checkpointing/checkpointing.cpp
2018/06/19 19:53:35 detected language: 4
2018/06/19 19:53:35 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     checkpointing.cpp\n Revision: $Id$\n Contents: example for checkpointing\n\n Copyright (c) Andrea Walther\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:35 " time step function\n double version "
2018/06/19 19:53:35 " adouble version "
2018/06/19 19:53:35 " time interval"
2018/06/19 19:53:35 " state, double and adouble version"
2018/06/19 19:53:35 " control, double and adouble version"
2018/06/19 19:53:35 " target value;"
2018/06/19 19:53:35 "variables for derivative caluclation"
2018/06/19 19:53:35 " tape identifiers"
2018/06/19 19:53:35 " two input and output variables for checkpointing function"
2018/06/19 19:53:35 " time interval"
2018/06/19 19:53:35 "control"
2018/06/19 19:53:35 " basis variant: full taping of time step loop"
2018/06/19 19:53:35 " Now using checkpointing facilities"
2018/06/19 19:53:35 " define checkpointing procedure"
2018/06/19 19:53:35 " generate checkpointing context => define active variante of the time step"
2018/06/19 19:53:35 " double variante of the time step function"
2018/06/19 19:53:35 " number of time steps to perform"
2018/06/19 19:53:35 " number of checkpoint"
2018/06/19 19:53:35 " dimension of input/output"
2018/06/19 19:53:35 " input vector"
2018/06/19 19:53:35 " output vector"
2018/06/19 19:53:35 " tape number for checkpointing"
2018/06/19 19:53:35 " always retape or not ?"
2018/06/19 19:53:35 " Euler step, double version"
2018/06/19 19:53:35 " Euler step, adouble version"
2018/06/19 19:53:35 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/checkpointing/checkpointing.cpp": 18.287349ms
2018/06/19 19:53:35 Couldn't classify license(s)
2018/06/19 19:53:36 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/checkpointing/README
2018/06/19 19:53:36 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/checkpointing/README": 6.361834ms
2018/06/19 19:53:36 Couldn't classify license(s)
2018/06/19 19:53:37 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/openmp_exam/liborpar.cpp
2018/06/19 19:53:37 detected language: 4
2018/06/19 19:53:37 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     liborpar.cpp\n Revision: $Id$\n Contents: example for differentiation of OpemMP parallel programs\n           parallel version \n\n Copyright (c) Andrea Walther\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:37 " Program to compute deltas and vegas of swaption portfolio\n   from forward and reverse mode pathwise sensitivities \n   in parallel written by Andrea Walther in 2008-11 based on \n   code written by written by Mike Giles in 2005-7 which is \n   again based on code written by Zhao and Glasserman at \n   Columbia University  "
2018/06/19 19:53:37 " calculate path values "
2018/06/19 19:53:37 " calculate the portfolio value v "
2018/06/19 19:53:37 " apply discount //"
2018/06/19 19:53:37 " -------------------------------------------------------- "
2018/06/19 19:53:37 " constants for all threads"
2018/06/19 19:53:37 " LIBOR interval  //"
2018/06/19 19:53:37 " data for swaption portfolio //"
2018/06/19 19:53:37 "----------------------------------------------------------//\n                                                          //\n do a full path + portfolio sensitivity check             //\n                                                          //\n A real application would generate a different random     //\n vector z for each path but here we set one and reuse it  //\n                                                          //\n----------------------------------------------------------//"
2018/06/19 19:53:37 " different paths for each thread"
2018/06/19 19:53:37 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/openmp_exam/liborpar.cpp": 11.70624ms
2018/06/19 19:53:37 Couldn't classify license(s)
2018/06/19 19:53:38 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/openmp_exam/liborser.cpp
2018/06/19 19:53:38 detected language: 4
2018/06/19 19:53:38 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     liborser.cpp\n Revision: $Id$\n Contents: example for differentiation of OpemMP parallel programs\n           serial version for comparisons\n\n Copyright (c) Andrea Walther\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:38 " Program to compute deltas and vegas of swaption portfolio\n   from forward and reverse mode pathwise sensitivities \n   in parallel written by Andrea Walther in 2008-11 based on \n   code written by written by Mike Giles in 2005-7 which is \n   again based on code written by Zhao and Glasserman at \n   Columbia University  "
2018/06/19 19:53:38 " calculate path values "
2018/06/19 19:53:38 " calculate the portfolio value v "
2018/06/19 19:53:38 " apply discount //"
2018/06/19 19:53:38 " -------------------------------------------------------- "
2018/06/19 19:53:38 " LIBOR interval  //"
2018/06/19 19:53:38 " data for swaption portfolio //"
2018/06/19 19:53:38 "----------------------------------------------------------//\n                                                          //\n do a full path + portfolio sensitivity check             //\n                                                          //\n A real application would generate a different random     //\n vector z for each path but here we set one and reuse it  //\n                                                          //\n----------------------------------------------------------//"
2018/06/19 19:53:38 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/openmp_exam/liborser.cpp": 11.391875ms
2018/06/19 19:53:38 Couldn't classify license(s)
2018/06/19 19:53:39 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/openmp_exam/Makefile.am
2018/06/19 19:53:39 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/openmp_exam/Makefile.am": 8.438042ms
2018/06/19 19:53:39 Couldn't classify license(s)
2018/06/19 19:53:39 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/openmp_exam/Makefile.in
2018/06/19 19:53:39 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/openmp_exam/Makefile.in": 56.787289ms
2018/06/19 19:53:39 Couldn't classify license(s)
2018/06/19 19:53:40 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/openmp_exam/README
2018/06/19 19:53:40 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/openmp_exam/README": 7.63926ms
2018/06/19 19:53:40 Couldn't classify license(s)
2018/06/19 19:53:41 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/param/paramexam.cpp
2018/06/19 19:53:41 detected language: 4
2018/06/19 19:53:41 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     paramexam.cpp\n Revision: $Id$\n Contents: example for parameter dependent functions\n \n Copyright (c) Kshitij Kulshreshtha\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n\n----------------------------------------------------------------------------"
2018/06/19 19:53:41 "**************************************************************************\n                                                    CONSTANTS & VARIABLES \n originally 0.0 "
2018/06/19 19:53:41 "**************************************************************************\n                                                         HELMHOLTZ ENERGY "
2018/06/19 19:53:41 " Now with parameters "
2018/06/19 19:53:41 " now with more independents "
2018/06/19 19:53:41 "**************************************************************************\n                                                                     MAIN \n This program computes first order directional derivatives\n   for the helmholtz energy function "
2018/06/19 19:53:41 "--------------------------------------------------------------------------\n Initilizations "
2018/06/19 19:53:41 "--------------------------------------------------------------------------\n Tracing with keep "
2018/06/19 19:53:41 " reverse computation of gradient "
2018/06/19 19:53:41 "--------------------------------------------------------------------------\n Tracing with keep "
2018/06/19 19:53:41 " reverse computation of gradient "
2018/06/19 19:53:41 "--------------------------------------------------------------------------"
2018/06/19 19:53:41 " Tracing with keep "
2018/06/19 19:53:41 " reverse computation of gradient "
2018/06/19 19:53:41 "--------------------------------------------------------------------------"
2018/06/19 19:53:41 "--------------------------------------------------------------------------"
2018/06/19 19:53:41 " results "
2018/06/19 19:53:41 "--------------------------------------------------------------------------\n change constant parameters "
2018/06/19 19:53:41 " parameter tape "
2018/06/19 19:53:41 " double independents tape "
2018/06/19 19:53:41 "--------------------------------------------------------------------------\n with retaping on tape 1 "
2018/06/19 19:53:41 " reverse computation of gradient "
2018/06/19 19:53:41 " results "
2018/06/19 19:53:41 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/param/paramexam.cpp": 9.230775ms
2018/06/19 19:53:41 Couldn't classify license(s)
2018/06/19 19:53:42 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/param/Makefile.am
2018/06/19 19:53:42 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/param/Makefile.am": 7.616699ms
2018/06/19 19:53:42 Couldn't classify license(s)
2018/06/19 19:53:43 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/param/Makefile.in
2018/06/19 19:53:43 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/param/Makefile.in": 56.106113ms
2018/06/19 19:53:43 Couldn't classify license(s)
2018/06/19 19:53:43 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lighthouse/cubic-iter.cpp
2018/06/19 19:53:43 detected language: 4
2018/06/19 19:53:43 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     cubic-iter-2.cpp\n Revision: $Id$\n Contents: example for cubic lighthouse example of Griewank's Book\n            using iterative solvers\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:43 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:53:43 "**************************************************************************\n                                                          ADOUBLE ROUTINE "
2018/06/19 19:53:43 "**************************************************************************\n                                                             MAIN PROGRAM "
2018/06/19 19:53:43 "--------------------------------------------------------------------------\n Preparation "
2018/06/19 19:53:43 "--------------------------------------------------------------------------\n 0. time (taping) "
2018/06/19 19:53:43 "--------------------------------------------------------------------------"
2018/06/19 19:53:43 "--------------------------------------------------------------------------"
2018/06/19 19:53:43 "--------------------------------------------------------------------------"
2018/06/19 19:53:43 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lighthouse/cubic-iter.cpp": 8.223592ms
2018/06/19 19:53:43 Couldn't classify license(s)
2018/06/19 19:53:44 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lighthouse/cubic-2.cpp
2018/06/19 19:53:44 detected language: 4
2018/06/19 19:53:44 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     cubic-2.cpp\n Revision: $Id$\n Contents: example for cubic lighthouse example of Griewank's Book\n            using Cardan's formula with conditionals\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:44 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:53:44 "**************************************************************************\n                                                          ADOUBLE ROUTINE "
2018/06/19 19:53:44 "---------------------"
2018/06/19 19:53:44 " 1. branch ----------"
2018/06/19 19:53:44 " 2. branch ----------"
2018/06/19 19:53:44 "---------------------"
2018/06/19 19:53:44 "**************************************************************************\n                                                             MAIN PROGRAM "
2018/06/19 19:53:44 "--------------------------------------------------------------------------\n Preparation "
2018/06/19 19:53:44 "--------------------------------------------------------------------------"
2018/06/19 19:53:44 "--------------------------------------------------------------------------"
2018/06/19 19:53:44 "--------------------------------------------------------------------------"
2018/06/19 19:53:44 "--------------------------------------------------------------------------"
2018/06/19 19:53:44 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lighthouse/cubic-2.cpp": 8.368161ms
2018/06/19 19:53:44 Couldn't classify license(s)
2018/06/19 19:53:45 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lighthouse/Makefile.am
2018/06/19 19:53:45 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lighthouse/Makefile.am": 7.590948ms
2018/06/19 19:53:45 Couldn't classify license(s)
2018/06/19 19:53:46 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lighthouse/Makefile.in
2018/06/19 19:53:46 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lighthouse/Makefile.in": 61.436736ms
2018/06/19 19:53:46 Couldn't classify license(s)
2018/06/19 19:53:47 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lighthouse/cubic-iter-2.cpp
2018/06/19 19:53:47 detected language: 4
2018/06/19 19:53:47 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     cubic-iter-2.cpp\n Revision: $Id$\n Contents: example for cubic lighthouse example of Griewank's Book\n           using iterative solvers\n           (output of z_k and dz_k for fixed t)\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:47 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:53:47 "**************************************************************************\n                                                          ADOUBLE ROUTINE "
2018/06/19 19:53:47 "**************************************************************************\n                                                             MAIN PROGRAM "
2018/06/19 19:53:47 "--------------------------------------------------------------------------\n Preparation "
2018/06/19 19:53:47 "--------------------------------------------------------------------------\n 0. time (taping) "
2018/06/19 19:53:47 "--------------------------------------------------------------------------"
2018/06/19 19:53:47 "--------------------------------------------------------------------------"
2018/06/19 19:53:47 "--------------------------------------------------------------------------"
2018/06/19 19:53:47 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lighthouse/cubic-iter-2.cpp": 7.800763ms
2018/06/19 19:53:47 Couldn't classify license(s)
2018/06/19 19:53:47 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lighthouse/cubic.cpp
2018/06/19 19:53:47 detected language: 4
2018/06/19 19:53:47 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     cubic.cpp\n Revision: $Id$\n Contents: example for cubic lighthouse example of Griewank's Book\n           using Cardan's formula with two tapes\n  \n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:47 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:53:47 "**************************************************************************\n                                                          ADOUBLE ROUTINE "
2018/06/19 19:53:47 "---------------------"
2018/06/19 19:53:47 " 1. branch ----------"
2018/06/19 19:53:47 "---------------------"
2018/06/19 19:53:47 "**************************************************************************\n                                                          ADOUBLE ROUTINE "
2018/06/19 19:53:47 "---------------------"
2018/06/19 19:53:47 " 2. branch ----------"
2018/06/19 19:53:47 "---------------------"
2018/06/19 19:53:47 "**************************************************************************\n                                                             MAIN PROGRAM "
2018/06/19 19:53:47 "--------------------------------------------------------------------------\n Preparation "
2018/06/19 19:53:47 "--------------------------------------------------------------------------"
2018/06/19 19:53:47 "--------------------------------------------------------------------------"
2018/06/19 19:53:47 "--------------------------------------------------------------------------"
2018/06/19 19:53:47 " check for NaN"
2018/06/19 19:53:47 "--------------------------------------------------------------------------"
2018/06/19 19:53:47 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lighthouse/cubic.cpp": 8.086216ms
2018/06/19 19:53:47 Couldn't classify license(s)
2018/06/19 19:53:48 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lighthouse/README
2018/06/19 19:53:48 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/lighthouse/README": 8.641412ms
2018/06/19 19:53:48 Couldn't classify license(s)
2018/06/19 19:53:49 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/fixpoint_exam/fixpoint_exam.cpp
2018/06/19 19:53:49 detected language: 4
2018/06/19 19:53:49 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     fixpoint_exam.cpp\n Revision: $Id$\n Contents: example for differentiation of fixpoint iterations\n\n Copyright (c) Andrea Walther\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:49 " fixpoint iteration"
2018/06/19 19:53:49 " double version "
2018/06/19 19:53:49 " adouble version "
2018/06/19 19:53:49 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/fixpoint_exam/fixpoint_exam.cpp": 9.447022ms
2018/06/19 19:53:49 Couldn't classify license(s)
2018/06/19 19:53:50 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/fixpoint_exam/Makefile.am
2018/06/19 19:53:50 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/fixpoint_exam/Makefile.am": 7.071444ms
2018/06/19 19:53:50 Couldn't classify license(s)
2018/06/19 19:53:50 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/fixpoint_exam/Makefile.in
2018/06/19 19:53:50 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/fixpoint_exam/Makefile.in": 57.061715ms
2018/06/19 19:53:50 Couldn't classify license(s)
2018/06/19 19:53:51 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/fixpoint_exam/README
2018/06/19 19:53:51 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/fixpoint_exam/README": 6.890012ms
2018/06/19 19:53:51 Couldn't classify license(s)
2018/06/19 19:53:52 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/Makefile.in
2018/06/19 19:53:52 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/Makefile.in": 57.896966ms
2018/06/19 19:53:52 Couldn't classify license(s)
2018/06/19 19:53:53 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/cuda/traceless_cuda.cu
2018/06/19 19:53:53 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/cuda/traceless_cuda.cu": 13.223122ms
2018/06/19 19:53:53 Couldn't classify license(s)
2018/06/19 19:53:54 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/cuda/Makefile.am
2018/06/19 19:53:54 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/cuda/Makefile.am": 6.530231ms
2018/06/19 19:53:54 Couldn't classify license(s)
2018/06/19 19:53:54 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/cuda/Makefile.in
2018/06/19 19:53:54 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/cuda/Makefile.in": 39.071975ms
2018/06/19 19:53:54 Couldn't classify license(s)
2018/06/19 19:53:55 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/cuda/liborgpu.cu
2018/06/19 19:53:55 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/cuda/liborgpu.cu": 21.713044ms
2018/06/19 19:53:55 Couldn't classify license(s)
2018/06/19 19:53:56 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ode/vfunc_fic.cpp
2018/06/19 19:53:56 detected language: 4
2018/06/19 19:53:56 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     vfunc_fic.cpp\n Revision: $Id$\n Contents: example for function module containing the flow in a channel\n \n   Each << function module >> contains:\n          \n     (1) const char* const controlFileName \n     (2) int indepDim; \n     (3) int depDim; \n     (4) void initProblemParameters( void )\n     (5) void initIndependents( double* indEPS_ )\n     (6) void originalVectorFunction( double* indEPS_, double* dEPS_ )\n     (7) void tapingVectorFunction( int tag, double* indEPS_, double* dEPS_ )   \n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:56 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:53:56 "**************************************************************************\n                                                         GLOBAL VARIABLES "
2018/06/19 19:53:56 "--------------------------------------------------------------------------\n                                                        Control file name "
2018/06/19 19:53:56 "--------------------------------------------------------------------------\n                                                               Dimensions "
2018/06/19 19:53:56 "--------------------------------------------------------------------------\n                                       Other problem dependent parameters "
2018/06/19 19:53:56 "**************************************************************************\n                                                  INIT PROBLEM PARAMETERS "
2018/06/19 19:53:56 " number of indeps & deps "
2018/06/19 19:53:56 "**************************************************************************\n                                                        INITIALIZE INDEPs "
2018/06/19 19:53:56 "**************************************************************************\n                                                 ORIGINAL SCALAR FUNCTION "
2018/06/19 19:53:56 "--------------------------------------------------------------------------\n                                                         The fic function \n Initialized data "
2018/06/19 19:53:56 " System generated locals "
2018/06/19 19:53:56 " Local variables "
2018/06/19 19:53:56 " was [5][8] \n was [4][8][8][5] "
2018/06/19 19:53:56 " Function Body \n     Initialization. "
2018/06/19 19:53:56 "     Evaluate the function \n     Initialize arrays. "
2018/06/19 19:53:56 "     Set up the boundary equations at t = 0.  u(0) = 0, u'(0) = 0. "
2018/06/19 19:53:56 "        Set up the collocation equations. "
2018/06/19 19:53:56 "        Set up the continuity equations. "
2018/06/19 19:53:56 "     Set up the boundary equations at t = 1.  u(1) = 1, u'(1) = 0. "
2018/06/19 19:53:56 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:53:56 "**************************************************************************\n                                                   TAPING SCALAR FUNCTION "
2018/06/19 19:53:56 "--------------------------------------------------------------------------\n                                                  The active fic function "
2018/06/19 19:53:56 " Initialized data "
2018/06/19 19:53:56 " System generated locals "
2018/06/19 19:53:56 " Local variables "
2018/06/19 19:53:56 " was [5][8] \n was [4][8][8][5] "
2018/06/19 19:53:56 " Function Body \n     Initialization. "
2018/06/19 19:53:56 "     Evaluate the function \n     Initialize arrays. "
2018/06/19 19:53:56 "     Set up the boundary equations at t = 0.  u(0) = 0, u'(0) = 0. "
2018/06/19 19:53:56 "        Set up the collocation equations. "
2018/06/19 19:53:56 "        Set up the continuity equations. "
2018/06/19 19:53:56 "     Set up the boundary equations at t = 1.  u(1) = 1, u'(1) = 0. "
2018/06/19 19:53:56 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:53:56 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ode/vfunc_fic.cpp": 15.00395ms
2018/06/19 19:53:56 Couldn't classify license(s)
2018/06/19 19:53:57 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ode/Makefile.am
2018/06/19 19:53:57 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ode/Makefile.am": 8.448427ms
2018/06/19 19:53:57 Couldn't classify license(s)
2018/06/19 19:53:58 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ode/Makefile.in
2018/06/19 19:53:58 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ode/Makefile.in": 64.710462ms
2018/06/19 19:53:58 Couldn't classify license(s)
2018/06/19 19:53:59 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ode/vfunc_eutroph.cpp
2018/06/19 19:53:59 detected language: 4
2018/06/19 19:53:59 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     vfunc_eutroph.cpp\n Revision: $Id$\n Contents: example for function module containing the eutroph example\n           (based on eutroph.C of version 1.7)\n \n   Each << function module >> contains:\n          \n     (1) const char* const controlFileName \n     (2) int indepDim; \n     (3) int depDim; \n     (4) void initProblemParameters( void )\n     (5) void initIndependents( double* indEPS_ )\n     (6) void originalVectorFunction( double* indEPS_, double* dEPS_ )\n     (7) void tapingVectorFunction( int tag, double* indEPS_, double* dEPS_ )   \n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:59 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:53:59 "**************************************************************************\n                                                         GLOBAL VARIABLES "
2018/06/19 19:53:59 "--------------------------------------------------------------------------\n                                                        Control file name "
2018/06/19 19:53:59 "--------------------------------------------------------------------------\n                                                               Dimensions "
2018/06/19 19:53:59 "--------------------------------------------------------------------------\n                                       Other problem dependent parameters "
2018/06/19 19:53:59 " fix controls "
2018/06/19 19:53:59 "**************************************************************************\n                                                  INIT PROBLEM PARAMETERS "
2018/06/19 19:53:59 " number of indEPS_ & dEPS_ "
2018/06/19 19:53:59 "**************************************************************************\n                                                        INITIALIZE INDEPS_ "
2018/06/19 19:53:59 " originally 0.0 \n originally 0.0 "
2018/06/19 19:53:59 "**************************************************************************\n                                                 ORIGINAL SCALAR FUNCTION "
2018/06/19 19:53:59 "--------------------------------------------------------------------------\n                                                     The eutroph function "
2018/06/19 19:53:59 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:53:59 "**************************************************************************\n                                                   TAPING SCALAR FUNCTION "
2018/06/19 19:53:59 "--------------------------------------------------------------------------\n                                              The active eutroph function "
2018/06/19 19:53:59 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:53:59 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ode/vfunc_eutroph.cpp": 12.92808ms
2018/06/19 19:53:59 Couldn't classify license(s)
2018/06/19 19:53:59 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ode/vgenodemain.cpp
2018/06/19 19:53:59 detected language: 4
2018/06/19 19:53:59 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     vgenodemain.cpp\n Revision: $Id$\n Contents: example for ODE Generic Main File: \n       for use with function modules containing vector examples \n       (e.g. vgen_eutroph.C)\n \n   Each << function module >> contains:\n          \n     (1) const char* const controlFileName \n     (2) int indepDim; \n     (3) int depDim; \n     (4) void initProblemParameters( void )\n     (5) void initIndependents( double* indEPS_ )\n     (6) void originalVectorFunction( double* indEPS_, double* dEPS_ )\n     (7) void tapingVectorFunction( int tag, double* indEPS_, double* dEPS_ )   \n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:53:59 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:53:59 "**************************************************************************\n                                                                   MACROS "
2018/06/19 19:53:59 "**************************************************************************\n                                      EXTERNAL STUFF FROM FUNCTION MODULES"
2018/06/19 19:53:59 "--------------------------------------------------------------------------\n                                                               Dimensions "
2018/06/19 19:53:59 "--------------------------------------------------------------------------\n                                                  Init Problem Parameters "
2018/06/19 19:53:59 "--------------------------------------------------------------------------\n                                                        Initialize indeps "
2018/06/19 19:53:59 "--------------------------------------------------------------------------\n                                                             original RHS "
2018/06/19 19:53:59 "--------------------------------------------------------------------------\n                                                               taping RHS "
2018/06/19 19:53:59 "**************************************************************************\n                                                                     MAIN "
2018/06/19 19:53:59 " tape tag "
2018/06/19 19:53:59 "------------------------------------------------------------------------\n Initialize all problem parameters (including  dimension) "
2018/06/19 19:53:59 "------------------------------------------------------------------------\n Check main parameters "
2018/06/19 19:53:59 "------------------------------------------------------------------------\n Initialize the independent variables "
2018/06/19 19:53:59 "------------------------------------------------------------------------\n Necessary variable "
2018/06/19 19:53:59 "**************************************************************************\n                                          0. ORIGINAL FUNCTION EVALUATION \n                                             ---> always                  "
2018/06/19 19:53:59 "**************************************************************************\n                                                   1. TAPING THE FUNCTION \n                                                      ---> always         "
2018/06/19 19:53:59 " NOTE: taping will be performed ONCE only "
2018/06/19 19:53:59 "**************************************************************************\n                                                                2. FORODE "
2018/06/19 19:53:59 "**************************************************************************\n                                                               3. REVERSE "
2018/06/19 19:53:59 "**************************************************************************\n                                                                 4.ACCODE "
2018/06/19 19:53:59 "**************************************************************************\n                                                               5. RESULTS "
2018/06/19 19:53:59 "------------------------------------------------------------------------"
2018/06/19 19:53:59 "------------------------------------------------------------------------\n The D+1 columns of z should now be consistent with the\n       ODE as represented by the time. Feeding z into forward\n       we obtain a coeffient array w, whose columns should\n       equal to the shifted and scaled columns of z "
2018/06/19 19:53:59 "------------------------------------------------------------------------\n If desired print out Jacobians of Taylor coeffcients with\n       respect to the base point "
2018/06/19 19:53:59 "------------------------------------------------------------------------"
2018/06/19 19:53:59 "**************************************************************************\n                                                               THAT'S ALL "
2018/06/19 19:53:59 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ode/vgenodemain.cpp": 15.483511ms
2018/06/19 19:53:59 Couldn't classify license(s)
2018/06/19 19:54:00 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ode/README
2018/06/19 19:54:00 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ode/README": 8.66776ms
2018/06/19 19:54:00 Couldn't classify license(s)
2018/06/19 19:54:01 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ode/vfunc_robertson.cpp
2018/06/19 19:54:01 detected language: 4
2018/06/19 19:54:01 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     vfunc_robertson.cpp\n Revision: $Id$\n Contents: example for function module containing the Robertson test problem\n            (based on odexam.C of version 1.7)\n \n   Each << function module >> contains:\n          \n     (1) const char* const controlFileName \n     (2) int indepDim; \n     (3) int depDim; \n     (4) void initProblemParameters( void )\n     (5) void initIndependents( double* indEPS_ )\n     (6) void originalVectorFunction( double* indEPS_, double* dEPS_ )\n     (7) void tapingVectorFunction( int tag, double* indEPS_, double* dEPS_ )   \n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:54:01 "**************************************************************************\n                                                                 INCLUDES "
2018/06/19 19:54:01 "**************************************************************************\n                                                         GLOBAL VARIABLES "
2018/06/19 19:54:01 "--------------------------------------------------------------------------\n                                                        Control file name "
2018/06/19 19:54:01 "--------------------------------------------------------------------------\n                                                               Dimensions "
2018/06/19 19:54:01 "--------------------------------------------------------------------------\n                                       Other problem dependent parameters "
2018/06/19 19:54:01 "**************************************************************************\n                                                  INIT PROBLEM PARAMETERS "
2018/06/19 19:54:01 " number of indeps & deps "
2018/06/19 19:54:01 "**************************************************************************\n                                                        INITIALIZE INDEPs "
2018/06/19 19:54:01 " originally 0.0 \n originally 0.0 "
2018/06/19 19:54:01 "**************************************************************************\n                                                 ORIGINAL SCALAR FUNCTION "
2018/06/19 19:54:01 "--------------------------------------------------------------------------\n                                               The Robertson test problem "
2018/06/19 19:54:01 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:54:01 "**************************************************************************\n                                                   TAPING SCALAR FUNCTION "
2018/06/19 19:54:01 "--------------------------------------------------------------------------\n                                        The active Robertson test problem "
2018/06/19 19:54:01 "--------------------------------------------------------------------------\n                                                   The interface function "
2018/06/19 19:54:01 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/additional_examples/ode/vfunc_robertson.cpp": 12.633113ms
2018/06/19 19:54:01 Couldn't classify license(s)
2018/06/19 19:54:02 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/tapeless_scalar.vcxproj
2018/06/19 19:54:02 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/tapeless_scalar.vcxproj": 25.878112ms
2018/06/19 19:54:02 Couldn't classify license(s)
2018/06/19 19:54:02 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/luexam.cpp
2018/06/19 19:54:02 detected language: 4
2018/06/19 19:54:02 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     luexam.cpp\n Revision: $Id$\n Contents: computation of LU factorization with pivoting\n\n Copyright (c) Kshitij Kulshreshtha\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:54:02 " Assuming A is stored row-wise in the vector"
2018/06/19 19:54:02 " select matrix size"
2018/06/19 19:54:02 " tag=1=keep"
2018/06/19 19:54:02 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/luexam.cpp": 7.5552ms
2018/06/19 19:54:02 Couldn't classify license(s)
2018/06/19 19:54:03 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/speelpenning.cpp
2018/06/19 19:54:03 detected language: 4
2018/06/19 19:54:03 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     speelpenning.cpp\n Revision: $Id$\n Contents: speelpennings example, described in the manual\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel \n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:54:03 "**************************************************************************\n                                                                 INCLUDES \n use of active doubles\n use of \"Easy to Use\" drivers\n gradient(.) and hessian(.)\n use of taping"
2018/06/19 19:54:03 "**************************************************************************\n                                                             MAIN PROGRAM "
2018/06/19 19:54:03 " some initialization"
2018/06/19 19:54:03 " tag = 1, keep = 0 by default"
2018/06/19 19:54:03 " or  x <<= xp outside the loop"
2018/06/19 19:54:03 " end for"
2018/06/19 19:54:03 " reading of tape statistics"
2018/06/19 19:54:03 " ..... print other tape stats"
2018/06/19 19:54:03 " gradient evaluation"
2018/06/19 19:54:03 " H equals (n-1)g since g is\n homogeneous of degree n-1."
2018/06/19 19:54:03 " vanishes analytically."
2018/06/19 19:54:03 " lower half of hessian"
2018/06/19 19:54:03 " end for\n end for"
2018/06/19 19:54:03 " end main"
2018/06/19 19:54:03 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/speelpenning.cpp": 7.974986ms
2018/06/19 19:54:03 Couldn't classify license(s)
2018/06/19 19:54:04 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/detexam.vcxproj
2018/06/19 19:54:04 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/detexam.vcxproj": 25.894951ms
2018/06/19 19:54:04 Couldn't classify license(s)
2018/06/19 19:54:05 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/adolc_examples.sln
2018/06/19 19:54:05 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/adolc_examples.sln": 20.868019ms
2018/06/19 19:54:05 Couldn't classify license(s)
2018/06/19 19:54:06 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/README
2018/06/19 19:54:06 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/README": 8.048931ms
2018/06/19 19:54:06 Couldn't classify license(s)
2018/06/19 19:54:06 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/examples/powexam.vcxproj
2018/06/19 19:54:06 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/examples/powexam.vcxproj": 25.366349ms
2018/06/19 19:54:06 Couldn't classify license(s)
2018/06/19 19:54:07 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/Makefile.am
2018/06/19 19:54:07 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/Makefile.am": 9.334765ms
2018/06/19 19:54:07 Couldn't classify license(s)
2018/06/19 19:54:08 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/advector.cpp
2018/06/19 19:54:08 detected language: 4
2018/06/19 19:54:08 " ---------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n\n Revision: $Id$\n Contents: advector.cpp contains a vector<adouble> implementation\n           that is able to trace subscripting operations.\n\n Copyright (c) Kshitij Kulshreshtha\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n\n---------------------------------------------------------------------------"
2018/06/19 19:54:08 " old: write_assign_a(locat,location);"
2018/06/19 19:54:08 " = arg\n = res"
2018/06/19 19:54:08 " old: write_assign_a(locat,location);"
2018/06/19 19:54:08 " = arg\n = res"
2018/06/19 19:54:08 " old: write_incr_decr_a(incr_a,location);"
2018/06/19 19:54:08 " = res"
2018/06/19 19:54:08 " old: write_assign_a(locat,location);"
2018/06/19 19:54:08 " = arg\n = res"
2018/06/19 19:54:08 " old: write_incr_decr_a(incr_a,location);"
2018/06/19 19:54:08 " = res"
2018/06/19 19:54:08 " old: write_incr_decr_a(incr_a,location);"
2018/06/19 19:54:08 " = res"
2018/06/19 19:54:08 " old: write_incr_decr_a(incr_a,location);"
2018/06/19 19:54:08 " = res"
2018/06/19 19:54:08 " = res"
2018/06/19 19:54:08 " = res"
2018/06/19 19:54:08 " = res\n = coval"
2018/06/19 19:54:08 " test this to avoid for x=x statements adjoint(x)=0 in reverse mode \n old:  write_assign_a(location,x.location);"
2018/06/19 19:54:08 " = arg\n = res"
2018/06/19 19:54:08 " = res"
2018/06/19 19:54:08 " = res"
2018/06/19 19:54:08 " old: write_d_same_arg(eq_plus_d,location,coval);"
2018/06/19 19:54:08 " = res\n = coval"
2018/06/19 19:54:08 " old: write_a_same_arg(eq_plus_a,location,y.location);"
2018/06/19 19:54:08 " = arg\n = res"
2018/06/19 19:54:08 " old: write_d_same_arg(eq_min_d,location,coval);"
2018/06/19 19:54:08 " = res\n = coval"
2018/06/19 19:54:08 " old: write_a_same_arg(eq_min_a,location,y.location);"
2018/06/19 19:54:08 " = arg\n = res"
2018/06/19 19:54:08 " old: write_d_same_arg(eq_mult_d,location,coval);"
2018/06/19 19:54:08 " = res\n = coval"
2018/06/19 19:54:08 " old: write_a_same_arg(eq_mult_a,location,y.location);"
2018/06/19 19:54:08 " = arg\n = res"
2018/06/19 19:54:08 " old: write_condassign(res.location,cond.location,arg1.location,\n\t\t     arg2.location);"
2018/06/19 19:54:08 " = arg"
2018/06/19 19:54:08 " = arg1\n = arg2\n = res"
2018/06/19 19:54:08 " old: write_condassign2(res.location,cond.location,arg.location);"
2018/06/19 19:54:08 " = arg"
2018/06/19 19:54:08 " = arg1\n = res"
2018/06/19 19:54:08 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/advector.cpp": 11.380402ms
2018/06/19 19:54:08 Couldn't classify license(s)
2018/06/19 19:54:09 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/fortutils.c
2018/06/19 19:54:09 detected language: 4
2018/06/19 19:54:09 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     fortutils.c\n Revision: $Id$\n Contents: Internal tools to handle Fortran arrays\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:09 "**************************************************************************\n                                                                          "
2018/06/19 19:54:09 "--------------------------------------------------------------------------"
2018/06/19 19:54:09 "--------------------------------------------------------------------------"
2018/06/19 19:54:09 "--------------------------------------------------------------------------"
2018/06/19 19:54:09 "--------------------------------------------------------------------------"
2018/06/19 19:54:09 "--------------------------------------------------------------------------"
2018/06/19 19:54:09 "--------------------------------------------------------------------------"
2018/06/19 19:54:09 "**************************************************************************"
2018/06/19 19:54:09 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/fortutils.c": 7.506498ms
2018/06/19 19:54:09 Couldn't classify license(s)
2018/06/19 19:54:10 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/forward_partx.c
2018/06/19 19:54:10 detected language: 4
2018/06/19 19:54:10 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     forward_partx.c\n Revision: $Id$\n Contents: \n \n Copyright (c) Andrea Walther\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:10 "--------------------------------------------------------------------------\n                                                                ZOS_PARTX \n zos_forward_partx(tag, m, mdim[n], n, x[n][d], y[m])                     \n (based on zos_forward)                                                   "
2018/06/19 19:54:10 " base point "
2018/06/19 19:54:10 "--------------------------------------------------------------------------\n                                                                FOS_PARTX \n fos_forward_partx(tag, m, n, ndim[n], x[n][][2], y[m][2])                \n (based on fos_forward)                                                   "
2018/06/19 19:54:10 " base point \n Taylor coefficients \n result \n derivatives "
2018/06/19 19:54:10 "--------------------------------------------------------------------------\n                                                                HOS_PARTX \n hos_forward_partx(tag, m, n, ndim[n], d, x[n][][d+1], y[m][d+1])         \n (based on hos_forward)                                                   "
2018/06/19 19:54:10 " base point \n Taylor coefficients \n result \n derivaties "
2018/06/19 19:54:10 "--------------------------------------------------------------------------\n                                                                FOV_PARTX \n fov_forward_partx(tag, m, n, ndim[n], p, x[n][], X[n][][p],\n                     y[m], Y[m][p]) "
2018/06/19 19:54:10 " (based on fov_forward)                                                   "
2018/06/19 19:54:10 " base point \n Taylor coefficients "
2018/06/19 19:54:10 "--------------------------------------------------------------------------\n                                                                HOV_PARTX \n hov_forward_partx(tag, m, n, ndim[n], p, x[n][], X[n][][p][d],\n                     y[m], Y[m][p][d]) "
2018/06/19 19:54:10 " (based on hov_forward)                                                   "
2018/06/19 19:54:10 " base point \n Taylor coefficients "
2018/06/19 19:54:10 "**************************************************************************"
2018/06/19 19:54:10 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/forward_partx.c": 9.447052ms
2018/06/19 19:54:10 Couldn't classify license(s)
2018/06/19 19:54:10 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/ampisupportAdolc.h
2018/06/19 19:54:10 detected language: 4
2018/06/19 19:54:10 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     ampisupportAdolc.cpp\n Revision: $Id$\n\n Copyright (c) Jean Utke\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:10 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/ampisupportAdolc.h": 7.024662ms
2018/06/19 19:54:10 Couldn't classify license(s)
2018/06/19 19:54:11 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/hos_ov_reverse.c
2018/06/19 19:54:11 detected language: 4
2018/06/19 19:54:11 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     drivers/drivers.h\n Revision: $Id$\n Contents: hos_ov_reverse (higher-order-scalar reverse mode on vectors)\n \n Copyright (c) Andrea Walther\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:11 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/hos_ov_reverse.c": 6.431864ms
2018/06/19 19:54:11 Couldn't classify license(s)
2018/06/19 19:54:12 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/checkpointing_p.h
2018/06/19 19:54:12 detected language: 4
2018/06/19 19:54:12 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     checkpointing_p.h\n Revision: $Id$\n Contents: private functions for the checkpointing functions.\n \n Copyright (c) Andreas Kowarz, Jean Utke\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n   \n----------------------------------------------------------------------------"
2018/06/19 19:54:12 "**************************************************************************\n                                                         Now the C THINGS "
2018/06/19 19:54:12 "**************************************************************************"
2018/06/19 19:54:12 " field of pointers to the value fields of a checkpoint "
2018/06/19 19:54:12 " a cleanup function "
2018/06/19 19:54:12 " ADOLC_CHECKPOITING_P_H "
2018/06/19 19:54:12 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/checkpointing_p.h": 7.06288ms
2018/06/19 19:54:12 Couldn't classify license(s)
2018/06/19 19:54:13 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/tape_handling.cpp
2018/06/19 19:54:13 detected language: 4
2018/06/19 19:54:13 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     tape_handling.cpp\n Revision: $Id$\n Contents: management of tape infos\n\n Copyright (c) Andreas Kowarz, Andrea Walther, Kshitij Kulshreshtha,\n               Benjamin Letschert, Jean Utke\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:54:13 " encapsulate this error message"
2018/06/19 19:54:13 " we use index 0 as end-of-list marker"
2018/06/19 19:54:13 " not the first time"
2018/06/19 19:54:13 " reset i to start of new slots (upper half)"
2018/06/19 19:54:13 " create initial linked list for new slots"
2018/06/19 19:54:13 " end marker"
2018/06/19 19:54:13 "**************************************************************************\n Returns the next free location in \"adouble\" memory.                      \n**************************************************************************"
2018/06/19 19:54:13 "**************************************************************************\n frees the specified location in \"adouble\" memory                         \n**************************************************************************"
2018/06/19 19:54:13 " vector of tape infos for all tapes in use "
2018/06/19 19:54:13 " stack of pointers to tape infos\n * represents the order of tape usage when doing nested taping "
2018/06/19 19:54:13 " the main tape info buffer and its fallback "
2018/06/19 19:54:13 " global tapeing variables "
2018/06/19 19:54:13 "--------------------------------------------------------------------------\n This function sets the flag \"newTape\" if either a taylor buffer has been \n created or a taping process has been performed. Calling the function is  \n also useful to \"convince\" the linker of including the cleaner part into  \n the binary when linking statically!                                      \n--------------------------------------------------------------------------"
2018/06/19 19:54:13 " inits the struct for the new tape "
2018/06/19 19:54:13 " as above but keep allocated buffers if possible "
2018/06/19 19:54:13 " inits a new tape and updates the tape stack (called from start_trace)\n * - returns 0 without error\n * - returns 1 if tapeID was already/still in use "
2018/06/19 19:54:13 " check if tape is in use "
2018/06/19 19:54:13 " free associated resources "
2018/06/19 19:54:13 " create new info struct and initialize it "
2018/06/19 19:54:13 " update tapeStack and save tapeInfos "
2018/06/19 19:54:13 " set the new tape infos as current "
2018/06/19 19:54:13 " opens an existing tape or creates a new handle for a tape on hard disk\n * - called from init_for_sweep and init_rev_sweep "
2018/06/19 19:54:13 " check if tape information exist in memory "
2018/06/19 19:54:13 " tape has been used before (in the current program) "
2018/06/19 19:54:13 " forward sweep "
2018/06/19 19:54:13 " tapeID not used so far "
2018/06/19 19:54:13 " create new info struct and initialize it "
2018/06/19 19:54:13 " update tapeStack and save tapeInfos "
2018/06/19 19:54:13 " set the new tape infos as current "
2018/06/19 19:54:13 " release the current tape and give control to the previous one "
2018/06/19 19:54:13 " if operations, locations and constants tapes have been written and value\n     * stack information have not been created tapeInfos are no longer needed"
2018/06/19 19:54:13 " updates the tape infos for the given ID - a tapeInfos struct is created\n * and registered if non is found but its state will remain \"not in use\" "
2018/06/19 19:54:13 " check if TapeInfos for tapeID exist "
2018/06/19 19:54:13 " create new TapeInfos, initialize and update tapeInfosBuffer "
2018/06/19 19:54:13 " updates the tape infos on sparse Jac for the given ID  "
2018/06/19 19:54:13 " check if TapeInfos for tapeID exist "
2018/06/19 19:54:13 " free memory of tape entry that had been used previously"
2018/06/19 19:54:13 " updates the tape infos on sparse Hess for the given ID  "
2018/06/19 19:54:13 " check if TapeInfos for tapeID exist "
2018/06/19 19:54:13 " free memory of tape entry that had been used previously"
2018/06/19 19:54:13 " _OPENMP "
2018/06/19 19:54:13 " does things like closing/removing temporary files, ... "
2018/06/19 19:54:13 " close open files though they may be incomplete "
2018/06/19 19:54:13 " remove \"main\" tape files if not all three have been written "
2018/06/19 19:54:13 " try to remove all tapes (even those not written by this\n                 * run) => this ensures that there is no mixture of tapes from\n                 * different ADOLC runs "
2018/06/19 19:54:13 " cleanup on program exit "
2018/06/19 19:54:13 " check if TapeInfos for tapeID exist "
2018/06/19 19:54:13 " might be on disk only"
2018/06/19 19:54:13 "**************************************************************************\n Initialization for the taping process. Creates buffers for this tape,    \n sets files names, and calls appropriate setup routines.                  \n**************************************************************************"
2018/06/19 19:54:13 " allocate memory for TapeInfos and update tapeStack "
2018/06/19 19:54:13 " record all existing adoubles on the tape "
2018/06/19 19:54:13 " allocate memory for TapeInfos and update tapeStack "
2018/06/19 19:54:13 " record all existing adoubles on the tape "
2018/06/19 19:54:13 "**************************************************************************\n Stop Tracing. Cleans up, and turns off trace_flag. Flag not equal zero   \n enforces writing of the three main tape files (op+loc+val).              \n**************************************************************************"
2018/06/19 19:54:13 " copy remaining live variables + trace_flag = 0 "
2018/06/19 19:54:13 "**************************************************************************\n A class for initialization/finalization and OpenMP handling              \n**************************************************************************"
2018/06/19 19:54:13 " a static instance that does all work "
2018/06/19 19:54:13 "*\n * Hope to convince the linker to link the keeper code into the executable. "
2018/06/19 19:54:13 "**************************************************************************\n**************************************************************************\n The following is necessary to provide a separate ADOL-C environment for  \n each OpenMP worker.                                                      \n**************************************************************************\n**************************************************************************"
2018/06/19 19:54:13 "**************************************************************************\n Used by OpenMP to create a separate environment for every worker thread. \n**************************************************************************"
2018/06/19 19:54:13 " master only "
2018/06/19 19:54:13 " - set inParallelRegion for tmpGlobalTapeVars because it is source\n         *   for initializing the parallel globalTapeVars structs\n         * - inParallelRegion has to be set to one for all workers by master.\n         *   This is necessary, to deter a speedy master from assuming all\n         *   workers are done, in endParallel, before they even leaved\n         *   beginParallel. "
2018/06/19 19:54:13 " if anyone knows a better value, ... :-) "
2018/06/19 19:54:13 " Use assignment operator instead of open coding\n\t * this copies the store and the storemanager too\n\t "
2018/06/19 19:54:13 " deleting the storemanager deletes the store too "
2018/06/19 19:54:13 "**************************************************************************\n Used by OpenMP to destroy the separate environment of every worker.      \n**************************************************************************\n There are n+1 instances of ADOLC_OpenMP => n within the parallel region\n * and one in the serial part! "
2018/06/19 19:54:13 " do nothing if called at program exit (serial part) "
2018/06/19 19:54:13 " master only "
2018/06/19 19:54:13 " wait until all slaves have left the parallel part "
2018/06/19 19:54:13 " no busy waiting "
2018/06/19 19:54:13 " no busy waiting"
2018/06/19 19:54:13 " _OPENMP "
2018/06/19 19:54:13 " first figure out what eventual size we want"
2018/06/19 19:54:13 " encapsulate this error message"
2018/06/19 19:54:13 " index 0 is not used, means one slot less"
2018/06/19 19:54:13 " not the first time"
2018/06/19 19:54:13 " don't leave 0 blocks around"
2018/06/19 19:54:13 " need to use C-style functions that do not use exceptions themselves"
2018/06/19 19:54:13 " Only called during stop_trace() via save_params() "
2018/06/19 19:54:13 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/tape_handling.cpp": 25.687227ms
2018/06/19 19:54:13 Couldn't classify license(s)
2018/06/19 19:54:13 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/lie/adolc_lie.cpp
2018/06/19 19:54:13 detected language: 4
2018/06/19 19:54:13 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     lie/adolc_lie.cpp\n Revision: $Id$\n Contents: Implementation of a C++ Wrapper for adolc_lie C-function calls\n \n\n Copyright (c) Siquian Wang, Klaus Röbenack, Jan Winkler, Mirko Franke\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.  \n  \n----------------------------------------------------------------------------"
2018/06/19 19:54:13 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/lie/adolc_lie.cpp": 6.869787ms
2018/06/19 19:54:13 Couldn't classify license(s)
2018/06/19 19:54:14 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/lie/Makefile.am
2018/06/19 19:54:14 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/lie/Makefile.am": 7.510478ms
2018/06/19 19:54:14 Couldn't classify license(s)
2018/06/19 19:54:15 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/lie/Makefile.in
2018/06/19 19:54:15 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/lie/Makefile.in": 63.860931ms
2018/06/19 19:54:15 Couldn't classify license(s)
2018/06/19 19:54:16 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/lie/adolc_lie_c.c
2018/06/19 19:54:16 detected language: 4
2018/06/19 19:54:16 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     lie/adolc_lie_c.c\n Revision: $Id$\n Contents: Implementation of functions for computation of Lie derivatives\n \n\n Copyright (c) Siquian Wang, Klaus Röbenack, Jan Winkler, Mirko Franke\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.  \n  \n----------------------------------------------------------------------------"
2018/06/19 19:54:16 "* Computes the total derivative of the output\n *\n *  @param p Number of rows of C (number of outputs)\n *  @param n Number of columns of B (number of inputs)\n *  @param deg Order of derivative (d)\n *  @retval ***B Total derivative dx(j+1)/dx0\n *  @param ***C Partial derivative of the output mapping\n *  @param ***D Total derivative of the output mapping\n "
2018/06/19 19:54:16 " D_k:=C_k (1. summation step)"
2018/06/19 19:54:16 " add sum if necessary"
2018/06/19 19:54:16 "* Helper function for calculation of the Lie derivatives of a covector field\n *\n *  @param n Number of rows = number of columns\n *  @param d Order of derivative (d)\n *  @param ***B Total derivative dx(j+1)/dx0 (B[n][n][d])\n *  @param **C Taylor coefficients of the output mapping (C[n][d])\n *  @retval **D Lie derivative along covector field (D[n][d])\n "
2018/06/19 19:54:16 " factorial      "
2018/06/19 19:54:16 " D_k:=Fak*C_k (1. summation step)"
2018/06/19 19:54:16 " add sum if necessary"
2018/06/19 19:54:16 "* Helper function for calculation of Lie-brackets (solution of the adjoint variational equation)\n *\n *  @param n Number of columns of B (number of inputs)\n *  @param deg Order of derivative\n *  @param ***A Total derivative of A\n *  @retval ***Bs Solution of adjoint variational equation\n "
2018/06/19 19:54:16 " (1. summation step)"
2018/06/19 19:54:16 " add sum if necessary"
2018/06/19 19:54:16 "* Calculates the Lie-derivative along a co vector field\n *\n * @param n Number of rows and columns\n * @param d Order of derivative (d)\n * @param Bs Solution of adjoint variational equation (Bs[n][n][d])\n * @param b Taylor-coefficients of output mapping (b[n][d])\n * @retval result Lie derivative along co-vector field (result[n][d])\n "
2018/06/19 19:54:16 " factorial      "
2018/06/19 19:54:16 " formula 3.58"
2018/06/19 19:54:16 "* Computes the Lie derivative of smooth map h : D -> R^m along a vector field f : D -> R^n\n * \\param Tape_F tape identification of vector field f\n * \\param Tape_H tape identification of vector field h\n * \\param n      number of independent variables n\n * \\param m\t     number of dependent variables m\n * \\param x0     values of independent variables x0 (dimension [n])\n * \\param d      highest derivative degree d\n * \\param result resulting Lie derivatives of vectorial scalar fields (dimension [m][d+1])\n "
2018/06/19 19:54:16 " Taylorcoeff. expansion x(t)\n Taylorcoeff. expansion y(t)"
2018/06/19 19:54:16 "see odedrivers"
2018/06/19 19:54:16 "prepare for input"
2018/06/19 19:54:16 "postprocess output of hos_forward"
2018/06/19 19:54:16 " prepare output for lie_Scalar"
2018/06/19 19:54:16 "* Lie derivative of scalar field h : D -> R^m along vector field f : D -> R^n\n *  \\param Tape_F tape identification of vector field f\n *  \\param Tape_H tape identification of scalar field h\n *  \\param n      number of independent variables n and m = 1\n *  \\param x0     values of independent variables x0 (dimension [n])\n *  \\param d\t  highest derivative degree d\n *  \\retval result resulting Lie derivatives of a scalar field (dimension [d+1])\n "
2018/06/19 19:54:16 "* Calculates the jacobians of the Lie derivatives of scalar fields h : D -> R^m\n *  \\param Tape_F tape identification of vector field f\n *  \\param Tape_H tape identification of vector field h\n *  \\param n      number of independent variables n\n *  \\param m      number of dependent variables m\n *  \\param x0     values of independent variables x0 (dimension [n])\n *  \\param d      highest derivative degree d\n *  \\retval result resulting jacobians of Lie derivatives of vectorial scalar fields (dimension [m][n][d+1])\n "
2018/06/19 19:54:16 " explanation in interfaces.cpp\n explanation in odedrivers.c"
2018/06/19 19:54:16 "prepare for input"
2018/06/19 19:54:16 "* Computes the gradients of the Lie derivatives of a scalar field h : D -> R\n *\n *  \\param Tape_F tape identification of vector field f\n *  \\param Tape_H tape identification of vector field h\n *  \\param n      number of independent variables n\n *  \\param x0     values of independent variables x0 (dimension [n])\n *  \\param d      highest derivative degree d\n *  \\retval result resulting jacobians of Lie derivatives of a scalar field (dimension [n][d+1])\n "
2018/06/19 19:54:16 "* Computes the Lie derivatives of the covector field w : D -> (R^m)* along the vector field f : D -> R^n\n *\n *  \\param Tape_F tape identification of vector field f\n *  \\param Tape_W tape identification of covector field h\n *  \\param n      number of independent variables n\n *  \\param x0     values of independent variables x0 (dimension [n])\n *  \\param d      highest derivative degree d\n *  \\retval result resulting Lie derivatives of a covector field (dimension [n][d+1])\n "
2018/06/19 19:54:16 " Taylorcoeff. expansion x(t)\n Taylorcoeff. expansion y(t)"
2018/06/19 19:54:16 " explanation in interfaces.cpp"
2018/06/19 19:54:16 "prepare for input"
2018/06/19 19:54:16 "postprocess output of hos_forward"
2018/06/19 19:54:16 " explanation in odedrivers.c"
2018/06/19 19:54:16 "* Calculates the iterated Lie derivatives (Lie brackets) of the vector field g : D -> R^n along the vector field f : D -> R^n\n *\n *  \\param Tape_F tape identification of vector field f\n *  \\param Tape_G tape identification of vector field g\n *  \\param n      number of independent variables n\n *  \\param x0     values of independent variables x0 (dimension [n])\n *  \\param d      highest derivative degree d\n "
2018/06/19 19:54:16 " Taylorcoeff. expansion x(t)\n Taylorcoeff. expansion y(t)"
2018/06/19 19:54:16 "static identity matrix for hov_reverse"
2018/06/19 19:54:16 " for hov_reverse"
2018/06/19 19:54:16 "prepare for input"
2018/06/19 19:54:16 "postprocess output of hos_forward"
2018/06/19 19:54:16 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/lie/adolc_lie_c.c": 17.281451ms
2018/06/19 19:54:16 Couldn't classify license(s)
2018/06/19 19:54:17 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/adalloc.c
2018/06/19 19:54:17 detected language: 4
2018/06/19 19:54:17 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     adalloc.c\n Revision: $Id$\n Contents: C allocation of arrays of doubles in several dimensions \n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:17 "**************************************************************************\n                                              MEMORY MANAGEMENT UTILITIES \n--------------------------------------------------------------------------"
2018/06/19 19:54:17 "--------------------------------------------------------------------------"
2018/06/19 19:54:17 "--------------------------------------------------------------------------"
2018/06/19 19:54:17 "--------------------------------------------------------------------------"
2018/06/19 19:54:17 "--------------------------------------------------------------------------"
2018/06/19 19:54:17 "--------------------------------------------------------------------------\n This function allocates 3-tensors contiguously "
2018/06/19 19:54:17 "--------------------------------------------------------------------------"
2018/06/19 19:54:17 "--------------------------------------------------------------------------"
2018/06/19 19:54:17 "--------------------------------------------------------------------------"
2018/06/19 19:54:17 "**************************************************************************\n                                          SPECIAL IDENTITY REPRESENTATION "
2018/06/19 19:54:17 "--------------------------------------------------------------------------"
2018/06/19 19:54:17 " 20020628 olvo n3l: Initialization to 0 "
2018/06/19 19:54:17 "--------------------------------------------------------------------------"
2018/06/19 19:54:17 "**************************************************************************\n                              INTEGER VARIANT FOR BIT PATTERN PROPAGATION "
2018/06/19 19:54:17 " ------------------------------------------------------------------------- "
2018/06/19 19:54:17 " endif "
2018/06/19 19:54:17 " ------------------------------------------------------------------------- "
2018/06/19 19:54:17 " endif "
2018/06/19 19:54:17 " ------------------------------------------------------------------------- "
2018/06/19 19:54:17 " endif "
2018/06/19 19:54:17 " endif "
2018/06/19 19:54:17 " To deallocate an array set up by   A = myalloc2_ulong(m,n)   \n    use  free((char*)*A); free((char*)A);  in that order      "
2018/06/19 19:54:17 " ------------------------------------------------------------------------ "
2018/06/19 19:54:17 " ------------------------------------------------------------------------ "
2018/06/19 19:54:17 " ------------------------------------------------------------------------ "
2018/06/19 19:54:17 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/adalloc.c": 9.342145ms
2018/06/19 19:54:17 Couldn't classify license(s)
2018/06/19 19:54:17 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/fos_pl_sig_forward.c
2018/06/19 19:54:17 detected language: 4
2018/06/19 19:54:17 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     fos_an_forward.c\n Revision: $Id$\n Contents: fos_an_forward (first-order-scalar abs-normal forward mode)\n\n Copyright (c) Kshitij Kulshreshtha\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n  \n----------------------------------------------------------------------------"
2018/06/19 19:54:17 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/fos_pl_sig_forward.c": 6.145245ms
2018/06/19 19:54:17 Couldn't classify license(s)
2018/06/19 19:54:18 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/hov_wk_forward.c
2018/06/19 19:54:18 detected language: 4
2018/06/19 19:54:18 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     hov_wk_forward.c\n Revision: $Id$\n Contents: hov_wk_forward (higher-order-vector forward mode with keep)\n \n Copyright (c) Andrea Walther\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n\n ----------------------------------------------------------------------------"
2018/06/19 19:54:18 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/hov_wk_forward.c": 6.53453ms
2018/06/19 19:54:18 Couldn't classify license(s)
2018/06/19 19:54:19 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/interfaces.cpp
2018/06/19 19:54:19 detected language: 4
2018/06/19 19:54:19 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     interfaces.cpp\n Revision: $Id$\n Contents: Genuine C++ Interfaces to ADOL-C forward & reverse calls.\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:19 "**************************************************************************\n                                                                   MACROS "
2018/06/19 19:54:19 "**************************************************************************\n                                           FORWARD MODE, overloaded calls "
2018/06/19 19:54:19 "**************************************************************************\n                                                             general call \n                                                                          "
2018/06/19 19:54:19 " forward(tag, m, n, d, keep, X[n][d+1], Y[m][d+1])                        \n olvo 980729 general ec "
2018/06/19 19:54:19 "------------------------------------------------------------------------\n prepare input "
2018/06/19 19:54:19 "------------------------------------------------------------------------\n function calls "
2018/06/19 19:54:19 "------------------------------------------------------------------------\n prepare output "
2018/06/19 19:54:19 "**************************************************************************\n         Y can be one dimensional if m=1                                  \n                                                                          "
2018/06/19 19:54:19 " forward(tag, 1, n, d, keep, X[n][d+1], Y[d+1]), m=1                      \n olvo 980729 general ec "
2018/06/19 19:54:19 "----------------------------------------------------------------------\n prepare input "
2018/06/19 19:54:19 "----------------------------------------------------------------------\n function calls "
2018/06/19 19:54:19 "----------------------------------------------------------------------\n prepare output "
2018/06/19 19:54:19 "**************************************************************************\n         X and Y can be one dimensional if d = 0                          \n                                                                          "
2018/06/19 19:54:19 " forward(tag, m, n, 0, keep, X[n], Y[m]), d=0                             "
2018/06/19 19:54:19 "**************************************************************************\n         X and Y can be one dimensional if d omitted                      \n                                                                          "
2018/06/19 19:54:19 " forward(tag, m, n, keep, X[n], Y[m])                                     "
2018/06/19 19:54:19 "**************************************************************************\n                                                             general call \n                                                                          "
2018/06/19 19:54:19 " forward(tag, m, n, d, p, x[n], X[n][p][d], y[m], Y[m][p][d])             "
2018/06/19 19:54:19 "**************************************************************************\n                                                             general call \n                                                                          "
2018/06/19 19:54:19 " forward(tag, m, n, p, x[n], X[n][p], y[m], Y[m][p])                      "
2018/06/19 19:54:19 "**************************************************************************\n                                           REVERSE MODE, overloaded calls "
2018/06/19 19:54:19 "**************************************************************************\n                                                             general call \n                                                                          "
2018/06/19 19:54:19 " reverse(tag, m, n, d, u[m], Z[n][d+1])                                   "
2018/06/19 19:54:19 "**************************************************************************\n         u can be a scalar if m=1                                         \n                                                                          "
2018/06/19 19:54:19 " reverse(tag, 1, n, 0, u, Z[n][d+1]), m=1 => u scalar                     "
2018/06/19 19:54:19 "**************************************************************************\n         Z can be vector if d = 0; Done by specialized code               \n                                                                          "
2018/06/19 19:54:19 " reverse(tag, m, n, 0, u[m], Z[n]), d=0                                   "
2018/06/19 19:54:19 "**************************************************************************\n         u and Z can be scalars if m=1 and d=0;                           \n                                                                          "
2018/06/19 19:54:19 " reverse(tag, 1, n, 0, u, Z[n]), m=1 and d=0 => u and Z scalars           "
2018/06/19 19:54:19 "**************************************************************************\n                                                             general call \n                                                                          "
2018/06/19 19:54:19 " reverse(tag, m, n, d, q, U[q][m], Z[q][n][d+1], nz[q][n])                "
2018/06/19 19:54:19 "**************************************************************************\n         U can be a vector if m=1                                         \n                                                                          "
2018/06/19 19:54:19 " reverse(tag, 1, n, d, q, U[q], Z[q][n][d+1], nz[q][n]), m=1 => u vector  "
2018/06/19 19:54:19 " olvo 980727 ??? \n double** upp = new double*[nrows]; "
2018/06/19 19:54:19 " delete[] upp; "
2018/06/19 19:54:19 "**************************************************************************\n                                                                          \n         If d=0 then Z may be matrix; Done by specialized code            \n                                                                          "
2018/06/19 19:54:19 " reverse(tag, m, n, 0, q, U[q][m], Z[q][n]), d=0 => Z matrix              "
2018/06/19 19:54:19 "**************************************************************************\n                                                                          \n         d=0 may be omitted, then Z may be a matrix; specialized code     \n                                                                          "
2018/06/19 19:54:19 " reverse(tag, m, n, q, U[q][m], Z[q][n]), d=0 => Z matrix                 "
2018/06/19 19:54:19 "**************************************************************************\n                                                                          \n         If m=1 and d=0 then U can be vector and Z a matrix but no nz.    \n                                                                          "
2018/06/19 19:54:19 " reverse(tag, 1, n, 0, q, U[q], Z[q][n]),\n                            m=1 and d=0 => U vector and Z matrix but no nz  "
2018/06/19 19:54:19 " olvo 981126 ??? what's that: \n (++d)--; "
2018/06/19 19:54:19 " olvo 980727 ??? \n double ** upp = new double*[nrows]; "
2018/06/19 19:54:19 " delete[] upp; "
2018/06/19 19:54:19 "**************************************************************************\n                                                                          \n         If p and U are omitted they default to m and I so that as above  \n                                                                          "
2018/06/19 19:54:19 " reverse(tag, m, n, d, Z[p][n][d+1], nz[p][n]),\n           If p and U are omitted they default to m and I                   "
2018/06/19 19:54:19 "**************************************************************************\n                                                               THAT'S ALL "
2018/06/19 19:54:19 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/interfaces.cpp": 23.764492ms
2018/06/19 19:54:19 Couldn't classify license(s)
2018/06/19 19:54:20 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/nonl_ind_forward_t.c
2018/06/19 19:54:20 detected language: 4
2018/06/19 19:54:20 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     nonl_ind_forward_t.c\n Revision: $Id$\n Contents: nonl_ind_forward_t (propagation of nonlinear index domains)\n \n Copyright (c) Andrea Walther\n   \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:20 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/nonl_ind_forward_t.c": 6.231699ms
2018/06/19 19:54:20 Couldn't classify license(s)
2018/06/19 19:54:21 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/uni5_for.c
2018/06/19 19:54:21 detected language: 4
2018/06/19 19:54:21 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     uni5_for.c\n\n\n Revision: $Id$\n\n Contents: Contains the routines :\n           zos_forward (zero-order-scalar forward mode):      define _ZOS_\n           fos_forward (first-order-scalar forward mode):     define _FOS_\n           hos_forward (higher-order-scalar forward mode):    define _HOS_\n           fov_forward (first-order-vector forward mode):     define _FOV_\n           hov_forward (higher-order-vector forward mode):    define _HOV_\n           hov_wk_forward (higher-order-vector forward mode): define _HOV_WK_\n           int_forward_safe:                                  define _INT_FOR_ and _NTIGHT__\n\n           Uses the preprocessor to compile the 7 different object files\n           with/without \"keep\" parameter:                     define _KEEP_\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz,\n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel,\n               Benjamin Letschert, Kshitij Kulshreshtha\n               \n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes\n recipient's acceptance of the terms of the accompanying license file.\n\n----------------------------------------------------------------------------"
2018/06/19 19:54:21 " ADOLC_DEBUG "
2018/06/19 19:54:21 "**************************************************************************\n                                                                   MACROS "
2018/06/19 19:54:21 "--------------------------------------------------------------------------"
2018/06/19 19:54:21 "--------------------------------------------------------------------------"
2018/06/19 19:54:21 "--------------------------------------------------------------------------"
2018/06/19 19:54:21 "--------------------------------------------------------------------------"
2018/06/19 19:54:21 "--------------------------------------------------------------------------"
2018/06/19 19:54:21 "--------------------------------------------------------------------------"
2018/06/19 19:54:21 "--------------------------------------------------------------------------"
2018/06/19 19:54:21 "--------------------------------------------------------------------------"
2018/06/19 19:54:21 "\n * This is the type used for the list elements. The entry is either a counter\n * (first element of the NID list) or the index of an independent variable.\n "
2018/06/19 19:54:21 "--------------------------------------------------------------------------"
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n                                                               KEEP stuff "
2018/06/19 19:54:21 " keep in this vector mode "
2018/06/19 19:54:21 " otherwise no keep "
2018/06/19 19:54:21 " _ZOS_, _FOS_, _HOS_ "
2018/06/19 19:54:21 " no _KEEP_ "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n                                                      access to variables "
2018/06/19 19:54:21 " _HOS_, _FOV_, _HOV_, _HOV_WK "
2018/06/19 19:54:21 " _HOS_, _HOV_, _HOV_WK "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n                                                               loop stuff "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n                                                        higher order case "
2018/06/19 19:54:21 " END Macros "
2018/06/19 19:54:21 "**************************************************************************\n Zero Order Scalar version of the forward mode.                           \n**************************************************************************"
2018/06/19 19:54:21 " tape id \n consistency chk on # of deps \n consistency chk on # of indeps "
2018/06/19 19:54:21 " flag for reverse sweep "
2018/06/19 19:54:21 " independant variable values \n dependent variable values "
2018/06/19 19:54:21 "**************************************************************************\n First Order Scalar version of the forward mode.                          \n**************************************************************************"
2018/06/19 19:54:21 " tape id \n consistency chk on # of deps \n consistency chk on # of indeps "
2018/06/19 19:54:21 " flag for reverse sweep "
2018/06/19 19:54:21 " independent variable values \n Taylor coefficients (input) \n Taylor coefficients (output) \n matrix of coefficient vectors \n the order of the indices in argument and taylors is [var][taylor] "
2018/06/19 19:54:21 "**************************************************************************\n First Order Vector version of the forward mode for bit patterns, tight   \n**************************************************************************"
2018/06/19 19:54:21 " tape id                              \n consistency chk on # of dependents   \n consistency chk on # of independents \n # of taylor series, bit pattern      \n independent variable values   (in)\n Taylor coeff.                 (in)\n dependent variable values    (out)\n matrix of coefficient vectors(out)"
2018/06/19 19:54:21 " int_forward_tight( tag, m, n, p, x[n], X[n][p], y[m], Y[m][p]),\n\n     nBV = number of Boolean Vectors to be packed\n                      (see Chapter Dependence Analysis, ADOL-C Documentation)\n     bits_per_long = 8*sizeof(unsigned long int)\n     p = nBV / bits_per_long + ( (nBV % bits_per_long) != 0 )\n\n     The order of the indices in argument and taylors is [var][taylor]\n\n     For the full Jacobian matrix set\n     p = indep / bits_per_long + ((indep % bits_per_long) != 0)\n     and pass a bit pattern version of the identity matrix as an argument   "
2018/06/19 19:54:21 "**************************************************************************\n First Order Vector version of the forward mode, bit pattern, safe        \n**************************************************************************"
2018/06/19 19:54:21 " tape id                              \n consistency chk on # of dependents   \n consistency chk on # of independents \n # of taylor series, bit pattern      \n Taylor coeff.                  (in)\n matrix of coefficient vectors (out)"
2018/06/19 19:54:21 " int_forward_safe( tag, m, n, p, X[n][p], Y[m][p]),\n\nnBV = number of Boolean Vectors to be packed\n(see Chapter Dependence Analysis, ADOL-C Documentation)\nbits_per_long = 8*sizeof(unsigned long int)\np = nBV / bits_per_long + ( (nBV % bits_per_long) != 0 )\n\nThe order of the indices in argument and taylors is [var][taylor]\n\nFor the full Jacobian matrix set\np = indep / bits_per_long + ((indep % bits_per_long) != 0)\nand pass a bit pattern version of the identity matrix as an argument    "
2018/06/19 19:54:21 "**************************************************************************\n First Order Vector version of the forward mode for bit patterns, tight   \n**************************************************************************"
2018/06/19 19:54:21 " tape id                              \n consistency chk on # of dependents   \n consistency chk on # of independents \n independent variable values   (in)   \n returned row index storage (out)     "
2018/06/19 19:54:21 " indopro_forward_tight( tag, m, n, x[n], *crs[m]),\n\n  "
2018/06/19 19:54:21 " tape id                              \n consistency chk on # of dependents   \n consistency chk on # of independents \n consistency chk on # of switches    \n independent variable values   (in)   \n returned row index storage (out)     "
2018/06/19 19:54:21 " indopro_forward_absnormal( tag, m, n, s, x[n], *crs[s+m]),\n  "
2018/06/19 19:54:21 "**************************************************************************\n First Order Vector version of the forward mode, bit pattern, safe        \n**************************************************************************"
2018/06/19 19:54:21 " tape id                              \n consistency chk on # of dependents   \n consistency chk on # of independents \n independent variable values   (in)   \n returned row index storage (out)     "
2018/06/19 19:54:21 " indopro_forward_safe( tag, m, n, x[n], *crs[m]),\n\n  "
2018/06/19 19:54:21 "**************************************************************************\n First Order Vector version of the forward mode for bit patterns, tight   \n**************************************************************************"
2018/06/19 19:54:21 " tape id                              \n consistency chk on # of dependents   \n consistency chk on # of independents \n independent variable values   (in)   \n returned row index storage (out)     "
2018/06/19 19:54:21 "**************************************************************************\n First Order Vector version of the forward mode, bit pattern, safe        \n**************************************************************************"
2018/06/19 19:54:21 " tape id                              \n consistency chk on # of dependents   \n consistency chk on # of independents \n independent variable values   (in)   \n returned row index storage (out)     "
2018/06/19 19:54:21 " indopro_forward_safe( tag, m, n, x[n], *crs[m]),\n\n  "
2018/06/19 19:54:21 "**************************************************************************\n First Order Vector version of the forward mode for bit patterns, tight   \n**************************************************************************"
2018/06/19 19:54:21 " tape id                              \n consistency chk on # of dependents   \n consistency chk on # of independents \n independent variable values   (in)   \n returned row index storage (out)     "
2018/06/19 19:54:21 "**************************************************************************\n First Order Vector version of the forward mode, bit pattern, safe        \n**************************************************************************"
2018/06/19 19:54:21 " tape id                              \n consistency chk on # of dependents   \n consistency chk on # of independents \n independent variable values   (in)   \n returned row index storage (out)     "
2018/06/19 19:54:21 " indopro_forward_safe( tag, m, n, x[n], *crs[m]),\n\n  "
2018/06/19 19:54:21 "**************************************************************************\n First Order Vector version of the forward mode with p-offset in          \n **argument and **taylors                                                 \n**************************************************************************"
2018/06/19 19:54:21 " tape id \n consistency chk on # of deps \n consistency chk on # of indeps \n # of taylor series \n offset for assignments \n independent variable values \n Taylor coefficients (input) \n Taylor coefficients (output) \n matrix of coifficient vectors \n the order of the indices in argument and taylors is [var][taylor] "
2018/06/19 19:54:21 "**************************************************************************\n First Order Vector version of the forward mode.                          \n**************************************************************************"
2018/06/19 19:54:21 " tape id \n consistency chk on # of deps \n consistency chk on # of indeps \n # of taylor series \n independent variable values \n Taylor coefficients (input) \n Taylor coefficients (output) \n matrix of coifficient vectors "
2018/06/19 19:54:21 " the order of the indices in argument and taylors is [var][taylor] "
2018/06/19 19:54:21 " tape id \n consistency chk on # of deps \n consistency chk on # of indeps \n # of taylor series \n independent variable values \n Taylor coefficients (input) \n consistency chk in # of switches \n Signature of basepoint \n Signature of direction \n Taylor coefficients (output) \n matrix of coifficient vectors "
2018/06/19 19:54:21 " tape id \n consistency chk on # of deps \n consistency chk on # of indeps \n # of taylor series \n independent variable values \n Taylor coefficients (input) \n Taylor coefficients (output) \n matrix of coifficient vectors \n the order of the indices in argument and taylors is [var][taylor] "
2018/06/19 19:54:21 "**************************************************************************\n Higher Order Scalar version of the forward mode.                         \n**************************************************************************"
2018/06/19 19:54:21 " tape id \n consistency chk on # of dependents \n consistency chk on # of independents \n highest derivative degree "
2018/06/19 19:54:21 " flag for reverse sweep "
2018/06/19 19:54:21 " independent variable values \n independant variable values \n Taylor coefficients (output) \n matrix of coifficient vectors "
2018/06/19 19:54:21 "**************************************************************************\n Higher Order Vector version of the forward mode.                         \n**************************************************************************"
2018/06/19 19:54:21 " tape id \n consistency chk on # of deps \n consistency chk on # of indeps \n highest derivative degree "
2018/06/19 19:54:21 " flag for reverse sweep "
2018/06/19 19:54:21 " # of taylor series \n independent variable values \n Taylor coefficients (input) \n Taylor coefficients (output) \n matrix of coifficient vectors \n the order of the indices in argument and taylors is [var][taylor][deriv] "
2018/06/19 19:54:21 "**************************************************************************\n                                                            ALL VARIABLES "
2018/06/19 19:54:21 " operation code \n return value "
2018/06/19 19:54:21 " loop indices "
2018/06/19 19:54:21 " index domains "
2018/06/19 19:54:21 " nonlinear interaction domains "
2018/06/19 19:54:21 " nonlinear interaction domains "
2018/06/19 19:54:21 " other necessary variables "
2018/06/19 19:54:21 " _TIGHT_ "
2018/06/19 19:54:21 " Taylor stuff "
2018/06/19 19:54:21 " _TIGHT_ "
2018/06/19 19:54:21 " extern diff. function variables "
2018/06/19 19:54:21 " ZOS_FORWARD "
2018/06/19 19:54:21 " FOS_FORWARD "
2018/06/19 19:54:21 " FOV_FORWARD "
2018/06/19 19:54:21 "**************************************************************************\n                                                           DEBUG MESSAGES "
2018/06/19 19:54:21 "**************************************************************************\n                                                                    INITs "
2018/06/19 19:54:21 " Set up stuff for the tape "
2018/06/19 19:54:21 " Initialize the Forward Sweep "
2018/06/19 19:54:21 "**************************************************************************\n                                                        MEMORY ALLOCATION \n olvo 980626 has to be revised for common blocks "
2018/06/19 19:54:21 "--------------------------------------------------------------------------"
2018/06/19 19:54:21 " !_NTIGHT_ \n ZOS "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n FOS "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n INF_FOR "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n INDOPRO "
2018/06/19 19:54:21 " index domains "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n FOV "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n HOS "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n HOV and HOV_WK "
2018/06/19 19:54:21 "**************************************************************************\n                                                            FORWARD SWEEP "
2018/06/19 19:54:21 " #include <string.h> "
2018/06/19 19:54:21 " ADOLC_DEBUG "
2018/06/19 19:54:21 " ADOLC_DEBUG "
2018/06/19 19:54:21 "**************************************************************************\n                                                                  MARKERS "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n end_of_op "
2018/06/19 19:54:21 " Skip next operation, it's another end_of_op "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n end_of_int "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n end_of_val "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n start_of_tape \n end_of_tape "
2018/06/19 19:54:21 "**************************************************************************\n                                                               COMPARISON "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n eq_zero "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n neq_zero "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n le_zero "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n gt_zero "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n ge_zero "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n lt_zero "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "**************************************************************************\n                                                              ASSIGNMENTS "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n assign an adouble variable an    assign_a \n adouble value. (=) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n assign an adouble variable a    assign_d \n double value. (=) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------"
2018/06/19 19:54:21 " assign an adouble variable a    assign_d \n double value. (=) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n assign an adouble variable a    assign_d_zero \n double value. (0) (=) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n assign an adouble variable a    assign_d_one \n double value. (1) (=) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n assign an adouble variable an    assign_ind \n independent double value (<<=) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n assign a float variable a    assign_dep \n dependent adouble value. (>>=) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ??? question: why here? "
2018/06/19 19:54:21 " ??? question: why here? "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "**************************************************************************\n                                                   OPERATION + ASSIGNMENT "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Add a floating point to an    eq_plus_d \n adouble. (+=) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Add a floating point to an    eq_plus_p \n adouble. (+=) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Add an adouble to another    eq_plus_a \n adouble. (+=) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Subtract a floating point from an    eq_min_d \n adouble. (-=) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Subtract a floating point from an    eq_min_p \n adouble. (-=) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Subtract an adouble from another    eq_min_a \n adouble. (-=) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Multiply an adouble by a    eq_mult_d \n flaoting point. (*=) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Multiply an adouble by a    eq_mult_p \n flaoting point. (*=) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Multiply one adouble by another    eq_mult_a \n (*=) "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Increment an adouble    incr_a "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Increment an adouble    decr_a "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "**************************************************************************\n                                                        BINARY OPERATIONS "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n : Add two adoubles. (+)    plus a_a "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Add an adouble and a double    plus_d_a \n (+) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Add an adouble and a double    plus_a_p \n Subtract an adouble from a    min_a_p \n (+) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Subtraction of two adoubles     min_a_a \n (-) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Subtract an adouble from a    min_d_a \n double (-) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Multiply two adoubles (*)    mult_a_a "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " olvo 980915 now in reverse order to allow x = x*x etc. "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n olvo 991122: new op_code with recomputation \n increment a product of           eq_plus_prod \n two adoubles (*) "
2018/06/19 19:54:21 " operation: v = v+u*w\n first step: z = u*w, index domains"
2018/06/19 19:54:21 " first step: z = u*w, "
2018/06/19 19:54:21 " second step: v = v+z, index domains"
2018/06/19 19:54:21 " second step: v = v+z,"
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " olvo 980915 now in reverse order to allow x = x*x etc. "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n olvo 991122: new op_code with recomputation \n decrement a product of            eq_min_prod \n two adoubles (*) "
2018/06/19 19:54:21 " operation: v = v-u*w\n first step: z = u*w, index domains"
2018/06/19 19:54:21 " first step: z = u*w,"
2018/06/19 19:54:21 " second step: v = v-z, index domains"
2018/06/19 19:54:21 " second step: v = v-z, "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " olvo 980915 now in reverse order to allow x = x*x etc. "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Multiply an adouble by a double    mult_d_a \n (*) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Multiply an adouble by a double    mult_a_p \n (*) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Divide an adouble by an adouble    div_a_a \n (/) "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " olvo 980922 changed order to allow x = y/x "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Division double - adouble (/)    div_d_a "
2018/06/19 19:54:21 " olvo 980922 necessary for reverse \n                   kk 20140508 I don't think so\n                if (arg == res) {\n                    IF_KEEP_WRITE_TAYLOR(arg,keep,k,p)\n                } "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " olvo 980922 changed order to allow x = d/x "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "**************************************************************************\n--------------------------------------------------------------------------\n Division double - adouble (/)    div_p_a "
2018/06/19 19:54:21 " olvo 980922 necessary for reverse \n                   kk 20140508 I don't think so\n                if (arg == res) {\n                    IF_KEEP_WRITE_TAYLOR(arg,keep,k,p)\n                } "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " olvo 980922 changed order to allow x = d/x "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "**************************************************************************\n                                                         SIGN  OPERATIONS "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n pos_sign_a "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n neg_sign_a "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "**************************************************************************\n                                                         UNARY OPERATIONS "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n exponent operation    exp_op "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " olvo 980915 changed order to allow x = exp(x) "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " important only for i>0 \n _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n sine operation    sin_op "
2018/06/19 19:54:21 " olvo 980710 covalue "
2018/06/19 19:54:21 " Note: always arg2 != arg1 "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " olvo 980923 changed order to allow x = sin(x) "
2018/06/19 19:54:21 " olvo 980921 changed order to allow x = sin(x) "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " Note: always arg2 != arg1 "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n cosine operation    cos_op "
2018/06/19 19:54:21 " olvo 980710 covalue "
2018/06/19 19:54:21 " Note: always arg2 != arg1 "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " olvo 980923 changed order to allow x = cos(x) "
2018/06/19 19:54:21 " olvo 980921 changed order to allow x = cos(x) "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " Note: always arg2 != arg1 "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n atan_op "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " olvo 980921 changed order to allow x = atan(x) "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n asin_op "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " olvo 980921 changed order to allow x = asin(x) "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n acos_op "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " olvo 980921 changed order to allow x = acos(x) "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n asinh_op "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " olvo 980921 changed order to allow x = asinh(x) "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n acosh_op "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " olvo 980921 changed order to allow x = acosh(x) "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n atanh_op "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " olvo 980921 changed order to allow x = atanh(x) "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n erf_op "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " olvo 980921 changed order to allow x = erf(x) "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n log_op "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " olvo 980921 changed order to allow x = log(x) "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n pow_op "
2018/06/19 19:54:21 " olvo 980921 necessary for reverse "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " coval not a whole number "
2018/06/19 19:54:21 " coval is an int > 1 \n the following is not efficient but at least it works \n it reformulates x^n into x* ... *x n times "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " olvo 980921 changed order to allow x = pow(x,n) "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n pow_op_p "
2018/06/19 19:54:21 " olvo 980921 necessary for reverse "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " coval not a whole number "
2018/06/19 19:54:21 " coval is an int > 1 \n the following is not efficient but at least it works \n it reformulates x^n into x* ... *x n times "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " olvo 980921 changed order to allow x = pow(x,n) "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n sqrt_op "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " Note: <=> dp_T0[res] == 0.0 "
2018/06/19 19:54:21 " !!! "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n gen_quad "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " olvo 980922 changed order to allow x = gen_quad(x) "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n min_op "
2018/06/19 19:54:21 " olvo 980923 changed order to allow x = min(x,y) etc. "
2018/06/19 19:54:21 " olvo/mitev 980721 return value (taken from below) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " e.g. T0[arg1] == T0[arg2] "
2018/06/19 19:54:21 " e.g. both are equal "
2018/06/19 19:54:21 " _TIGHT_ "
2018/06/19 19:54:21 " _NTIGHT_ "
2018/06/19 19:54:21 " e.g. dp_T0[arg1] ==\n                                                                                 dp_T0[arg2] "
2018/06/19 19:54:21 " e.g. both are equal "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n abs_val "
2018/06/19 19:54:21 " olvo 980923 changed order to allow x = min(x,y) etc. "
2018/06/19 19:54:21 " olvo/mitev 980721 ec n3l (taken from below) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " _TIGHT_ "
2018/06/19 19:54:21 " _NTIGHT_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n ceil_op "
2018/06/19 19:54:21 " olvo/mitev 980721 ec n2l (taken from below) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " _TIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Compute ceil of adouble    floor_op "
2018/06/19 19:54:21 " olvo/mitev 980721 ec n2l (taken from below) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " _TIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "**************************************************************************\n                                                             CONDITIONALS "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n cond_assign "
2018/06/19 19:54:21 " olvo 980924 changed order to allow reflexive ops "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " _TIGHT_ "
2018/06/19 19:54:21 " _NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n cond_assign_s "
2018/06/19 19:54:21 " olvo 980924 changed order to allow reflexive ops "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " _TIGHT_ "
2018/06/19 19:54:21 " _TIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n NEW CONDITIONALS \n--------------------------------------------------------------------------"
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " ADVANCED_BRANCHING "
2018/06/19 19:54:21 "--------------------------------------------------------------------------"
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " assign an adouble variable an    assign_a \n adouble value. (=) "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " assign an adouble variable an    assign_ind \n independent double value (<<=) "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " Add a floating point to an    eq_plus_d \n adouble. (+=) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Add a floating point to an    eq_plus_p \n adouble. (+=) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Add an adouble to another    eq_plus_a \n adouble. (+=) "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " Subtract a floating point from an    eq_min_d \n adouble. (-=) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " Subtract a floating point from an    eq_min_p \n adouble. (-=) "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n Subtract an adouble from another    eq_min_a \n adouble. (-=) "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " Multiply an adouble by a    eq_mult_d \n flaoting point. (*=) "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " Multiply an adouble by a    eq_mult_p \n flaoting point. (*=) "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " Multiply one adouble by another    eq_mult_a \n (*=) "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " operation: v = v+u*w\n first step: z = u*w, index domains"
2018/06/19 19:54:21 " first step: z = u*w,"
2018/06/19 19:54:21 " second step: v = v+z, index domains"
2018/06/19 19:54:21 " second step: v = v+z,"
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " olvo 980915 now in reverse order to allow x = x*x etc. "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " operation: v = u*w + y\n first step: z = u*w, index domains"
2018/06/19 19:54:21 " first step: z = u*w,"
2018/06/19 19:54:21 " second step: v = z+y, index domains"
2018/06/19 19:54:21 " second step: v = v+z,"
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " _HIGHER_ORDER_ "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " cond_assign "
2018/06/19 19:54:21 " olvo 980924 changed order to allow reflexive ops "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " cond_assign_s "
2018/06/19 19:54:21 " olvo 980924 changed order to allow reflexive ops "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 "**************************************************************************\n                                                          REMAINING STUFF "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n take_stock_op "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " BREAK_ZOS "
2018/06/19 19:54:21 " ALL_TOGETHER_AGAIN "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n death_not "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n ZOS,  FOS, FOV up to now \n extern differntiated function "
2018/06/19 19:54:21 " extern differntiated function "
2018/06/19 19:54:21 " iArrLength again "
2018/06/19 19:54:21 " iArrLength again "
2018/06/19 19:54:21 " nin again \n nout again "
2018/06/19 19:54:21 "--------------------------------------------------------------------------"
2018/06/19 19:54:21 "--------------------------------------------------------------------------"
2018/06/19 19:54:21 " default \n Die here, we screwed up "
2018/06/19 19:54:21 " endswitch "
2018/06/19 19:54:21 " Read the next operation "
2018/06/19 19:54:21 " ADOLC_DEBUG \n endwhile "
2018/06/19 19:54:21 " ADOLC_DEBUG "
2018/06/19 19:54:21 " clean up "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 " !_NTIGHT_ "
2018/06/19 19:54:21 "**************************************************************************"
2018/06/19 19:54:21 "**************************************************************************"
2018/06/19 19:54:21 "**************************************************************************\n set operations for propagation of index domains                          "
2018/06/19 19:54:21 "--------------------------------------------------------------------------\n operations on index domains                                              "
2018/06/19 19:54:21 " empty list "
2018/06/19 19:54:21 " append index domain list of \"arg\" "
2018/06/19 19:54:21 " merge lists "
2018/06/19 19:54:21 " < "
2018/06/19 19:54:21 " == "
2018/06/19 19:54:21 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/uni5_for.c": 130.064744ms
2018/06/19 19:54:21 Couldn't classify license(s)
2018/06/19 19:54:21 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/fov_reverse.c
2018/06/19 19:54:21 detected language: 4
2018/06/19 19:54:21 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     fov_reverse.c\n Revision: $Id$\n Contents: fov_reverse (first-order-vector reverse mode)\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:21 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/fov_reverse.c": 6.687864ms
2018/06/19 19:54:21 Couldn't classify license(s)
2018/06/19 19:54:22 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/ampisupport.cpp
2018/06/19 19:54:22 detected language: 4
2018/06/19 19:54:22 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     ampisupport.cpp\n Revision: $Id$\n\n Copyright (c) Jean Utke\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:22 " buf must have consecutive ascending locations"
2018/06/19 19:54:22 " buf must have consecutive ascending locations"
2018/06/19 19:54:22 " have to put something"
2018/06/19 19:54:22 " push resultData if true "
2018/06/19 19:54:22 " buf must have consecutive ascending locations"
2018/06/19 19:54:22 " have to put something"
2018/06/19 19:54:22 " counter at the beginning"
2018/06/19 19:54:22 " have to put something regardless"
2018/06/19 19:54:22 " counter at the end"
2018/06/19 19:54:22 " at least initialize to something nonrandom\n because we know we always have valid addresses passed in here \n NOTE JU: may not be true for source transformation..."
2018/06/19 19:54:22 " counter at the beginning"
2018/06/19 19:54:22 " don't want to make assumptions about memory layout for nonzero displacements"
2018/06/19 19:54:22 " have to put something regardless"
2018/06/19 19:54:22 " counter at the end"
2018/06/19 19:54:22 " at least initialize to something nonrandom\n because we know we always have valid addresses passed in here \n NOTE JU: may not be true for source transformation..."
2018/06/19 19:54:22 " not derived type, or only passive elements "
2018/06/19 19:54:22 " not derived type, or only passive elements "
2018/06/19 19:54:22 " do nothing "
2018/06/19 19:54:22 " for now we keep the count as is but for example in vector mode one would have to multiply by vector length "
2018/06/19 19:54:22 " tracing "
2018/06/19 19:54:22 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/ampisupport.cpp": 11.985524ms
2018/06/19 19:54:22 Couldn't classify license(s)
2018/06/19 19:54:23 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/taping.c
2018/06/19 19:54:23 detected language: 4
2018/06/19 19:54:23 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     taping.c\n Revision: $Id$\n Contents: all C functions directly accessing at least one of the four tapes\n           (operations, locations, constants, value stack)\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel,\n               Kshitij Kulshreshtha\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:23 "--------------------------------------------------------------------------\n Tape identification (ADOLC & version check) "
2018/06/19 19:54:23 " first version with new tape structure\n * => to work with older tapes use older ADOL-C version "
2018/06/19 19:54:23 "**************************************************************************\n**************************************************************************\n HELP FUNCTIONS                                                           \n**************************************************************************\n**************************************************************************"
2018/06/19 19:54:23 "--------------------------------------------------------------------------\n additional infos used by fail()                                          "
2018/06/19 19:54:23 " outputs an appropriate error message using DIAG_OUT and exits the running\n * program "
2018/06/19 19:54:23 " exit (error + 1);"
2018/06/19 19:54:23 " print an error message describing the error number "
2018/06/19 19:54:23 " the base names of every tape type "
2018/06/19 19:54:23 "**************************************************************************\n The subroutine get_fstr appends to the tape base name of type tapeType   \n the number fnum and \".tap\" and returns a pointer to the resulting string.\n The result string must be freed be the caller!                           \n**************************************************************************"
2018/06/19 19:54:23 " _OPENMP "
2018/06/19 19:54:23 " determine length of the number string "
2018/06/19 19:54:23 " determine length of the thread number string "
2018/06/19 19:54:23 " _OPENMP "
2018/06/19 19:54:23 " malloc and create "
2018/06/19 19:54:23 " _OPENMP "
2018/06/19 19:54:23 " _OPENMP "
2018/06/19 19:54:23 " _OPENMP "
2018/06/19 19:54:23 "**************************************************************************\n Tries to read a local config file containing, e.g., buffer sizes         \n**************************************************************************"
2018/06/19 19:54:23 "**************************************************************************\n**************************************************************************\n VALUE STACK FUNCTIONS                                                    \n**************************************************************************\n**************************************************************************"
2018/06/19 19:54:23 " record all existing adoubles on the tape\n * - intended to be used in start_trace only "
2018/06/19 19:54:23 " remaining space in const. tape buffer "
2018/06/19 19:54:23 " if we have adoubles in use "
2018/06/19 19:54:23 " fill the current values (real) tape buffer and write it to disk\n     * - do this as long as buffer can be fully filled "
2018/06/19 19:54:23 " store the remaining adouble values to the values tape buffer\n     * -> no write to disk necessary "
2018/06/19 19:54:23 "**************************************************************************\n record all remaining live variables on the value stack tape              \n - turns off trace_flag                                                   \n - intended to be used in stop_trace only                                 \n**************************************************************************"
2018/06/19 19:54:23 " save all the final adoubles when finishing tracing "
2018/06/19 19:54:23 " special signal -> all alive adoubles recorded on the end of the\n         * value stack -> special handling at the beginning of reverse "
2018/06/19 19:54:23 " lowest loc \n highest loc "
2018/06/19 19:54:23 " now really do it if keepTaylors ist set "
2018/06/19 19:54:23 "**************************************************************************\n Set up statics for writing taylor data                                   \n**************************************************************************"
2018/06/19 19:54:23 " check if new buffer is allowed "
2018/06/19 19:54:23 " initial setups "
2018/06/19 19:54:23 "**************************************************************************\n Close the taylor file, reset data.                                       \n**************************************************************************"
2018/06/19 19:54:23 " enforces failure of reverse => retaping "
2018/06/19 19:54:23 " keep track of the Ind/Dep counts of the taylor stack "
2018/06/19 19:54:23 "**************************************************************************\n Initializes a reverse sweep.                                             \n**************************************************************************"
2018/06/19 19:54:23 " this should be removed soon since values can be accessed via         \n ADOLC_CURRENT_TAPE_INFOS directly                                    "
2018/06/19 19:54:23 "**************************************************************************\n Writes the block of size depth of taylor coefficients from point loc to  \n the taylor buffer. If the buffer is filled, then it is written to the    \n taylor tape.                                                             \n**************************************************************************"
2018/06/19 19:54:23 " write data to buffer and put buffer to disk as long as data remain in\n     * the T-buffer => don't create an empty value stack buffer! "
2018/06/19 19:54:23 " In this assignment the precision will be sacrificed if the type\n             * revreal is defined as float. "
2018/06/19 19:54:23 " In this assignment the precision will be sacrificed\n         * if the type revreal is defined as float. "
2018/06/19 19:54:23 "**************************************************************************\n Writes the block of size depth of taylor coefficients from point loc to  \n the taylor buffer.  If the buffer is filled, then it is written to the   \n taylor tape.                                                             \n--------------------------------------------------------------------------"
2018/06/19 19:54:23 " The precision will be sacrificed if the type\n             * revreal is defined as float. "
2018/06/19 19:54:23 "        for (i = keep; i < degree; ++i) ++T;"
2018/06/19 19:54:23 "**************************************************************************\n Write_scaylors writes # size elements from x to the taylor buffer.       \n**************************************************************************"
2018/06/19 19:54:23 " write data to buffer and put buffer to disk as long as data remain in\n     * the x-buffer => don't create an empty value stack buffer! "
2018/06/19 19:54:23 "**************************************************************************\n Writes the value stack buffer onto hard disk.                            \n**************************************************************************"
2018/06/19 19:54:23 "**************************************************************************\n Puts a block of taylor coefficients from the value stack buffer to the   \n taylor buffer. --- Higher Order Scalar                                   \n**************************************************************************"
2018/06/19 19:54:23 " As long as all values from the taylor stack buffer will be used copy\n     * them into the taylor buffer and load the next (previous) buffer. "
2018/06/19 19:54:23 " Copy the remaining values from the stack into the buffer ... "
2018/06/19 19:54:23 "**************************************************************************\n Puts a block of taylor coefficients from the value stack buffer to the   \n taylor buffer. --- Higher Order Vector                                   \n**************************************************************************"
2018/06/19 19:54:23 " update the directions except the base point parts "
2018/06/19 19:54:23 " skip the base point part "
2018/06/19 19:54:23 " now update the base point parts "
2018/06/19 19:54:23 "**************************************************************************\n Gets the next (previous block) of the value stack                        \n**************************************************************************"
2018/06/19 19:54:23 "**************************************************************************\n**************************************************************************\n NON-VALUE-STACK FUNCTIONS                                                \n**************************************************************************\n**************************************************************************"
2018/06/19 19:54:23 "**************************************************************************\n start_trace: (part of trace_on)                                          \n Initialization for the taping process. Does buffer allocation, sets      \n files names, and calls appropriate setup routines.                       \n**************************************************************************"
2018/06/19 19:54:23 " Put operation denoting the start_of_the tape "
2018/06/19 19:54:23 " Leave space for the stats "
2018/06/19 19:54:23 " initialize value stack if necessary "
2018/06/19 19:54:23 " mark possible (hard disk) tape creation "
2018/06/19 19:54:23 "**************************************************************************\n Stop Tracing.  Clean up, and turn off trace_flag.                        \n**************************************************************************"
2018/06/19 19:54:23 " Mark end of tape. "
2018/06/19 19:54:23 " The taylor stack size base estimation results in a doubled taylor count\n     * if we tape with keep (taylors counted in adouble.cpp/avector.cpp and\n     * \"keep_stock\" even if not written and a second time when actually\n     * written by \"put_tay_block\"). Correction follows here. "
2018/06/19 19:54:23 " closes the tape, files up stats, and writes the\n                         tape stats to the integer tape "
2018/06/19 19:54:23 "**************************************************************************\n Close open tapes, update stats and clean up.                             \n**************************************************************************"
2018/06/19 19:54:23 " finish operations tape, close it, update stats "
2018/06/19 19:54:23 " finish constants tape, close it, update stats "
2018/06/19 19:54:23 " finish locations tape, update and write tape stats, close tape "
2018/06/19 19:54:23 " write tape stats "
2018/06/19 19:54:23 "**************************************************************************\n Free all resources used by a tape before overwriting the tape.           \n**************************************************************************"
2018/06/19 19:54:23 "**************************************************************************\n Tapestats:                                                               \n Returns statistics on the tape tag with following meaning:               \n tape_stat[0] = # of independent variables.                               \n tape_stat[1] = # of dependent variables.                                 \n tape_stat[2] = max # of live variables.                                  \n tape_stat[3] = value stack size.                                         \n tape_stat[4] = buffer size (# of chars, # of doubles, # of locints)      \n tape_stat[5] = # of operations.                                          \n tape_stat[6] = operation file access flag (1 = file in use, 0 otherwise) \n tape_stat[7] = # of saved locations.                                     \n tape_stat[8] = location file access flag (1 = file in use, 0 otherwise)  \n tape_stat[9] = # of saved constant values.                               \n tape_stat[10]= value file access flag (1 = file in use, 0 otherwise)     \n**************************************************************************"
2018/06/19 19:54:23 " get the tapeInfos for tag "
2018/06/19 19:54:23 " copy stats to the users field "
2018/06/19 19:54:23 "**************************************************************************\n An all-in-one tape stats printing routine.                               \n**************************************************************************"
2018/06/19 19:54:23 "**************************************************************************\n Returns the number of parameters recorded on tape                        \n**************************************************************************"
2018/06/19 19:54:23 "**************************************************************************\n Reads parameters from the end of value tape for disk based tapes         \n**************************************************************************"
2018/06/19 19:54:23 "**************************************************************************\n Overrides the parameters for the next evaluations. This will invalidate  \n the taylor stack, so next reverse call will fail, if not preceeded by a  \n forward call after setting the parameters.                               \n**************************************************************************"
2018/06/19 19:54:23 " mark possible (hard disk) tape creation "
2018/06/19 19:54:23 " make room for tapeInfos and read tape stats if necessary, keep value\n     * stack information "
2018/06/19 19:54:23 "**************************************************************************\n Does the actual reading from the hard disk into the stats buffer         \n**************************************************************************"
2018/06/19 19:54:23 "**************************************************************************\n Initialize a forward sweep. Get stats, open tapes, fill buffers, ...     \n**************************************************************************"
2018/06/19 19:54:23 " mark possible (hard disk) tape creation "
2018/06/19 19:54:23 " make room for tapeInfos and read tape stats if necessary, keep value\n     * stack information "
2018/06/19 19:54:23 " init operations "
2018/06/19 19:54:23 " how much to read ? "
2018/06/19 19:54:23 " how much remains ? "
2018/06/19 19:54:23 " init locations "
2018/06/19 19:54:23 " how much to read ? "
2018/06/19 19:54:23 " how much remains ? "
2018/06/19 19:54:23 " skip stats "
2018/06/19 19:54:23 " init constants "
2018/06/19 19:54:23 " how much to read ? "
2018/06/19 19:54:23 " how much remains ? "
2018/06/19 19:54:23 "**************************************************************************\n Initialize a reverse sweep. Get stats, open tapes, fill buffers, ...     \n**************************************************************************"
2018/06/19 19:54:23 " mark possible (hard disk) tape creation "
2018/06/19 19:54:23 " make room for tapeInfos and read tape stats if necessary, keep value\n     * stack information "
2018/06/19 19:54:23 " init operations "
2018/06/19 19:54:23 " init locations "
2018/06/19 19:54:23 " init constants "
2018/06/19 19:54:23 "**************************************************************************\n Finish a forward or reverse sweep.                                       \n**************************************************************************"
2018/06/19 19:54:23 " keep value stack \n no value stack "
2018/06/19 19:54:23 " --- Operations --- "
2018/06/19 19:54:23 "**************************************************************************\n Puts an operation into the operation buffer. Ensures that location buffer\n and constants buffer are prepared to take the belonging stuff.           \n**************************************************************************"
2018/06/19 19:54:23 " make sure we have enough slots to write the locs "
2018/06/19 19:54:23 " every operation writes 1 opcode "
2018/06/19 19:54:23 " every operation writes <5 values --- 3 should be sufficient "
2018/06/19 19:54:23 " avoid writing uninitialized memory to the file and get valgrind upset "
2018/06/19 19:54:23 " every operation writes 1 opcode "
2018/06/19 19:54:23 " every operation writes 1 opcode "
2018/06/19 19:54:23 "**************************************************************************\n Writes a block of operations onto hard disk and handles file creation,   \n removal, ...                                                             \n**************************************************************************"
2018/06/19 19:54:23 "**************************************************************************\n Reads the next operations block into the internal buffer.                \n**************************************************************************"
2018/06/19 19:54:23 "**************************************************************************\n Reads the previous block of operations into the internal buffer.         \n**************************************************************************"
2018/06/19 19:54:23 " --- Locations --- "
2018/06/19 19:54:23 "**************************************************************************\n Writes a block of locations onto hard disk and handles file creation,   \n removal, ...                                                             \n**************************************************************************"
2018/06/19 19:54:23 "**************************************************************************\n Reads the next block of locations into the internal buffer.              \n**************************************************************************"
2018/06/19 19:54:23 "**************************************************************************\n Reads the previous block of locations into the internal buffer.          \n**************************************************************************"
2018/06/19 19:54:23 " --- Values (Constants -- Real) --- "
2018/06/19 19:54:23 "**************************************************************************\n Writes a block of constants (real) onto hard disk and handles file       \n creation, removal, ...                                                   \n**************************************************************************"
2018/06/19 19:54:23 " every operation writes 1 opcode "
2018/06/19 19:54:23 "**************************************************************************\n Write some constants to the buffer without disk access                   \n**************************************************************************"
2018/06/19 19:54:23 "**************************************************************************\n Writes a block of constants (real) onto tape and handles file creation   \n removal, ...                                                             \n**************************************************************************"
2018/06/19 19:54:23 "**************************************************************************\n Reads the next block of constants into the internal buffer.              \n**************************************************************************"
2018/06/19 19:54:23 " get_locint_f(); value used in reverse only "
2018/06/19 19:54:23 "**************************************************************************\n Reads the previous block of values into the internal buffer.             \n**************************************************************************"
2018/06/19 19:54:23 "**************************************************************************\n Returns the number of free constants in the real tape. Ensures that it   \n is at least 5.                                                           \n**************************************************************************"
2018/06/19 19:54:23 " every operation writes 1 opcode "
2018/06/19 19:54:23 "**************************************************************************\n Discards parameters from the end of value tape during reverse mode       \n**************************************************************************"
2018/06/19 19:54:23 "**************************************************************************\n Returns a pointer to the first element of a values vector and skips the  \n vector. -- Forward Mode --                                               \n**************************************************************************"
2018/06/19 19:54:23 "**************************************************************************\n Returns a pointer to the first element of a values vector and skips the  \n vector. -- Reverse Mode --                                               \n**************************************************************************"
2018/06/19 19:54:23 " --- Updates / Corrections --- "
2018/06/19 19:54:23 "**************************************************************************\n Not sure what's going on here! -> vector class ?  --- kowarz             \n**************************************************************************"
2018/06/19 19:54:23 "**************************************************************************\n Update locations tape to remove assignments involving temp. variables.   \n e.g.  t = a + b ; y = t  =>  y = a + b                                   \n**************************************************************************"
2018/06/19 19:54:23 "**************************************************************************\n Update locations and operations tape to remove special operations inv.   \n temporary variables. e.g.  t = a * b ; y += t  =>  y += a * b            \n**************************************************************************"
2018/06/19 19:54:23 " skipping recursive case "
2018/06/19 19:54:23 "**************************************************************************\n                                                                    UTILs \n**************************************************************************"
2018/06/19 19:54:23 "**************************************************************************\n                                                          DEBUG FUNCTIONS "
2018/06/19 19:54:23 "--------------------------------------------------------------------------"
2018/06/19 19:54:23 " why -'\\0' ??? kowarz "
2018/06/19 19:54:23 "--------------------------------------------------------------------------"
2018/06/19 19:54:23 "--------------------------------------------------------------------------"
2018/06/19 19:54:23 "--------------------------------------------------------------------------"
2018/06/19 19:54:23 "--------------------------------------------------------------------------"
2018/06/19 19:54:23 "--------------------------------------------------------------------------"
2018/06/19 19:54:23 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/taping.c": 42.6799ms
2018/06/19 19:54:23 Couldn't classify license(s)
2018/06/19 19:54:24 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/fos_reverse.c
2018/06/19 19:54:24 detected language: 4
2018/06/19 19:54:24 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     fos_reverse.c\n Revision: $Id$\n Contents: fos_reverse (first-order-scalar reverse mode)\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:24 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/fos_reverse.c": 6.608967ms
2018/06/19 19:54:24 Couldn't classify license(s)
2018/06/19 19:54:25 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/fov_pl_forward.c
2018/06/19 19:54:25 detected language: 4
2018/06/19 19:54:25 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     fov_an_forward.c\n Revision: $Id$\n Contents: fov_an_forward (first-order-vector abs-normal forward mode)\n \n Copyright (c) Kshitij Kulshrestha\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:25 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/fov_pl_forward.c": 6.702811ms
2018/06/19 19:54:25 Couldn't classify license(s)
2018/06/19 19:54:25 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/fos_pl_sig_reverse.c
2018/06/19 19:54:25 detected language: 4
2018/06/19 19:54:25 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     fos_reverse.c\n Revision: $Id$\n Contents: fos_reverse (first-order-scalar reverse mode)\n\n Copyright (c) Kshitij Kulshreshtha\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes\n recipient's acceptance of the terms of the accompanying license file.\n\n----------------------------------------------------------------------------"
2018/06/19 19:54:25 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/fos_pl_sig_reverse.c": 6.161993ms
2018/06/19 19:54:25 Couldn't classify license(s)
2018/06/19 19:54:26 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/indopro_forward_t.c
2018/06/19 19:54:26 detected language: 4
2018/06/19 19:54:26 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     int_forward_t.c\n Revision: $Id$\n Contents: int_forward (integer forward mode for bit pattern propagation)\n\n Copyright (c) Andrea Walther\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:26 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/indopro_forward_t.c": 6.612751ms
2018/06/19 19:54:26 Couldn't classify license(s)
2018/06/19 19:54:27 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/fos_pl_reverse.c
2018/06/19 19:54:27 detected language: 4
2018/06/19 19:54:27 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     fos_reverse.c\n Revision: $Id$\n Contents: fos_reverse (first-order-scalar reverse mode)\n \n Copyright (c) Kshitij Kulshreshtha\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:27 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/fos_pl_reverse.c": 6.365566ms
2018/06/19 19:54:27 Couldn't classify license(s)
2018/06/19 19:54:28 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/config.h.in
2018/06/19 19:54:28 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/config.h.in": 20.215869ms
2018/06/19 19:54:28 Couldn't classify license(s)
2018/06/19 19:54:29 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/fos_pl_forward.c
2018/06/19 19:54:29 detected language: 4
2018/06/19 19:54:29 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     fos_an_forward.c\n Revision: $Id$\n Contents: fos_an_forward (first-order-scalar abs-normal forward mode)\n\n Copyright (c) Kshitij Kulshreshtha\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n  \n----------------------------------------------------------------------------"
2018/06/19 19:54:29 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/fos_pl_forward.c": 7.354518ms
2018/06/19 19:54:29 Couldn't classify license(s)
2018/06/19 19:54:29 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/tapedoc/Makefile.am
2018/06/19 19:54:29 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/tapedoc/Makefile.am": 7.355596ms
2018/06/19 19:54:29 Couldn't classify license(s)
2018/06/19 19:54:30 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/tapedoc/Makefile.in
2018/06/19 19:54:30 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/tapedoc/Makefile.in": 57.414735ms
2018/06/19 19:54:30 Couldn't classify license(s)
2018/06/19 19:54:31 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/tapedoc/tapedoc.c
2018/06/19 19:54:31 detected language: 4
2018/06/19 19:54:31 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     tapedoc/tapedoc.c\n Revision: $Id$\n Contents: Routine tape_doc(..) writes the taped operations in LaTeX-code \n           to the file tape_doc.tex\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel \n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:31 "**************************************************************************\n                                                         STATIC VARIABLES "
2018/06/19 19:54:31 "--------------------------------------------------------------------------"
2018/06/19 19:54:31 "**************************************************************************\n                                                     LOCAL WRITE ROUTINES "
2018/06/19 19:54:31 "--------------------------------------------------------------------------"
2018/06/19 19:54:31 " 101 lines per page "
2018/06/19 19:54:31 "**************************************************************************\n filewrite( opcode number,  op name, number locations, locations, values,           \n            number constants, constants )                                 \n**************************************************************************"
2018/06/19 19:54:31 " write opcode counters and  number "
2018/06/19 19:54:31 " write opcode name if available "
2018/06/19 19:54:31 " write locations (max 4) right-justified "
2018/06/19 19:54:31 " default "
2018/06/19 19:54:31 " ext_diff "
2018/06/19 19:54:31 " write values \n values + constants \n constants (max 2) "
2018/06/19 19:54:31 " values (max 4) "
2018/06/19 19:54:31 " constants only \n constants (max 2) "
2018/06/19 19:54:31 " end line "
2018/06/19 19:54:31 "**************************************************************************\n filewrite_ampi( opcode number,  op name, number locations, locations )   \n**************************************************************************"
2018/06/19 19:54:31 " write opcode counters and  number "
2018/06/19 19:54:31 " write opcode name if available "
2018/06/19 19:54:31 " values + constants "
2018/06/19 19:54:31 " end line "
2018/06/19 19:54:31 "--------------------------------------------------------------------------"
2018/06/19 19:54:31 "**************************************************************************\n                                                             NOW THE CODE \n tape id \n consistency chk on # of dependents \n consistency chk on # of independents \n independent variable values \n dependent variable values "
2018/06/19 19:54:31 "**************************************************************************\n                                                            ALL VARIABLES "
2018/06/19 19:54:31 " loop indices "
2018/06/19 19:54:31 " Taylor stuff "
2018/06/19 19:54:31 " interface temporaries "
2018/06/19 19:54:31 "**************************************************************************\n                                                                    INITs "
2018/06/19 19:54:31 " globals "
2018/06/19 19:54:31 "**************************************************************************\n                                                                  MARKERS "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n end_of_op "
2018/06/19 19:54:31 " Skip next operation, it's another end_of_op "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n end_of_int "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n end_of_val "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n start_of_tape "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n end_of_tape "
2018/06/19 19:54:31 "**************************************************************************\n                                                               COMPARISON "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n eq_zero "
2018/06/19 19:54:31 " neq_zero "
2018/06/19 19:54:31 " le_zero "
2018/06/19 19:54:31 " gt_zero "
2018/06/19 19:54:31 " ge_zero "
2018/06/19 19:54:31 " lt_zero "
2018/06/19 19:54:31 "**************************************************************************\n                                                              ASSIGNMENTS "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n assign an adouble variable an    assign_a \n adouble value. (=) "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n assign an adouble variable a    assign_d \n double value. (=) "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n assign an adouble variable a    assign_d_one \n double value. (1) (=) "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n assign an adouble variable a    assign_d_zero \n double value. (0) (=) "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n assign an adouble variable an    assign_ind \n independent double value (<<=) "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n assign a float variable a    assign_dep \n dependent adouble value. (>>=) "
2018/06/19 19:54:31 "**************************************************************************\n                                                   OPERATION + ASSIGNMENT "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n Add a floating point to an    eq_plus_d \n adouble. (+=) "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n Add an adouble to another    eq_plus_a \n adouble. (+=) "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n Add an product to an            eq_plus_prod \n adouble. (+= x1*x2) "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n Subtract a floating point from an    eq_min_d \n adouble. (-=) "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n Subtract an adouble from another    eq_min_a \n adouble. (-=) "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n Subtract an product from an      eq_min_prod \n adouble. (+= x1*x2) "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n Multiply an adouble by a    eq_mult_d \n flaoting point. (*=) "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n Multiply one adouble by another    eq_mult_a \n (*=) "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n Increment an adouble    incr_a "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n Increment an adouble    decr_a "
2018/06/19 19:54:31 "**************************************************************************\n                                                        BINARY OPERATIONS "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n : Add two adoubles. (+)    plus a_a "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n Add an adouble and a double    plus_d_a \n (+) "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n Subtraction of two adoubles     min_a_a \n (-) "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n Subtract an adouble from a    min_d_a \n double (-) "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n Multiply two adoubles (*)    mult_a_a "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n Multiply an adouble by a double    mult_d_a \n (*) "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n Divide an adouble by an adouble    div_a_a \n (/) "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n Division double - adouble (/)    div_d_a "
2018/06/19 19:54:31 "**************************************************************************\n                                                         SIGN  OPERATIONS "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n pos_sign_a "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n neg_sign_a "
2018/06/19 19:54:31 "**************************************************************************\n                                                         UNARY OPERATIONS "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n exponent operation    exp_op "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n sine operation    sin_op "
2018/06/19 19:54:31 " olvo 980923 changed order to allow x=sin(x) "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n cosine operation    cos_op "
2018/06/19 19:54:31 " olvo 980923 changed order to allow x=cos(x) "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n atan_op "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n asin_op "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n acos_op "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n asinh_op "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n acosh_op "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n atanh_op "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n erf_op "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n log_op "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n pow_op "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n sqrt_op "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n gen_quad "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n min_op "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n abs_val "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n ceil_op "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n Compute ceil of adouble    floor_op "
2018/06/19 19:54:31 "**************************************************************************\n                                                             CONDITIONALS "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n cond_assign "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n cond_assign_s "
2018/06/19 19:54:31 "**************************************************************************\n                                                          REMAINING STUFF "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n take_stock_op "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n death_not "
2018/06/19 19:54:31 "**************************************************************************"
2018/06/19 19:54:31 " index \n n \n m \n xa[0].loc \n ya[0].loc \n dummy "
2018/06/19 19:54:31 " iArr length \n iArr \n iArr length again \n index \n n \n m \n xa[0].loc \n ya[0].loc \n dummy "
2018/06/19 19:54:31 " index \n iArr length \n iArr \n iArr length again \n nin \n nout "
2018/06/19 19:54:31 " input vectors sizes and start locs "
2018/06/19 19:54:31 " output vectors sizes and start locs \n nin again \n nout again "
2018/06/19 19:54:31 " start loc \n count "
2018/06/19 19:54:31 " endpoint \n tag \n pairedWith "
2018/06/19 19:54:31 " start loc \n count "
2018/06/19 19:54:31 " endpoint \n tag \n pairedWith "
2018/06/19 19:54:31 " push is delayed to the accompanying completion "
2018/06/19 19:54:31 " push is delayed to the accompanying completion "
2018/06/19 19:54:31 " for the operation we had been waiting for "
2018/06/19 19:54:31 " start loc \n count "
2018/06/19 19:54:31 " endpoint \n tag \n pairedWith "
2018/06/19 19:54:31 " origin "
2018/06/19 19:54:31 " start loc \n count "
2018/06/19 19:54:31 " root "
2018/06/19 19:54:31 " rbuf \n sbuf \n count \n pushResultData \n read stored double array into dummy variable "
2018/06/19 19:54:31 " for root, also read stored reduction result "
2018/06/19 19:54:31 " pushResultData again "
2018/06/19 19:54:31 " root "
2018/06/19 19:54:31 " count again "
2018/06/19 19:54:31 " rbuf \n sbuf \n count \n pushResultData \n read off stored double array into dummy variable "
2018/06/19 19:54:31 " for root, also read off stored reduction result "
2018/06/19 19:54:31 " pushResultData again "
2018/06/19 19:54:31 " root "
2018/06/19 19:54:31 " count again "
2018/06/19 19:54:31 " commSizeForRootOrNull "
2018/06/19 19:54:31 " rbuf loc \n rcnt \n rtype "
2018/06/19 19:54:31 " buf loc \n count \n type \n root "
2018/06/19 19:54:31 " commSizeForRootOrNull "
2018/06/19 19:54:31 " commSizeForRootOrNull "
2018/06/19 19:54:31 " rbuf loc \n rcnt \n rtype "
2018/06/19 19:54:31 " buf loc \n count \n type \n root "
2018/06/19 19:54:31 " commSizeForRootOrNull "
2018/06/19 19:54:31 " commSizeForRootOrNull "
2018/06/19 19:54:31 " rcnt \n rbuf loc \n rtype "
2018/06/19 19:54:31 " count \n type "
2018/06/19 19:54:31 " commSizeForRootOrNull "
2018/06/19 19:54:31 " commSizeForRootOrNull "
2018/06/19 19:54:31 " rbuf loc \n rcnt[0] \n displs[0] "
2018/06/19 19:54:31 " rtype "
2018/06/19 19:54:31 " buf loc \n count \n type \n root "
2018/06/19 19:54:31 " commSizeForRootOrNull "
2018/06/19 19:54:31 " commSizeForRootOrNull "
2018/06/19 19:54:31 " rbuf loc \n rcnt[0] \n displs[0] "
2018/06/19 19:54:31 " rtype "
2018/06/19 19:54:31 " buf loc \n count \n type \n root "
2018/06/19 19:54:31 " commSizeForRootOrNull "
2018/06/19 19:54:31 " commSizeForRootOrNull "
2018/06/19 19:54:31 " rcnts \n displs "
2018/06/19 19:54:31 " rbuf loc \n rtype "
2018/06/19 19:54:31 " buf loc \n count \n type \n root "
2018/06/19 19:54:31 " commSizeForRootOrNull "
2018/06/19 19:54:31 "--------------------------------------------------------------------------\n default \n Die here, we screwed up "
2018/06/19 19:54:31 " endswitch "
2018/06/19 19:54:31 " Read the next operation "
2018/06/19 19:54:31 " endwhile "
2018/06/19 19:54:31 " end tape_doc "
2018/06/19 19:54:31 "**************************************************************************\n                                                               THAT'S ALL "
2018/06/19 19:54:31 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/tapedoc/tapedoc.c": 27.8899ms
2018/06/19 19:54:31 Couldn't classify license(s)
2018/06/19 19:54:32 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/hov_reverse.c
2018/06/19 19:54:32 detected language: 4
2018/06/19 19:54:32 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     hov_reverse.c\n Revision: $Id$\n Contents: hov_reverse (higher-order-vector reverse mode)\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:32 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/hov_reverse.c": 6.419355ms
2018/06/19 19:54:32 Couldn't classify license(s)
2018/06/19 19:54:33 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/fixpoint.cpp
2018/06/19 19:54:33 detected language: 4
2018/06/19 19:54:33 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     fixpoint.c\n Revision: $Id$\n Contents: all C functions directly accessing at least one of the four tapes\n           (operations, locations, constants, value stack)\n \n Copyright (c) Andreas Kowarz, Sebastian Schlenkrich\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n\n----------------------------------------------------------------------------"
2018/06/19 19:54:33 "--------------------------------------------------------------------------"
2018/06/19 19:54:33 " F(x,u,y,dim_x,dim_u) \n norm(x,dim_x)        "
2018/06/19 19:54:33 " Piggy back"
2018/06/19 19:54:33 "unused\nunused\n (d x_fix) / (d x_0) = 0 (!)"
2018/06/19 19:54:33 " add new fp information"
2018/06/19 19:54:33 " declare extern differentiated function and data"
2018/06/19 19:54:33 " put x and u together"
2018/06/19 19:54:33 " tape near solution"
2018/06/19 19:54:33 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/fixpoint.cpp": 8.346452ms
2018/06/19 19:54:33 Couldn't classify license(s)
2018/06/19 19:54:33 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/sparse/sparsedrivers.cpp
2018/06/19 19:54:33 detected language: 4
2018/06/19 19:54:33 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     sparse/sparsedrivers.cpp\n Revision: $Id$\n Contents: \"Easy To Use\" C++ interfaces of SPARSE package\n \n\n Copyright (c) Andrea Walther, Benjamin Letschert, Kshitij Kulshreshtha\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.  \n  \n----------------------------------------------------------------------------"
2018/06/19 19:54:33 "**************************************************************************\n******       sparse Jacobains, separate drivers             **************\n**************************************************************************"
2018/06/19 19:54:33 "--------------------------------------------------------------------------\n                                                sparsity pattern Jacobian \n--------------------------------------------------------------------------\n                                                                         "
2018/06/19 19:54:33 " tape identification                       \n number of dependent variables             \n number of independent variables           \n independant variable values               "
2018/06/19 19:54:33 " returned compressed row block-index storage                         "
2018/06/19 19:54:33 " control options\n                    options[0] : way of sparsity pattern computation\n                               0 - propagation of index domains (default)\n                               1 - propagation of bit pattern\n                    options[1] : test the computational graph control flow\n                               0 - safe mode (default)\n                               1 - tight mode\n                    options[2] : way of bit pattern propagation\n                               0 - automatic detection (default)\n                               1 - forward mode \n                               2 - reverse mode                            "
2018/06/19 19:54:33 " default "
2018/06/19 19:54:33 " default "
2018/06/19 19:54:33 " default "
2018/06/19 19:54:33 " tape identification                       \n number of dependent variables             \n number of independent variables           \n number of switches                        \n independant variable values               "
2018/06/19 19:54:33 " returned compressed row block-index storage                         "
2018/06/19 19:54:33 "--------------------------------------------------------------------------\n                                                 seed matrix for Jacobian \n--------------------------------------------------------------------------"
2018/06/19 19:54:33 " control options\n                    option : way of compression\n                               0 - column compression (default)\n                               1 - row compression                "
2018/06/19 19:54:33 "**************************************************************************\n******        sparse Hessians, separate drivers             **************\n**************************************************************************"
2018/06/19 19:54:33 "---------------------------------------------------------------------------\n                                                  sparsity pattern Hessian \n                                                                           "
2018/06/19 19:54:33 " tape identification                        \n number of independent variables            \n independant variable values                "
2018/06/19 19:54:33 " returned compressed row block-index storage                         "
2018/06/19 19:54:33 " control option\n       option : test the computational graph control flow\n                               0 - safe mode (default)\n                               1 - tight mode\n                               2 - old safe mode \n                               3 - old tight mode                         "
2018/06/19 19:54:33 " default "
2018/06/19 19:54:33 "--------------------------------------------------------------------------\n                                                  seed matrix for Hessian \n--------------------------------------------------------------------------"
2018/06/19 19:54:33 " control options\n                    option : way of compression\n                               0 - indirect recovery (default)\n                               1 - direct recovery                "
2018/06/19 19:54:33 "**************************************************************************\n******       sparse Jacobians, complete driver              **************\n**************************************************************************"
2018/06/19 19:54:33 " tape identification                     \n number of dependent variables           \n number of independent variables         \n indicated repeated call with same seed  \n independant variable values             \n number of nonzeros                      \n row index                               \n column index                            \n non-zero values                         "
2018/06/19 19:54:33 " control options\n                    options[0] : way of sparsity pattern computation\n                               0 - propagation of index domains (default) \n                               1 - propagation of bit pattern\n                    options[1] : test the computational graph control flow\n                               0 - safe mode (default)\n                               1 - tight mode\n                    options[2] : way of bit pattern propagation\n                               0 - automatic detection (default)\n                               1 - forward mode \n                               2 - reverse mode                            \n                    options[3] : way of compression\n                               0 - column compression (default)\n                               1 - row compression                         "
2018/06/19 19:54:33 " default "
2018/06/19 19:54:33 " default "
2018/06/19 19:54:33 " default "
2018/06/19 19:54:33 " default "
2018/06/19 19:54:33 " sJinfos.Seed is memory managed by ColPack and will be deleted \n       * along with g. We only keep it in sJinfos for the repeat != 0 case "
2018/06/19 19:54:33 " compute jacobian times matrix product "
2018/06/19 19:54:33 " recover compressed Jacobian => ColPack library "
2018/06/19 19:54:33 " everything is preallocated, we assume correctly\n call usermem versions"
2018/06/19 19:54:33 " at least one of rind cind values is not allocated, deallocate others\n and call unmanaged versions"
2018/06/19 19:54:33 "**************************************************************************\n******        sparse Hessians, complete driver              **************\n**************************************************************************"
2018/06/19 19:54:33 " tape identification                     \n number of independent variables         \n indicated repeated call with same seed  \n independant variable values             \n number of nonzeros                      \n row index                               \n column index                            \n non-zero values                         "
2018/06/19 19:54:33 " control options\n                    options[0] :test the computational graph control flow\n                               0 - safe mode (default)\n                               1 - tight mode\n\t\t\t       2 - old safe mode\n\t\t\t       3 - old tight mode\n                    options[1] : way of recovery\n                               0 - indirect recovery\n                               1 - direct recovery                         "
2018/06/19 19:54:33 " Generate sparsity pattern, determine nnz, allocate memory "
2018/06/19 19:54:33 " default "
2018/06/19 19:54:33 " default "
2018/06/19 19:54:33 " generate sparsity pattern "
2018/06/19 19:54:33 " compute seed matrix => ColPack library "
2018/06/19 19:54:33 " Seed will be freed by ColPack when g is freed "
2018/06/19 19:54:33 "     this is the most efficient variant. However, there is somewhere a bug in hos_ov_reverse\n     ret_val = hov_wk_forward(tag,1,indep,1,2,sHinfos.p,basepoint,sHinfos.Xppp,&y,sHinfos.Yppp);\n     MINDEC(ret_val,hos_ov_reverse(tag,1,indep,1,sHinfos.p,sHinfos.Upp,sHinfos.Zppp));"
2018/06/19 19:54:33 "     for (i = 0; i < sHinfos.p; ++i)\n       for (l = 0; l < indep; ++l)\n \tsHinfos.Hcomp[l][i] = sHinfos.Zppp[i][l][1];"
2018/06/19 19:54:33 "\n     therefore, we use hess_vec isntead of hess_mat"
2018/06/19 19:54:33 "         sHinfos.Xppp = myalloc3(indep,sHinfos.p,1);"
2018/06/19 19:54:33 " recover compressed Hessian => ColPack library "
2018/06/19 19:54:33 "      if (options[1] == 0)\n        HessianRecovery::IndirectRecover_CoordinateFormat(g, sHinfos.Hcomp, sHinfos.HP, rind, cind, values);\n      else\n        HessianRecovery::DirectRecover_CoordinateFormat(g, sHinfos.Hcomp, sHinfos.HP, rind, cind, values);"
2018/06/19 19:54:33 " everything is preallocated, we assume correctly\n call usermem versions"
2018/06/19 19:54:33 " at least one of rind cind values is not allocated, deallocate others\n and call unmanaged versions"
2018/06/19 19:54:33 "**************************************************************************\n******      sparse Hessians, set and get sparsity pattern   **************\n**************************************************************************"
2018/06/19 19:54:33 " tape identification                     \n number of independent variables         "
2018/06/19 19:54:33 " tape identification                     \n number of independent variables         "
2018/06/19 19:54:33 "***************************************************************************\n                                                    JACOBIAN BLOCK PATTERN "
2018/06/19 19:54:33 " ------------------------------------------------------------------------- "
2018/06/19 19:54:33 " tape identification                \n number of dependent variables      \n number of independent variables    \n independant variable values         "
2018/06/19 19:54:33 " compressed block row storage                                  \n control options                            \n options[0] : way of bit pattern propagation\n                    0 - automatic detection (default)\n                    1 - forward mode \n                    2 - reverse mode   \n       options[1] : test the computational graph control flow\n                    0 - safe variant (default)\n                    1 - tight variant  "
2018/06/19 19:54:33 " forward "
2018/06/19 19:54:33 " reverse "
2018/06/19 19:54:33 " bit pattern parameters "
2018/06/19 19:54:33 " number of bits in an unsigned long int variable "
2018/06/19 19:54:33 " olvo 20000214 nl: inserted explicit cast to unsigned long int \n 10000....0 "
2018/06/19 19:54:33 " =================================================== forward propagation "
2018/06/19 19:54:33 " indep partial derivatives for the whole Jacobian "
2018/06/19 19:54:33 " number of unsigned longs to store the whole seed / Jacobian matrice "
2018/06/19 19:54:33 " number of unsigned longs to store the seed / Jacobian strips "
2018/06/19 19:54:33 " number of independent blocks per seed / Jacobian strip "
2018/06/19 19:54:33 " allocate memory --------------------------------------------------- "
2018/06/19 19:54:33 " strip-mining : repeated forward calls ----------------------------- "
2018/06/19 19:54:33 " build a partition of the seed matrix (indep x indep_blocks) --- \n (indep x i_blocks_per_strip) as a bit pattern                   "
2018/06/19 19:54:33 " 2 loops if short -> int !!! \n set old seed matrix to 0 "
2018/06/19 19:54:33 " 10000....0 "
2018/06/19 19:54:33 " bit pattern propagation by forward ---------------------------- "
2018/06/19 19:54:33 " extract  pattern from bit patterns --------------------- "
2018/06/19 19:54:33 " 10000....0 "
2018/06/19 19:54:33 " current/total number of non-zero blocks of indep. vars. "
2018/06/19 19:54:33 " strip_idx "
2018/06/19 19:54:33 " forward "
2018/06/19 19:54:33 " =================================================== reverse propagation "
2018/06/19 19:54:33 " depen weight vectors for the whole Jacobian "
2018/06/19 19:54:33 " number of unsigned longs to store the whole seed / Jacobian matrice "
2018/06/19 19:54:33 " number of unsigned longs to store the seed / Jacobian strips "
2018/06/19 19:54:33 " number of dependent blocks per seed / Jacobian strip "
2018/06/19 19:54:33 " allocate memory --------------------------------------------------- "
2018/06/19 19:54:33 " olvo 20000214: call to forward required in tight mode only,\n           in safe mode no basepoint available! "
2018/06/19 19:54:33 " strip-mining : repeated reverse calls ----------------------------- "
2018/06/19 19:54:33 " build a partition of the seed matrix (depen_blocks x depen)     \n (d_blocks_per_strip x depen) as a bit pattern                   "
2018/06/19 19:54:33 " 2 loops if short -> int !!! "
2018/06/19 19:54:33 " set old seed matrix to 0 "
2018/06/19 19:54:33 " 10000....0 "
2018/06/19 19:54:33 " bit pattern propagation by reverse ---------------------------- "
2018/06/19 19:54:33 " extract pattern from bit patterns --------------------- "
2018/06/19 19:54:33 " 10000....0 "
2018/06/19 19:54:33 " number of non-zero indep. blocks "
2018/06/19 19:54:33 " strip_idx "
2018/06/19 19:54:33 " reverse "
2018/06/19 19:54:33 "***************************************************************************\n                                                FREE SPARSE JACOBIAN INFOS "
2018/06/19 19:54:33 " ------------------------------------------------------------------------- "
2018/06/19 19:54:33 "***************************************************************************\n                                                 FREE SPARSE HESSIAN INFOS "
2018/06/19 19:54:33 " ------------------------------------------------------------------------- "
2018/06/19 19:54:33 "setNumDir(n);"
2018/06/19 19:54:33 "x[i].setADValue(i,1);"
2018/06/19 19:54:33 " sJinfos.Seed is memory managed by ColPack and will be deleted\n       * along with g. We only keep it in sJinfos for the repeat != 0 case "
2018/06/19 19:54:33 "  ret_val = fov_forward(tag, depen, indep, sJinfos.seed_clms, basepoint, sJinfos.Seed, sJinfos.y, sJinfos.B);"
2018/06/19 19:54:33 " recover compressed Jacobian => ColPack library "
2018/06/19 19:54:33 "delete g;\ndelete jr1d;"
2018/06/19 19:54:33 " sJinfos.Seed is memory managed by ColPack and will be deleted\n       * along with g. We only keep it in sJinfos for the repeat != 0 case "
2018/06/19 19:54:33 "  ret_val = fov_forward(tag, depen, indep, sJinfos.seed_clms, basepoint, sJinfos.Seed, sJinfos.y, sJinfos.B);"
2018/06/19 19:54:33 " recover compressed Jacobian => ColPack library "
2018/06/19 19:54:33 "**************************************************************************\n                                                               THAT'S ALL "
2018/06/19 19:54:33 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/sparse/sparsedrivers.cpp": 30.563767ms
2018/06/19 19:54:33 Couldn't classify license(s)
2018/06/19 19:54:34 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/sparse/Makefile.am
2018/06/19 19:54:34 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/sparse/Makefile.am": 7.121532ms
2018/06/19 19:54:34 Couldn't classify license(s)
2018/06/19 19:54:35 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/sparse/Makefile.in
2018/06/19 19:54:35 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/sparse/Makefile.in": 56.599789ms
2018/06/19 19:54:35 Couldn't classify license(s)
2018/06/19 19:54:36 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/sparse/sparse_fo_rev.cpp
2018/06/19 19:54:36 detected language: 4
2018/06/19 19:54:36 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     sparse/sparse_fo_rev.cpp\n Revision: $Id$\n Contents: All \"Easy To Use\" C++ interfaces of SPARSE package\n \n Copyright (c) Andrea Walther, Christo Mitev\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:36 "**************************************************************************\n                                    Bit pattern propagation; general call \n                                                                          "
2018/06/19 19:54:36 " forward(tag, m, n, p, x[n], X[n][p], y[m], Y[m][p], mode)                "
2018/06/19 19:54:36 " tight version"
2018/06/19 19:54:36 " safe version"
2018/06/19 19:54:36 "**************************************************************************\n                                    Bit pattern propagation; no basepoint \n                                                                          "
2018/06/19 19:54:36 " forward(tag, m, n, p, X[n][p], Y[m][p], mode)                            "
2018/06/19 19:54:36 " not safe"
2018/06/19 19:54:36 "**************************************************************************\n                                                                          \n                                    Bit pattern propagation, general call \n                                                                          "
2018/06/19 19:54:36 " reverse(tag, m, n, q, U[q][m], Z[q][n]) "
2018/06/19 19:54:36 " ! use better the tight version, the safe version supports no subscripts"
2018/06/19 19:54:36 " safe version"
2018/06/19 19:54:36 "**************************************************************************"
2018/06/19 19:54:36 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/sparse/sparse_fo_rev.cpp": 14.695942ms
2018/06/19 19:54:36 Couldn't classify license(s)
2018/06/19 19:54:37 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/fov_pl_sig_forward.c
2018/06/19 19:54:37 detected language: 4
2018/06/19 19:54:37 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     fov_an_forward.c\n Revision: $Id$\n Contents: fov_an_forward (first-order-vector abs-normal forward mode)\n \n Copyright (c) Kshitij Kulshrestha\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:37 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/fov_pl_sig_forward.c": 7.123535ms
2018/06/19 19:54:37 Couldn't classify license(s)
2018/06/19 19:54:37 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/externfcts.cpp
2018/06/19 19:54:37 detected language: 4
2018/06/19 19:54:37 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     externfcts.cpp\n Revision: $Id$\n Contents: functions and data types for extern (differentiated) functions.\n \n Copyright (c) Andreas Kowarz, Jean Utke\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n         \n----------------------------------------------------------------------------"
2018/06/19 19:54:37 "**************************************************************************\n                                    extern differentiated functions stuff "
2018/06/19 19:54:37 " sanity settings"
2018/06/19 19:54:37 " this call sets edf->index:"
2018/06/19 19:54:37 " this call sets  edf->index:"
2018/06/19 19:54:37 "\n * The externfcts.h had a comment previously that said the following:\n ****\n * The user has to preallocate the variables and set the pointers for any of the call back functions \n * that will be called during trace interpretation.\n * The dimensions given below correspond to the formal arguments in the call back funtions signatures above. \n * If the dimensions n and m change between multiple calls to the same external function, then the variables \n * have to be preallocation with the maximum of the respective dimension values. \n * The dp_x and dp_y pointers have to be valid during both, the tracing phase and the trace interpretation; \n * all the other pointers are required to be valid only for the trace interpretation.\n ****\n * Doing this now internally saves the user from doing it, as well as updating\n * when using multiple problem sizes.\n "
2018/06/19 19:54:37 " We need memory stored in the edfct dp_x[n], dp_X[n], dp_Z[n], \n       * dp_y[m], dp_Y[m], dp_U[m], dpp_X[n][n], dpp_Y[m][n], \n       * dpp_U[m][m], dpp_Z[m][n]. We have no implementation for higher order\n       * so leave it out.\n       "
2018/06/19 19:54:37 "+ n*n + 2*n*m + m*m"
2018/06/19 19:54:37 "\n      tmp = populate_dpp(&edfct->dpp_X, tmp, n,n);\n      tmp = populate_dpp(&edfct->dpp_Y, tmp, m,n);\n      tmp = populate_dpp(&edfct->dpp_U, tmp, m,m);\n      tmp = populate_dpp(&edfct->dpp_Z, tmp, m,n);\n      "
2018/06/19 19:54:37 " keep space for checkpointing index "
2018/06/19 19:54:37 " update taylor buffer if keep != 0 ; possible double counting as in\n   * adouble.cpp => correction in taping.c "
2018/06/19 19:54:37 " write back "
2018/06/19 19:54:37 " do it again so we can read in either direction"
2018/06/19 19:54:37 "**************************************************************************\n                                                               THAT'S ALL "
2018/06/19 19:54:37 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/externfcts.cpp": 11.030426ms
2018/06/19 19:54:37 Couldn't classify license(s)
2018/06/19 19:54:38 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/drivers/driversf.c
2018/06/19 19:54:38 detected language: 4
2018/06/19 19:54:38 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     drivers/driversf.c\n Revision: $Id$\n Contents: Easy to use drivers for optimization and nonlinear equations\n           (Implementation of the Fortran callable interfaces).\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \nThis file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n  \n----------------------------------------------------------------------------"
2018/06/19 19:54:38 "**************************************************************************\n                         DRIVERS FOR OPTIMIZATION AND NONLINEAR EQUATIONS "
2018/06/19 19:54:38 "--------------------------------------------------------------------------\n                                                                 function \n function(tag, m, n, x[n], y[m])                                          "
2018/06/19 19:54:38 "--------------------------------------------------------------------------\n                                                                 gradient \n gradient(tag, n, x[n], g[n])                                             "
2018/06/19 19:54:38 "--------------------------------------------------------------------------\n                                                                          \n vec_jac(tag, m, n, repeat, x[n], u[m], v[n])                             "
2018/06/19 19:54:38 "--------------------------------------------------------------------------\n                                                                 jacobian \n jacobian(tag, m, n, x[n], J[m][n])                                       "
2018/06/19 19:54:38 "--------------------------------------------------------------------------\n                                                                          \n jac_vec(tag, m, n, x[n], v[n], u[m]);                                    "
2018/06/19 19:54:38 "--------------------------------------------------------------------------\n                                                                          \n hess_vec(tag, n, x[n], v[n], w[n])                                       "
2018/06/19 19:54:38 "--------------------------------------------------------------------------\n                                                                  hessian \n hessian(tag, n, x[n], lower triangle of H[n][n])                         "
2018/06/19 19:54:38 " length of h should be n*n but the\n                            upper half of this matrix remains unchanged "
2018/06/19 19:54:38 "--------------------------------------------------------------------------\n                                                                          \n lagra_hess_vec(tag, m, n, x[n], v[n], u[m], w[n])                        "
2018/06/19 19:54:38 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/drivers/driversf.c": 10.418119ms
2018/06/19 19:54:38 Couldn't classify license(s)
2018/06/19 19:54:39 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/drivers/drivers.c
2018/06/19 19:54:39 detected language: 4
2018/06/19 19:54:39 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     drivers/drivers.c\n Revision: $Id$\n Contents: Easy to use drivers for optimization and nonlinear equations\n           (Implementation of the C/C++ callable interfaces).\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:39 "**************************************************************************\n                         DRIVERS FOR OPTIMIZATION AND NONLINEAR EQUATIONS "
2018/06/19 19:54:39 "--------------------------------------------------------------------------\n                                                                 function \n function(tag, m, n, x[n], y[m])                                          "
2018/06/19 19:54:39 "--------------------------------------------------------------------------\n                                                                 gradient \n gradient(tag, n, x[n], g[n])                                             "
2018/06/19 19:54:39 "--------------------------------------------------------------------------\n                                                                          \n vec_jac(tag, m, n, repeat, x[n], u[m], v[n])                             "
2018/06/19 19:54:39 "--------------------------------------------------------------------------\n                                                                 jacobian \n jacobian(tag, m, n, x[n], J[m][n])                                       "
2018/06/19 19:54:39 "--------------------------------------------------------------------------\n                                                           large_jacobian \n large_jacobian(tag, m, n, k, x[n], y[m], J[m][n])                        "
2018/06/19 19:54:39 "--------------------------------------------------------------------------\n                                                                  jac_vec \n jac_vec(tag, m, n, x[n], v[n], u[m]);                                    "
2018/06/19 19:54:39 "--------------------------------------------------------------------------\n                                                                 hess_vec \n hess_vec(tag, n, x[n], v[n], w[n])                                       "
2018/06/19 19:54:39 "--------------------------------------------------------------------------\n                                                                 hess_mat \n hess_mat(tag, n, q, x[n], V[n][q], W[n][q])                              "
2018/06/19 19:54:39 " matrix on right-hand side  \n results of hos_wk_forward  \n result of Up x H x XPPP \n vector on left-hand side "
2018/06/19 19:54:39 "--------------------------------------------------------------------------\n                                                                  hessian \n hessian(tag, n, x[n], lower triangle of H[n][n])                         \n uses Hessian-vector product                                              "
2018/06/19 19:54:39 " Note that only the lower triangle of hess is filled "
2018/06/19 19:54:39 "--------------------------------------------------------------------------\n                                                                 hessian2 \n hessian2(tag, n, x[n], lower triangle of H[n][n])                        \n uses Hessian-matrix product                                              "
2018/06/19 19:54:39 " matrix on right-hand side  \n results of function evaluation \n results of hos_wk_forward  \n result of Up x H x XPPP \n vector on left-hand side "
2018/06/19 19:54:39 " Note that only the lower triangle of hess is filled "
2018/06/19 19:54:39 "--------------------------------------------------------------------------\n                                                           lagra_hess_vec \n lagra_hess_vec(tag, m, n, x[n], v[n], u[m], w[n])                        "
2018/06/19 19:54:39 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/drivers/drivers.c": 12.459923ms
2018/06/19 19:54:39 Couldn't classify license(s)
2018/06/19 19:54:40 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/drivers/psdriversf.c
2018/06/19 19:54:40 detected language: 4
2018/06/19 19:54:40 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     drivers/psdrivers.c\n Revision: $Id$\n Contents: Easy to use drivers for piecewise smooth functions\n           (with C and C++ callable interfaces including Fortran\n            callable versions).\n\n Copyright (c) Andrea Walther, Sabrina Fiege, Kshitij Kulshreshtha\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduct ion, or distribution of the software constitutes\n recipient's acceptance of the terms of the accompanying license file.\n\n----------------------------------------------------------------------------"
2018/06/19 19:54:40 "**************************************************************************\n                                                 DRIVERS FOR PS FUNCTIONS "
2018/06/19 19:54:40 "--------------------------------------------------------------------------\n                                                          abs-normal form \n abs_normal(tag,m,n,s,x[n],sig[s],y[m],z[s],cz[s],cy[m],                  \n            J[m][n],Y[m][s],Z[s][n],L[s][s])                              "
2018/06/19 19:54:40 "**************************************************************************\n                                                               THAT'S ALL "
2018/06/19 19:54:40 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/drivers/psdriversf.c": 8.836242ms
2018/06/19 19:54:40 Couldn't classify license(s)
2018/06/19 19:54:40 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/drivers/odedriversf.c
2018/06/19 19:54:40 detected language: 4
2018/06/19 19:54:40 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     drivers/odedriversf.c\n Revision: $Id$\n Contents: Easy to use drivers for optimization and nonlinear equations\n           (Implementation of the Fortran callable interfaces).\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel \n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n\n----------------------------------------------------------------------------"
2018/06/19 19:54:40 "**************************************************************************\n                                                         DRIVERS FOR ODEs "
2018/06/19 19:54:40 "--------------------------------------------------------------------------\n                                                                  forodec \n forodec(tag, n, tau, dold, dnew, X[n][d+1])                              \n tape identifier \n space dimension \n scaling defaults to 1.0 \n previous degree defaults to zero \n New degree of consistency        \n Taylor series                    "
2018/06/19 19:54:40 "--------------------------------------------------------------------------\n                                                                  accodec \n accodec(n, tau, d, Z[n][n][d+1], B[n][n][d+1], nz[n][n])                 \n space dimension \n scaling defaults to 1.0 \n highest degree          \n input tensor of \"partial\" Jacobians \n output tensor of \"total\" Jacobians  "
2018/06/19 19:54:40 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/drivers/odedriversf.c": 8.682296ms
2018/06/19 19:54:40 Couldn't classify license(s)
2018/06/19 19:54:41 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/drivers/odedrivers.c
2018/06/19 19:54:41 detected language: 4
2018/06/19 19:54:41 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     drivers/odedrivers.c\n Revision: $Id$\n Contents: Easy to use drivers for ordinary differential equations (ODE)\n           (with C and C++ callable interfaces including Fortran \n            callable versions).\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel \n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n  \n----------------------------------------------------------------------------"
2018/06/19 19:54:41 "**************************************************************************\n                                                         DRIVERS FOR ODEs "
2018/06/19 19:54:41 "--------------------------------------------------------------------------\n                                                                  forodec \n forodec(tag, n, tau, dold, dnew, X[n][d+1])                              \n tape identifier \n space dimension \n scaling defaults to 1.0 \n previous degree defaults to zero \n New degree of consistency        \n Taylor series "
2018/06/19 19:54:41 "********************************************************************\n      This is assumed to be the autonomous case.\n      Here we are just going around computing the vectors \n      y[][j] for  dol < j <= deg\n      by successive calls to forward that works on the tape identified\n      by tag. This tape (array of file) must obviously have been\n      generated by a the execution of an active section between\n      trace_on and trace_off with n independent and n dependent variables\n      y must have been set up as  pointer to an array of n pointers\n      to double arrays containing at least deg+1 components.\n      The scaling by tau is sometimes necessary to avoid overflow.\n      *********************************************************************"
2018/06/19 19:54:41 "printf(\"y[%i] = %f\\n\",i,y[i]);"
2018/06/19 19:54:41 "printf(\"Y[%i][%i] = %f\\n\",i,k,Y[i][k]);"
2018/06/19 19:54:41 "*****  Here we get  going    *******"
2018/06/19 19:54:41 " j = 0 \n keep death values in prepration "
2018/06/19 19:54:41 " for  reverse called by jacode   "
2018/06/19 19:54:41 " only the last time through.     "
2018/06/19 19:54:41 " !!! "
2018/06/19 19:54:41 " keep death values in prepration "
2018/06/19 19:54:41 " for  reverse called by jacode   "
2018/06/19 19:54:41 " only the last time through.     "
2018/06/19 19:54:41 "*****  Done                  *******"
2018/06/19 19:54:41 "printf(\"Y[%i][%i] = %f\\n\",i,k,Y[i][k]);"
2018/06/19 19:54:41 "printf(\"Y[%i][0] = %f\\n\",i,Y[i][0]);"
2018/06/19 19:54:41 "--------------------------------------------------------------------------\n                                                                  accodec \n accodec(n, tau, d, Z[n][n][d+1], B[n][n][d+1], nz[n][n])                 \n space dimension \n scaling defaults to 1.0 \n highest degree          \n input tensor of \"partial\" Jacobians \n output tensor of \"total\" Jacobians  \n optional sparsity characterization  "
2018/06/19 19:54:41 "\n        The purpose of this subroutine is to compute the total derivatives\n                   B[i=0...n-1][j=0...n-1][k=0...deg].\n        The matrix obtained for fixed k represents the Jacobian of the\n        (k+1)-st Taylor coefficient vector with respect to the base point of\n        the ODE, i.e., the 0-th coefficient vector. The input array\n    \t       A[i=0...n-1][j=0...n-1][k=0...deg]\n        has exactly the same format, except that it-s k-th matrix slice\n        represents a partial derivative in that the indirect dependence\n        of the k-th coefficient vector on the base point via the (k-1)-st\n        and other lower Taylor coeffcients has not been taken into account.\n        The B's are compute from the A's by the chainrule with the parameter\n        tau thrown in for scaling. The calculation is performed so that\n        A may directly be overwritten by B i.e. their pointers arguments may\n        coincide to save storage.\n    \t   Sparsity is used so far only to reduce the operations count \n        but not to save space. In general we expect that for each given pair\n        (i,j) the entries A[i][j][k=0...] are nonzero either for all k, or for no k,\n        or for k=0 only. \n    \t   On entry the optional short array nonzero may be used to identify\n        all entries of the A[.][.][k] that are potentially nonzero, i.e. \n     \n                nonzero[i][j] <= 0  implies   A[i][j][k] = 0 for all k \n    \t    nonzero[i][j] = 1   implies   A[i][j][k] = 0 for all k > 0 .\n     \n        In other words we only allow the sparsity of the matrices A[.][.][k]\n        to be increasing in that A[.][.][1] is possibly sparser than A[.][.][0]\n        and all subseqent A[.][.][k] with k > 0 have the same sparsity pattern.\n        That is the typical situation since A[.][.][k] is the k-th\n        Taylor coefficient in the time expansion of the Jacobian of the\n        right hand side. The entries of this square matrix tend to be either\n        constant or trancendental functions of time.\n    \t   The matrices B_k = B[.][.][k] are obtained from the A_k = A[.][.][k]\n        by the recurrence\n                            tau   /        k                  \\\n    \t         B_k = ----- |  A_k + SUM A_{j-1} B_{k-j}  |\n    \t                k+1   \\       j=1                 /\n     \n        Assuming that the diagonal entries A[i][i][0] are structurally nonzero\n        we find that the matrices B[.][.][k=1..] can only lose sparsity\n        as k increase. Therfore, we can redefine the nonpositive values \n        nonzero[i][j] so that on exit\n     \n    \t    k <= -nonzero[i][j]  implies     B[i][j][k] = 0 \n     \n        which is trivially satisfied for all positive values of nonzero[i][j].\n        Due to the increasing sparsity of the A_i and the decreasing sparsity\n        of the B_i the first product in the sum of the RHS above determines the\n        sparsity pattern of the resulting B_k. Hence the optimal values of\n        the nonzero[i][j] depend only on the sparsity pattern of A_0. More\n        specifically, all positive -nonzero[i][j] represent the length of the\n        shortest directed path connecting nodes j and i in the incidence graph \n        of A_0. \n    "
2018/06/19 19:54:41 " Lets calculate B_k "
2018/06/19 19:54:41 "otherwise all terms vanish"
2018/06/19 19:54:41 " the A[i][p][m>0] may be nonzero"
2018/06/19 19:54:41 " we found something nonzero after all"
2018/06/19 19:54:41 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/drivers/odedrivers.c": 18.664287ms
2018/06/19 19:54:41 Couldn't classify license(s)
2018/06/19 19:54:42 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/drivers/Makefile.am
2018/06/19 19:54:42 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/drivers/Makefile.am": 7.775112ms
2018/06/19 19:54:42 Couldn't classify license(s)
2018/06/19 19:54:43 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/drivers/Makefile.in
2018/06/19 19:54:43 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/drivers/Makefile.in": 57.446302ms
2018/06/19 19:54:43 Couldn't classify license(s)
2018/06/19 19:54:44 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/drivers/taylor.c
2018/06/19 19:54:44 detected language: 4
2018/06/19 19:54:44 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     drivers/taylor.c\n Revision: $Id$\n Contents: Easy to use drivers for the evaluation of higher order derivative\n           tensors and inverse/impicit function differentiation\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:44 "**************************************************************************\n                                                              STRUCT ITEM "
2018/06/19 19:54:44 " address in array of derivatives \n absolute value of the correspondig multiindex i \n value of the coefficient c_{i,j} \n next item "
2018/06/19 19:54:44 "**************************************************************************\n                                                     DEALLOCATE COEFFLIST "
2018/06/19 19:54:44 " sum over all multiindices jm with |jm| = d "
2018/06/19 19:54:44 "**************************************************************************\n                                            ALLOCATE/DEALLOCATE COEFFLIST "
2018/06/19 19:54:44 "--------------------------------------------------------------------------\n Allcoate space for symmetric derivative tensors\n   of up to order d in n variables, derivatives are  "
2018/06/19 19:54:44 "--------------------------------------------------------------------------"
2018/06/19 19:54:44 "--------------------------------------------------------------------------\n Deallocate space for symmetric derivative tensors\n   of up to order d in n variables  "
2018/06/19 19:54:44 "--------------------------------------------------------------------------"
2018/06/19 19:54:44 "**************************************************************************\n                                                           SOME UTILITIES "
2018/06/19 19:54:44 "--------------------------------------------------------------------------"
2018/06/19 19:54:44 "--------------------------------------------------------------------------\n calculates summation value for fixed j, i, k with terms used in the article."
2018/06/19 19:54:44 " (|k|/d)^i \n (-1)^(|i-k|) "
2018/06/19 19:54:44 "**************************************************************************\n                                                    EVALUATE COEFFICIENTS "
2018/06/19 19:54:44 " Multiindex j \n Multiindex i \n Multiindex k "
2018/06/19 19:54:44 " whole number binomial coefficient "
2018/06/19 19:54:44 " travers coeff_list, i.e. create all j with |j| = d. "
2018/06/19 19:54:44 " travers all orders from 1 to d for i "
2018/06/19 19:54:44 " create all i with order order_im. "
2018/06/19 19:54:44 " check, whether i valid. "
2018/06/19 19:54:44 " create all k where 0<k<=i "
2018/06/19 19:54:44 " for (i over k)/(i over k-1) = (i-k+1)/k "
2018/06/19 19:54:44 " binomiZ doesn't change, for (i over k) = 1 if k=0 and also if k=i "
2018/06/19 19:54:44 " Store coefficient "
2018/06/19 19:54:44 " calculate address for ptr->a "
2018/06/19 19:54:44 " It is sum(binomial(i+k,j+k),k=0..n-1) = \n = ((j+n)*binomial(i+n,j+n)-j*binomial(i,j))/(1+i-j) "
2018/06/19 19:54:44 " find first nonvanishing entry on the right. "
2018/06/19 19:54:44 " mark end of queue. "
2018/06/19 19:54:44 " find first nonvanishing entry on the right. "
2018/06/19 19:54:44 "--------------------------------------------------------------------------"
2018/06/19 19:54:44 " olvo/walther 980804 new tl "
2018/06/19 19:54:44 "--------------------------------------------------------------------------"
2018/06/19 19:54:44 "**************************************************************************\n                                                           MORE UTILITIES "
2018/06/19 19:54:44 "--------------------------------------------------------------------------"
2018/06/19 19:54:44 "--------------------------------------------------------------------------"
2018/06/19 19:54:44 "--------------------------------------------------------------------------"
2018/06/19 19:54:44 "**************************************************************************"
2018/06/19 19:54:44 " test if zero "
2018/06/19 19:54:44 "--------------------------------------------------------------------------"
2018/06/19 19:54:44 " n Gausz-steps with full Pivoting "
2018/06/19 19:54:44 " Pivotsearch "
2018/06/19 19:54:44 " row and column change resp. "
2018/06/19 19:54:44 " Factorisation step \n L-part "
2018/06/19 19:54:44 " R-part "
2018/06/19 19:54:44 "--------------------------------------------------------------------------"
2018/06/19 19:54:44 "**************************************************************************"
2018/06/19 19:54:44 "**************************************************************************"
2018/06/19 19:54:44 " Re/Allocation Stuff "
2018/06/19 19:54:44 "**************************************************************************"
2018/06/19 19:54:44 " olvo 980728 "
2018/06/19 19:54:44 " sum over all multiindices jm with |jm| = d "
2018/06/19 19:54:44 " sum over all multiindices jm with |jm| = d "
2018/06/19 19:54:44 " Store S*jm in Y "
2018/06/19 19:54:44 "**************************************************************************"
2018/06/19 19:54:44 " sum over all multiindices jm with |jm| = d "
2018/06/19 19:54:44 " sum over all multiindices jm with |jm| = d "
2018/06/19 19:54:44 "**************************************************************************"
2018/06/19 19:54:44 " olvo 980728 == instead of = "
2018/06/19 19:54:44 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/drivers/taylor.c": 16.210662ms
2018/06/19 19:54:44 Couldn't classify license(s)
2018/06/19 19:54:44 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/drivers/psdrivers.c
2018/06/19 19:54:44 detected language: 4
2018/06/19 19:54:44 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     drivers/psdrivers.c\n Revision: $Id$\n Contents: Easy to use drivers for piecewise smooth functions\n           (with C and C++ callable interfaces including Fortran\n            callable versions).\n\n Copyright (c) Andrea Walther, Sabrina Fiege\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduct ion, or distribution of the software constitutes\n recipient's acceptance of the terms of the accompanying license file.\n\n----------------------------------------------------------------------------"
2018/06/19 19:54:44 "**************************************************************************\n                                                 DRIVERS FOR PS FUNCTIONS "
2018/06/19 19:54:44 "--------------------------------------------------------------------------\n                                                          abs-normal form "
2018/06/19 19:54:44 " tape identifier \n number od dependents   \n number of independents \n number of switches (check) \n base point \n sigma of x \n function value \n switching variables \n first constant \n second constant "
2018/06/19 19:54:44 " This check is required because the user is probably allocating his\n   * arrays sigma, cz, Z, L, Y, J according to swchk "
2018/06/19 19:54:44 " L[i][i] .. L[i][s] are theoretically zero,\n                            *  we probably don't need to copy them "
2018/06/19 19:54:44 "--------------------------------------------------------------------------\n                                              directional_active_gradient \n                                                                          \n trace identifier \n number of independents \n value of independents \n direction \n directional active gradient \n sigma of g "
2018/06/19 19:54:44 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/drivers/psdrivers.c": 8.644971ms
2018/06/19 19:54:44 Couldn't classify license(s)
2018/06/19 19:54:45 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/revolve.c
2018/06/19 19:54:45 detected language: 4
2018/06/19 19:54:45 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     revolve.c\n Revision: $Id$\n Contents: optimal binomial checkpointing adapted for ADOL-C\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:54:45 " -----\n*   The function REVOLVE coded below is meant to be used as a        * \n*   \"controller\" for running a time-dependent applications program   *\n*   in the reverse mode with checkpointing described in the paper    *\n*   \"Achieving logarithmic Growth in temporal and spatial complexity *\n*   in reverse automatic differentiation\", Optimization Methods and  *\n*   Software,  Vol.1 pp. 35-54.                                      *\n*   A postscript source of that paper can be found in the ftp sites  *\n*        info.mcs.anl.gov and nbtf02.math.tu-dresden.de.             *\n*   Apart from REVOLVE this file contains five auxiliary routines    * \n*   NUMFORW, EXPENSE, MAXRANGE, and ADJUST.                          *\n*                                                                    *\n*--------------------------------------------------------------------*\n*                                                                    *\n*   To utilize REVOLVE the user must have procedures for             *\n*     - Advancing the state of the modeled system to a certain time. *\n*     - Saving the current state onto a stack of snapshots.          *\n*     - Restoring the the most recently saved snapshot and           *\n*       restarting the forward simulation from there.                *\n*     - Initializing the adjoints at the end of forward sweep.       *\n*     - Performing one combined forward and adjoint step.            * \n*   Through an encoding of its return value REVOLVE asks the         *\n*   calling program to perform one of these 'actions', which we will *\n*   refer to as                                                      *\n*                                                                    *\n*       'advance', 'takeshot', 'restore', 'firsturn' and 'youturn'  .*\n*   There are two other return values, namely                        *\n*       'terminate'   and     'error'                                *\n*   which indicate a regular or faulty termination of the calls      *\n*   to REVOLVE.                                                      *\n*                                                                    *\n*   The action 'firsturn' includes a 'youturn', in that it requires  *\n*     -advancing through the last time-step with recording           *\n*      of intermediates                                              *\n*     -initializing the adjoint values (possibly after               *\n*      performing some IO)                                           *\n*     -reversing the last time step using the record just written    *\n*   The action 'firsturn' is obtained when the difference FINE-CAPO  *\n*   has been reduced to 1 for the first time.                        *\n*                                                                    *\n*--------------------------------------------------------------------*\n*                                                                    *\n*   The calling sequence is                                          *\n*                                                                    *\n*               REVOLVE(CHECK,CAPO,FINE,SNAPS,INFO)                  *\n*                                                                    *\n*   with the return value being one of the actions to be taken. The  *\n*   calling parameters are all integers with the following meaning   *\n*                                                                    *\n*         CHECK     number of checkpoint being written or retrieved  *\n*         CAPO      beginning of subrange currently being processed  *\n*         FINE      end of subrange currently being processed        *\n*         SNAPS     upper bound on number of checkpoints taken       *\n*         INFO      determines how much information will be printed  *\n*                   and contains information about an error occurred *\n*                                                                    *\n*   Since REVOLVE involves only a few integer operations its         *\n*   run-time is truly negligible within any nontrivial application.  *\n*                                                                    *\n*   The parameter SNAPS is selected by the user (possibly with the   *\n*   help of the routines EXPENSE and ADJUST described below ) and    *\n*   remains unchanged throughout.                                    *\n*                                                                    *\n*   The pair (CAPO,FINE) always represents the initial and final     *\n*   state of the subsequence of time steps currently being traversed *\n*   backwards.                                                       *\n*                                                                    *\n*   The conditions                                                   *\n*                    CHECK >= -1      and     CAPO <= FINE           *\n*   are necessary and sufficient for a regular response of REVOLVE.  *\n*   If either condition is violated the value 'error' is returned.   *\n*                                                                    *\n*   The first call to REVOLVE must be with CHECK=-1 so that          * \n*   appropriate initializations can be performed internally.         *\n*                                                                    *\n*   When CHECK =-1 and CAPO = FINE  then 'terminate' is returned as  *\n*   action value. This combination necessarily arises after a        *\n*   sufficiently large number of calls to REVOLVE, which depends     * \n*   only on the initial difference FINE-CAPO.                        *\n*                                                                    *\n*   The last parameter INFO determines how much information about    *\n*   the actions performed will be printed. When INFO =0 no           *\n*   information is sent to standard output. When INFO > 0 REVOLVE    *\n*   produces an output that contains a prediction of the number of   *    \n*   forward steps and of the factor by which the execution will slow *    \n*   down. When an error occurs, the return value of INFO contains    *\n*   information about the reason:                                    *\n*                                                                    *\n*     INFO = 10: number of checkpoints stored exceeds CHECKUP,       *\n*                increase constant CHECKUP and recompile             *\n*     INFO = 11: number of checkpoints stored exceeds SNAPS, ensure  * \n*                SNAPS greater than 0 and increase initial FINE      *\n*     INFO = 12: error occurs in NUMFORW                             *\n*     INFO = 13: enhancement of FINE, SNAPS checkpoints stored,      *\n*                SNAPS must be increased                             *\n*     INFO = 14: number of SNAPS exceeds CHECKUP, increase constant  *\n*                CHECKUP and recompile                               *\n*     INFO = 15: number of REPS exceeds REPSUP, increase constant    *\n*                REPSUP and recompile                                *\n*                                                                    *\n*--------------------------------------------------------------------*\n*                                                                    *\n*   Some further explanations and motivations:                       *\n*                                                                    *\n*   There is an implicit bound on CHECK through the dimensioning of  *\n*   the integer array CH[CHEKUP] with CHECKUP = 64 being the default.*\n*   If anybody wants to have that even larger he must change the     *\n*   source. Also for the variable REPS an upper bound REPSUP is      *\n*   defined. The default value equals 64. If during a call to        *\n*   TREEVERSE a (CHECKUP+1)-st checkpoint would normally be called   * \n*   for then control is returned after an appropriate error message. * \n*   When the calculated REPS exceeds REPSUP also an error message    *\n*   occurs.                                                          *\n*   During the forward sweep the user is free to change the last     *\n*   three parameters from call to call, except that FINE may never   *\n*   be less than the current value of CAPO. This may be useful when  *\n*   the total number of time STEPS to be taken is not a priori       *\n*   known. The choice FINE=CAPO+1 initiates the reverse sweep, which * \n*   happens automatically if is left constant as CAPO is eventually  * \n*   moved up to it. Once the first reverse or restore action has     *\n*   been taken only the last two parameters should be changed.       *\n*                                                                    *\n*--------------------------------------------------------------------*\n*                                                                    *\n*   The necessary number of forward steps without recording is       *\n*   calculated by the function                                       *\n*                                                                    *\n*                      NUMFORW(STEPS,SNAPS)                          *\n*                                                                    *\n*   STEPS denotes the total number of time steps, i.e. FINE-CAPO     *\n*   during the first call of REVOLVE. When SNAPS is less than 1 an   * \n*   error message will be given and -1 is returned as value.         *\n*                                                                    *\n*--------------------------------------------------------------------*\n*                                                                    *\n*   To choose an appropriated value of SNAPS the function            *\n*                                                                    *\n*                      EXPENSE(STEPS,SNAPS)                          *\n*                                                                    *\n*   estimates the run-time factor incurred by REVOLVE for a          *\n*   particular value of SNAPS. The ratio NUMFORW(STEPS,SNAPS)/STEPS  *\n*   is returned. This ratio corresponds to the run-time factor of    *\n*   the execution relative to the run-time of one forward time step. *\n*                                                                    *\n*--------------------------------------------------------------------*\n*                                                                    *\n*   The auxiliary function                                           *\n*                                                                    *\n*                      MAXRANGE(SNAPS,REPS)                          *\n*                                                                    *\n*   returns the integer (SNAPS+REPS)!/(SNAPS!REPS!) provided         *\n*   SNAPS >=0, REPS >= 0. Otherwise there will be appropriate error  *\n*   messages and the value -1 will be returned. If the binomial      *\n*   expression is not representable as a  signed 4 byte integer,     *\n*   greater than 2^31-1, this maximal value is returned and a        *\n*   warning message printed.                                         *\n*                                                                    *\n*--------------------------------------------------------------------*\n*                                                                    *\n*   Furthermore, the function                                        *\n*                                                                    *\n*                      ADJUST(STEPS)                                 *\n*                                                                    *\n*   is provided. It can be used to determine a value of SNAPS so     *\n*   that the increase in spatial complexity equals approximately the *\n*   increase in temporal complexity. For that ADJUST computes a      *\n*   return value satisfying SNAPS ~= log_4 (STEPS) because of the    *\n*   theory developed in the paper mentioned above.                   *\n*                                                                    *\n*--------------------------------------------------------------------"
2018/06/19 19:54:45 " ************************************************************************* "
2018/06/19 19:54:45 " ************************************************************************* "
2018/06/19 19:54:45 " ************************************************************************* "
2018/06/19 19:54:45 " ************************************************************************* "
2018/06/19 19:54:45 " ************************************************************************* "
2018/06/19 19:54:45 " (*capo,*fine) is the time range currently under consideration \n ch[j] is the number of the state that is stored in checkpoint j "
2018/06/19 19:54:45 " initialization of turn counter "
2018/06/19 19:54:45 " reduce capo to previous checkpoint, unless done  "
2018/06/19 19:54:45 " (possibly first) combined forward/reverse step "
2018/06/19 19:54:45 " range = beta(c,r) >= l (r -> min)\n                 * bino1 = beta(c,r-1)\n                 * bino2 = beta(c-1,r-1)\n                 * bino3 = beta(c-2,r-1)\n                 * bino4 = beta(c,r-2)\n                 * bino5 = beta(c-3,r) "
2018/06/19 19:54:45 " new version by A. Kowarz\n                 * l^ as large as possible\n                 *         bino6 = beta(c-1,r-2) \n                 \n                        if (ds < 1)\n                           bino6 = 0;\n                        else\n                           bino6 = (ds > 1) ? bino2*(reps-1)/(ds+reps-2) : 1;\n                 \n                        if (*fine-*capo>=range-bino5)\n                           *capo += bino1;\n                        else\n                           if (*fine-*capo>bino1+bino2)\n                              *capo = *fine-bino2-bino3;\n                           else\n                              if (*fine-*capo>=bino1+bino6)\n                                 *capo += bino1-bino3;\n                              else\n                                 *capo = *fine-bino1+bino4; "
2018/06/19 19:54:45 " new version by A. Kowarz\n                 * l^ as small as possible \n                 *         bino6 = beta(c-1,r) "
2018/06/19 19:54:45 " original by A. Walther\n                 \n                        if (*fine-*capo <= bino1 + bino3)\n                          *capo = *capo+bino4;\n                        else \n                         {\n                          if (*fine-*capo >= range - bino5) \n                            *capo = *capo + bino1; \n                          else \n                             *capo = *fine-bino2-bino3;\n                         } "
2018/06/19 19:54:45 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/revolve.c": 60.997393ms
2018/06/19 19:54:45 Couldn't classify license(s)
2018/06/19 19:54:46 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/fos_forward.c
2018/06/19 19:54:46 detected language: 4
2018/06/19 19:54:46 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     fos_forward.c\n Revision: $Id$\n Contents: fos_forward (first-order-scalar forward mode)\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n  \n----------------------------------------------------------------------------"
2018/06/19 19:54:46 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/fos_forward.c": 6.652891ms
2018/06/19 19:54:46 Couldn't classify license(s)
2018/06/19 19:54:47 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/int_reverse_t.c
2018/06/19 19:54:47 detected language: 4
2018/06/19 19:54:47 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     int_reverse_t.c\n Revision: $Id$\n Contents: int_reverse (integer reverse mode tight for bit pattern propagation)\n \n Copyright (c) Andrea Walther, Christo Mitev\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n\n----------------------------------------------------------------------------"
2018/06/19 19:54:47 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/int_reverse_t.c": 7.668616ms
2018/06/19 19:54:47 Couldn't classify license(s)
2018/06/19 19:54:48 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/rpl_malloc.h
2018/06/19 19:54:48 detected language: 4
2018/06/19 19:54:48 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     malloc.h\n Revision: $Id$\n Contents: malloc replacements for not gnu compatible malloc system functions\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n  \n----------------------------------------------------------------------------"
2018/06/19 19:54:48 " HAVE_MALLOC == 0 \n HAVE_MALLOC "
2018/06/19 19:54:48 " HAVE_REALLOC == 0 \n HAVE_REALLOC "
2018/06/19 19:54:48 " __cplusplus "
2018/06/19 19:54:48 " __cplusplus \n ADOLC_NO_MALLOC "
2018/06/19 19:54:48 " __cplusplus "
2018/06/19 19:54:48 " __cplusplus \n ADOLC_NO_REALLOC "
2018/06/19 19:54:48 " HAVE_CONFIG_H \n ADOLC_INTERNAL \n ADOLC_MALLOC_H "
2018/06/19 19:54:48 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/rpl_malloc.h": 7.63481ms
2018/06/19 19:54:48 Couldn't classify license(s)
2018/06/19 19:54:49 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/oplate.h
2018/06/19 19:54:49 detected language: 4
2018/06/19 19:54:49 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     oplate.h\n Revision: $Id$\n Contents: Numeric values for the various opcodes used by ADOL-C.\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel,\n               Kshitij Kulshreshtha\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n           \n----------------------------------------------------------------------------"
2018/06/19 19:54:49 "**************************************************************************\n opcodes "
2018/06/19 19:54:49 "**************************************************************************"
2018/06/19 19:54:49 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/oplate.h": 7.428438ms
2018/06/19 19:54:49 Couldn't classify license(s)
2018/06/19 19:54:49 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/int_forward_s.c
2018/06/19 19:54:49 detected language: 4
2018/06/19 19:54:49 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     int_forward_s.c\n Revision: $Id$\n Contents: int_forward (integer forward mode safe for bit pattern propagation)\n \n Copyright (c) Andrea Walther, Christo Mitev\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:49 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/int_forward_s.c": 7.207096ms
2018/06/19 19:54:49 Couldn't classify license(s)
2018/06/19 19:54:50 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/Makefile.am
2018/06/19 19:54:50 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/Makefile.am": 14.748761ms
2018/06/19 19:54:50 Couldn't classify license(s)
2018/06/19 19:54:51 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/interfacesf.c
2018/06/19 19:54:51 detected language: 4
2018/06/19 19:54:51 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     interfacesf.c\n Revision: $Id$\n Contents: Genuine Fortran callable C Interfaces to ADOL-C forward \n           & reverse calls.\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n  \n----------------------------------------------------------------------------"
2018/06/19 19:54:51 "--------------------------------------------------------------------------"
2018/06/19 19:54:51 "--------------------------------------------------------------------------"
2018/06/19 19:54:51 "--------------------------------------------------------------------------"
2018/06/19 19:54:51 "--------------------------------------------------------------------------"
2018/06/19 19:54:51 "--------------------------------------------------------------------------"
2018/06/19 19:54:51 "--------------------------------------------------------------------------"
2018/06/19 19:54:51 "--------------------------------------------------------------------------"
2018/06/19 19:54:51 "--------------------------------------------------------------------------"
2018/06/19 19:54:51 "--------------------------------------------------------------------------"
2018/06/19 19:54:51 "--------------------------------------------------------------------------"
2018/06/19 19:54:51 "**************************************************************************\n                                                               THAT'S ALL "
2018/06/19 19:54:51 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/interfacesf.c": 7.787589ms
2018/06/19 19:54:51 Couldn't classify license(s)
2018/06/19 19:54:52 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/fov_forward.c
2018/06/19 19:54:52 detected language: 4
2018/06/19 19:54:52 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     fov_forward.c\n Revision: $Id$\n Contents: fov_forward (first-order-vector forward mode)\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:52 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/fov_forward.c": 6.565463ms
2018/06/19 19:54:52 Couldn't classify license(s)
2018/06/19 19:54:53 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/fov_offset_forward.c
2018/06/19 19:54:53 detected language: 4
2018/06/19 19:54:53 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     fov_offset_forward.c\n Revision: $Id$\n Contents: fov_offset_forward (first-order-vector forward mode with\n           p-offset in arguments and taylors)\n\n Copyright (c) Sebastian Schlenkrich\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file. \n \n----------------------------------------------------------------------------"
2018/06/19 19:54:53 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/fov_offset_forward.c": 6.415413ms
2018/06/19 19:54:53 Couldn't classify license(s)
2018/06/19 19:54:53 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/storemanager.h
2018/06/19 19:54:53 detected language: 4
2018/06/19 19:54:53 " -*- c++ -*- hello emacs...\n---------------------------------------------------------------------------- \n ADOL-C--  Automatic Differentiation by Overloading in C++ - simplified\n File:     storemanager.h\n Revision: $Id$\n Contents: storemanager.h contains definitions of abstract interface \n           class StoreManager and some derived classes implementing the\n           desired functionality.\n\n Copyright (c) 2006 Johannes Willkomm <johannes.willkomm@rwth-aachen.de>\n               2011-2013 Kshitij Kulshreshtha <kshitij@math.upb.de>\n               2012 Benjamin Letschert <letschi@mail.upb.de>\n               2013 Jean Utke <utke@mcs.anl.gov>\n\n This file is part of ADOL-C.\n\n The classes StoreManagerXYZ basically takes the global double *store pointer \n into their obhut and implement next_loc and free_loc.\n\n They basic idea is taken from \"The C++ Programming Language\" by Bjarne\n Stroustrup, from the chapter 19 on iterators and allocators.\n\n To understand how and why they work do the following:\n 1) Have a look at StoreManagerInSitu and convince yourself that it is\n    exactly the same as the solution presented in the Stroustrup book,\n    except that we always have just one big array instead of a linked\n    list of chunks.\n\n    This means in particular that we have to copy the values from the\n    old array into the lower half of the new one (we always double the size).\n\n 2) Have a look at StoreManagerLocint and convince yourself that these do\n    the same as StoreManagerInSitu except that the linked list of free \n    slots is maintained in a completely different portion of memory. This\n    means the values in freed slots remain untouched until they are\n    allocated again.\n\n\n 3) Have a look a class StoreManagerLocintBlock. This class uses a list of\n    of free blocks of different sizes instead of free locations.\n\n class StoreManagerInSitu\n An unsafe implementation is provided as well, but commented out.\n It does not use the indexFeld array which saves between \n 25% and 50% memory relative to the above safe implementation.\n\n It is most closely modelled after the example found in the \n Stroustrup book.\n\n It appears that it works very well, if one does not use the\n trace_on(tag, 1); ... trace_off(); reverse(); way of using ADOL-C.\n If the first sweep is forward it works fine.\n Therefore I left it in here as a comment so an interested user\n with acute main memory scarcity may give it a try.\n\t   \n\n History:\n          20120427 bl:     add blocking store management\n          20110208 kk:     incorporated in ADOL-C; moved some code arround\n          20060507 jw:     begin\n\n----------------------------------------------------------------------------"
2018/06/19 19:54:53 "   // effectively the current size of the store array"
2018/06/19 19:54:53 "   // the number of slots currently in use"
2018/06/19 19:54:53 " next location\n number of following free locations"
2018/06/19 19:54:53 "*\n     * when minGrow is specified we asssume that we have already\n     * search the blocks and found no block with minGrow locations in it\n     "
2018/06/19 19:54:53 " This implementation is unsafe in that using tace_on with keep=1 and \n   reverse mode directly afterwards will yield incorrect results.\n   For all other purposes it seem to work just fine, so it's left here\n   for reference as a comment.\n"
2018/06/19 19:54:53 " unsafe - use with care "
2018/06/19 19:54:53 "  static size_t const initialeGroesse = 512;"
2018/06/19 19:54:53 " while a place in store is unused we want to place\n a Link stucture (i.e. a pointer) there"
2018/06/19 19:54:53 " nicht beim ersten Mal"
2018/06/19 19:54:53 " 0 "
2018/06/19 19:54:53 " ADOL_C__STOREMANAGER_H "
2018/06/19 19:54:53 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/storemanager.h": 17.241727ms
2018/06/19 19:54:53 Couldn't classify license(s)
2018/06/19 19:54:54 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/zos_forward.c
2018/06/19 19:54:54 detected language: 4
2018/06/19 19:54:54 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     zos_forward.c\n Revision: $Id$\n Contents: zos_forward (zero-order-scalar forward mode)\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n  \n----------------------------------------------------------------------------"
2018/06/19 19:54:54 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/zos_forward.c": 6.447741ms
2018/06/19 19:54:54 Couldn't classify license(s)
2018/06/19 19:54:55 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/adouble.cpp
2018/06/19 19:54:55 detected language: 4
2018/06/19 19:54:55 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     adouble.cpp\n Revision: $Id$\n Contents: adouble.C contains that definitions of procedures used to \n           define various badouble, adub, and adouble operations. \n           These operations actually have two purposes.\n           The first purpose is to actual compute the function, just as \n           the same code written for double precision (single precision -\n           complex - interval) arithmetic would.  The second purpose is \n           to write a transcript of the computation for the reverse pass \n           of automatic differentiation.\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel,\n               Kshitij Kulshreshtha\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n   \n----------------------------------------------------------------------------"
2018/06/19 19:54:55 "**************************************************************************\n                                                        HELPFUL FUNCTIONS "
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n The remaining routines define the badouble, adub and adouble routines.   \n--------------------------------------------------------------------------"
2018/06/19 19:54:55 "**************************************************************************\n                                                             CONSTRUCTORS "
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 " = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 " = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 " = res"
2018/06/19 19:54:55 " = res"
2018/06/19 19:54:55 " = res\n = coval"
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 " = arg\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 " 981020 olvo  skip upd_resloc(..) if no tracing performed "
2018/06/19 19:54:55 " olvo 980708 new n2l & 980921 changed interface "
2018/06/19 19:54:55 " old: write_assign_a(loc(),a_loc);"
2018/06/19 19:54:55 " = arg\n = res"
2018/06/19 19:54:55 "**************************************************************************\n                                                              DESTRUCTORS "
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 "**************************************************************************\n                                                                  HELPERS "
2018/06/19 19:54:55 "**************************************************************************\n                                                                   VALUE "
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 "**************************************************************************\n                                                              ASSIGNMENTS "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Assign an adouble variable a constant value. "
2018/06/19 19:54:55 " = res"
2018/06/19 19:54:55 " = res"
2018/06/19 19:54:55 " = res\n = coval"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Assign an adouble variable a constant value. "
2018/06/19 19:54:55 " call for late init"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Assign an adouble variable to an independent value. "
2018/06/19 19:54:55 " = res"
2018/06/19 19:54:55 " = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Assign a float variable from a dependent adouble value. "
2018/06/19 19:54:55 " = res"
2018/06/19 19:54:55 " = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Assign an Badouble variable an Badouble value. "
2018/06/19 19:54:55 " test this to avoid for x=x statements adjoint(x)=0 in reverse mode \n old:  write_assign_a(loc(),x.loc());"
2018/06/19 19:54:55 " = arg\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Assign an Badouble variable an Badouble value. "
2018/06/19 19:54:55 " call for late init"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Assign an adouble variable an adouble value. "
2018/06/19 19:54:55 " call for late init\n cal for late init"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Assign an adouble an adub \n olvo 980517 new version griewank "
2018/06/19 19:54:55 " 981020 olvo  skip upd_resloc(..) if no tracing performed "
2018/06/19 19:54:55 " olvo 980708 new n2l & 980921 changed interface "
2018/06/19 19:54:55 " old: write_assign_a(loc(),a_loc);"
2018/06/19 19:54:55 " = arg\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Assign an adouble an adub \n olvo 980517 new version griewank "
2018/06/19 19:54:55 " call for late init"
2018/06/19 19:54:55 "**************************************************************************\n                                                           INPUT / OUTPUT "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Output an adouble value !!! No tracing of this action "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Input adouble value "
2018/06/19 19:54:55 " old: write_assign_d(y.loc(),coval);"
2018/06/19 19:54:55 " = res"
2018/06/19 19:54:55 " = res"
2018/06/19 19:54:55 " = res\n = coval"
2018/06/19 19:54:55 "**************************************************************************\n                                                    INCREMENT / DECREMENT "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Postfix increment "
2018/06/19 19:54:55 " old: write_assign_a(locat,loc());"
2018/06/19 19:54:55 " = arg\n = res"
2018/06/19 19:54:55 " old: write_incr_decr_a(incr_a,loc());"
2018/06/19 19:54:55 " = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Postfix decrement "
2018/06/19 19:54:55 " old: write_assign_a(locat,loc());"
2018/06/19 19:54:55 " = arg\n = res"
2018/06/19 19:54:55 " old: write_incr_decr_a(decr_a,loc());"
2018/06/19 19:54:55 " = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Prefix increment "
2018/06/19 19:54:55 " old: write_incr_decr_a(incr_a,loc());"
2018/06/19 19:54:55 " = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Prefix decrement "
2018/06/19 19:54:55 " old: write_incr_decr_a(decr_a,loc());"
2018/06/19 19:54:55 " = res"
2018/06/19 19:54:55 "**************************************************************************\n                                                   OPERATION + ASSIGNMENT "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Adding a floating point to an adouble "
2018/06/19 19:54:55 " old: write_d_same_arg(eq_plus_d,loc(),coval);"
2018/06/19 19:54:55 " = res\n = coval"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Subtracting a floating point from an adouble "
2018/06/19 19:54:55 " old: write_d_same_arg(eq_min_d,loc(),coval);"
2018/06/19 19:54:55 " = res\n = coval"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Add an adouble to another adouble "
2018/06/19 19:54:55 " old: write_a_same_arg(eq_plus_a,loc(),y.loc());"
2018/06/19 19:54:55 " = arg\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n olvo 991122 new version for y += x1 * x2; "
2018/06/19 19:54:55 " old: write_assign_a(loc(),a_loc);"
2018/06/19 19:54:55 " = arg\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Subtract an adouble from another adouble "
2018/06/19 19:54:55 " old: write_a_same_arg(eq_min_a,loc(),y.loc());"
2018/06/19 19:54:55 " = arg\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n olvo 991122 new version for y -= x1 * x2; "
2018/06/19 19:54:55 " old: write_assign_a(loc(),a_loc);"
2018/06/19 19:54:55 " = arg\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Multiply an adouble by a floating point "
2018/06/19 19:54:55 " old: write_d_same_arg(eq_mult_d,loc(),coval);"
2018/06/19 19:54:55 " = res\n = coval"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Multiply one adouble by another adouble"
2018/06/19 19:54:55 " old: write_a_same_arg(eq_mult_a,loc(),y.loc());"
2018/06/19 19:54:55 " = arg\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 "**************************************************************************\n                                                               COMPARISON \n--------------------------------------------------------------------------\n   The Not Equal Operator (!=) "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n   The Equal Operator (==) "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n   The Less than or Equal Operator (<=)      "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n   The Greater than or Equal Operator (>=)      "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n   The Greater than Operator (>)      "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n   The Less than Operator (<)      "
2018/06/19 19:54:55 "**************************************************************************\n                                                          SIGN  OPERATORS "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n olvo 980709 modified positive sign operator\n   ??? possibly there is a better way "
2018/06/19 19:54:55 " old: write_pos_sign_a(locat,x.loc());"
2018/06/19 19:54:55 " = arg\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n olvo 980709 modified negative sign operator "
2018/06/19 19:54:55 " old: write_neg_sign_a(locat,x.loc());"
2018/06/19 19:54:55 " = arg\n = res"
2018/06/19 19:54:55 "**************************************************************************\n                                                         BINARY OPERATORS "
2018/06/19 19:54:55 " NOTE: each operator calculates address of temporary  and returns\n         an adub "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Adding two adoubles "
2018/06/19 19:54:55 " old: write_two_a_rec(plus_a_a,locat,x.loc(),y.loc());"
2018/06/19 19:54:55 " = arg1\n = arg2\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Adding a adouble and a floating point "
2018/06/19 19:54:55 " olvo 980708 test coval to be zero "
2018/06/19 19:54:55 " old: write_args_d_a(plus_d_a,locat,coval,y.loc());"
2018/06/19 19:54:55 " = arg\n = res\n = coval"
2018/06/19 19:54:55 " old: write_pos_sign_a(locat,y.loc());"
2018/06/19 19:54:55 " = arg\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 " olvo 980708 test coval to be zero "
2018/06/19 19:54:55 " old: write_args_d_a(plus_d_a,locat,coval,y.loc());"
2018/06/19 19:54:55 " = arg\n = res\n = coval"
2018/06/19 19:54:55 " old: write_pos_sign_a(locat,y.loc());"
2018/06/19 19:54:55 " = arg\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Subtraction of two adoubles "
2018/06/19 19:54:55 " old: write_two_a_rec(min_a_a,locat,x.loc(),y.loc());"
2018/06/19 19:54:55 " = arg1\n = arg2\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Subtract an adouble from a floating point "
2018/06/19 19:54:55 " olvo 980708 test coval to be zero "
2018/06/19 19:54:55 " old: write_args_d_a(min_d_a,locat,coval,y.loc());"
2018/06/19 19:54:55 " = arg\n = res\n = coval"
2018/06/19 19:54:55 " old: write_neg_sign_a(locat,y.loc());"
2018/06/19 19:54:55 " = arg\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Multiply two adoubles "
2018/06/19 19:54:55 " old: write_two_a_rec(mult_a_a,locat,x.loc(),y.loc());"
2018/06/19 19:54:55 " = arg1\n = arg2\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Multiply an adouble by a floating point \n olvo 980709 modified "
2018/06/19 19:54:55 " old: write_pos_sign_a(locat,y.loc());"
2018/06/19 19:54:55 " = arg\n = res"
2018/06/19 19:54:55 " old: write_neg_sign_a(locat,y.loc());"
2018/06/19 19:54:55 " = arg\n = res"
2018/06/19 19:54:55 " old: write_args_d_a(mult_d_a,locat,coval,y.loc());"
2018/06/19 19:54:55 " = arg\n = res\n = coval"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Divide an adouble by another adouble "
2018/06/19 19:54:55 " old: write_two_a_rec(div_a_a,locat,x.loc(),y.loc());"
2018/06/19 19:54:55 " = arg1\n = arg2\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Division floating point - adouble "
2018/06/19 19:54:55 " old: write_args_d_a(div_d_a,locat,coval,y.loc());"
2018/06/19 19:54:55 " = arg\n = res\n = coval"
2018/06/19 19:54:55 "**************************************************************************\n                                                        SINGLE OPERATIONS "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Compute exponential of adouble "
2018/06/19 19:54:55 " old: write_single_op(exp_op,locat,x.loc());"
2018/06/19 19:54:55 " = arg\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Compute logarithm of adouble "
2018/06/19 19:54:55 " old: write_single_op(log_op,locat,x.loc());"
2018/06/19 19:54:55 " = arg\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Compute sqrt of adouble "
2018/06/19 19:54:55 " old: write_single_op(sqrt_op,locat,x.loc());"
2018/06/19 19:54:55 " = arg\n = res"
2018/06/19 19:54:55 "**************************************************************************\n                                                          QUAD OPERATIONS "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Compute sin of adouble\n   !!! Sin and Cos are always evaluated together\n"
2018/06/19 19:54:55 " old: write_quad(sin_op,locat,x.loc(),y.loc());"
2018/06/19 19:54:55 " = arg1\n = arg2\n = res"
2018/06/19 19:54:55 " olvo 980921 changed order "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Compute cos of adouble "
2018/06/19 19:54:55 " old: write_quad(cos_op, locat,x.loc(),y.loc());"
2018/06/19 19:54:55 " = arg1\n = arg2\n = res"
2018/06/19 19:54:55 " olvo 980921 changed order "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Compute tan of adouble "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Asin value -- really a quadrature "
2018/06/19 19:54:55 " old:  write_quad(asin_op,locat,x.loc(),y.loc());"
2018/06/19 19:54:55 " = arg1\n = arg2\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Acos value -- really a quadrature "
2018/06/19 19:54:55 " old: write_quad(acos_op,locat,x.loc(),y.loc());"
2018/06/19 19:54:55 " = arg1\n = arg2\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Atan value -- really a quadrature "
2018/06/19 19:54:55 " old: write_quad(atan_op,locat,x.loc(),y.loc());"
2018/06/19 19:54:55 " = arg1\n = arg2\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 " y+0.0 is a hack since condassign is currently not defined for\n       badoubles "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n power value -- adouble ^ floating point "
2018/06/19 19:54:55 " old: write_args_d_a(pow_op,locat,cocval,x.loc());"
2018/06/19 19:54:55 " = arg\n = res\n = coval"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n power value --- floating point ^ adouble "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n power value --- adouble ^ adouble "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n log base 10 of an adouble "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Hyperbolic Sine of an adouble \n 981119 olvo changed as J.M. Aparicio suggested "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Hyperbolic Cosine of an adouble \n 981119 olvo changed as J.M. Aparicio suggested "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n\n  Hyperbolic Tangent of an adouble value.\n"
2018/06/19 19:54:55 " 981119 olvo changed as J.M. Aparicio suggested "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Ceiling function (NOTE: This function is nondifferentiable) "
2018/06/19 19:54:55 " old: write_args_d_a(ceil_op,locat,coval,x.loc());"
2018/06/19 19:54:55 " = arg\n = res\n = coval"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Floor function (NOTE: This function is nondifferentiable) "
2018/06/19 19:54:55 " old: write_args_d_a(floor_op,locat,coval,x.loc());"
2018/06/19 19:54:55 " = arg\n = res\n = coval"
2018/06/19 19:54:55 " NOTE: enable if your compiler knows asinh, acosh, atanh, erf "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Asinh value -- really a quadrature "
2018/06/19 19:54:55 " old: write_quad(asinh_op,locat,x.loc(),y.loc());"
2018/06/19 19:54:55 " = arg1\n = arg2\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Acosh value -- really a quadrature "
2018/06/19 19:54:55 " old: write_quad(acosh_op,locat,x.loc(),y.loc());"
2018/06/19 19:54:55 " = arg1\n = arg2\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Atanh value -- really a quadrature "
2018/06/19 19:54:55 " old: write_quad(atanh_op,locat,x.loc(),y.loc());"
2018/06/19 19:54:55 " = arg1\n = arg2\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n  The error function erf "
2018/06/19 19:54:55 " old: write_quad(erf_op,locat,x.loc(),y.loc());"
2018/06/19 19:54:55 " = arg1\n = arg2\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Fabs Function (NOTE: This function is also nondifferentiable at x=0) "
2018/06/19 19:54:55 "  write_args_d_a(abs_val,locat,coval,x.loc()); "
2018/06/19 19:54:55 " arg \n res \n coval "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n max and min functions  (changed : 11/15/95) \n olvo 980702 tested: return 0.5*fabs(x+y-fabs(x-y)); "
2018/06/19 19:54:55 " old: write_min_op(x.loc(),y.loc(),locat,0.0);"
2018/06/19 19:54:55 " = arg1\n = arg2\n = res\n = coval"
2018/06/19 19:54:55 " old: write_min_op(x.loc(),y.loc(),locat,1.0);"
2018/06/19 19:54:55 " = arg1\n = arg2\n = res\n = coval"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n21.8.96"
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n21.8.96"
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Ldexp Function "
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n Macro for user defined quadratures, example myquad is below.\n the forward sweep tests if the tape is executed exactly at  \n the same argument point otherwise it stops with a returnval "
2018/06/19 19:54:55 " This defines the natural logarithm as a quadrature "
2018/06/19 19:54:55 "**************************************************************************\n                                                             CONDITIONALS \n--------------------------------------------------------------------------"
2018/06/19 19:54:55 " arg\n arg1\n check for branch switch\n res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 " arg\n arg1\n check for branch switch\n res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 " arg\n arg1\n check for branch switch\n res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 " arg\n arg1\n check for branch switch\n res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 " arg\n arg1\n check for branch switch\n res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 " arg\n arg1\n check for branch switch\n res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------\n--------------------------------------------------------------------------"
2018/06/19 19:54:55 " old: write_condassign(res.loc(),cond.loc(),arg1.loc(),\n\t\t     arg2.loc());"
2018/06/19 19:54:55 " = arg"
2018/06/19 19:54:55 " = arg1\n = arg2\n = res"
2018/06/19 19:54:55 "--------------------------------------------------------------------------"
2018/06/19 19:54:55 " old: write_condassign2(res.loc(),cond.loc(),arg.loc());"
2018/06/19 19:54:55 " = arg"
2018/06/19 19:54:55 " = arg1\n = res"
2018/06/19 19:54:55 "**************************************************************************\n                                                                THAT'S ALL"
2018/06/19 19:54:55 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/adouble.cpp": 42.140505ms
2018/06/19 19:54:55 Couldn't classify license(s)
2018/06/19 19:54:56 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/indopro_forward_s.c
2018/06/19 19:54:56 detected language: 4
2018/06/19 19:54:56 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     int_forward_s.c\n Revision: $Id$\n Contents: int_forward (integer forward mode for bit pattern propagation)\n \n Copyright (c) Andrea Walther\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:56 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/indopro_forward_s.c": 6.170287ms
2018/06/19 19:54:56 Couldn't classify license(s)
2018/06/19 19:54:57 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/zos_pl_forward.c
2018/06/19 19:54:57 detected language: 4
2018/06/19 19:54:57 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     zos_an_forward.c\n Revision: $Id$\n Contents: zos_forward (zero-order-scalar abs-normal forward mode)\n\n Copyright (c) Kshitij Kulshreshtha\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n  \n----------------------------------------------------------------------------"
2018/06/19 19:54:57 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/zos_pl_forward.c": 6.211399ms
2018/06/19 19:54:57 Couldn't classify license(s)
2018/06/19 19:54:57 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/hos_reverse.c
2018/06/19 19:54:57 detected language: 4
2018/06/19 19:54:57 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     hos_reverse.c\n Revision: $Id$\n Contents: hos_reverse (higher-order-scalar reverse mode)\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:54:57 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/hos_reverse.c": 6.816928ms
2018/06/19 19:54:57 Couldn't classify license(s)
2018/06/19 19:54:58 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/Makefile.in
2018/06/19 19:54:58 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/Makefile.in": 120.228842ms
2018/06/19 19:54:58 Couldn't classify license(s)
2018/06/19 19:54:59 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/externfcts2.cpp
2018/06/19 19:54:59 detected language: 4
2018/06/19 19:54:59 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     externfcts2.cpp\n Revision: $Id$\n Contents: functions and data types for extern (differentiated) functions.\n\n Copyright (c) Kshitij Kulshreshtha\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes\n recipient's acceptance of the terms of the accompanying license file.\n\n----------------------------------------------------------------------------"
2018/06/19 19:54:59 "**************************************************************************\n                                    extern differentiated functions stuff "
2018/06/19 19:54:59 " sanity settings"
2018/06/19 19:54:59 " + nin*m_isz*p + nout*m_osz*p\n + q*nout*m_osz + q*nin*m_isz"
2018/06/19 19:54:59 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/externfcts2.cpp": 8.00324ms
2018/06/19 19:54:59 Couldn't classify license(s)
2018/06/19 19:55:00 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/rpl_malloc.c
2018/06/19 19:55:00 detected language: 4
2018/06/19 19:55:00 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     malloc.c\n Revision: $Id$\n Contents: malloc replacements for not gnu compatible malloc system functions\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:00 " HAVE_MALLOC == 0 \n HAVE_MALLOC "
2018/06/19 19:55:00 " HAVE_REALLOC == 0 \n HAVE_REALLOC \n ADOLC_INTERNAL "
2018/06/19 19:55:00 "* Allocate an n-byte block from the heap! n>=1\n     * If native malloc(0) returns an invalid pointer use the\n     * replacement-function instead.\n     "
2018/06/19 19:55:00 " ADOLC_NO_MALLOC "
2018/06/19 19:55:00 " ADOLC_NO_REALLOC "
2018/06/19 19:55:00 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/rpl_malloc.c": 7.654252ms
2018/06/19 19:55:00 Couldn't classify license(s)
2018/06/19 19:55:01 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/nonl_ind_old_forward_s.c
2018/06/19 19:55:01 detected language: 4
2018/06/19 19:55:01 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     nonl_ind_forward_s.c\n Revision: $Id$\n Contents: nonl_ind_forward_s (propagation of nonlinear index domains)\n \n Copyright (c) Andrea Walther, Kshitij Kulshreshtha\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:01 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/nonl_ind_old_forward_s.c": 6.748548ms
2018/06/19 19:55:01 Couldn't classify license(s)
2018/06/19 19:55:01 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/taping_p.h
2018/06/19 19:55:01 detected language: 4
2018/06/19 19:55:01 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     taping_p.h\n Revision: $Id$\n Contents: declarations for used by taping routines\n \n Copyright (c) Andreas Kowarz, Jean Utke\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n\n----------------------------------------------------------------------------"
2018/06/19 19:55:01 "**************************************************************************\n Tape identification (ADOLC & version check)                              \n**************************************************************************"
2018/06/19 19:55:01 "**************************************************************************\n tape types => used for file name generation                              \n**************************************************************************"
2018/06/19 19:55:01 "**************************************************************************\n Errors handled by fail(...)                                              \n**************************************************************************"
2018/06/19 19:55:01 " additional infos fail can work with "
2018/06/19 19:55:01 "**************************************************************************\n tape information                                                         \n**************************************************************************"
2018/06/19 19:55:01 " survive tape re-usage "
2018/06/19 19:55:01 " sparse Jacobian matrices "
2018/06/19 19:55:01 " sparse Hessian matrices "
2018/06/19 19:55:01 " file names "
2018/06/19 19:55:01 " - remember if tapes shall be written out to disk\n                     - this information can only be given at taping time and\n                       must survive all other actions on the tape "
2018/06/19 19:55:01 "*\n     * defaults to 0, if 1 skips file removal (when file operations are costly)\n     "
2018/06/19 19:55:01 "*\n * maximal number of locations writen per op code \n "
2018/06/19 19:55:01 " == 1 - write taylor stack in taping mode "
2018/06/19 19:55:01 " operations tape \n file descriptor \n pointer to the current tape buffer \n pointer to the current opcode \n pointer to element following the buffer \n overall number of opcodes \n overall number of eq_*_prod for nlf "
2018/06/19 19:55:01 " values (real) tape "
2018/06/19 19:55:01 " locations tape "
2018/06/19 19:55:01 " taylor stack tape "
2018/06/19 19:55:01 " the next Buffer to read back \n == 1 if last taylor buffer is still in\n                                            in core (first call of reverse) "
2018/06/19 19:55:01 " derivative buffer - forward \n degree to save and saved respectively \n # of independents for the taylor stack \n # of dependents for the taylor stack "
2018/06/19 19:55:01 " checkpointing \n location of the first ind. - forward mode \n location of the first dep. - forward mode \n location of the first ind. - reverse mode \n location of the first dep. - reverse mode \n index of the curr. cp function <- tape \n # of directions for **v_reverse (checkpointing) "
2018/06/19 19:55:01 " evaluation forward "
2018/06/19 19:55:01 "\n     * Taylor coefficient array  allocated like this:\n     * dpp_T[ADOLC_CURRENT_TAPE_INFOS.stats[NUM_MAX_LIVES][numTay*gDegree]\n     "
2018/06/19 19:55:01 " evaluation reverse "
2018/06/19 19:55:01 " extern diff. fcts \n set by forward and reverse (from tape) "
2018/06/19 19:55:01 " double store for calc. while taping "
2018/06/19 19:55:01 " Defaults to the value specified in \n usrparms.h. May be overwritten by values \n in a local config file .adolcrc. "
2018/06/19 19:55:01 " set to 1 if in an OpenMP parallel region \n signals: at least one tape created (0/1) "
2018/06/19 19:55:01 " _OPENMP "
2018/06/19 19:55:01 "**************************************************************************\n C Function interfaces                                                    \n**************************************************************************"
2018/06/19 19:55:01 " initializes a new tape\n * - returns 0 on success\n * - returns 1 in case tapeID is already/still in use "
2018/06/19 19:55:01 " opens an existing tape or creates a new one "
2018/06/19 19:55:01 " release the current tape and give control to the previous one\n * if keepVS is not zero (keep value stack for reverse) => belonging TapeInfos\n * are kept marked as being in use "
2018/06/19 19:55:01 " updates the tape infos for the given ID - a tapeInfos struct is created\n * and registered if non is found but its state will remain \"not in use\" "
2018/06/19 19:55:01 " updates the tape infos on sparse Jac for the given ID "
2018/06/19 19:55:01 " updates the tape infos n sparse Hess for the given ID "
2018/06/19 19:55:01 " record all existing adoubles on the tape\n * - intended to be used in start_trace only "
2018/06/19 19:55:01 " record all remaining live variables on the value stack tape\n * - turns off trace_flag\n * - intended to be used in stop_trace only "
2018/06/19 19:55:01 " returns the next free location in \"adouble\" memory "
2018/06/19 19:55:01 " frees the specified location in \"adouble\" memory "
2018/06/19 19:55:01 " set up statics for writing taylor data "
2018/06/19 19:55:01 " close taylor file if necessary and refill buffer if possible "
2018/06/19 19:55:01 " initializes a reverse sweep "
2018/06/19 19:55:01 " writes the block of size depth of taylor coefficients from point loc to\n * the taylor buffer, if the buffer is filled, then it is written to the\n * taylor tape "
2018/06/19 19:55:01 " writes the block of size depth of taylor coefficients from point loc to\n * the taylor buffer, if the buffer is filled, then it is written to the\n * taylor tape "
2018/06/19 19:55:01 " writes a single element (x) to the taylor buffer and writes the buffer to\n * disk if necessary "
2018/06/19 19:55:01 " write_scaylors writes # size elements from x to the taylor buffer "
2018/06/19 19:55:01 " overwrites the last (single) element (x) of the taylor buffer "
2018/06/19 19:55:01 " deletes the last (single) element (x) of the taylor buffer "
2018/06/19 19:55:01 " writes the taylor stack buffer onto hard disk "
2018/06/19 19:55:01 " puts a taylor value from the value stack buffer to the taylor buffer "
2018/06/19 19:55:01 " puts a block of taylor coefficients from the value stack buffer to the\n * taylor buffer --- Higher Order Scalar "
2018/06/19 19:55:01 " puts a block of taylor coefficients from the value stack buffer to the\n * taylor buffer --- Higher Order Vector "
2018/06/19 19:55:01 " gets the next (previous block) of the value stack "
2018/06/19 19:55:01 " free/allocate memory for buffers, initialize pointers "
2018/06/19 19:55:01 " initialization for the taping process -> buffer allocation, sets\n * files names, and calls appropriate setup routines "
2018/06/19 19:55:01 " stop Tracing, clean up, and turn off trace_flag "
2018/06/19 19:55:01 " close open tapes, update stats and clean up "
2018/06/19 19:55:01 " free all resources used by a tape before overwriting the tape "
2018/06/19 19:55:01 " does the actual reading from the hard disk into the stats buffer "
2018/06/19 19:55:01 " initialize a forward sweep, get stats, open tapes, fill buffers, ... "
2018/06/19 19:55:01 " initialize a reverse sweep, get stats, open tapes, fill buffers, ... "
2018/06/19 19:55:01 " finish a forward or reverse sweep "
2018/06/19 19:55:01 " outputs an appropriate error message using DIAG_OUT and exits the running\n * program "
2018/06/19 19:55:01 " print an error message describing the error number "
2018/06/19 19:55:01 " create file name depending on tape type and number "
2018/06/19 19:55:01 " puts an operation into the operation buffer, ensures that location buffer\n * and constants buffer are prepared to take the belonging stuff "
2018/06/19 19:55:01 " writes a block of operations onto hard disk and handles file creation,\n * removal, ... "
2018/06/19 19:55:01 " reads the next operations block into the internal buffer "
2018/06/19 19:55:01 " reads the previous block of operations into the internal buffer "
2018/06/19 19:55:01 " puts a single locations into the location buffer, no disk access "
2018/06/19 19:55:01 " writes a block of locations onto hard disk and handles file creation,\n * removal, ... "
2018/06/19 19:55:01 " reads the next block of locations into the internal buffer "
2018/06/19 19:55:01 " reads the previous block of locations into the internal buffer "
2018/06/19 19:55:01 " puts a single constant into the location buffer, no disk access "
2018/06/19 19:55:01 " fill the constants buffer and write it to disk "
2018/06/19 19:55:01 " write some constants to the buffer without disk access "
2018/06/19 19:55:01 " writes a block of constants (real) onto hard disk and handles file\n * creation, removal, ... "
2018/06/19 19:55:01 " reads the next block of constants into the internal buffer "
2018/06/19 19:55:01 " reads the previous block of constants into the internal buffer "
2018/06/19 19:55:01 " returns the number of free constants in the real tape, ensures that it\n * is at least 5 "
2018/06/19 19:55:01 " return a pointer to the first element of a constants vector\n * -- Forward Mode -- "
2018/06/19 19:55:01 " return a pointer to the first element of a constants vector\n * -- Reverse Mode -- "
2018/06/19 19:55:01 " suspicious function, maybe for vector class - kept for compatibility "
2018/06/19 19:55:01 " updates "
2018/06/19 19:55:01 " special IEEE values "
2018/06/19 19:55:01 "--------------------------------------------------------------------------\n                                                        MACRO or FUNCTION "
2018/06/19 19:55:01 " HARDDEBUG "
2018/06/19 19:55:01 " tries to read a local config file containing, e.g., buffer sizes "
2018/06/19 19:55:01 " clear the tapeBaseNames that were alocated above in readConfigFile() "
2018/06/19 19:55:01 "**************************************************************************\n This function sets the flag \"newTape\" if either a taylor buffer has been \n created or a taping process has been performed. Calling the function is  \n also useful to \"convince\" the linker of including the cleaner part into  \n the binary when linking statically!                                      \n**************************************************************************"
2018/06/19 19:55:01 "**************************************************************************\n Allows us to throw an exception instead of calling exit() in case of a   \n irrecoverable error                                                      \n**************************************************************************"
2018/06/19 19:55:01 "**************************************************************************\n Discards parameters from the end of value tape during reverse mode       \n**************************************************************************"
2018/06/19 19:55:01 "**************************************************************************\n Frees parameter indices after taping is complete                         \n**************************************************************************"
2018/06/19 19:55:01 "**************************************************************************\n That's all                                                               \n**************************************************************************"
2018/06/19 19:55:01 " ADOLC_TAPING_P_H "
2018/06/19 19:55:01 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/taping_p.h": 29.827361ms
2018/06/19 19:55:01 Couldn't classify license(s)
2018/06/19 19:55:02 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/int_reverse_s.c
2018/06/19 19:55:02 detected language: 4
2018/06/19 19:55:02 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     int_reverse_s.c\n Revision: $Id$\n Contents: int_reverse (integer reverse mode safe for bit pattern propagation)\n \n Copyright (c) Andrea Walther, Christo Mitev\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:02 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/int_reverse_s.c": 6.757485ms
2018/06/19 19:55:02 Couldn't classify license(s)
2018/06/19 19:55:03 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/hos_forward.c
2018/06/19 19:55:03 detected language: 4
2018/06/19 19:55:03 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     hos_forward.c\n Revision: $Id$\n Contents: hos_forward (higher-order-scalar forward mode)\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:03 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/hos_forward.c": 6.699317ms
2018/06/19 19:55:03 Couldn't classify license(s)
2018/06/19 19:55:04 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/ampisupportAdolc.cpp
2018/06/19 19:55:04 detected language: 4
2018/06/19 19:55:04 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     ampisupportAdolc.cpp\n Revision: $Id$\n\n Copyright (c) Jean Utke\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:04 " has to evenly divide or something is wrong"
2018/06/19 19:55:04 " compute the Taylor coefficients highest to lowest per direction"
2018/06/19 19:55:04 " do the convolution except for the 0-th coefficients"
2018/06/19 19:55:04 " do the 0-th coeffients"
2018/06/19 19:55:04 " set the coefficient"
2018/06/19 19:55:04 " compute the value"
2018/06/19 19:55:04 " advance to the next block"
2018/06/19 19:55:04 " dpp_T is set as &dp_T !"
2018/06/19 19:55:04 " root "
2018/06/19 19:55:04 " count again "
2018/06/19 19:55:04 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/ampisupportAdolc.cpp": 9.232427ms
2018/06/19 19:55:04 Couldn't classify license(s)
2018/06/19 19:55:04 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/externfcts_p.h
2018/06/19 19:55:04 detected language: 4
2018/06/19 19:55:04 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     externfcts_p.h\n Revision: $Id$\n Contents: private functions and data types for extern (differentiated)\n           functions.\n \n Copyright (c) Andreas Kowarz, Jean Utke\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n          \n----------------------------------------------------------------------------"
2018/06/19 19:55:04 "**************************************************************************\n                                                         Now the C THINGS "
2018/06/19 19:55:04 "**************************************************************************"
2018/06/19 19:55:04 " ADOLC_EXTERNFCTS_P_H "
2018/06/19 19:55:04 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/externfcts_p.h": 7.070225ms
2018/06/19 19:55:04 Couldn't classify license(s)
2018/06/19 19:55:05 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/convolut.c
2018/06/19 19:55:05 detected language: 4
2018/06/19 19:55:05 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     convolute.c\n Revision: $Id$\n Contents: Convolution routines (used by ho_rev.mc)\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:05 "**************************************************************************\n                                                              CONVOLUTION "
2018/06/19 19:55:05 "--------------------------------------------------------------------------\n Evaluates convolution of a and b to c "
2018/06/19 19:55:05 "**************************************************************************\n                                                  INCREMENTAL CONVOLUTION "
2018/06/19 19:55:05 "--------------------------------------------------------------------------\n Increments truncated convolution of a and b to c "
2018/06/19 19:55:05 "--------------------------------------------------------------------------\n olvo 980616 nf \n Increments truncated convolution of a and b to c and sets a to zero "
2018/06/19 19:55:05 "--------------------------------------------------------------------------\n olvo 980616 nf \n Increments truncated convolution of a and b to c "
2018/06/19 19:55:05 "**************************************************************************\n                                                  DECREMENTAL CONVOLUTION "
2018/06/19 19:55:05 "--------------------------------------------------------------------------\n Decrements truncated convolution of a and b to c "
2018/06/19 19:55:05 "--------------------------------------------------------------------------\n olvo 980616 nf \n Decrements truncated convolution of a and b to c and sets a to zero "
2018/06/19 19:55:05 "--------------------------------------------------------------------------\n Decrements truncated convolution of a and b to c "
2018/06/19 19:55:05 "--------------------------------------------------------------------------\n Decrements truncated convolution of a and b to c and sets a to zero "
2018/06/19 19:55:05 "**************************************************************************\n                                                    OTHER USEFUL ROUTINES "
2018/06/19 19:55:05 "--------------------------------------------------------------------------"
2018/06/19 19:55:05 "--------------------------------------------------------------------------"
2018/06/19 19:55:05 "**************************************************************************\n                                                                  ZEROING "
2018/06/19 19:55:05 "--------------------------------------------------------------------------\n Set a to zero "
2018/06/19 19:55:05 "--------------------------------------------------------------------------\n olvo 980616 nf \n Copies a to tmp and initializes a to zero "
2018/06/19 19:55:05 "**************************************************************************"
2018/06/19 19:55:05 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/convolut.c": 10.085446ms
2018/06/19 19:55:05 Couldn't classify license(s)
2018/06/19 19:55:06 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/nonl_ind_old_forward_t.c
2018/06/19 19:55:06 detected language: 4
2018/06/19 19:55:06 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     nonl_ind_forward_t.c\n Revision: $Id$\n Contents: nonl_ind_forward_t (propagation of nonlinear index domains)\n \n Copyright (c) Andrea Walther, Kshitij Kulshreshtha\n   \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:06 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/nonl_ind_old_forward_t.c": 6.504743ms
2018/06/19 19:55:06 Couldn't classify license(s)
2018/06/19 19:55:07 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/hov_forward.c
2018/06/19 19:55:07 detected language: 4
2018/06/19 19:55:07 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     hov_forward.c\n Revision: $Id$\n Contents: hov_forward (higher-order-vector forward mode)\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:07 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/hov_forward.c": 6.538903ms
2018/06/19 19:55:07 Couldn't classify license(s)
2018/06/19 19:55:08 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/adouble_tl.cpp
2018/06/19 19:55:08 detected language: 4
2018/06/19 19:55:08 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     adouble.cpp\n Revision: $Id$\n Contents: adouble_tl.cpp contains that definitions of procedures used to\n           define various tapeless adouble operations.\n           These operations actually have two purposes.\n           The first purpose is to actual compute the function, just as\n           the same code written for double precision (single precision -\n           complex - interval) arithmetic would.  The second purpose is\n           to compute directional derivatives in forward mode of \n\t   automatic differentiation.\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz,\n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel,\n               Benjamin Letschert\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes\n recipient's acceptance of the terms of the accompanying license file.\n\n----------------------------------------------------------------------------"
2018/06/19 19:55:08 "******************  i/o operations  **************************************"
2018/06/19 19:55:08 "*************** ADOLC_TRACELESS_SPARSE_PATTERN ***************************"
2018/06/19 19:55:08 "const_cast<adouble&>(b[i]).pattern.sort();\nconst_cast<adouble&>(b[i]).pattern.unique();"
2018/06/19 19:55:08 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/adouble_tl.cpp": 8.493922ms
2018/06/19 19:55:08 Couldn't classify license(s)
2018/06/19 19:55:08 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/int_forward_t.c
2018/06/19 19:55:08 detected language: 4
2018/06/19 19:55:08 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     int_forward_t.c\n Revision: $Id$\n Contents: int_forward (integer forward mode tight for bit pattern propagation)\n \n Copyright (c) Andrea Walther, Christo Mitev\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:08 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/int_forward_t.c": 6.321738ms
2018/06/19 19:55:08 Couldn't classify license(s)
2018/06/19 19:55:09 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/nonl_ind_forward_s.c
2018/06/19 19:55:09 detected language: 4
2018/06/19 19:55:09 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     nonl_ind_forward_s.c\n Revision: $Id$\n Contents: nonl_ind_forward_s (propagation of nonlinear index domains)\n \n Copyright (c) Andrea Walther\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:09 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/nonl_ind_forward_s.c": 6.647ms
2018/06/19 19:55:09 Couldn't classify license(s)
2018/06/19 19:55:10 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/indopro_forward_pl.c
2018/06/19 19:55:10 detected language: 4
2018/06/19 19:55:10 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     indopro_forward_pl.c\n Revision: $Id$\n Contents: indopro_forward_pl (index domains abs-normal forward mode)\n \n Copyright (c) Kshitij Kulshrestha\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:10 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/indopro_forward_pl.c": 7.59304ms
2018/06/19 19:55:10 Couldn't classify license(s)
2018/06/19 19:55:11 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/dvlparms.h
2018/06/19 19:55:11 detected language: 4
2018/06/19 19:55:11 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     dvlparms.h\n Revision: $Id$\n Contents: Developer parameters:\n           These parameters are intended for use by the developers and \n           maintainers of ADOL-C to specify library wide definitions.\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:11 "--------------------------------------------------------------------------\n Directory where tapes are created "
2018/06/19 19:55:11 " File names for the tapes "
2018/06/19 19:55:11 "--------------------------------------------------------------------------\n TAPE IDENTIFICATION (ADOLC & version check) "
2018/06/19 19:55:11 " NOTE: ADOLC_ID and stats must fit in statSpace locints required!         "
2018/06/19 19:55:11 "--------------------------------------------------------------------------\n ADOL-C configuration (never change this) "
2018/06/19 19:55:11 "--------------------------------------------------------------------------"
2018/06/19 19:55:11 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/dvlparms.h": 9.291363ms
2018/06/19 19:55:11 Couldn't classify license(s)
2018/06/19 19:55:12 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/checkpointing.cpp
2018/06/19 19:55:12 detected language: 4
2018/06/19 19:55:12 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     checkpointing.cpp\n Revision: $Id$\n Contents: checkpointing algorithms\n \n Copyright (c) Andreas Kowarz, Jean Utke\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:55:12 " field of pointers to the value fields of a checkpoint "
2018/06/19 19:55:12 " forward function declarations "
2018/06/19 19:55:12 " we do not really have an ext. diff. function that we want to be called "
2018/06/19 19:55:12 " register one time step function (uses buffer template) "
2018/06/19 19:55:12 " This is the main checkpointing function the user calls within the taping\n * process. It performs n time steps with or without taping and registers an\n * external dummy function which calls the actual checkpointing workhorses\n * from within the used drivers. "
2018/06/19 19:55:12 " knockout"
2018/06/19 19:55:12 " register extern function"
2018/06/19 19:55:12 " but we do not call it\n we use direct taping to avoid unnecessary argument copying"
2018/06/19 19:55:12 " this CpInfos id has to be read by the actual checkpointing\n functions"
2018/06/19 19:55:12 " initialize internal arguments"
2018/06/19 19:55:12 " perform all time steps, tape the last, take checkpoints"
2018/06/19 19:55:12 " perform all time steps without taping"
2018/06/19 19:55:12 " update taylor stack; same structure as in adouble.cpp +\n correction in taping.c"
2018/06/19 19:55:12 " save results"
2018/06/19 19:55:12 " normal taping again"
2018/06/19 19:55:12 " - reinit external function buffer and checkpointing buffer\n * - necessary when using tape within a different program "
2018/06/19 19:55:12 " initialize the CpInfos variable (function and index are set within\n * the template code "
2018/06/19 19:55:12 " initialize the information for the external function in a way that our\n * checkpointing functions are called "
2018/06/19 19:55:12 "**************************************************************************\n the following are the main checkpointing functions called by the         \n external differentiated function alogrithms                              \n**************************************************************************"
2018/06/19 19:55:12 " special case: use double version where possible, no taping "
2018/06/19 19:55:12 " taping off"
2018/06/19 19:55:12 " get checkpointing information"
2018/06/19 19:55:12 " note the mode"
2018/06/19 19:55:12 " prepare arguments"
2018/06/19 19:55:12 " write back\n keep input"
2018/06/19 19:55:12 " taping \"on\""
2018/06/19 19:55:12 " init revolve "
2018/06/19 19:55:12 " execute all time steps "
2018/06/19 19:55:12 " note the mode"
2018/06/19 19:55:12 " taping \"off\""
2018/06/19 19:55:12 " update taylor buffer"
2018/06/19 19:55:12 " execute second part of revolve_firstturn left from forward sweep"
2018/06/19 19:55:12 " checkpointing"
2018/06/19 19:55:12 " retaping forced"
2018/06/19 19:55:12 " one forward step with keep and retaping if necessary"
2018/06/19 19:55:12 " one reverse step"
2018/06/19 19:55:12 " release first checkpoint if written"
2018/06/19 19:55:12 " save results"
2018/06/19 19:55:12 " clean up"
2018/06/19 19:55:12 " taping \"on\""
2018/06/19 19:55:12 "unused\nunused"
2018/06/19 19:55:12 " note the mode"
2018/06/19 19:55:12 " taping \"off\""
2018/06/19 19:55:12 " update taylor buffer"
2018/06/19 19:55:12 " execute second part of revolve_firstturn left from forward sweep"
2018/06/19 19:55:12 " checkpointing"
2018/06/19 19:55:12 " retaping forced"
2018/06/19 19:55:12 " one forward step with keep and retaping if necessary"
2018/06/19 19:55:12 " one reverse step"
2018/06/19 19:55:12 " release first checkpoint if written"
2018/06/19 19:55:12 " save results"
2018/06/19 19:55:12 " clean up"
2018/06/19 19:55:12 " taping \"on\""
2018/06/19 19:55:12 "**************************************************************************\n                              functions for handling the checkpoint stack \n**************************************************************************"
2018/06/19 19:55:12 "**************************************************************************\n                                                   revolve error function \n**************************************************************************"
2018/06/19 19:55:12 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/checkpointing.cpp": 18.359061ms
2018/06/19 19:55:12 Couldn't classify license(s)
2018/06/19 19:55:12 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/fo_rev.c
2018/06/19 19:55:12 detected language: 4
2018/06/19 19:55:12 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     fo_rev.c\n Revision: $Id$\n Contents: Contains the routines :\n           fos_reverse (first-order-scalar reverse mode)  : define _FOS_\n           fov_reverse (first-order-vector reverse mode)  : define _FOV_\n           int_reverse_tight,\n                ( first-order-vector reverse mode for bit patterns,\n                  checks all dependences on taylors and real values,\n                  more precize) \n           int_reverse_safe,\n                ( first-order-vector reverse mode for bit patterns, \n                  return always 3, \n                  no dependences on taylors and real values,\n                  faster than tight) \n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel,\n               Kshitij Kulshreshtha\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n          \n----------------------------------------------------------------------------"
2018/06/19 19:55:12 "****************************************************************************\n \n  There are four basic versions of the procedure `reverse', which\n  are optimized for the cases of scalar or vector reverse sweeps\n  with first or higher derivatives, respectively. In the calling\n  sequence this distinction is apparent from the type of the\n  parameters `lagrange' and `results'. The former may be left out\n  and the integer parameters `depen', `indep', `degre', and `nrows'\n  must be set or default according to the following matrix of\n  calling cases. \n \n           no lagrange         double* lagrange     double** lagrange\n \ndouble*   gradient of scalar   weight vector times    infeasible \nresults   valued function      Jacobian product       combination\n \n          ( depen = 1 ,         ( depen > 0 ,         \n\t    degre = 0 ,           degre = 0 ,              ------\n\t    nrows = 1 )           nrows = 1 )\n \ndouble**  Jacobian of vector   weight vector times     weight matrix\nresults   valued function      Taylor-Jacobians        times Jacobian\n           \n\t  ( 0 < depen           ( depen > 0 ,          ( depen > 0 ,\n\t      = nrows ,           degre > 0 ,            degre = 0 ,\n\t    degre = 0 )           nrows = 1 )            nrows > 0 )\n \ndouble*** full family of         ------------          weigth matrix x\nresults   Taylor-Jacobians       ------------          Taylor Jacobians\n \n****************************************************************************"
2018/06/19 19:55:12 "**************************************************************************\n                                                                   MACROS "
2018/06/19 19:55:12 "--------------------------------------------------------------------------"
2018/06/19 19:55:12 "--------------------------------------------------------------------------"
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n                                                     access to variables  "
2018/06/19 19:55:12 " _FOV_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n                                                              loop stuff  "
2018/06/19 19:55:12 " END Macros "
2018/06/19 19:55:12 "**************************************************************************\n                                                       NECESSARY INCLUDES "
2018/06/19 19:55:12 "**************************************************************************\n                                                             NOW THE CODE "
2018/06/19 19:55:12 "**************************************************************************\n First-Order Scalar Reverse Pass.                                         \n**************************************************************************"
2018/06/19 19:55:12 "**************************************************************************\n Abs-Normal extended adjoint row computation.                             \n**************************************************************************\n tape id \n consistency chk on # of deps \n consistency chk on # of indeps \n consistency chk on # of switches \n required row no. of abs-normal form \n  coefficient vectors "
2018/06/19 19:55:12 "**************************************************************************\n Abs-Normal extended adjoint row computation.                             \n**************************************************************************\n tape id \n consistency chk on # of deps \n consistency chk on # of indeps \n consistency chk on # of switches "
2018/06/19 19:55:12 "  coefficient vectors "
2018/06/19 19:55:12 " tape id \n consistency chk on # of deps \n consistency chk on # of indeps "
2018/06/19 19:55:12 "  coefficient vectors "
2018/06/19 19:55:12 "**************************************************************************\n First-Order Vector Reverse Pass.                                         \n**************************************************************************"
2018/06/19 19:55:12 " tape id \n consistency chk on # of deps \n consistency chk on # of indeps \n # of Jacobian rows being calculated \n domain weight vector \n matrix of coefficient vectors "
2018/06/19 19:55:12 "**************************************************************************\n First Order Vector version of the reverse mode for bit patterns, tight   \n**************************************************************************"
2018/06/19 19:55:12 " tape id                               \n consistency chk on # of deps          \n consistency chk on # of indeps        \n # of Jacobian rows being calculated   \n domain weight vector[var][row](in)\n matrix of coeff. vectors[var][row]"
2018/06/19 19:55:12 "**************************************************************************\n First Order Vector version of the reverse mode, bit pattern, safe        \n**************************************************************************"
2018/06/19 19:55:12 " tape id                               \n consistency chk on # of deps          \n consistency chk on # of indeps        \n # of Jacobian rows being calculated   \n domain weight vector[var][row](in)\n matrix of coeff. vectors[var][row]"
2018/06/19 19:55:12 "**************************************************************************\n                                                           ALL VARIABLES  \n operation code \n return value "
2018/06/19 19:55:12 " loop indices "
2018/06/19 19:55:12 " other necessary variables "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n Adjoint stuff "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------"
2018/06/19 19:55:12 "**************************************************************************\n                                          extern diff. function variables "
2018/06/19 19:55:12 "**************************************************************************\n                                                           DEBUG MESSAGES "
2018/06/19 19:55:12 "**************************************************************************\n                                                                    INITs "
2018/06/19 19:55:12 "------------------------------------------------------------------------\n Set up stuff for the tape "
2018/06/19 19:55:12 " Initialize the Reverse Sweep "
2018/06/19 19:55:12 "**************************************************************************\n                                                  MEMORY ALLOCATION STUFF "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n FOS "
2018/06/19 19:55:12 "--------------------------------------------------------------------------"
2018/06/19 19:55:12 " FOV "
2018/06/19 19:55:12 "**************************************************************************\n                                                    TAYLOR INITIALIZATION "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "**************************************************************************\n                                                            REVERSE SWEEP "
2018/06/19 19:55:12 " Switch statement to execute the operations in Reverse "
2018/06/19 19:55:12 "**************************************************************************\n                                                                  MARKERS "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n end_of_op "
2018/06/19 19:55:12 " Skip next operation, it's another end_of_op "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n end_of_int \n Get the next int block "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n end_of_val \n Get the next val block "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n start_of_tape "
2018/06/19 19:55:12 " end_of_tape "
2018/06/19 19:55:12 "**************************************************************************\n                                                               COMPARISON "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n eq_zero "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n neq_zero \n gt_zero \n lt_zero "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n ge_zero \n le_zero "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "**************************************************************************\n                                                              ASSIGNMENTS "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n assign an adouble variable an    assign_a \n adouble value. (=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n assign an adouble variable a    assign_d \n double value. (=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------"
2018/06/19 19:55:12 " assign an adouble variable a    assign_d \n double value. (=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n assign an adouble variable a    assign_d_zero \n double value (0 or 1). (=)       assign_d_one "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n assign an adouble variable an    assign_ind \n independent double value (<<=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n assign a float variable a    assign_dep \n dependent adouble value. (>>=) "
2018/06/19 19:55:12 "**************************************************************************\n                                                   OPERATION + ASSIGNMENT "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n Add a floating point to an    eq_plus_d \n adouble. (+=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n Add a floating point to an    eq_plus_d \n adouble. (+=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n Add an adouble to another    eq_plus_a \n adouble. (+=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n Subtract a floating point from an    eq_min_d \n adouble. (-=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n Subtract a floating point from an    eq_min_d \n adouble. (-=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n Subtract an adouble from another    eq_min_a \n adouble. (-=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n Multiply an adouble by a    eq_mult_d \n flaoting point. (*=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n Multiply an adouble by a    eq_mult_p \n flaoting point. (*=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n Multiply one adouble by another    eq_mult_a \n (*=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " olvo 980713 nn: ARES = 0.0; "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n Increment an adouble    incr_a \n Increment an adouble    decr_a "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "**************************************************************************\n                                                        BINARY OPERATIONS "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n : Add two adoubles. (+)    plus a_a "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n Add an adouble and a double    plus_d_a \n (+) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n Add an adouble and a double    plus_a_p \n Subtract an adouble from a    min_d_a \n (+) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n Subtraction of two adoubles    min_a_a \n (-) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n Subtract an adouble from a    min_d_a \n double (-) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n Multiply two adoubles (*)    mult_a_a "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n olvo 991122: new op_code with recomputation \n increment a product of           eq_plus_prod \n two adoubles (*) "
2018/06/19 19:55:12 " RECOMPUTATION "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n olvo 991122: new op_code with recomputation \n decrement a product of            eq_min_prod \n two adoubles (*) "
2018/06/19 19:55:12 " RECOMPUTATION "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n Multiply an adouble by a double    mult_d_a \n (*) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n Multiply an adouble by a double    mult_a_p \n (*) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n Divide an adouble by an adouble    div_a_a \n (/) "
2018/06/19 19:55:12 " olvo 980922 changed order to allow x=y/x "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n Division double - adouble (/)    div_d_a "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " olvo 980922 changed order to allow x=d/x "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "**************************************************************************\n Division double - adouble (/)    div_p_a "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " olvo 980922 changed order to allow x=d/x "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "**************************************************************************\n                                                         SIGN  OPERATIONS "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n pos_sign_a "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n neg_sign_a "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "**************************************************************************\n                                                         UNARY OPERATIONS "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n exponent operation    exp_op "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n sine operation    sin_op "
2018/06/19 19:55:12 " olvo 980710 covalue \n NOTE: ADJOINT_BUFFER[arg2] should be 0 already \n !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n cosine operation    cos_op "
2018/06/19 19:55:12 " olvo 980710 covalue \n NOTE ADJOINT_BUFFER[arg2] should be 0 already \n !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n atan_op  \n asin_op  \n acos_op  \n asinh_op \n acosh_op \n atanh_op \n erf_op   "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n log_op "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n pow_op "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " olvo 980921 changed order to allow x=pow(x,n) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n pow_op_p "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " olvo 980921 changed order to allow x=pow(x,n) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n sqrt_op "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n gen_quad "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n min_op "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " both are equal "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n abs_val "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ \n _ABS_NORM "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n ceil_op "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n floor_op "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "**************************************************************************\n                                                             CONDITIONALS "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n cond_assign "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " olvo 980924 changed code a little bit "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n cond_assign_s "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " olvo 980924 changed code a little bit "
2018/06/19 19:55:12 " we are at the tie "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n NEW CONDITIONALS \n--------------------------------------------------------------------------"
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------"
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "\n\t\t     * This is actually NOP\n                     * basically all we need is that arg1 == vectorloc+idx\n                     * so doing a check here is probably good\n                     "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " Increment an adouble    incr_a \n Increment an adouble    decr_a "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " assign an adouble variable a    assign_d \n double value. (=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " assign an adouble variable a    assign_p "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " assign an adouble variable a    assign_d_zero \n double value (0 or 1). (=)       assign_d_one "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " assign an adouble variable an    assign_a \n adouble value. (=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " assign an adouble variable an    assign_ind \n independent double value (<<=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " Add a floating point to an    eq_plus_d \n adouble. (+=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " Add a floating point to an    eq_plus_d \n adouble. (+=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " Add an adouble to another    eq_plus_a \n adouble. (+=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " Subtract a floating point from an    eq_min_d \n adouble. (-=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " Subtract a floating point from an    eq_min_p \n adouble. (-=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " Subtract an adouble from another    eq_min_a \n adouble. (-=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " Multiply an adouble by a    eq_mult_d \n flaoting point. (*=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " Multiply an adouble by a    eq_mult_p \n flaoting point. (*=) "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " Multiply one adouble by another    eq_mult_a \n (*=) "
2018/06/19 19:55:12 " olvo 980713 nn: ARES = 0.0; "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " cond_assign "
2018/06/19 19:55:12 " olvo 980924 changed code a little bit "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 " cond_assign_s "
2018/06/19 19:55:12 " olvo 980924 changed code a little bit "
2018/06/19 19:55:12 " we are at the tie "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "**************************************************************************\n                                                          REMAINING STUFF "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n take_stock_op "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n death_not "
2018/06/19 19:55:12 " !_NTIGHT_ "
2018/06/19 19:55:12 "--------------------------------------------------------------------------\n extern differntiated function "
2018/06/19 19:55:12 " \\bar{v}_i = 0 !!! "
2018/06/19 19:55:12 " extern differntiated function "
2018/06/19 19:55:12 " get it again "
2018/06/19 19:55:12 " \\bar{v}_i = 0 !!! "
2018/06/19 19:55:12 " nout again \n nin again "
2018/06/19 19:55:12 " iArrLength again "
2018/06/19 19:55:12 " \\bar{v}_i = 0 !!! "
2018/06/19 19:55:12 "--------------------------------------------------------------------------"
2018/06/19 19:55:12 " !_INT_REV_ \n--------------------------------------------------------------------------\n default \n             Die here, we screwed up     "
2018/06/19 19:55:12 " endswitch "
2018/06/19 19:55:12 " Get the next operation "
2018/06/19 19:55:12 " endwhile "
2018/06/19 19:55:12 " clean up "
2018/06/19 19:55:12 "**************************************************************************\n                                                               THAT'S ALL "
2018/06/19 19:55:12 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/fo_rev.c": 61.643616ms
2018/06/19 19:55:12 Couldn't classify license(s)
2018/06/19 19:55:13 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/ho_rev.c
2018/06/19 19:55:13 detected language: 4
2018/06/19 19:55:13 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     ho_rev.c\n Revision: $Id$\n Contents: Contains the routines :\n           hos_reverse (higher-order-scalar reverse mode): \n              define _HOS_\n           hos_ov_reverse (higher-order-scalar reverse mode on vectors): \n              define _HOS_OV_\n           hov_reverse (higher-order-vector reverse mode): \n              define _HOV_\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel,\n               Kshitij Kulshreshtha\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n  \n----------------------------------------------------------------------------"
2018/06/19 19:55:13 "****************************************************************************\n \n  There are four basic versions of the procedure `reverse', which\n  are optimized for the cases of scalar or vector reverse sweeps\n  with first or higher derivatives, respectively. In the calling\n  sequence this distinction is apparent from the type of the\n  parameters `lagrange' and `results'. The former may be left out\n  and the integer parameters `depen', `indep', `degre', and `nrows'\n  must be set or default according to the following matrix of\n  calling cases. \n \n           no lagrange         double* lagrange     double** lagrange\n \ndouble*   gradient of scalar   weight vector times    infeasible \nresults   valued function      Jacobian product       combination\n \n          ( depen = 1 ,         ( depen > 0 ,         \n\t    degre = 0 ,           degre = 0 ,              ------\n\t    nrows = 1 )           nrows = 1 )\n \ndouble**  Jacobian of vector   weight vector times     weight matrix\nresults   valued function      Taylor-Jacobians        times Jacobian\n           \n\t  ( 0 < depen           ( depen > 0 ,          ( depen > 0 ,\n\t      = nrows ,           degre > 0 ,            degre = 0 ,\n\t    degre = 0 )           nrows = 1 )            nrows > 0 )\n \ndouble*** full family of         ------------          weigth matrix x\nresults   Taylor-Jacobians       ------------          Taylor Jacobians\n \n****************************************************************************"
2018/06/19 19:55:13 "**************************************************************************\n                                                                   MACROS "
2018/06/19 19:55:13 "--------------------------------------------------------------------------"
2018/06/19 19:55:13 "--------------------------------------------------------------------------"
2018/06/19 19:55:13 "--------------------------------------------------------------------------"
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n                                                     access to variables  "
2018/06/19 19:55:13 " why?, not in fo_rev.c ? "
2018/06/19 19:55:13 " _FOV_, _HOS_, _HOV_ "
2018/06/19 19:55:13 " why ? not used here "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n                                                              loop stuff  "
2018/06/19 19:55:13 " why ? not used here "
2018/06/19 19:55:13 " why ? not used here "
2018/06/19 19:55:13 " why ? not used here "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n                                                         VEC_COMPUTED_* "
2018/06/19 19:55:13 " END Macros "
2018/06/19 19:55:13 "**************************************************************************\n                                                       NECESSARY INCLUDES "
2018/06/19 19:55:13 " ADOLC_DEBUG "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n                                                   Local Static Variables "
2018/06/19 19:55:13 "*************************************************************************\n Higher Order Scalar Reverse Pass.                                       \n*************************************************************************\n tape id \n consistency chk on # of deps \n consistency chk on # of indeps \n highest derivative degre  \n range weight vector       \n matrix of coefficient vectors "
2018/06/19 19:55:13 " tape id \n consistency chk on # of deps \n consistency chk on # of indeps \n highest derivative degre  \n range weight vectors       \n matrix of coefficient vectors "
2018/06/19 19:55:13 "*************************************************************************\n Higher Order Scalar Reverse Pass, Vector Keep.                          \n*************************************************************************\n tape id \n consistency chk on # of deps \n consistency chk on # of indeps \n highest derivative degre  \n # of Jacobian rows calculated \n range weight vector       \n matrix of coefficient vectors "
2018/06/19 19:55:13 "*************************************************************************\n Higher Order Vector Reverse Pass.                                       \n*************************************************************************\n tape id \n consistency chk on # of deps \n consistency chk on # of indeps \n highest derivative degre \n # of Jacobian rows calculated \n domain weight vector \n matrix of coefficient vectors \n structural sparsity  pattern  "
2018/06/19 19:55:13 " tape id \n consistency chk on # of deps \n consistency chk on # of indeps \n highest derivative degre \n # of Jacobian rows calculated \n domain weight vectors \n matrix of coefficient vectors \n structural sparsity  pattern  "
2018/06/19 19:55:13 "**********************************************************************\n                                                       ALL VARIABLES  \n operation code "
2018/06/19 19:55:13 " loop indices "
2018/06/19 19:55:13 " other necessary variables "
2018/06/19 19:55:13 "----------------------------------------------------------------------\n Taylor stuff "
2018/06/19 19:55:13 "----------------------------------------------------------------------\n Adjoint stuff "
2018/06/19 19:55:13 "----------------------------------------------------------------------"
2018/06/19 19:55:13 "**********************************************************************\n                                                       DEBUG MESSAGES "
2018/06/19 19:55:13 "**********************************************************************\n                                                                INITs "
2018/06/19 19:55:13 "----------------------------------------------------------------------\n Set up stuff for the tape "
2018/06/19 19:55:13 " Initialize the Reverse Sweep "
2018/06/19 19:55:13 "**********************************************************************\n                                              MEMORY ALLOCATION STUFF "
2018/06/19 19:55:13 "----------------------------------------------------------------------\n HOS "
2018/06/19 19:55:13 "----------------------------------------------------------------------\n HOV "
2018/06/19 19:55:13 "----------------------------------------------------------------------\n HOS_OV "
2018/06/19 19:55:13 "**********************************************************************\n                                                TAYLOR INITIALIZATION "
2018/06/19 19:55:13 "**********************************************************************\n                                                        REVERSE SWEEP "
2018/06/19 19:55:13 " ADOLC_DEBUG "
2018/06/19 19:55:13 " ADOLC_DEBUG "
2018/06/19 19:55:13 " Switch statement to execute the operations in Reverse "
2018/06/19 19:55:13 "**********************************************************\n                                                  MARKERS "
2018/06/19 19:55:13 "----------------------------------------------------------\n end_of_op "
2018/06/19 19:55:13 " Skip next operation, it's another end_of_op "
2018/06/19 19:55:13 "----------------------------------------------------------\n end_of_int \n Get the next int block "
2018/06/19 19:55:13 "----------------------------------------------------------\n end_of_val \n Get the next val block "
2018/06/19 19:55:13 "----------------------------------------------------------\n start_of_tape "
2018/06/19 19:55:13 " end_of_tape "
2018/06/19 19:55:13 "**********************************************************\n                                               COMPARISON "
2018/06/19 19:55:13 "----------------------------------------------------------\n eq_zero "
2018/06/19 19:55:13 "----------------------------------------------------------\n neq_zero \n gt_zero \n lt_zero "
2018/06/19 19:55:13 "----------------------------------------------------------\n ge_zero \n le_zero "
2018/06/19 19:55:13 "**********************************************************\n                                              ASSIGNMENTS "
2018/06/19 19:55:13 "----------------------------------------------------------\n assign an adouble variable an    assign_a \n adouble value. (=) "
2018/06/19 19:55:13 " ! no tempory "
2018/06/19 19:55:13 "----------------------------------------------------------\n assign an adouble variable a    assign_d \n double value. (=) "
2018/06/19 19:55:13 "----------------------------------------------------------"
2018/06/19 19:55:13 " assign an adouble variable a    assign_d \n double value. (=) "
2018/06/19 19:55:13 "----------------------------------------------------------\n assign an adouble a        assign_d_zero \n double value. (=)           assign_d_one "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n assign an adouble variable an    assign_ind \n independent double value (<<=) "
2018/06/19 19:55:13 " ??? question: why here? "
2018/06/19 19:55:13 " _HOV_ "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n assign a float variable a    assign_dep \n dependent adouble value. (>>=) "
2018/06/19 19:55:13 " just a helpful pointers "
2018/06/19 19:55:13 "**************************************************************************\n                                                   OPERATION + ASSIGNMENT "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n Add a floating point to an    eq_plus_d \n adouble. (+=) "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n Add a floating point to an    eq_plus_p \n adouble. (+=) "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n Add an adouble to another    eq_plus_a \n adouble. (+=) "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n Subtract a floating point from an    eq_min_d \n adouble. (-=) "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n Subtract a floating point from an    eq_min_p \n adouble. (-=) "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n Subtract an adouble from another    eq_min_a \n adouble. (-=) "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n Multiply an adouble by a    eq_mult_d \n flaoting point. (*=) "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n Multiply an adouble by a    eq_mult_p \n flaoting point. (*=) "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n Multiply one adouble by another    eq_mult_a \n (*=) "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n Increment an adouble    incr_a \n Increment an adouble    decr_a "
2018/06/19 19:55:13 "**************************************************************************\n                                                        BINARY OPERATIONS "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n : Add two adoubles. (+)    plus a_a "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n Add an adouble and a double    plus_a_p \n Subtract an adouble from a    min_a_p \n (+) "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n Add an adouble and a double    plus_d_a \n (+) "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n Subtraction of two adoubles    min_a_a \n (-) "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n Subtract an adouble from a    min_d_a \n double (-) "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n Multiply two adoubles (*)    mult_a_a "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n olvo 991122: new op_code with recomputation \n increment a product of           eq_plus_prod \n two adoubles (*) "
2018/06/19 19:55:13 " RECOMPUTATION "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n olvo 991122: new op_code with recomputation \n decrement a product of             eq_min_prod \n two adoubles (*) "
2018/06/19 19:55:13 " RECOMPUTATION "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n Multiply an adouble by a double    mult_d_a \n (*) "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n Multiply an adouble by a double    mult_a_p \n (*) "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n Divide an adouble by an adouble    div_a_a \n (/) "
2018/06/19 19:55:13 " olvo 980922 allows reflexive operation "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n Division double - adouble (/)    div_d_a "
2018/06/19 19:55:13 " olvo 980922 allows reflexive operation "
2018/06/19 19:55:13 "**************************************************************************\n Division double - adouble (/)    div_p_a "
2018/06/19 19:55:13 " olvo 980922 allows reflexive operation "
2018/06/19 19:55:13 "**************************************************************************\n                                                         SIGN  OPERATIONS "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n pos_sign_a "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n neg_sign_a "
2018/06/19 19:55:13 "**************************************************************************\n                                                         UNARY OPERATIONS "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n exponent operation    exp_op "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n sine operation    sin_op "
2018/06/19 19:55:13 " olvo 980710 covalue \n NOTE: rpp_A[arg2] should be 0 already "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n cosine operation    cos_op "
2018/06/19 19:55:13 " olvo 980710 covalue \n NOTE: rpp_A[arg2] should be 0 already "
2018/06/19 19:55:13 "xxx\n--------------------------------------------------------------------------\n atan_op  \n asin_op  \n acos_op  \n asinh_op \n acosh_op \n atanh_op \n erf_op   "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n log_op "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n pow_op "
2018/06/19 19:55:13 " olvo 980921 allows reflexive operation "
2018/06/19 19:55:13 "                 printf(\" EPS i %d %f\\n\",i,rp_Ttemp[i]); "
2018/06/19 19:55:13 " coval not a whole number "
2018/06/19 19:55:13 " ! no tempory "
2018/06/19 19:55:13 " coval is an int > 1 \n the following is not efficient but at least it works \n it reformulates x^n into x* ... *x n times "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n pow_op_p "
2018/06/19 19:55:13 " olvo 980921 allows reflexive operation "
2018/06/19 19:55:13 "                 printf(\" EPS i %d %f\\n\",i,rp_Ttemp[i]); "
2018/06/19 19:55:13 " coval not a whole number "
2018/06/19 19:55:13 " ! no tempory "
2018/06/19 19:55:13 " coval is an int > 1 \n the following is not efficient but at least it works \n it reformulates x^n into x* ... *x n times "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n sqrt_op "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n gen_quad "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n min_op "
2018/06/19 19:55:13 " both are equal \n must be changed for hos_ov, but how? \n seems to influence the return value "
2018/06/19 19:55:13 " we are at the tie "
2018/06/19 19:55:13 " both are identical "
2018/06/19 19:55:13 "assume sthg like fmin(x,x) "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n abs_val "
2018/06/19 19:55:13 " must be changed for hos_ov, but how? \n seems to influence the return value  "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n ceil_op "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n floor_op "
2018/06/19 19:55:13 "**************************************************************************\n                                                             CONDITIONALS "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n cond_assign "
2018/06/19 19:55:13 " olvo 980925 changed code a little bit "
2018/06/19 19:55:13 " TARG <= 0.0 "
2018/06/19 19:55:13 " we are at the tie "
2018/06/19 19:55:13 " we are at the tie "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n cond_assign_s "
2018/06/19 19:55:13 " olvo 980925 changed code a little bit \n we are at the tie "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n NEW CONDITIONALS \n--------------------------------------------------------------------------"
2018/06/19 19:55:13 "--------------------------------------------------------------------------"
2018/06/19 19:55:13 "\n\t\t     * This is actually NOP\n                     * basically all we need is that arg1 == vectorloc[idx]\n                     * so doing a check here is probably good\n                     "
2018/06/19 19:55:13 " Increment an adouble    incr_a \n Increment an adouble    decr_a "
2018/06/19 19:55:13 " assign an adouble variable a    assign_d \n double value. (=) "
2018/06/19 19:55:13 " fallthrough \n assign an adouble a        assign_d_zero \n double value. (=)           assign_d_one "
2018/06/19 19:55:13 " assign an adouble variable an    assign_a \n adouble value. (=) "
2018/06/19 19:55:13 " ! no tempory "
2018/06/19 19:55:13 " assign an adouble variable an    assign_ind \n independent double value (<<=) "
2018/06/19 19:55:13 " ??? question: why here? "
2018/06/19 19:55:13 " _HOV_ "
2018/06/19 19:55:13 " Add a floating point to an    eq_plus_d \n adouble. (+=) "
2018/06/19 19:55:13 " Add a floating point to an    eq_plus_d \n adouble. (+=) "
2018/06/19 19:55:13 " Add an adouble to another    eq_plus_a \n adouble. (+=) "
2018/06/19 19:55:13 " Subtract a floating point from an    eq_min_d \n adouble. (-=) "
2018/06/19 19:55:13 " Add a floating point to an    eq_min_d \n adouble. (-=) "
2018/06/19 19:55:13 " Subtract an adouble from another    eq_min_a \n adouble. (-=) "
2018/06/19 19:55:13 " Multiply an adouble by a    eq_mult_d \n flaoting point. (*=) "
2018/06/19 19:55:13 " Multiply an adouble by a    eq_mult_p \n flaoting point. (*=) "
2018/06/19 19:55:13 " Multiply one adouble by another    eq_mult_a \n (*=) "
2018/06/19 19:55:13 " ! no tempory "
2018/06/19 19:55:13 " cond_assign "
2018/06/19 19:55:13 " olvo 980925 changed code a little bit "
2018/06/19 19:55:13 " TARG <= 0.0 "
2018/06/19 19:55:13 " we are at the tie "
2018/06/19 19:55:13 " we are at the tie "
2018/06/19 19:55:13 " cond_assign_s "
2018/06/19 19:55:13 " olvo 980925 changed code a little bit \n we are at the tie "
2018/06/19 19:55:13 "**************************************************************************\n                                                          REMAINING STUFF "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n take_stock_op "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n death_not "
2018/06/19 19:55:13 "--------------------------------------------------------------------------\n default \n             Die here, we screwed up     "
2018/06/19 19:55:13 " endswitch "
2018/06/19 19:55:13 " Get the next operation "
2018/06/19 19:55:13 " ADOLC_DEBUG "
2018/06/19 19:55:13 " ADOLC_DEBUG "
2018/06/19 19:55:13 " clean up "
2018/06/19 19:55:13 "**************************************************************************\n                                                               THAT'S ALL "
2018/06/19 19:55:13 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/ho_rev.c": 49.122063ms
2018/06/19 19:55:13 Couldn't classify license(s)
2018/06/19 19:55:14 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/param.cpp
2018/06/19 19:55:14 detected language: 4
2018/06/19 19:55:14 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     param.cpp\n Revision: $Id$\n Contents: class for parameter dependent functions\n \n Copyright (c) Kshitij Kulshreshtha\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n\n----------------------------------------------------------------------------"
2018/06/19 19:55:14 " old: write_d_same_arg(eq_min_d,loc(),coval);"
2018/06/19 19:55:14 " old: write_d_same_arg(eq_min_d,location,coval);"
2018/06/19 19:55:14 " old: write_d_same_arg(eq_mult_d,loc(),coval);"
2018/06/19 19:55:14 " = res\n = coval"
2018/06/19 19:55:14 " old: write_d_same_arg(eq_mult_d,location,coval);"
2018/06/19 19:55:14 " olvo 980708 test coval to be zero \n old: write_args_d_a(plus_d_a,locat,coval,y.loc());"
2018/06/19 19:55:14 " olvo 980708 test coval to be zero \n old: write_args_d_a(plus_d_a,locat,coval,y.loc());"
2018/06/19 19:55:14 " olvo 980708 test coval to be zero \n old: write_args_d_a(plus_d_a,locat,coval,y.loc());"
2018/06/19 19:55:14 " olvo 980708 test coval to be zero \n old: write_args_d_a(plus_d_a,locat,coval,y.loc());"
2018/06/19 19:55:14 " old: write_args_d_a(pow_op,locat,cocval,x.loc());"
2018/06/19 19:55:14 " = arg\n = res\n = coval"
2018/06/19 19:55:14 " arg\n arg1\n check for branch switch\n res"
2018/06/19 19:55:14 "--------------------------------------------------------------------------"
2018/06/19 19:55:14 " arg\n arg1\n check for branch switch\n res"
2018/06/19 19:55:14 "--------------------------------------------------------------------------"
2018/06/19 19:55:14 " arg\n arg1\n check for branch switch\n res"
2018/06/19 19:55:14 "--------------------------------------------------------------------------"
2018/06/19 19:55:14 " arg\n arg1\n check for branch switch\n res"
2018/06/19 19:55:14 "--------------------------------------------------------------------------"
2018/06/19 19:55:14 " arg\n arg1\n check for branch switch\n res"
2018/06/19 19:55:14 "--------------------------------------------------------------------------"
2018/06/19 19:55:14 " arg\n arg1\n check for branch switch\n res"
2018/06/19 19:55:14 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/param.cpp": 10.322019ms
2018/06/19 19:55:14 Couldn't classify license(s)
2018/06/19 19:55:15 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/src/buffer_temp.h
2018/06/19 19:55:15 detected language: 4
2018/06/19 19:55:15 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     struct_buf.h\n Revision: $Id$\n Contents: - template class for linked list of Type buffers with constant length\n             per buffer\n           - intended to be used with structs\n \n Copyright (c) Andreas Kowarz, Kshitij Kulshreshtha, Jean Utke\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n   \n----------------------------------------------------------------------------"
2018/06/19 19:55:15 "**************************************************************************\n                                                          This is all C++ "
2018/06/19 19:55:15 " __cplusplus "
2018/06/19 19:55:15 " ADOLC_STRUCT_BUF_H "
2018/06/19 19:55:15 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/src/buffer_temp.h": 7.659707ms
2018/06/19 19:55:15 Couldn't classify license(s)
2018/06/19 19:55:16 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/Makefile.am
2018/06/19 19:55:16 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/Makefile.am": 6.213792ms
2018/06/19 19:55:16 Couldn't classify license(s)
2018/06/19 19:55:16 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/adalloc.h
2018/06/19 19:55:16 detected language: 4
2018/06/19 19:55:16 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     adalloc.h\n Revision: $Id$\n Contents: Allocation of arrays of doubles in several dimensions \n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n\n----------------------------------------------------------------------------"
2018/06/19 19:55:16 "**************************************************************************\n                                                         Now the C THINGS "
2018/06/19 19:55:16 "--------------------------------------------------------------------------\n                                              MEMORY MANAGEMENT UTILITIES "
2018/06/19 19:55:16 "--------------------------------------------------------------------------\n                                          SPECIAL IDENTITY REPRESENTATION "
2018/06/19 19:55:16 "**************************************************************************\n                              INTEGER VARIANT FOR BIT PATTERN PROPAGATION "
2018/06/19 19:55:16 "**************************************************************************\n                                                       Now the C++ THINGS "
2018/06/19 19:55:16 "--------------------------------------------------------------------------\n                                              MEMORY MANAGEMENT UTILITIES "
2018/06/19 19:55:16 "**************************************************************************"
2018/06/19 19:55:16 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/adalloc.h": 8.340663ms
2018/06/19 19:55:16 Couldn't classify license(s)
2018/06/19 19:55:17 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/adouble.h
2018/06/19 19:55:17 detected language: 4
2018/06/19 19:55:17 " ---------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n\n Revision: $Id$\n Contents: adouble.h contains the basis for the class of adouble\n           included here are all the possible functions defined on\n           the adouble class.  Notice that, as opposed to ealier versions,\n           both the class adub and the class adouble are derived from a base\n           class (badouble).  See below for further explanation.\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz,\n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel,\n               Benjamin Letschert Kshitij Kulshreshtha\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:55:17 "**************************************************************************\n                                                         THIS FILE IS C++ "
2018/06/19 19:55:17 " NOTICE: There are automatic includes at the end of this file! "
2018/06/19 19:55:17 "**************************************************************************\n                                             FORWARD DECLARATIONS (TAPES) "
2018/06/19 19:55:17 "--------------------------------------------------------------------------"
2018/06/19 19:55:17 "--------------------------------------------------------------------------"
2018/06/19 19:55:17 "**************************************************************************\n                                                           CLASS BADOUBLE "
2018/06/19 19:55:17 "*\n   The class badouble contains the basic definitions for \n   the arithmetic operations, comparisons, etc. \n   This is a basic class from which the adub and adouble are \n   derived.  Notice that the constructors/destructors for \n   the class badouble are of the trivial variety.  This is the\n   main difference among badoubles, adubs, and adoubles.\n"
2018/06/19 19:55:17 " must be public when using gcc >= 3.4 ( problems with value() )\n (see GCC 3.4 Release Series - Changes, New Features, and Fixes)\n\n badouble( const badouble& a ) {location = a.location;};"
2018/06/19 19:55:17 " marker if the badouble is properly initialized"
2018/06/19 19:55:17 "--------------------------------------------------------------------------\n ctor "
2018/06/19 19:55:17 " Helpful stuff "
2018/06/19 19:55:17 "------------------------------------------------------------------------\n Assignments "
2018/06/19 19:55:17 " badouble& operator = ( const adouble& );\n       !!! olvo 991210: was the same as badouble-assignment "
2018/06/19 19:55:17 "--------------------------------------------------------------------------\n IO friends "
2018/06/19 19:55:17 "------------------------------------------------------------------------\n Operation + Assignment "
2018/06/19 19:55:17 " olvo 991122 n2l: new special op_codes "
2018/06/19 19:55:17 "--------------------------------------------------------------------------"
2018/06/19 19:55:17 "--------------------------------------------------------------------------\n Comparison (friends) "
2018/06/19 19:55:17 "--------------------------------------------------------------------------\n Functions friends with both badouble and adub "
2018/06/19 19:55:17 "--------------------------------------------------------------------------\n special operators (friends) "
2018/06/19 19:55:17 " uses condassign internally "
2018/06/19 19:55:17 " User defined version of logarithm to test extend_quad macro "
2018/06/19 19:55:17 "--------------------------------------------------------------------------\n Conditionals "
2018/06/19 19:55:17 "**************************************************************************\n                                                               CLASS ADUB "
2018/06/19 19:55:17 "\n   The class Adub\n   ---- Basically used as a temporary result.  The address for an\n        adub is usually generated within an operation.  That address\n        is \"freed\" when the adub goes out of scope (at destruction time).\n   ---- operates just like a badouble, but it has a destructor defined for it.\n"
2018/06/19 19:55:17 " s = adolc_vec_dot(x,y,size); <=> s = <x,y>_2 "
2018/06/19 19:55:17 " this is the only logically legal constructor, which can be called by \n    * friend classes and functions \n    "
2018/06/19 19:55:17 "--------------------------------------------------------------------------\n s = adolc_vec_dot(x,y,size); <=> s = <x,y>_2 "
2018/06/19 19:55:17 " Functions friends with both badouble and adub "
2018/06/19 19:55:17 "--------------------------------------------------------------------------\n Parameter dependent functions (friends) "
2018/06/19 19:55:17 "**************************************************************************\n                                                            CLASS ADOUBLE \n\n  The class adouble.\n  ---Derived from badouble.  Contains the standard constructors/destructors.\n  ---At construction, it is given a new address, and at destruction, that\n     address is freed.\n"
2018/06/19 19:55:17 " Init for late initialization"
2018/06/19 19:55:17 " adub prevents postfix operators to occur on the left\n       side of an assignment which would not work  "
2018/06/19 19:55:17 "   inline double value(); "
2018/06/19 19:55:17 " __cplusplus "
2018/06/19 19:55:17 "**************************************************************************\n                                                       INLINE DEFINITIONS "
2018/06/19 19:55:17 "--------------------------------------------------------------------------"
2018/06/19 19:55:17 "--------------------------------------------------------------------------\n Comparison "
2018/06/19 19:55:17 "--------------------------------------------------------------------------\n Subtract a floating point from an adouble  "
2018/06/19 19:55:17 "--------------------------------------------------------------------------\n Multiply an adouble by a floating point "
2018/06/19 19:55:17 "--------------------------------------------------------------------------\n Divide an adouble by a floating point "
2018/06/19 19:55:17 "**************************************************************************\n                                                                THAT'S ALL\n __cplusplus \n ADOLC_ADOUBLE_H "
2018/06/19 19:55:17 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/adouble.h": 19.131752ms
2018/06/19 19:55:17 Couldn't classify license(s)
2018/06/19 19:55:18 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/adutils.h
2018/06/19 19:55:18 detected language: 4
2018/06/19 19:55:18 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     adutils.h\n Revision: $Id$\n Contents: Provides all C/C++ interfaces of ADOL-C.\n           NOTICE: This file is kept for compatibility reasons only. \n                   The new header adolc.h is included.\n \n Copyright (c) Andreas Kowarz\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:18 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/adutils.h": 7.026481ms
2018/06/19 19:55:18 Couldn't classify license(s)
2018/06/19 19:55:19 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/lie/Makefile.am
2018/06/19 19:55:19 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/lie/Makefile.am": 6.474663ms
2018/06/19 19:55:19 Couldn't classify license(s)
2018/06/19 19:55:20 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/lie/Makefile.in
2018/06/19 19:55:20 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/lie/Makefile.in": 50.608499ms
2018/06/19 19:55:20 Couldn't classify license(s)
2018/06/19 19:55:20 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/lie/drivers.h
2018/06/19 19:55:20 detected language: 4
2018/06/19 19:55:20 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     lie/drivers.h\n Revision: $Id$\n Contents: functions for computation of Lie derivatives\n \n\n Copyright (c) Siquian Wang, Klaus Röbenack, Jan Winkler, Mirko Franke\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.  \n  \n----------------------------------------------------------------------------"
2018/06/19 19:55:20 " C++ declarations available only when compiling with C++"
2018/06/19 19:55:20 " C-declarations"
2018/06/19 19:55:20 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/lie/drivers.h": 7.287391ms
2018/06/19 19:55:20 Couldn't classify license(s)
2018/06/19 19:55:21 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/taping.h
2018/06/19 19:55:21 detected language: 4
2018/06/19 19:55:21 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     taping.h\n Revision: $Id$\n Contents: all C functions directly accessing at least one of the four tapes\n           (operations, locations, constants, value stack)\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:21 " # of independent variables \n # of dependent variables \n max # of live variables \n # of values in the taylor (value) stack \n # of operations per buffer == OBUFSIZE (usrparms.h) \n overall # of operations \n operations file written or not \n overall # of locations \n locations file written or not \n overall # of values \n values file written or not \n # of locations per buffer == LBUFSIZE (usrparms.h) \n # of values per buffer == CBUFSIZE (usrparms.h) \n # of taylors per buffer <= TBUFSIZE (usrparms.h) \n # of eq_*_prod for sparsity pattern \n no use of min_op, deferred to abs_op for piecewise stuff \n # of abs calls that can switch branch \n no of parameters (doubles) interchangable without retaping \n represents the size of the stats vector "
2018/06/19 19:55:21 " Returns statistics on the tape \"tag\". Use enumeration StatEntries for\n * accessing the individual elements of the vector \"tape_stats\"! "
2018/06/19 19:55:21 " An all-in-one tape stats printing routine "
2018/06/19 19:55:21 "\n * free location block sorting/consolidation upon calls to ensureContiguousLocations\n * happens when  the ratio between allocated and used locations exceeds gcTriggerRatio or\n * the allocated locations exceed gcTriggerMaxSize\n "
2018/06/19 19:55:21 "*\n * Normally, theKeeper would take care of the initialization and finalization\n * of ADOL-C. However, some compilers do not include the keeper code when\n * linking. \"initADOLC\" should be called right after main(...), in this case.\n * \"initADOLC\" will not initialize memory, but is only necessary to reference \n * \"theKeeper\", such that this static instance is used at least once. :-(\n "
2018/06/19 19:55:21 " Initialization for the taping process. Creates buffers for this tape, sets\n * files names, and calls appropriate setup routines.\n * This functions return value is different from zero if a tape with with ID\n * tnum is available only in core. The old tape gets overwritten by the new \n * one in this case. "
2018/06/19 19:55:21 " special version including buffersize customization\n *      obs - size of the operation buffer (number of elements)\n *      lbs - size of the location buffer (number of elements)\n *      vbs - size of the value buffer (number of elements)\n *      tbs - size of the taylor buffer (number of elements)\n * trace_on is the last point in time we want to allow the change of buffer\n * sizes for a given tape "
2018/06/19 19:55:21 " Stop Tracing. Cleans up, and turns off trace_flag. Flag not equal zero\n * enforces writing of the three main tape files (op+loc+val). "
2018/06/19 19:55:21 " ADOLC_TAPING_H "
2018/06/19 19:55:21 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/taping.h": 18.097328ms
2018/06/19 19:55:21 Couldn't classify license(s)
2018/06/19 19:55:22 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/checkpointing.h
2018/06/19 19:55:22 detected language: 4
2018/06/19 19:55:22 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     checkpointing.h\n Revision: $Id$\n Contents: Provides all checkointing interfaces.\n \n Copyright (c) Andreas Kowarz\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:22 "**************************************************************************\n                                                          This is all C++ "
2018/06/19 19:55:22 " tape number to be used for checkpointing \n != 0 forces retaping before every reverse step "
2018/06/19 19:55:22 " number of variables in input and output (n=m) \n input of the first step \n output of the last step; will be set by ADOLC "
2018/06/19 19:55:22 " these are internal checkpointing variables => do not use "
2018/06/19 19:55:22 " please do not change "
2018/06/19 19:55:22 " this is dummy to get externfcts and checkpointing both use buffer_temp without a problem "
2018/06/19 19:55:22 " if tape with one program and use the tapes with another programm call this\n * function within the latter                                               "
2018/06/19 19:55:22 " CPLUSPLUS "
2018/06/19 19:55:22 "**************************************************************************\n ADOLC_CHECKPOINTING_H "
2018/06/19 19:55:22 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/checkpointing.h": 8.993364ms
2018/06/19 19:55:22 Couldn't classify license(s)
2018/06/19 19:55:23 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/interfaces.h
2018/06/19 19:55:23 detected language: 4
2018/06/19 19:55:23 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     interfaces.h\n Revision: $Id$\n Contents: Declaration of the standard interfaces to ADOL-C forward and\n           reverse calls (C++, C and Fortran callable C functions).\n \n           Functions prototyped here are defined in the files\n                 uni5_for.mc for\n                                 zos_forward.c\n                                 fos_forward.c\n                                 hos_forward.c\n                                 fov_forward.c\n                                 hov_forward.c\n                                 hov_wk_forward.c\n                 fo_rev.mc for\n\t\t                 fos_reverse.c\n\t\t                 fov_reverse.c\n                 ho_rev.mc for\n                                 hos_reverse.c\n                                 hos_ov_reverse.c\n\t\t                 hov_reverse.c\n                                 hos_ti_reverse.c\n\t\t                 hov_ti_reverse.c\n                 interfacesC.C\n                 interfacesf.c\n              \n           ADOL-C Abreviations :\n                 zos : zero-order-scalar mode   \n                 fos : first-order-scalar mode\n                 hos : higher-order-scalar mode\n                 fov : first-order-vector mode\n                 hov : higher-order-vector mode\n                 wk  : with keep\n                 ov  : over vector (forward)\n                 ti  : Taylor input\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:23 "**************************************************************************\n**************************************************************************\n                                                       Now the C++ THINGS "
2018/06/19 19:55:23 "**************************************************************************\n                                           FORWARD MODE, overloaded calls "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n    General scalar call. For d=0 or d=1 done by specialized code          \n                                                                          \n forward(tag, m, n, d, keep, X[n][d+1], Y[m][d+1]) : hos || fos || zos    "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n    Y can be one dimensional if m=1. d=0 or d=1 done by specialized code  \n                                                                          \n forward(tag, m, n, d, keep, X[n][d+1], Y[d+1]) : hos || fos || zos       "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n    X and Y can be one dimensional if d = 0; done by specialized code     \n                                                                          \n forward(tag, m, n, d, keep, X[n], Y[m]) : zos                            "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n    X and Y can be one dimensional if d omitted; done by specialized code \n                                                                          \n forward(tag, m, n, keep, X[n], Y[m]) : zos                               "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n  General vector call                                                     \n                                                                          \n forward(tag, m, n, d, p, x[n], X[n][p][d], y[m], Y[m][p][d]) : hov       "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n  d = 1 may be omitted. General vector call, done by specialized code     \n                                                                          \n forward(tag, m, n, p, x[n], X[n][p], y[m], Y[m][p]) : fov                "
2018/06/19 19:55:23 "**************************************************************************\n                                           REVERSE MODE, overloaded calls "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n  General call                                                            \n                                                                          \n reverse(tag, m, n, d, u[m], Z[n][d+1]) : hos                             "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n    u can be a scalar if m=1                                              \n                                                                          \n reverse(tag, m, n, d, u, Z[n][d+1]) : hos                                "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n    Z can be vector if d = 0; done by specialized code                    \n                                                                          \n reverse(tag, m, n, d, u[m], Z[n]) : fos                                  "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n    u can be a scalar if m=1 and d=0; done by specialized code            \n                                                                          \n reverse(tag, m, n, d, u, Z[n]) : fos                                     "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n  General vector call                                                     \n                                                                          \n reverse(tag, m, n, d, q, U[q][m], Z[q][n][d+1], nz[q][n]) : hov          "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n    U can be a vector if m=1                                              \n                                                                          \n reverse(tag, m, n, d, q, U[q], Z[q][n][d+1], nz[q][n]) : hov             "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                                          \n    If d=0 then Z may be a matrix, no nz; done by specialized code        \n                                                                          \n reverse(tag, m, n, d, q, U[q][m], Z[q][n]) : fov                         "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                                          \n    d=0 may be omitted, Z is a matrix, no nz; done by specialized code    \n                                                                          \n reverse(tag, m, n, q, U[q][m], Z[q][n]) : fov                            "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                                          \n    If m=1 and d=0 then U can be vector and Z a matrix but no nz.         \n    Done by specialized code                                              \n                                                                          \n reverse(tag, m, n, d, q, U[q], Z[q][n]) : fov                            "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                                          \n    If q and U are omitted they default to m and I so that as above       \n                                                                          \n reverse(tag, m, n, d, Z[q][n][d+1], nz[q][n]) : hov                      "
2018/06/19 19:55:23 "**************************************************************************\n**************************************************************************\n                                                         Now the C THINGS "
2018/06/19 19:55:23 "**************************************************************************\n                                                             FORWARD MODE "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                                      ZOS \n zos_forward(tag, m, n, keep, x[n], y[m])                                 \n (defined in uni5_for.mc)                                                 "
2018/06/19 19:55:23 " zos_forward_nk(tag, m, n, x[n], y[m])                                    \n (no keep, defined in uni5_for.c, but not supported in ADOL-C 1.8)        "
2018/06/19 19:55:23 " zos_forward_partx(tag, m, n, ndim[n], x[n][d], y[m])                     \n (based on zos_forward)                                                   "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                                      FOS \n fos_forward(tag, m, n, keep, x[n], X[n], y[m], Y[m])                     \n (defined in uni5_for.mc)                                                 "
2018/06/19 19:55:23 " fos_forward_nk(tag,m,n,x[n],X[n],y[m],Y[m])                              \n (no keep, defined in uni5_for.c, but not supported in ADOL-C 1.8)        "
2018/06/19 19:55:23 " fos_forward_partx(tag, m, n, ndim[n], x[n][][2], y[m][2])                \n (based on fos_forward)                                                   "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                                      HOS \n hos_forward(tag, m, n, d, keep, x[n], X[n][d], y[m], Y[m][d])            \n (defined in uni5_for.mc)                                                 "
2018/06/19 19:55:23 " hos_forward_nk(tag, m, n, d, x[n], X[n][d], y[m], Y[m][d])               \n (no keep, defined in uni5_for.c, but not supported in ADOL-C 1.8)        "
2018/06/19 19:55:23 " hos_forward_partx(tag, m, n, ndim[n], d, X[n][d+1], Y[m][d+1])           \n (defined in forward_partx.c)                                             "
2018/06/19 19:55:23 " now pack the arrays into vectors for Fortran calling                     "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                                      FOV \n fov_forward(tag, m, n, p, x[n], X[n][p], y[m], Y[m][p])                  \n (defined in uni5_for.mc)                                                 "
2018/06/19 19:55:23 " now pack the arrays into vectors for Fortran calling                     "
2018/06/19 19:55:23 "  fov_forward_partx(tag, m, n, ndim[n], p,                                \n                    x[n][], X[n][][p],y[m], Y[m][p])                      "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                                      HOV \n hov_forward(tag, m, n, d, p, x[n], X[n][p][d], y[m], Y[m][p][d])         \n (defined in uni5_for.mc)                                                 "
2018/06/19 19:55:23 " now pack the arrays into vectors for Fortran calling                     "
2018/06/19 19:55:23 "  hov_forward_partx(tag, m, n, ndim[n], d, p,                             \n                    x[n][], X[n][][p][d], y[m], Y[m][p][d])               "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                                   HOV_WK \n hov_wk_forward(tag, m, n, d, p, keep, x[n], X[n][p][d], y[m], Y[m][p][d])      \n (defined in uni5_for.mc)                                                 "
2018/06/19 19:55:23 " now pack the arrays into vectors for Fortran calling                     "
2018/06/19 19:55:23 "**************************************************************************\n                                                    BIT PATTERN UTILITIES \n--------------------------------------------------------------------------\n                                                            INT_FOR, SAFE \n int_forward_safe(tag, m, n, p, X[n][p], Y[m][p])                         "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                           INT_FOR, TIGHT \n int_forward_tight(tag, m, n, p, x[n], X[n][p], y[m], Y[m][p])            "
2018/06/19 19:55:23 "**************************************************************************\n                                                   INDEX DOMAIN UTILITIES \n--------------------------------------------------------------------------\n                                                            INDOPRO, SAFE \n indopro_forward_safe(tag, m, n, p, x[n], *Y[m])                          "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                           INDOPRO, TIGHT \n indopro_forward_tight(tag, m, n,  x[n], *Y[m])                           "
2018/06/19 19:55:23 "**************************************************************************\n                                         NONLINEAR INDEX DOMAIN UTILITIES \n--------------------------------------------------------------------------\n                                                            INDOPRO, SAFE \n nonl_ind_forward_safe(tag, m, n, p, x[n], *Y[m])                          "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                           INDOPRO, TIGHT \n nonl_ind_forward_tight(tag, m, n,  x[n], *Y[m])                           "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                            INDOPRO, SAFE \n nonl_ind_old_forward_safe(tag, m, n, p, x[n], *Y[m])                          "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                           INDOPRO, TIGHT \n nonl_ind_old_forward_tight(tag, m, n,  x[n], *Y[m])                           "
2018/06/19 19:55:23 "**************************************************************************\n                                                             REVERSE MODE "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                                      FOS \n fos_reverse(tag, m, n, u[m], z[n])                                       \n (defined  in fo_rev.mc)                                                  "
2018/06/19 19:55:23 " now pack the arrays into vectors for Fortran calling                     "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                                      HOS \n  hos_reverse(tag, m, n, d, u[m], Z[n][d+1])                              \n (defined  in ho_rev.mc)                                                  "
2018/06/19 19:55:23 " now pack the arrays into vectors for Fortran calling                     "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                                   HOS_TI \n  hos_ti_reverse(tag, m, n, d, U[m][d+1], Z[n][d+1])                      \n (defined  in ho_rev.mc)                                                  "
2018/06/19 19:55:23 " now pack the arrays into vectors for Fortran calling                     "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                                   HOS_OV \n  hos_ov_reverse(tag, m, n, d, u[m], Z[n][d+1])                           \n (defined  in ho_rev.mc)                                                  "
2018/06/19 19:55:23 " now pack the arrays into vectors for Fortran calling                     "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                                      FOV \n fov_reverse(tag, m, n, p, U[p][m], Z[p][n])                              \n (defined  in fo_rev.mc)                                                  "
2018/06/19 19:55:23 " now pack the arrays into vectors for Fortran calling                     "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                                      HOV \n hov_reverse(tag, m, n, d, p, U[p][m], Z[p][n][d+1], nz[p][n])            \n (defined  in ho_rev.mc)                                                  "
2018/06/19 19:55:23 " now pack the arrays into vectors for Fortran calling      "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                                   HOV_TI \n hov_ti_reverse(tag, m, n, d, p, U[p][m][d+1], Z[p][n][d+1], nz[p][n])    \n (defined  in ho_rev.mc)                                                  "
2018/06/19 19:55:23 " now pack the arrays into vectors for Fortran calling      "
2018/06/19 19:55:23 "**************************************************************************\n                                                    BIT PATTERN UTILITIES \n--------------------------------------------------------------------------\n                                                           INT_REV, TIGHT \n int_reverse_tight(tag, m, n, q, U[q][m], Z[q][n])                        "
2018/06/19 19:55:23 "--------------------------------------------------------------------------\n                                                            INT_REV, SAFE \n int_reverse_safe(tag, m, n, q, U[q][m], Z[q][n])                         "
2018/06/19 19:55:23 "--------------------------------------------------------------------------"
2018/06/19 19:55:23 "--------------------------------------------------------------------------"
2018/06/19 19:55:23 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/interfaces.h": 54.026778ms
2018/06/19 19:55:23 Couldn't classify license(s)
2018/06/19 19:55:24 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/fixpoint.h
2018/06/19 19:55:24 detected language: 4
2018/06/19 19:55:24 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     fixpoint.h\n Revision: $Id$\n Contents: all C functions directly accessing at least one of the four tapes\n           (operations, locations, constants, value stack)\n \n Copyright (c) Andreas Kowarz, Sebastian Schlenkrich\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:24 " ADOLC_FIXPOINT_H "
2018/06/19 19:55:24 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/fixpoint.h": 6.899218ms
2018/06/19 19:55:24 Couldn't classify license(s)
2018/06/19 19:55:24 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/adoublecuda.h
2018/06/19 19:55:24 detected language: 4
2018/06/19 19:55:24 " ---------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n\n Revision: $Id$\n Contents: adoublecuda.h contains the class of adouble specifically\n           suited to be used within CUDA environment\n\n Copyright (c) Alina Koniaeva, Andrea Walther\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:55:24 " ctors"
2018/06/19 19:55:24 "******************  temporary results  *****************************\n sign"
2018/06/19 19:55:24 " addition"
2018/06/19 19:55:24 " substraction"
2018/06/19 19:55:24 " multiplication"
2018/06/19 19:55:24 " division"
2018/06/19 19:55:24 " inc/dec"
2018/06/19 19:55:24 " functions"
2018/06/19 19:55:24 "******************  nontemporary results  **************************\n assignment"
2018/06/19 19:55:24 " addition"
2018/06/19 19:55:24 " substraction"
2018/06/19 19:55:24 " multiplication"
2018/06/19 19:55:24 " division"
2018/06/19 19:55:24 " not"
2018/06/19 19:55:24 " comparision"
2018/06/19 19:55:24 "******************  getter / setter  *******************************"
2018/06/19 19:55:24 "******************  i/o operations  ********************************"
2018/06/19 19:55:24 " internal variables"
2018/06/19 19:55:24 "******************************  ctors  ***********************************"
2018/06/19 19:55:24 "******************************  dtors  ***********************************"
2018/06/19 19:55:24 "************************  temporary results  *****************************\n sign"
2018/06/19 19:55:24 " addition"
2018/06/19 19:55:24 " subtraction"
2018/06/19 19:55:24 " multiplication"
2018/06/19 19:55:24 " division"
2018/06/19 19:55:24 " inc/dec"
2018/06/19 19:55:24 " functions"
2018/06/19 19:55:24 "******************  nontemporary results  ********************************"
2018/06/19 19:55:24 " not"
2018/06/19 19:55:24 " comparision"
2018/06/19 19:55:24 "******************  getter / setter  *************************************"
2018/06/19 19:55:24 "******************  i/o operations  **************************************"
2018/06/19 19:55:24 "**************************************************************************\n end traceless gpu implementation first order derivatives                      \n**************************************************************************"
2018/06/19 19:55:24 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/adoublecuda.h": 10.48962ms
2018/06/19 19:55:24 Couldn't classify license(s)
2018/06/19 19:55:25 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/adolc_sparse.h
2018/06/19 19:55:25 detected language: 4
2018/06/19 19:55:25 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     adolc_sparse.h\n Revision: $Id$\n Contents: Provides  C/C++ interfaces of ADOL-C sprase drivers.\n \n Copyright (c) Andrea Walther\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.  \n \n----------------------------------------------------------------------------"
2018/06/19 19:55:25 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/adolc_sparse.h": 6.28112ms
2018/06/19 19:55:25 Couldn't classify license(s)
2018/06/19 19:55:26 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/revolve.h
2018/06/19 19:55:26 detected language: 4
2018/06/19 19:55:26 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     revolve.h\n Revision: $Id$\n Contents: optimal binomial checkpointing adapted for ADOL-C\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:55:26 " ADOLC_REVOLVE_H "
2018/06/19 19:55:26 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/revolve.h": 6.854094ms
2018/06/19 19:55:26 Couldn't classify license(s)
2018/06/19 19:55:27 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/tapedoc/Makefile.am
2018/06/19 19:55:27 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/tapedoc/Makefile.am": 6.539349ms
2018/06/19 19:55:27 Couldn't classify license(s)
2018/06/19 19:55:27 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/tapedoc/Makefile.in
2018/06/19 19:55:28 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/tapedoc/Makefile.in": 51.915386ms
2018/06/19 19:55:28 Couldn't classify license(s)
2018/06/19 19:55:28 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/tapedoc/tapedoc.h
2018/06/19 19:55:28 detected language: 4
2018/06/19 19:55:28 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     tapedoc/tapedoc.h\n Revision: $Id$\n Contents: Contains declaration of tapedoc driver.\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel \n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:28 "**************************************************************************\n                                                                 tape_doc \n tape_doc(tag, m, n, x[n], y[m])                                          "
2018/06/19 19:55:28 "**************************************************************************\n                                                               THAT'S ALL "
2018/06/19 19:55:28 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/tapedoc/tapedoc.h": 7.806499ms
2018/06/19 19:55:28 Couldn't classify license(s)
2018/06/19 19:55:29 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/sparse/sparsedrivers.h
2018/06/19 19:55:29 detected language: 4
2018/06/19 19:55:29 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     sparse/sparsedrivers.h\n Revision: $Id$\n Contents: This file containts some \"Easy To Use\" interfaces of sparse package.\n \n Copyright (c) Andrea Walther\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:29 "**************************************************************************"
2018/06/19 19:55:29 "--------------------------------------------------------------------------\n                                                         jacobian pattern \n jac_pat(tag, m, n, argument,                                             \n         crs[] [ crs[][0] = non-zero independent blocks per row ],        \n         options[3])                                                      \n                                                                          "
2018/06/19 19:55:29 "--------------------------------------------------------------------------\n                                              abs-normal jacobian pattern \n absnormal_jac_pat(tag, m, n, s, argument,                                \n         crs[] [ crs[][0] = non-zero independent blocks per row ])        \n                                                                          "
2018/06/19 19:55:29 "--------------------------------------------------------------------------\n                                         seed matrix for sparse jacobian  \n generate_seed_jac(m, n, crs, &seed, &p, option);                         "
2018/06/19 19:55:29 "--------------------------------------------------------------------------\n                                                         sparse jacobian  \n int sparse_jac(tag, m, n, repeat, x, &nnz, &row_ind, &col_ind, &values,  \n                options[3]);                                              "
2018/06/19 19:55:29 "--------------------------------------------------------------------------\n                                                          hessian pattern \n hess_pat(tag, n, x[n], crs[n][*], option)                                \n                                                                          \n     crs[i][ crs[i][0] = non-zero entries per row ]                       \n                                                                          "
2018/06/19 19:55:29 "--------------------------------------------------------------------------\n                                          seed matrix for sparse hessian  \n generate_seed_hess(n, crs, &seed, &p, option);                           "
2018/06/19 19:55:29 "--------------------------------------------------------------------------\n                                                          sparse hessian  \n int sparse_hess(tag, n, repeat, x, &nnz, &row_ind, &col_ind, &values,    \n                 options[2]);                                             "
2018/06/19 19:55:29 " tape identification                     \n number of independent variables         "
2018/06/19 19:55:29 " tape identification                     \n number of independent variables         "
2018/06/19 19:55:29 "--------------------------------------------------------------------------\n                                                   JACOBIAN BLOCK PATTERN "
2018/06/19 19:55:29 " Max. number of unsigned ints to store the seed / jacobian matrix strips.\n   Reduce this value to x if your system happens to run out of memory. \n   x < 10 makes no sense. x = 50 or 100 is better\n   x stays for ( x * sizeof(unsigned long int) * 8 ) \n   (block) variables at once                                            "
2018/06/19 19:55:29 "**************************************************************************"
2018/06/19 19:55:29 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/sparse/sparsedrivers.h": 11.512396ms
2018/06/19 19:55:29 Couldn't classify license(s)
2018/06/19 19:55:30 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/sparse/Makefile.am
2018/06/19 19:55:30 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/sparse/Makefile.am": 6.711852ms
2018/06/19 19:55:30 Couldn't classify license(s)
2018/06/19 19:55:31 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/sparse/sparse_fo_rev.h
2018/06/19 19:55:31 detected language: 4
2018/06/19 19:55:31 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     sparse/sparse_fo_rev.h\n Revision: $Id$\n Contents: This file containts some \"Easy To Use\" interfaces of sparse package.\n \n \n Copyright (c) Andrea Walther, Christo Mitev\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.  \n \n----------------------------------------------------------------------------"
2018/06/19 19:55:31 "**************************************************************************\n                                           FORWARD MODE, overloaded calls \n                                                                          \n nBV = number of Boolean Vectors to be packed                             \n       (see Chapter Dependence Analysis, ADOL-C Documentation)            \n bits_per_long = 8*sizeof(unsigned long int)                              \n p = nBV / bits_per_long + ( (nBV % bits_per_long) != 0 )                 \n                                                                          \n For the full Jacobian matrix set                                         \n    p = indep / bits_per_long + ((indep % bits_per_long) != 0)            \n and pass a bit pattern version of the identity matrix as an argument     \n                                                                          \n--------------------------------------------------------------------------\n  Bit pattern propagation call, d = 1, tight version                      \n                                                                          \n forward(tag, m, n, p, x[n], X[n][p], y[m], Y[m][p], mode) : intfov       "
2018/06/19 19:55:31 "--------------------------------------------------------------------------\n  Bit pattern propagation call, d = 1, safe version (no x[] and y[])      \n                                                                          \n forward(tag, m, n, p, X[n][p], Y[m][p], mode) : intfov                   "
2018/06/19 19:55:31 "**************************************************************************\n                                           REVERSE MODE, overloaded calls \n                                                                          \n nBV = number of Boolean Vectors to be packed                             \n       (see Chapter Dependence Analysis, ADOL-C Documentation)            \n bits_per_long = 8*sizeof(unsigned long int)                              \n q = nBV / bits_per_long + ( (nBV % bits_per_long) != 0 )                 \n                                                                          \n For the full Jacobian matrix set                                         \n      q = depen / bits_per_long + ((depen % bits_per_long) != 0)          \n and pass a bit pattern version of the identity matrix as an argument     \n                                                                          \n--------------------------------------------------------------------------\n                                                                          \n  Bit pattern propagation call, d = 0, tight & safe version               \n                                                                          \n reverse(tag, m, n, q, U[q][m], Z[q][n], mode) : intfov                   "
2018/06/19 19:55:31 "**************************************************************************"
2018/06/19 19:55:31 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/sparse/sparse_fo_rev.h": 20.237656ms
2018/06/19 19:55:31 Couldn't classify license(s)
2018/06/19 19:55:31 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/sparse/Makefile.in
2018/06/19 19:55:31 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/sparse/Makefile.in": 51.503576ms
2018/06/19 19:55:31 Couldn't classify license(s)
2018/06/19 19:55:32 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/adolc_openmp.h
2018/06/19 19:55:32 detected language: 4
2018/06/19 19:55:32 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     adolc_openmp.h\n Revision: $Id$\n Contents: header file for openmp parallel differentiation\n\n Copyright (c) Andreas Kowarz\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:55:32 " _OPENMP \n __cplusplus \n ADOLC_ADOLC_OPENMP_H "
2018/06/19 19:55:32 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/adolc_openmp.h": 6.998656ms
2018/06/19 19:55:32 Couldn't classify license(s)
2018/06/19 19:55:33 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/drivers/psdrivers.h
2018/06/19 19:55:33 detected language: 4
2018/06/19 19:55:33 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     drivers/psdrivers.h\n Revision: $Id$\n Contents: Easy to use drivers for piecewise smooth functions\n           (with C and C++ callable interfaces including Fortran \n           callable versions).\n\n Copyright (c) Andrea Walther, Sabrina Fiege\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:33 "**************************************************************************\n                                                 DRIVERS FOR PS FUNCTIONS "
2018/06/19 19:55:33 "--------------------------------------------------------------------------\n                                             directional_active_gradient_ \n                                                                          "
2018/06/19 19:55:33 "--------------------------------------------------------------------------\n                                              directional_active_gradient \n                                                                          "
2018/06/19 19:55:33 " trace identifier \n number of independents \n value of independents \n direction \n directional active gradient \n sigma of g "
2018/06/19 19:55:33 "--------------------------------------------------------------------------\n                                                               abs_normal \n                                                                          "
2018/06/19 19:55:33 " tape identifier \n number od dependents   \n number of independents \n number of switches (check) \n base point \n sigma of x \n function value \n switching variables \n first constant \n second constant "
2018/06/19 19:55:33 "**************************************************************************"
2018/06/19 19:55:33 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/drivers/psdrivers.h": 8.879341ms
2018/06/19 19:55:33 Couldn't classify license(s)
2018/06/19 19:55:34 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/drivers/Makefile.am
2018/06/19 19:55:34 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/drivers/Makefile.am": 6.580976ms
2018/06/19 19:55:34 Couldn't classify license(s)
2018/06/19 19:55:35 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/drivers/taylor.h
2018/06/19 19:55:35 detected language: 4
2018/06/19 19:55:35 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     drivers/taylor.h\n Revision: $Id$\n Contents: Easy to use drivers for the evaluation of higher order derivative\n           tensors and inverse/impicit function differentiation\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, Olaf Vogel\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:35 "**************************************************************************\n                                                       TENSOR EVALUATIONS "
2018/06/19 19:55:35 "--------------------------------------------------------------------------\n tensor_eval(tag,m,n,d,p,x[n],tensor[m][dim],S[n][p])\n      with dim = ((p+d) over d) "
2018/06/19 19:55:35 "--------------------------------------------------------------------------\n inverse_tensor_eval(tag,n,d,p,x,tensor[n][dim],S[n][p])\n      with dim = ((p+d) over d) "
2018/06/19 19:55:35 "--------------------------------------------------------------------------\n  inverse_Taylor_prop(tag,n,d,Y[n][d+1],X[n][d+1]) "
2018/06/19 19:55:35 "**************************************************************************\n                                                  ACCESS TO TENSOR VALUES "
2018/06/19 19:55:35 "--------------------------------------------------------------------------\n tensor_value(d,m,y[m],tensori[m][dim],multi[d])\n      with dim = ((p+d) over d) "
2018/06/19 19:55:35 "--------------------------------------------------------------------------\n void** tensorsetup(m,p,d,tensorig) "
2018/06/19 19:55:35 "--------------------------------------------------------------------------\n void freetensor(m,p,d,tensor) "
2018/06/19 19:55:35 "--------------------------------------------------------------------------\n int tensor_address(d, im[d]) "
2018/06/19 19:55:35 "**************************************************************************\n                                                                    UTILS "
2018/06/19 19:55:35 "--------------------------------------------------------------------------\n int binomi(a,b)  ---> binomial coefficient to compute tensor dimension "
2018/06/19 19:55:35 "--------------------------------------------------------------------------\n jac_solv(tag,n,x,b,mode) "
2018/06/19 19:55:35 "**************************************************************************"
2018/06/19 19:55:35 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/drivers/taylor.h": 9.168005ms
2018/06/19 19:55:35 Couldn't classify license(s)
2018/06/19 19:55:35 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/drivers/Makefile.in
2018/06/19 19:55:35 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/drivers/Makefile.in": 51.709061ms
2018/06/19 19:55:35 Couldn't classify license(s)
2018/06/19 19:55:36 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/drivers/odedrivers.h
2018/06/19 19:55:36 detected language: 4
2018/06/19 19:55:36 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     drivers/odedrivers.h\n Revision: $Id$\n Contents: Easy to use drivers for ordinary differential equations (ODE)\n           (with C and C++ callable interfaces including Fortran \n            callable versions).\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel \n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:36 "**************************************************************************\n                                                         DRIVERS FOR ODEs "
2018/06/19 19:55:36 "--------------------------------------------------------------------------\n                                                                  forodec \n forodec(tag, n, tau, dold, dnew, X[n][d+1])                              "
2018/06/19 19:55:36 "--------------------------------------------------------------------------\n                                                                  accodec \n accodec(n, tau, d, Z[n][n][d+1], B[n][n][d+1], nz[n][n])                 "
2018/06/19 19:55:36 "**************************************************************************\n**************************************************************************\n                                                       Now the C++ THINGS "
2018/06/19 19:55:36 "**************************************************************************\n                                       DRIVERS FOR ODEs, overloaded calls "
2018/06/19 19:55:36 "--------------------------------------------------------------------------\n                                                                   forode \n forode(tag, n, tau, dold, dnew, X[n][d+1])                               "
2018/06/19 19:55:36 " tape identifier\n space dimension\n scaling\n previous degree defaults to zero\n New degree of consistency\n Taylor series"
2018/06/19 19:55:36 "--------------------------------------------------------------------------\n                                                                   forode \n        the scaling tau defaults to 1                                     \n                                                                          \n  forode(tag, n, dold, dnew, X[n][d+1])                                   "
2018/06/19 19:55:36 "--------------------------------------------------------------------------\n                                                                   forode \n        previous order defaults to 0                                      \n                                                                          \n forode(tag, n, tau, dnew, X[n][d+1])                                     "
2018/06/19 19:55:36 "--------------------------------------------------------------------------\n                                                                   forode \n        both tau and dold default                                         \n                                                                          \n forode(tag, n, dnew, X[n][d+1])                                          "
2018/06/19 19:55:36 "--------------------------------------------------------------------------\n                                                                   accode \n accode(n, tau, d, Z[n][n][d+1], B[n][n][d+1], nz[n][n])                  "
2018/06/19 19:55:36 " space dimension\n scaling defaults to 1.0\n highest degree\n input tensor of \"partial\" Jacobians\n output tensor of \"total\" Jacobians\n optional sparsity characterization"
2018/06/19 19:55:36 "--------------------------------------------------------------------------\n                                                                   accode \n       scaling defaults to 1                                              \n                                                                          \n accode(n, d, Z[n][n][d+1], B[n][n][d+1], nz[n][n])                       "
2018/06/19 19:55:36 " space dimension\n highest degree\n input tensor of \"partial\" Jacobians\n output tensor of \"total\" Jacobians\n optional sparsity characterization"
2018/06/19 19:55:36 "**************************************************************************"
2018/06/19 19:55:36 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/drivers/odedrivers.h": 12.241101ms
2018/06/19 19:55:36 Couldn't classify license(s)
2018/06/19 19:55:37 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/drivers/drivers.h
2018/06/19 19:55:37 detected language: 4
2018/06/19 19:55:37 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     drivers/drivers.h\n Revision: $Id$\n Contents: Easy to use drivers for optimization and nonlinear equations\n           (with C and C++ callable interfaces including Fortran \n            callable versions).\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:37 "**************************************************************************\n                         DRIVERS FOR OPTIMIZATION AND NONLINEAR EQUATIONS "
2018/06/19 19:55:37 "--------------------------------------------------------------------------\n                                                                 function \n function(tag, m, n, x[n], y[m])                                          "
2018/06/19 19:55:37 "--------------------------------------------------------------------------\n                                                                 gradient \n gradient(tag, n, x[n], g[n])                                             "
2018/06/19 19:55:37 "--------------------------------------------------------------------------\n                                                                 jacobian \n jacobian(tag, m, n, x[n], J[m][n])                                       "
2018/06/19 19:55:37 "--------------------------------------------------------------------------\n                                                           large_jacobian \n large_jacobian(tag, m, n, k, x[n], y[m], J[m][n])                        "
2018/06/19 19:55:37 "--------------------------------------------------------------------------\n                                                         vector_jacobian  \n vec_jac(tag, m, n, repeat, x[n], u[m], v[n])                             "
2018/06/19 19:55:37 "--------------------------------------------------------------------------\n                                                          jacobian_vector \n jac_vec(tag, m, n, x[n], v[n], u[m]);                                    "
2018/06/19 19:55:37 "--------------------------------------------------------------------------\n                                                                  hessian \n hessian(tag, n, x[n], lower triangle of H[n][n])                         \n uses Hessian-vector product                                              "
2018/06/19 19:55:37 "--------------------------------------------------------------------------\n                                                                 hessian2 \n hessian2(tag, n, x[n], lower triangle of H[n][n])                        \n uses Hessian-matrix product                                              "
2018/06/19 19:55:37 "--------------------------------------------------------------------------\n                                                           hessian_vector \n hess_vec(tag, n, x[n], v[n], w[n])                                       "
2018/06/19 19:55:37 "--------------------------------------------------------------------------\n                                                           hessian_matrix \n hess_mat(tag, n, q, x[n], V[n][q], W[n][q])                              "
2018/06/19 19:55:37 "--------------------------------------------------------------------------\n                                                  lagrange_hessian_vector \n lagra_hess_vec(tag, m, n, x[n], v[n], u[m], w[n])                        "
2018/06/19 19:55:37 "**************************************************************************"
2018/06/19 19:55:37 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/drivers/drivers.h": 11.87233ms
2018/06/19 19:55:37 Couldn't classify license(s)
2018/06/19 19:55:38 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/externfcts2.h
2018/06/19 19:55:38 detected language: 4
2018/06/19 19:55:38 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     externfcts.h\n Revision: $Id$\n Contents: public functions and data types for extern (differentiated)\n           functions.\n\n Copyright (c) Kshitij Kulshreshtha\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes\n recipient's acceptance of the terms of the accompanying license file.\n\n----------------------------------------------------------------------------"
2018/06/19 19:55:38 " The following two aren't implemented "
2018/06/19 19:55:38 "*\n   * DO NOT touch - the function pointer is set through reg_ext_fct\n   "
2018/06/19 19:55:38 "*\n   * DO NOT touch - the index is set through reg_ext_fct\n   "
2018/06/19 19:55:38 "*\n   * below are function pointers used for call back from the corresponding ADOL-C trace interpreters;\n   * these function pointers are initialized to 0 by reg_ext_fct;\n   * the  user needs to set eplicitly the function pointers for the trace interpreters called in the\n   * application driver\n   "
2018/06/19 19:55:38 "*\n   * this points to a  method implementing a forward execution of the externally differentiated function y=f(x);\n   * the pointer would typically be set to the same function pointer supplied in the call to reg_ext_fct,\n   * i.e. zos_forward would be equal to function (above)\n   * but there are cases when it makes sense for this to be different as illustrated\n   * in examples/additional_examples/ext_diff_func/ext_diff_func.cpp\n   "
2018/06/19 19:55:38 "*\n   * this points to a  method implementing a forward execution of the externally differentiated function y=f(x)\n   * and computing the projection yp=Jacobian*xp\n   * see also the explanation of the xp,yp members below.\n   "
2018/06/19 19:55:38 "*\n   * this points to a  method implementing a forward execution of the externally differentiated function y=f(x)\n   * and computing the projection Yp=Jacobian*Xp\n   * see also the explanation of the Xp/Yp  members below.\n   "
2018/06/19 19:55:38 "*\n   * this points to a  method computing the projection zp=transpose(zp) * Jacobian\n   * see also the explanation of the up/zp  members below.\n   "
2018/06/19 19:55:38 "*\n   * this points to a  method computing the projection Zp=transpose(Up) * Jacobian\n   * see also the explanation of the Up/Zp  members below.\n   "
2018/06/19 19:55:38 "*\n   * The names of the variables below correspond to the formal parameters names in the call back\n   * functions above;\n   "
2018/06/19 19:55:38 "*\n   * function and all _forward calls: function argument, dimension nin*insz[0..nin]\n   "
2018/06/19 19:55:38 "*\n   * fos_forward: tangent direction, dimension nin*insz[0..nin]\n   "
2018/06/19 19:55:38 "*\n   * fov_forward: seed matrix for p directions, dimensions nin*insz[0..nin]*p (p=nin*insz[0..nin])\n   "
2018/06/19 19:55:38 "*\n   * function and all _forward calls: function result, dimension nout*outsz[0..nout]\n   "
2018/06/19 19:55:38 "*\n   * fos_forward: Jacobian projection, dimension nout*outsz[0..nout]\n   "
2018/06/19 19:55:38 "*\n   * fov_forward: Jacobian projection in p directions, dimension nout*outsz[0..nout]*p (p=nin*insz[0..nin])\n   "
2018/06/19 19:55:38 "*\n   * fos_reverse and hos_reverse:  weight vector, dimension nout*outsz[0..nout]\n   "
2018/06/19 19:55:38 "*\n   * fov_reverse and hov_reverse: q weight vectors, dimensions (q=nout*outsz[0..nout]) q*nout*outsz[0..nout]\n   "
2018/06/19 19:55:38 "*\n   * fos_reverse: Jacobian projection, dimension nin*insz[0..nin]\n   "
2018/06/19 19:55:38 "*\n   * fov_reverse: Jacobian projection for q weight vectors, dimensions (q=nout*outsz[0..nout]) q*nin*insz[0..nin]\n   "
2018/06/19 19:55:38 "*\n   * track maximal dimensions when function is invoked\n   "
2018/06/19 19:55:38 "*\n   * make the call such that Adol-C may be used inside\n   * of the externally differentiated function;\n   * defaults to 0;\n   * this implies certain storage duplication that can\n   * be avoided if no nested use of Adol-C takes place\n   "
2018/06/19 19:55:38 "*\n   * if 0, then the 'function' does not change dp_x;\n   * defaults to non-0 which implies dp_x values are saved in taylors\n   "
2018/06/19 19:55:38 "*\n   * if 0, then the value of dp_y prior to calling 'function'\n   * is not required for reverse;\n   * defaults to non-0 which implies  dp_y values are saved in taylors\n   "
2018/06/19 19:55:38 "*\n   * This is a opaque context pointer that the user may set and use\n   * in his implementation of the above functions\n   "
2018/06/19 19:55:38 "*\n   * This is an all-memory pointer for allocating and deallocating\n   * all other pointers can point to memory within here.\n   "
2018/06/19 19:55:38 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/externfcts2.h": 14.765831ms
2018/06/19 19:55:38 Couldn't classify license(s)
2018/06/19 19:55:39 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/Makefile.am
2018/06/19 19:55:39 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/Makefile.am": 7.596292ms
2018/06/19 19:55:39 Couldn't classify license(s)
2018/06/19 19:55:39 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/fortutils.h
2018/06/19 19:55:39 detected language: 4
2018/06/19 19:55:39 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     fortutils.h\n Revision: $Id$\n Contents: Internal tools to handle Fortran arrays\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:39 "**************************************************************************\n                                                         Now the C THINGS "
2018/06/19 19:55:39 "**************************************************************************"
2018/06/19 19:55:39 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/fortutils.h": 7.261866ms
2018/06/19 19:55:39 Couldn't classify license(s)
2018/06/19 19:55:40 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/convolut.h
2018/06/19 19:55:40 detected language: 4
2018/06/19 19:55:40 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     convolut.h\n Revision: $Id$\n Contents: Convolution routines (used by ho_rev.mc)\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n\n----------------------------------------------------------------------------"
2018/06/19 19:55:40 "**************************************************************************\n                                                              CONVOLUTION "
2018/06/19 19:55:40 "--------------------------------------------------------------------------\n Evaluates convolution of a and b to c "
2018/06/19 19:55:40 "**************************************************************************\n                                                  INCREMENTAL CONVOLUTION "
2018/06/19 19:55:40 "--------------------------------------------------------------------------\n Increments truncated convolution of a and b to c "
2018/06/19 19:55:40 "--------------------------------------------------------------------------\n Increments truncated convolution of a and b to c and sets a to zero "
2018/06/19 19:55:40 "**************************************************************************\n                                                  DECREMENTAL CONVOLUTION "
2018/06/19 19:55:40 "--------------------------------------------------------------------------\n Decrements truncated convolution of a and b to c "
2018/06/19 19:55:40 "--------------------------------------------------------------------------\n Decrements truncated convolution of a and b to c and sets a to zero "
2018/06/19 19:55:40 "**************************************************************************\n                                                    OTHER USEFUL ROUTINES "
2018/06/19 19:55:40 "--------------------------------------------------------------------------"
2018/06/19 19:55:40 "--------------------------------------------------------------------------"
2018/06/19 19:55:40 "**************************************************************************\n                                                                  ZEROING "
2018/06/19 19:55:40 "--------------------------------------------------------------------------\n Set a to zero "
2018/06/19 19:55:40 "--------------------------------------------------------------------------\n Copies a to tmp and initializes a to zero "
2018/06/19 19:55:40 "**************************************************************************"
2018/06/19 19:55:40 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/convolut.h": 8.872638ms
2018/06/19 19:55:40 Couldn't classify license(s)
2018/06/19 19:55:41 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/Makefile.in
2018/06/19 19:55:41 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/Makefile.in": 65.482409ms
2018/06/19 19:55:41 Couldn't classify license(s)
2018/06/19 19:55:42 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/adtl.h
2018/06/19 19:55:42 detected language: 4
2018/06/19 19:55:42 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     adouble.cpp\n Revision: $Id$\n Contents: adtl.h contains that declaratins of procedures used to\n           define various tapeless adouble operations.\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz,\n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel,\n               Benjamin Letschert, Kshitij Kulshreshtha\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes\n recipient's acceptance of the terms of the accompanying license file.\n\n----------------------------------------------------------------------------"
2018/06/19 19:55:42 " sign"
2018/06/19 19:55:42 " addition"
2018/06/19 19:55:42 " substraction"
2018/06/19 19:55:42 " multiplication"
2018/06/19 19:55:42 " division"
2018/06/19 19:55:42 " inc/dec"
2018/06/19 19:55:42 " functions"
2018/06/19 19:55:42 "******************  nontemporary results  **************************\n assignment"
2018/06/19 19:55:42 " addition"
2018/06/19 19:55:42 " substraction"
2018/06/19 19:55:42 " multiplication"
2018/06/19 19:55:42 " division"
2018/06/19 19:55:42 " not"
2018/06/19 19:55:42 " comparision"
2018/06/19 19:55:42 "******************  getter / setter  *******************************"
2018/06/19 19:55:42 "******************  i/o operations  ********************************"
2018/06/19 19:55:42 "******************************  ctors  ***********************************"
2018/06/19 19:55:42 "******************************  dtors  ***********************************"
2018/06/19 19:55:42 "************************  temporary results  *****************************\n sign"
2018/06/19 19:55:42 " addition"
2018/06/19 19:55:42 " subtraction"
2018/06/19 19:55:42 " multiplication"
2018/06/19 19:55:42 " division"
2018/06/19 19:55:42 " inc/dec"
2018/06/19 19:55:42 " functions"
2018/06/19 19:55:42 "******************  nontemporary results  ********************************"
2018/06/19 19:55:42 " not"
2018/06/19 19:55:42 " comparision"
2018/06/19 19:55:42 "******************  getter / setter  *************************************"
2018/06/19 19:55:42 "pattern.splice(pattern.end(), cv);"
2018/06/19 19:55:42 "if (pattern.size() > refcounter::refcnt) {\npattern.sort();"
2018/06/19 19:55:42 "}"
2018/06/19 19:55:42 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/adtl.h": 12.146706ms
2018/06/19 19:55:42 Couldn't classify license(s)
2018/06/19 19:55:43 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/internal/adolc_settings.h
2018/06/19 19:55:43 detected language: 4
2018/06/19 19:55:43 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     adolc_settings.h\n Revision: $Id$\n Contents: ADOL-C Settings:\n           These parameters might affect the performance of the ADOL-C\n           system; and are set by the configure script during the build.\n\t   Do not edit this file.\n\n Copyright (c) Kshitij Kulshreshtha, Jean Utke\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes\n recipient's acceptance of the terms of the accompanying license file.\n\n----------------------------------------------------------------------------"
2018/06/19 19:55:43 "--------------------------------------------------------------------------\n ADOL-C data types \n ensure locint is unsigned "
2018/06/19 19:55:43 "--------------------------------------------------------------------------\n Enable/disable asinh, acosh,atanh, erf "
2018/06/19 19:55:43 "--------------------------------------------------------------------------\n Enable/disable advanced branching "
2018/06/19 19:55:43 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/internal/adolc_settings.h": 7.521194ms
2018/06/19 19:55:43 Couldn't classify license(s)
2018/06/19 19:55:43 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/internal/adolc_settings.h.in
2018/06/19 19:55:43 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/internal/adolc_settings.h.in": 7.492498ms
2018/06/19 19:55:43 Couldn't classify license(s)
2018/06/19 19:55:44 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/internal/usrparms.h
2018/06/19 19:55:44 detected language: 4
2018/06/19 19:55:44 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     usrparms.h\n Revision: $Id$\n Contents: User parameters:\n           These parameters might affect the performance of the ADOL-C\n           system; they are intended to be tweeked by users and local\n           maintainence personal.\n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n                           \n----------------------------------------------------------------------------"
2018/06/19 19:55:44 "--------------------------------------------------------------------------\n Buffer sizes \n 16384 or  65536  \n 16384 or  65536  \n 16384 or  65536  "
2018/06/19 19:55:44 "--------------------------------------------------------------------------\n Buffer size for temporary Taylor store \n 16384 or  65536  "
2018/06/19 19:55:44 "--------------------------------------------------------------------------\n Number of temporary Taylor stores"
2018/06/19 19:55:44 "--------------------------------------------------------------------------\n Data types used by Fortran callable versions of functions "
2018/06/19 19:55:44 "--------------------------------------------------------------------------\n Definionion of inf and NaN \n don't undefine these;  on non-IEEE machines \n change the values to get small fractions    \n (inf_num/inf_den) and (non_num/non_den)     \n respectively, see the documentation         \n for test on zero                            "
2018/06/19 19:55:44 "**************************************************************************\n Standard output used for diagnostics by ADOL-C,                          \n e.g. stdout or stderr or whatever file identifier                        "
2018/06/19 19:55:44 "**************************************************************************\n Tells ADOL-C which name space offers the mathematical functions          "
2018/06/19 19:55:44 " For error function with gcc compiler                                     "
2018/06/19 19:55:44 "--------------------------------------------------------------------------\n Constants used by the checkpointing part (revolve) "
2018/06/19 19:55:44 "--------------------------------------------------------------------------\n Maximal size (Bytes) of a block to be written with fwrite or read with   \n fread  --- power of 2 > 8 preferable ;-) ---                             "
2018/06/19 19:55:44 "--------------------------------------------------------------------------"
2018/06/19 19:55:44 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/internal/usrparms.h": 10.372855ms
2018/06/19 19:55:44 Couldn't classify license(s)
2018/06/19 19:55:45 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/internal/adubfunc.h
2018/06/19 19:55:45 detected language: 4
2018/06/19 19:55:45 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     adubfunc.h\n Revision: $Id$\n Contents: operators and functions returning temporaries\n \n Copyright (c) Kshitij Kulshreshtha\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n\n----------------------------------------------------------------------------"
2018/06/19 19:55:45 "--------------------------------------------------------------------------\n Comparison (friends) "
2018/06/19 19:55:45 "--------------------------------------------------------------------------\n sign operators (friends) "
2018/06/19 19:55:45 "--------------------------------------------------------------------------\n binary operators (friends) "
2018/06/19 19:55:45 "--------------------------------------------------------------------------\n unary operators (friends) "
2018/06/19 19:55:45 "--------------------------------------------------------------------------\n special operators (friends) \n no internal use of condassign: "
2018/06/19 19:55:45 " Additional ANSI C standard Math functions Added by DWJ on 8/6/90 "
2018/06/19 19:55:45 "--------------------------------------------------------------------------"
2018/06/19 19:55:45 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/internal/adubfunc.h": 8.090318ms
2018/06/19 19:55:45 Couldn't classify license(s)
2018/06/19 19:55:46 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/internal/Makefile.am
2018/06/19 19:55:46 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/internal/Makefile.am": 6.927978ms
2018/06/19 19:55:46 Couldn't classify license(s)
2018/06/19 19:55:46 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/internal/paramfunc.h
2018/06/19 19:55:46 detected language: 4
2018/06/19 19:55:46 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     paramfunc.h\n Revision: $Id$\n Contents: operators for parameter dependent functions\n \n Copyright (c) Kshitij Kulshreshtha\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n\n----------------------------------------------------------------------------"
2018/06/19 19:55:46 "--------------------------------------------------------------------------\n unary operators (friends) "
2018/06/19 19:55:46 "--------------------------------------------------------------------------\n special operators (friends) \n no internal use of condassign: "
2018/06/19 19:55:46 " Additional ANSI C standard Math functions Added by DWJ on 8/6/90 "
2018/06/19 19:55:46 "--------------------------------------------------------------------------"
2018/06/19 19:55:46 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/internal/paramfunc.h": 8.188011ms
2018/06/19 19:55:46 Couldn't classify license(s)
2018/06/19 19:55:47 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/internal/Makefile.in
2018/06/19 19:55:47 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/internal/Makefile.in": 56.008712ms
2018/06/19 19:55:47 Couldn't classify license(s)
2018/06/19 19:55:48 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/internal/common.h
2018/06/19 19:55:48 detected language: 4
2018/06/19 19:55:48 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     common.h\n Revision: $Id$\n Contents: Common (global) ADOL-C header  \n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n----------------------------------------------------------------------------"
2018/06/19 19:55:48 "--------------------------------------------------------------------------\n standard includes "
2018/06/19 19:55:48 "--------------------------------------------------------------------------\n type definitions "
2018/06/19 19:55:48 "--------------------------------------------------------------------------\n OpenMP includes "
2018/06/19 19:55:48 "--------------------------------------------------------------------------\n system dependent configuration "
2018/06/19 19:55:48 "      malloc/calloc/realloc replacments "
2018/06/19 19:55:48 " HAVE_MALLOC == 0 \n HAVE_MALLOC "
2018/06/19 19:55:48 " HAVE_REALLOC == 0 \n HAVE_REALLOC "
2018/06/19 19:55:48 " ADOLC_NO_MALLOC "
2018/06/19 19:55:48 " ADOLC_NO_REALLOC "
2018/06/19 19:55:48 " HAVE_CONFIG_H \n ADOLC_INTERNAL "
2018/06/19 19:55:48 "--------------------------------------------------------------------------\n user parameters and settings "
2018/06/19 19:55:48 "--------------------------------------------------------------------------\n windows dll exports/imports "
2018/06/19 19:55:48 "--------------------------------------------------------------------------\n further helpful macros "
2018/06/19 19:55:48 "--------------------------------------------------------------------------"
2018/06/19 19:55:48 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/internal/common.h": 8.152829ms
2018/06/19 19:55:48 Couldn't classify license(s)
2018/06/19 19:55:49 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/advector.h
2018/06/19 19:55:49 detected language: 4
2018/06/19 19:55:49 " ---------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n\n Revision: $Id$\n Contents: advector.h contains a vector<adouble> implementation\n           that is able to trace subscripting operations.\n\n Copyright (c) Kshitij Kulshreshtha\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n\n---------------------------------------------------------------------------"
2018/06/19 19:55:49 "**************************************************************************\n                                                         THIS FILE IS C++ "
2018/06/19 19:55:49 "**************************************************************************\n                                           THIS IS ONLY FOR TAPED VERSION "
2018/06/19 19:55:49 " This class is supposed to be used only when an advector subscript\n     * occurs as an lvalue somewhere. What we need to do is read the location\n     * of the referenced adouble out of store[location] and perform \n     * operations with this refloc. This means that the tape needs new\n     * opcodes (ref_assign_* /ref_eq_* / ref_{incr,decr}_a) for each of \n     * these operations, most of the code  will simply be copied from \n     * adouble class, since the operation is really the same except for \n     * the part where the refloc is read from store[location].\n     * Reverse mode is also straightforward the same way.\n     *\n     * Convert to a new adub as soon as used as rvalue, this is why adubref\n     * is not a child of badouble, since it should never occur as rvalue.\n     "
2018/06/19 19:55:49 " marker if the badouble is properly initialized"
2018/06/19 19:55:49 " adub prevents postfix operators to occur on the left\n       side of an assignment which would not work  "
2018/06/19 19:55:49 " adolc_vec_copy(dest,src,size); "
2018/06/19 19:55:49 " adolc_vec_axpy(res,a,x,y,size); <=> res = a*x + y  "
2018/06/19 19:55:49 " in the above copy we are sure of contiguous locations\n but not so in the one below"
2018/06/19 19:55:49 " TAPELESS \n __cplusplus \n ADOLC_ADVECTOR_H "
2018/06/19 19:55:49 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/advector.h": 16.267775ms
2018/06/19 19:55:49 Couldn't classify license(s)
2018/06/19 19:55:50 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/adutilsc.h
2018/06/19 19:55:50 detected language: 4
2018/06/19 19:55:50 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     adutilsc.h\n Revision: $Id$\n Contents: Provides all C/C++ interfaces of ADOL-C.\n           NOTICE: This file is kept for compatibility reasons only. \n                   The new header adolc.h is included.\n \n\n Copyright (c) Andreas Kowarz\n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n  \n----------------------------------------------------------------------------"
2018/06/19 19:55:50 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/adutilsc.h": 6.511375ms
2018/06/19 19:55:50 Couldn't classify license(s)
2018/06/19 19:55:50 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/param.h
2018/06/19 19:55:50 detected language: 4
2018/06/19 19:55:50 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     param.h\n Revision: $Id$\n Contents: class for parameter dependent functions\n \n Copyright (c) Kshitij Kulshreshtha\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n\n----------------------------------------------------------------------------"
2018/06/19 19:55:50 " unary operators (friends) "
2018/06/19 19:55:50 "--------------------------------------------------------------------------\n special operators (friends) \n no internal use of condassign: "
2018/06/19 19:55:50 " Additional ANSI C standard Math functions Added by DWJ on 8/6/90 "
2018/06/19 19:55:50 "--------------------------------------------------------------------------"
2018/06/19 19:55:50 "**************************************************************************\n Returns the number of parameters recorded on tape                        \n**************************************************************************"
2018/06/19 19:55:50 "**************************************************************************\n Overrides the parameters for the next evaluations. This will invalidate  \n the taylor stack, so next reverse call will fail, if not preceeded by a  \n forward call after setting the parameters.                               \n**************************************************************************"
2018/06/19 19:55:50 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/param.h": 8.438235ms
2018/06/19 19:55:50 Couldn't classify license(s)
2018/06/19 19:55:51 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/adolc.h
2018/06/19 19:55:51 detected language: 4
2018/06/19 19:55:51 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     adolc.h\n Revision: $Id$\n Contents: Provides all C/C++ interfaces of ADOL-C.\n           NOTICE: ALL C/C++ headers will be included DEPENDING ON \n           whether the source code is plain C or C/C++ code. \n \n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.  \n \n----------------------------------------------------------------------------"
2018/06/19 19:55:51 "**************************************************************************\n                                                  Now the pure C++ THINGS "
2018/06/19 19:55:51 "--------------------------------------------------------------------------\n Operator overloading things (active doubles & vectors) "
2018/06/19 19:55:51 "**************************************************************************\n                                                     Now the C/C++ THINGS "
2018/06/19 19:55:51 "--------------------------------------------------------------------------\n interfaces to basic forward/reverse routines "
2018/06/19 19:55:51 "--------------------------------------------------------------------------\n interfaces to \"Easy To Use\" driver routines for ... \n optimization & nonlinear equations \n higher order tensors & inverse/implicit functions \n ordinary differential equations \n piecewise smooth functions "
2018/06/19 19:55:51 "--------------------------------------------------------------------------\n interfaces to TAPEDOC package "
2018/06/19 19:55:51 "--------------------------------------------------------------------------\n interfaces to SPARSE package "
2018/06/19 19:55:51 "--------------------------------------------------------------------------\n parameters "
2018/06/19 19:55:51 "--------------------------------------------------------------------------\n tape and value stack utilities "
2018/06/19 19:55:51 "--------------------------------------------------------------------------\n allocation utilities "
2018/06/19 19:55:51 "**************************************************************************"
2018/06/19 19:55:51 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/adolc.h": 8.918413ms
2018/06/19 19:55:51 Couldn't classify license(s)
2018/06/19 19:55:52 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/externfcts.h
2018/06/19 19:55:52 detected language: 4
2018/06/19 19:55:52 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     externfcts.h\n Revision: $Id$\n Contents: public functions and data types for extern (differentiated)\n           functions.\n \n Copyright (c) Andreas Kowarz, Jean Utke\n\n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n                     \n----------------------------------------------------------------------------"
2018/06/19 19:55:52 "*\n * we add a second set of function pointers with a signature expanded by a an integer array iArr\n * and a parameter iArrLength motivated by externalizing sparse solvers where the sparsity format\n * may be triples (i,j,A[i][j]) and a number of nonzero entries nz where all these integers are to\n * be packed into iArr. Doing this will still allow the integers to be stored in the locint part\n * of the tape.\n * The alternative to doing this is the introduction of a separate stack to contain the extra data\n * but this would break the self-containment of the tape.\n "
2018/06/19 19:55:52 "*\n * A variable of this type has to be instantiated by reg_ext_fct (see below) and a pointer to it is\n * returned. Within reg_ext_fct the memberse function and index are properly set. \n * is likely to be wrong in this case. Use pointers instead. \n "
2018/06/19 19:55:52 "*\n   * DO NOT touch - the function pointer is set through reg_ext_fct\n   "
2018/06/19 19:55:52 "*\n   * DO NOT touch - the index is set through reg_ext_fct\n   "
2018/06/19 19:55:52 "* \n   * below are function pointers used for call back from the corresponding ADOL-C trace interpreters; \n   * these function pointers are initialized to 0 by reg_ext_fct; \n   * the  user needs to set eplicitly the function pointers for the trace interpreters called in the \n   * application driver\n   "
2018/06/19 19:55:52 "*\n   * this points to a  method implementing a forward execution of the externally differentiated function dp_y=f(dp_x); \n   * the pointer would typically be set to the same function pointer supplied in the call to reg_ext_fct, \n   * i.e. zos_forward would be equal to function (above) \n   * but there are cases when it makes sense for this to be different as illustrated\n   * in examples/additional_examples/ext_diff_func/ext_diff_func.cpp  \n   "
2018/06/19 19:55:52 "*\n   * this points to a  method implementing a forward execution of the externally differentiated function dp_y=f(dp_x)\n   * and computing the projection dp_Y=Jacobian*dp_x \n   * see also the explanation of the dp_X/Y  members below.\n   "
2018/06/19 19:55:52 "*\n   * this points to a  method implementing a forward execution of the externally differentiated function dp_y=f(dp_x)\n   * and computing the projection dpp_Y=Jacobian*dpp_x \n   * see also the explanation of the dpp_X/Y  members below.\n   "
2018/06/19 19:55:52 "* \n   * higher order scalar forward for external functions  is currently not implemented in uni5_for.c\n   "
2018/06/19 19:55:52 "* \n   * higher order vector forward for external functions  is currently not implemented in uni5_for.c\n   "
2018/06/19 19:55:52 "*\n   * this points to a  method computing the projection dp_Z=transpose(dp_U) * Jacobian\n   * see also the explanation of the dp_U/Z  members below.\n   "
2018/06/19 19:55:52 "*\n   * this points to a  method computing the projection dpp_Z=transpose(dpp_U) * Jacobian\n   * see also the explanation of the dpp_U/Z  members below.\n   "
2018/06/19 19:55:52 "* \n   * higher order scalar reverse for external functions  is currently not implemented in ho_rev.c\n   "
2018/06/19 19:55:52 "* \n   * higher order vector reverse for external functions  is currently not implemented in ho_rev.c\n   "
2018/06/19 19:55:52 "*\n   * The names of the variables below correspond to the formal parameters names in the call back \n   * functions above; \n   "
2018/06/19 19:55:52 "* \n   * function and all _forward calls: function argument, dimension [n]\n   "
2018/06/19 19:55:52 "* \n   * fos_forward: tangent direction, dimension [n]\n   "
2018/06/19 19:55:52 "*\n   * fov_forward: seed matrix for p directions, dimensions [n][p]\n   * hos_forward: argument Taylor polynomial coefficients up to order d. dimensions [n][d] \n   "
2018/06/19 19:55:52 "*\n   * hov_forward: argument Taylor polynomial coefficients up to order d in p directions. dimensions [n][p][d]\n   "
2018/06/19 19:55:52 "*\n   * function and all _forward calls: function result, dimension [m]\n   "
2018/06/19 19:55:52 "*\n   * fos_forward: Jacobian projection, dimension [m]\n   "
2018/06/19 19:55:52 "*\n   * fov_forward: Jacobian projection in p directions, dimension [m][p]\n   * hos_forward: result Taylor polynomial coefficients up to order d. dimensions [m][d] \n   "
2018/06/19 19:55:52 "*\n   * hov_forward: result Taylor polynomial coefficients up to order d in p directions. dimensions [m][p][d]\n   "
2018/06/19 19:55:52 "*\n   * fos_reverse and hos_reverse:  weight vector, dimension [m]\n   "
2018/06/19 19:55:52 "*\n   * fov_reverse and hov_reverse: p weight vectors, dimensions [p][m]\n   "
2018/06/19 19:55:52 "* \n   * fos_reverse: Jacobian projection, dimension [n]\n   "
2018/06/19 19:55:52 "* \n   * fov_reverse: Jacobian projection for p weight vectors, dimensions [p][n]\n   * hos_reverse: adjoint Taylor polynomial coefficients up to order d, dimensions [n][d+1] \n   "
2018/06/19 19:55:52 "*\n   * hov_reverse:  adjoint Taylor polynomial coefficients up to order d for p weight vectors, dimension [p][n][d+1]\n   "
2018/06/19 19:55:52 "* \n   * hov_reverse: non-zero pattern of dppp_Z, dimension [p][n], see also the hov_reverse ADOL-C driver \n   "
2018/06/19 19:55:52 "*\n   * track maximal value of n when function is invoked\n   "
2018/06/19 19:55:52 "*\n   * track maximal value of m when function is invoked\n   "
2018/06/19 19:55:52 "*\n   * make the call such that Adol-C may be used inside\n   * of the externally differentiated function;\n   * defaults to non-0;\n   * this implies certain storage duplication that can\n   * be avoided if no nested use of Adol-C takes place\n   "
2018/06/19 19:55:52 "*\n   * if 0, then the 'function' does not change dp_x;\n   * defaults to non-0 which implies dp_x values are saved in taylors\n   "
2018/06/19 19:55:52 "*\n   * if 0, then the value of dp_y prior to calling 'function'\n   * is not required for reverse;\n   * defaults to non-0 which implies  dp_y values are saved in taylors\n   "
2018/06/19 19:55:52 "*\n   * This is an all-memory pointer for allocating and deallocating\n   * all other pointers can point to memory within here.\n   "
2018/06/19 19:55:52 "**************************************************************************\n                                                          This is all C++ "
2018/06/19 19:55:52 "*\n * zeros out the edf pointers and sets bools to defaults\n "
2018/06/19 19:55:52 " __CPLUSPLUS "
2018/06/19 19:55:52 "**************************************************************************\n ADOLC_EXTERNFCTS_H "
2018/06/19 19:55:52 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/adolc/externfcts.h": 20.572836ms
2018/06/19 19:55:52 Couldn't classify license(s)
2018/06/19 19:55:53 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/include/Makefile.in
2018/06/19 19:55:53 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/include/Makefile.in": 55.640383ms
2018/06/19 19:55:53 Couldn't classify license(s)
2018/06/19 19:55:54 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/Makefile.in
2018/06/19 19:55:54 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/Makefile.in": 82.773349ms
2018/06/19 19:55:54 Couldn't classify license(s)
2018/06/19 19:55:54 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/doc/tapebasic.eps
2018/06/19 19:55:54 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/doc/tapebasic.eps": 22.870035ms
2018/06/19 19:55:54 Couldn't classify license(s)
2018/06/19 19:55:55 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/doc/version.tex.in
2018/06/19 19:55:55 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/doc/version.tex.in": 5.58755ms
2018/06/19 19:55:55 Couldn't classify license(s)
2018/06/19 19:55:56 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/doc/tapeadv.eps
2018/06/19 19:55:56 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/doc/tapeadv.eps": 17.978645ms
2018/06/19 19:55:56 Couldn't classify license(s)
2018/06/19 19:55:57 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/doc/adolc-manual.ps
2018/06/19 19:56:02 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/doc/adolc-manual.ps": 4.977503876s
2018/06/19 19:56:02 Couldn't classify license(s)
2018/06/19 19:56:03 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/doc/short_ref.tex
2018/06/19 19:56:03 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/doc/short_ref.tex": 56.409599ms
2018/06/19 19:56:03 Couldn't classify license(s)
2018/06/19 19:56:03 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/doc/tap_point.eps
2018/06/19 19:56:03 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/doc/tap_point.eps": 87.673973ms
2018/06/19 19:56:03 Couldn't classify license(s)
2018/06/19 19:56:04 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/doc/tap_point.pdf
2018/06/19 19:56:04 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/doc/tap_point.pdf": 62.410883ms
2018/06/19 19:56:04 Couldn't classify license(s)
2018/06/19 19:56:05 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/doc/adolc-manual.tex
2018/06/19 19:56:06 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/doc/adolc-manual.tex": 866.257613ms
2018/06/19 19:56:06 Couldn't classify license(s)
2018/06/19 19:56:07 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/doc/tapebasic.pdf
2018/06/19 19:56:07 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/doc/tapebasic.pdf": 25.065195ms
2018/06/19 19:56:07 Couldn't classify license(s)
2018/06/19 19:56:07 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/doc/absdrivers.tex
2018/06/19 19:56:08 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/doc/absdrivers.tex": 22.881077ms
2018/06/19 19:56:08 Couldn't classify license(s)
2018/06/19 19:56:08 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/doc/version.tex
2018/06/19 19:56:08 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/doc/version.tex": 615.785µs
2018/06/19 19:56:08 Couldn't classify license(s)
2018/06/19 19:56:09 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/doc/multiplexed.pdf
2018/06/19 19:56:09 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/doc/multiplexed.pdf": 16.24239ms
2018/06/19 19:56:09 Couldn't classify license(s)
2018/06/19 19:56:10 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/doc/tapeadv.pdf
2018/06/19 19:56:10 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/doc/tapeadv.pdf": 22.769428ms
2018/06/19 19:56:10 Couldn't classify license(s)
2018/06/19 19:56:11 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/doc/multiplexed.eps
2018/06/19 19:56:11 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/doc/multiplexed.eps": 29.051173ms
2018/06/19 19:56:11 Couldn't classify license(s)
2018/06/19 19:56:11 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/doc/adolc-manual.pdf
2018/06/19 19:56:14 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/doc/adolc-manual.pdf": 3.011423363s
2018/06/19 19:56:14 Couldn't classify license(s)
2018/06/19 19:56:15 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/doc/short_ref.ps
2018/06/19 19:56:17 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/doc/short_ref.ps": 1.618545105s
2018/06/19 19:56:17 Couldn't classify license(s)
2018/06/19 19:56:18 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/doc/short_ref.pdf
2018/06/19 19:56:19 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/doc/short_ref.pdf": 1.100432817s
2018/06/19 19:56:19 Couldn't classify license(s)
2018/06/19 19:56:19 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/test/powexam.cpp
2018/06/19 19:56:19 detected language: 4
2018/06/19 19:56:19 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     powexam.cpp\n Revision: $Id: powexam.cpp 42 2009-07-15 18:37:17Z awalther $\n Contents: computation of n-th power for testing\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel \n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:56:20 "**************************************************************************\n                                                                 INCLUDES \n use of ALL ADOL-C interfaces "
2018/06/19 19:56:20 "**************************************************************************\n                                                          ADOUBLE ROUTINE "
2018/06/19 19:56:20 " Recursion and branches \n that do not depend on  \n adoubles are fine !!!! "
2018/06/19 19:56:20 " end if "
2018/06/19 19:56:20 " The local adouble z dies \n as it goes out of scope. "
2018/06/19 19:56:20 " end else \n end power "
2018/06/19 19:56:20 "**************************************************************************\n                                                             MAIN PROGRAM "
2018/06/19 19:56:20 " input the desired degree "
2018/06/19 19:56:20 " allocations and initializations "
2018/06/19 19:56:20 " function value = 0. coefficient \n first derivative = 1. coefficient "
2018/06/19 19:56:20 " further coefficients \n used for checking consistency \n between forward and reverse "
2018/06/19 19:56:20 " declare active variables \n beginning of active section \n tag = 1 and keep = 0 \n only one independent var \n actual function call \n only one dependent adouble \n no global adouble has died \n end of active section \n weighting vector "
2018/06/19 19:56:20 " for reverse call \n note that keep = i+1 in call \n evaluate the i-the derivative "
2018/06/19 19:56:20 " scale derivative to Taylorcoeff. "
2018/06/19 19:56:20 " evaluate the (i+1)-st deriv. \n end for "
2018/06/19 19:56:20 " end main "
2018/06/19 19:56:20 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/test/powexam.cpp": 9.386904ms
2018/06/19 19:56:20 Couldn't classify license(s)
2018/06/19 19:56:20 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/test/run_tests
2018/06/19 19:56:20 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/test/run_tests": 8.31903ms
2018/06/19 19:56:20 Couldn't classify license(s)
2018/06/19 19:56:21 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/test/Makefile.am
2018/06/19 19:56:21 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/test/Makefile.am": 8.326974ms
2018/06/19 19:56:21 Couldn't classify license(s)
2018/06/19 19:56:22 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/test/Makefile.in
2018/06/19 19:56:22 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/test/Makefile.in": 59.592211ms
2018/06/19 19:56:22 Couldn't classify license(s)
2018/06/19 19:56:23 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/test/speelpenning.cpp
2018/06/19 19:56:23 detected language: 4
2018/06/19 19:56:23 "----------------------------------------------------------------------------\n ADOL-C -- Automatic Differentiation by Overloading in C++\n File:     speelpenning.cpp\n Revision: $Id: speelpenning.cpp 42 2009-07-15 18:37:17Z awalther $\n Contents: speelpennings example for testing\n\n Copyright (c) Andrea Walther, Andreas Griewank, Andreas Kowarz, \n               Hristo Mitev, Sebastian Schlenkrich, Jean Utke, Olaf Vogel \n  \n This file is part of ADOL-C. This software is provided as open source.\n Any use, reproduction, or distribution of the software constitutes \n recipient's acceptance of the terms of the accompanying license file.\n \n---------------------------------------------------------------------------"
2018/06/19 19:56:23 "**************************************************************************\n                                                                 INCLUDES \n use of active doubles\n use of \"Easy to Use\" drivers\n gradient(.) and hessian(.)\n use of taping"
2018/06/19 19:56:23 "**************************************************************************\n                                                             MAIN PROGRAM "
2018/06/19 19:56:23 " some initialization"
2018/06/19 19:56:23 " tag = 1, keep = 0 by default"
2018/06/19 19:56:23 " or  x <<= xp outside the loop"
2018/06/19 19:56:23 " end for"
2018/06/19 19:56:23 " reading of tape statistics"
2018/06/19 19:56:23 " ..... print other tape stats"
2018/06/19 19:56:23 " gradient evaluation"
2018/06/19 19:56:23 " H equals (n-1)g since g is\n homogeneous of degree n-1."
2018/06/19 19:56:23 " vanishes analytically."
2018/06/19 19:56:23 " lower half of hessian"
2018/06/19 19:56:23 " end for\n end for"
2018/06/19 19:56:23 " end main"
2018/06/19 19:56:23 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/test/speelpenning.cpp": 8.806761ms
2018/06/19 19:56:23 Couldn't classify license(s)
2018/06/19 19:56:23 Classifying license(s): /adol-c-v2.6.3.tar.gz/ADOL-C/test/fminmax.cpp
2018/06/19 19:56:23 detected language: 4
2018/06/19 19:56:23 Finished Classifying License "/adol-c-v2.6.3.tar.gz/ADOL-C/test/fminmax.cpp": 66.574µs
2018/06/19 19:56:23 Couldn't classify license(s)
